
DoroboGenerated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008168  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d4  20000000  08008688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c54  200000d4  0800875c  000200d4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001d28  0800875c  00021d28  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000206e0  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004396  00000000  00000000  000407dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001400  00000000  00000000  00044b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001228  00000000  00000000  00045f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a2a0  00000000  00000000  000471a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005f12  00000000  00000000  00051440  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00057352  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000493c  00000000  00000000  000573d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d4 	.word	0x200000d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008210 	.word	0x08008210

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d8 	.word	0x200000d8
 8000104:	08008210 	.word	0x08008210

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_ddiv>:
 8000230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000232:	4657      	mov	r7, sl
 8000234:	4645      	mov	r5, r8
 8000236:	46de      	mov	lr, fp
 8000238:	464e      	mov	r6, r9
 800023a:	b5e0      	push	{r5, r6, r7, lr}
 800023c:	004c      	lsls	r4, r1, #1
 800023e:	030e      	lsls	r6, r1, #12
 8000240:	b087      	sub	sp, #28
 8000242:	4683      	mov	fp, r0
 8000244:	4692      	mov	sl, r2
 8000246:	001d      	movs	r5, r3
 8000248:	4680      	mov	r8, r0
 800024a:	0b36      	lsrs	r6, r6, #12
 800024c:	0d64      	lsrs	r4, r4, #21
 800024e:	0fcf      	lsrs	r7, r1, #31
 8000250:	2c00      	cmp	r4, #0
 8000252:	d04f      	beq.n	80002f4 <__aeabi_ddiv+0xc4>
 8000254:	4b6f      	ldr	r3, [pc, #444]	; (8000414 <__aeabi_ddiv+0x1e4>)
 8000256:	429c      	cmp	r4, r3
 8000258:	d035      	beq.n	80002c6 <__aeabi_ddiv+0x96>
 800025a:	2380      	movs	r3, #128	; 0x80
 800025c:	0f42      	lsrs	r2, r0, #29
 800025e:	041b      	lsls	r3, r3, #16
 8000260:	00f6      	lsls	r6, r6, #3
 8000262:	4313      	orrs	r3, r2
 8000264:	4333      	orrs	r3, r6
 8000266:	4699      	mov	r9, r3
 8000268:	00c3      	lsls	r3, r0, #3
 800026a:	4698      	mov	r8, r3
 800026c:	4b6a      	ldr	r3, [pc, #424]	; (8000418 <__aeabi_ddiv+0x1e8>)
 800026e:	2600      	movs	r6, #0
 8000270:	469c      	mov	ip, r3
 8000272:	2300      	movs	r3, #0
 8000274:	4464      	add	r4, ip
 8000276:	9303      	str	r3, [sp, #12]
 8000278:	032b      	lsls	r3, r5, #12
 800027a:	0b1b      	lsrs	r3, r3, #12
 800027c:	469b      	mov	fp, r3
 800027e:	006b      	lsls	r3, r5, #1
 8000280:	0fed      	lsrs	r5, r5, #31
 8000282:	4650      	mov	r0, sl
 8000284:	0d5b      	lsrs	r3, r3, #21
 8000286:	9501      	str	r5, [sp, #4]
 8000288:	d05e      	beq.n	8000348 <__aeabi_ddiv+0x118>
 800028a:	4a62      	ldr	r2, [pc, #392]	; (8000414 <__aeabi_ddiv+0x1e4>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d053      	beq.n	8000338 <__aeabi_ddiv+0x108>
 8000290:	465a      	mov	r2, fp
 8000292:	00d1      	lsls	r1, r2, #3
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	0f40      	lsrs	r0, r0, #29
 8000298:	0412      	lsls	r2, r2, #16
 800029a:	4302      	orrs	r2, r0
 800029c:	430a      	orrs	r2, r1
 800029e:	4693      	mov	fp, r2
 80002a0:	4652      	mov	r2, sl
 80002a2:	00d1      	lsls	r1, r2, #3
 80002a4:	4a5c      	ldr	r2, [pc, #368]	; (8000418 <__aeabi_ddiv+0x1e8>)
 80002a6:	4694      	mov	ip, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	4463      	add	r3, ip
 80002ac:	0038      	movs	r0, r7
 80002ae:	4068      	eors	r0, r5
 80002b0:	4684      	mov	ip, r0
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	1ae4      	subs	r4, r4, r3
 80002b6:	4316      	orrs	r6, r2
 80002b8:	2e0f      	cmp	r6, #15
 80002ba:	d900      	bls.n	80002be <__aeabi_ddiv+0x8e>
 80002bc:	e0b4      	b.n	8000428 <__aeabi_ddiv+0x1f8>
 80002be:	4b57      	ldr	r3, [pc, #348]	; (800041c <__aeabi_ddiv+0x1ec>)
 80002c0:	00b6      	lsls	r6, r6, #2
 80002c2:	599b      	ldr	r3, [r3, r6]
 80002c4:	469f      	mov	pc, r3
 80002c6:	0003      	movs	r3, r0
 80002c8:	4333      	orrs	r3, r6
 80002ca:	4699      	mov	r9, r3
 80002cc:	d16c      	bne.n	80003a8 <__aeabi_ddiv+0x178>
 80002ce:	2300      	movs	r3, #0
 80002d0:	4698      	mov	r8, r3
 80002d2:	3302      	adds	r3, #2
 80002d4:	2608      	movs	r6, #8
 80002d6:	9303      	str	r3, [sp, #12]
 80002d8:	e7ce      	b.n	8000278 <__aeabi_ddiv+0x48>
 80002da:	46cb      	mov	fp, r9
 80002dc:	4641      	mov	r1, r8
 80002de:	9a03      	ldr	r2, [sp, #12]
 80002e0:	9701      	str	r7, [sp, #4]
 80002e2:	2a02      	cmp	r2, #2
 80002e4:	d165      	bne.n	80003b2 <__aeabi_ddiv+0x182>
 80002e6:	9b01      	ldr	r3, [sp, #4]
 80002e8:	4c4a      	ldr	r4, [pc, #296]	; (8000414 <__aeabi_ddiv+0x1e4>)
 80002ea:	469c      	mov	ip, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	2200      	movs	r2, #0
 80002f0:	4698      	mov	r8, r3
 80002f2:	e06b      	b.n	80003cc <__aeabi_ddiv+0x19c>
 80002f4:	0003      	movs	r3, r0
 80002f6:	4333      	orrs	r3, r6
 80002f8:	4699      	mov	r9, r3
 80002fa:	d04e      	beq.n	800039a <__aeabi_ddiv+0x16a>
 80002fc:	2e00      	cmp	r6, #0
 80002fe:	d100      	bne.n	8000302 <__aeabi_ddiv+0xd2>
 8000300:	e1bc      	b.n	800067c <__aeabi_ddiv+0x44c>
 8000302:	0030      	movs	r0, r6
 8000304:	f000 fe5c 	bl	8000fc0 <__clzsi2>
 8000308:	0003      	movs	r3, r0
 800030a:	3b0b      	subs	r3, #11
 800030c:	2b1c      	cmp	r3, #28
 800030e:	dd00      	ble.n	8000312 <__aeabi_ddiv+0xe2>
 8000310:	e1ac      	b.n	800066c <__aeabi_ddiv+0x43c>
 8000312:	221d      	movs	r2, #29
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	465a      	mov	r2, fp
 8000318:	0001      	movs	r1, r0
 800031a:	40da      	lsrs	r2, r3
 800031c:	3908      	subs	r1, #8
 800031e:	408e      	lsls	r6, r1
 8000320:	0013      	movs	r3, r2
 8000322:	4333      	orrs	r3, r6
 8000324:	4699      	mov	r9, r3
 8000326:	465b      	mov	r3, fp
 8000328:	408b      	lsls	r3, r1
 800032a:	4698      	mov	r8, r3
 800032c:	2300      	movs	r3, #0
 800032e:	4c3c      	ldr	r4, [pc, #240]	; (8000420 <__aeabi_ddiv+0x1f0>)
 8000330:	2600      	movs	r6, #0
 8000332:	1a24      	subs	r4, r4, r0
 8000334:	9303      	str	r3, [sp, #12]
 8000336:	e79f      	b.n	8000278 <__aeabi_ddiv+0x48>
 8000338:	4651      	mov	r1, sl
 800033a:	465a      	mov	r2, fp
 800033c:	4311      	orrs	r1, r2
 800033e:	d129      	bne.n	8000394 <__aeabi_ddiv+0x164>
 8000340:	2200      	movs	r2, #0
 8000342:	4693      	mov	fp, r2
 8000344:	3202      	adds	r2, #2
 8000346:	e7b1      	b.n	80002ac <__aeabi_ddiv+0x7c>
 8000348:	4659      	mov	r1, fp
 800034a:	4301      	orrs	r1, r0
 800034c:	d01e      	beq.n	800038c <__aeabi_ddiv+0x15c>
 800034e:	465b      	mov	r3, fp
 8000350:	2b00      	cmp	r3, #0
 8000352:	d100      	bne.n	8000356 <__aeabi_ddiv+0x126>
 8000354:	e19e      	b.n	8000694 <__aeabi_ddiv+0x464>
 8000356:	4658      	mov	r0, fp
 8000358:	f000 fe32 	bl	8000fc0 <__clzsi2>
 800035c:	0003      	movs	r3, r0
 800035e:	3b0b      	subs	r3, #11
 8000360:	2b1c      	cmp	r3, #28
 8000362:	dd00      	ble.n	8000366 <__aeabi_ddiv+0x136>
 8000364:	e18f      	b.n	8000686 <__aeabi_ddiv+0x456>
 8000366:	0002      	movs	r2, r0
 8000368:	4659      	mov	r1, fp
 800036a:	3a08      	subs	r2, #8
 800036c:	4091      	lsls	r1, r2
 800036e:	468b      	mov	fp, r1
 8000370:	211d      	movs	r1, #29
 8000372:	1acb      	subs	r3, r1, r3
 8000374:	4651      	mov	r1, sl
 8000376:	40d9      	lsrs	r1, r3
 8000378:	000b      	movs	r3, r1
 800037a:	4659      	mov	r1, fp
 800037c:	430b      	orrs	r3, r1
 800037e:	4651      	mov	r1, sl
 8000380:	469b      	mov	fp, r3
 8000382:	4091      	lsls	r1, r2
 8000384:	4b26      	ldr	r3, [pc, #152]	; (8000420 <__aeabi_ddiv+0x1f0>)
 8000386:	2200      	movs	r2, #0
 8000388:	1a1b      	subs	r3, r3, r0
 800038a:	e78f      	b.n	80002ac <__aeabi_ddiv+0x7c>
 800038c:	2300      	movs	r3, #0
 800038e:	2201      	movs	r2, #1
 8000390:	469b      	mov	fp, r3
 8000392:	e78b      	b.n	80002ac <__aeabi_ddiv+0x7c>
 8000394:	4651      	mov	r1, sl
 8000396:	2203      	movs	r2, #3
 8000398:	e788      	b.n	80002ac <__aeabi_ddiv+0x7c>
 800039a:	2300      	movs	r3, #0
 800039c:	4698      	mov	r8, r3
 800039e:	3301      	adds	r3, #1
 80003a0:	2604      	movs	r6, #4
 80003a2:	2400      	movs	r4, #0
 80003a4:	9303      	str	r3, [sp, #12]
 80003a6:	e767      	b.n	8000278 <__aeabi_ddiv+0x48>
 80003a8:	2303      	movs	r3, #3
 80003aa:	46b1      	mov	r9, r6
 80003ac:	9303      	str	r3, [sp, #12]
 80003ae:	260c      	movs	r6, #12
 80003b0:	e762      	b.n	8000278 <__aeabi_ddiv+0x48>
 80003b2:	2a03      	cmp	r2, #3
 80003b4:	d100      	bne.n	80003b8 <__aeabi_ddiv+0x188>
 80003b6:	e25c      	b.n	8000872 <__aeabi_ddiv+0x642>
 80003b8:	9b01      	ldr	r3, [sp, #4]
 80003ba:	2a01      	cmp	r2, #1
 80003bc:	d000      	beq.n	80003c0 <__aeabi_ddiv+0x190>
 80003be:	e1e4      	b.n	800078a <__aeabi_ddiv+0x55a>
 80003c0:	4013      	ands	r3, r2
 80003c2:	469c      	mov	ip, r3
 80003c4:	2300      	movs	r3, #0
 80003c6:	2400      	movs	r4, #0
 80003c8:	2200      	movs	r2, #0
 80003ca:	4698      	mov	r8, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	0312      	lsls	r2, r2, #12
 80003d0:	0b13      	lsrs	r3, r2, #12
 80003d2:	0d0a      	lsrs	r2, r1, #20
 80003d4:	0512      	lsls	r2, r2, #20
 80003d6:	431a      	orrs	r2, r3
 80003d8:	0523      	lsls	r3, r4, #20
 80003da:	4c12      	ldr	r4, [pc, #72]	; (8000424 <__aeabi_ddiv+0x1f4>)
 80003dc:	4640      	mov	r0, r8
 80003de:	4022      	ands	r2, r4
 80003e0:	4313      	orrs	r3, r2
 80003e2:	4662      	mov	r2, ip
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	07d2      	lsls	r2, r2, #31
 80003e8:	085b      	lsrs	r3, r3, #1
 80003ea:	4313      	orrs	r3, r2
 80003ec:	0019      	movs	r1, r3
 80003ee:	b007      	add	sp, #28
 80003f0:	bc3c      	pop	{r2, r3, r4, r5}
 80003f2:	4690      	mov	r8, r2
 80003f4:	4699      	mov	r9, r3
 80003f6:	46a2      	mov	sl, r4
 80003f8:	46ab      	mov	fp, r5
 80003fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003fc:	2300      	movs	r3, #0
 80003fe:	2280      	movs	r2, #128	; 0x80
 8000400:	469c      	mov	ip, r3
 8000402:	0312      	lsls	r2, r2, #12
 8000404:	4698      	mov	r8, r3
 8000406:	4c03      	ldr	r4, [pc, #12]	; (8000414 <__aeabi_ddiv+0x1e4>)
 8000408:	e7e0      	b.n	80003cc <__aeabi_ddiv+0x19c>
 800040a:	2300      	movs	r3, #0
 800040c:	4c01      	ldr	r4, [pc, #4]	; (8000414 <__aeabi_ddiv+0x1e4>)
 800040e:	2200      	movs	r2, #0
 8000410:	4698      	mov	r8, r3
 8000412:	e7db      	b.n	80003cc <__aeabi_ddiv+0x19c>
 8000414:	000007ff 	.word	0x000007ff
 8000418:	fffffc01 	.word	0xfffffc01
 800041c:	080084a4 	.word	0x080084a4
 8000420:	fffffc0d 	.word	0xfffffc0d
 8000424:	800fffff 	.word	0x800fffff
 8000428:	45d9      	cmp	r9, fp
 800042a:	d900      	bls.n	800042e <__aeabi_ddiv+0x1fe>
 800042c:	e139      	b.n	80006a2 <__aeabi_ddiv+0x472>
 800042e:	d100      	bne.n	8000432 <__aeabi_ddiv+0x202>
 8000430:	e134      	b.n	800069c <__aeabi_ddiv+0x46c>
 8000432:	2300      	movs	r3, #0
 8000434:	4646      	mov	r6, r8
 8000436:	464d      	mov	r5, r9
 8000438:	469a      	mov	sl, r3
 800043a:	3c01      	subs	r4, #1
 800043c:	465b      	mov	r3, fp
 800043e:	0e0a      	lsrs	r2, r1, #24
 8000440:	021b      	lsls	r3, r3, #8
 8000442:	431a      	orrs	r2, r3
 8000444:	020b      	lsls	r3, r1, #8
 8000446:	0c17      	lsrs	r7, r2, #16
 8000448:	9303      	str	r3, [sp, #12]
 800044a:	0413      	lsls	r3, r2, #16
 800044c:	0c1b      	lsrs	r3, r3, #16
 800044e:	0039      	movs	r1, r7
 8000450:	0028      	movs	r0, r5
 8000452:	4690      	mov	r8, r2
 8000454:	9301      	str	r3, [sp, #4]
 8000456:	f7ff fe5f 	bl	8000118 <__udivsi3>
 800045a:	0002      	movs	r2, r0
 800045c:	9b01      	ldr	r3, [sp, #4]
 800045e:	4683      	mov	fp, r0
 8000460:	435a      	muls	r2, r3
 8000462:	0028      	movs	r0, r5
 8000464:	0039      	movs	r1, r7
 8000466:	4691      	mov	r9, r2
 8000468:	f7ff fedc 	bl	8000224 <__aeabi_uidivmod>
 800046c:	0c35      	lsrs	r5, r6, #16
 800046e:	0409      	lsls	r1, r1, #16
 8000470:	430d      	orrs	r5, r1
 8000472:	45a9      	cmp	r9, r5
 8000474:	d90d      	bls.n	8000492 <__aeabi_ddiv+0x262>
 8000476:	465b      	mov	r3, fp
 8000478:	4445      	add	r5, r8
 800047a:	3b01      	subs	r3, #1
 800047c:	45a8      	cmp	r8, r5
 800047e:	d900      	bls.n	8000482 <__aeabi_ddiv+0x252>
 8000480:	e13a      	b.n	80006f8 <__aeabi_ddiv+0x4c8>
 8000482:	45a9      	cmp	r9, r5
 8000484:	d800      	bhi.n	8000488 <__aeabi_ddiv+0x258>
 8000486:	e137      	b.n	80006f8 <__aeabi_ddiv+0x4c8>
 8000488:	2302      	movs	r3, #2
 800048a:	425b      	negs	r3, r3
 800048c:	469c      	mov	ip, r3
 800048e:	4445      	add	r5, r8
 8000490:	44e3      	add	fp, ip
 8000492:	464b      	mov	r3, r9
 8000494:	1aeb      	subs	r3, r5, r3
 8000496:	0039      	movs	r1, r7
 8000498:	0018      	movs	r0, r3
 800049a:	9304      	str	r3, [sp, #16]
 800049c:	f7ff fe3c 	bl	8000118 <__udivsi3>
 80004a0:	9b01      	ldr	r3, [sp, #4]
 80004a2:	0005      	movs	r5, r0
 80004a4:	4343      	muls	r3, r0
 80004a6:	0039      	movs	r1, r7
 80004a8:	9804      	ldr	r0, [sp, #16]
 80004aa:	4699      	mov	r9, r3
 80004ac:	f7ff feba 	bl	8000224 <__aeabi_uidivmod>
 80004b0:	0433      	lsls	r3, r6, #16
 80004b2:	0409      	lsls	r1, r1, #16
 80004b4:	0c1b      	lsrs	r3, r3, #16
 80004b6:	430b      	orrs	r3, r1
 80004b8:	4599      	cmp	r9, r3
 80004ba:	d909      	bls.n	80004d0 <__aeabi_ddiv+0x2a0>
 80004bc:	4443      	add	r3, r8
 80004be:	1e6a      	subs	r2, r5, #1
 80004c0:	4598      	cmp	r8, r3
 80004c2:	d900      	bls.n	80004c6 <__aeabi_ddiv+0x296>
 80004c4:	e11a      	b.n	80006fc <__aeabi_ddiv+0x4cc>
 80004c6:	4599      	cmp	r9, r3
 80004c8:	d800      	bhi.n	80004cc <__aeabi_ddiv+0x29c>
 80004ca:	e117      	b.n	80006fc <__aeabi_ddiv+0x4cc>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4443      	add	r3, r8
 80004d0:	464a      	mov	r2, r9
 80004d2:	1a9b      	subs	r3, r3, r2
 80004d4:	465a      	mov	r2, fp
 80004d6:	0412      	lsls	r2, r2, #16
 80004d8:	432a      	orrs	r2, r5
 80004da:	9903      	ldr	r1, [sp, #12]
 80004dc:	4693      	mov	fp, r2
 80004de:	0c10      	lsrs	r0, r2, #16
 80004e0:	0c0a      	lsrs	r2, r1, #16
 80004e2:	4691      	mov	r9, r2
 80004e4:	0409      	lsls	r1, r1, #16
 80004e6:	465a      	mov	r2, fp
 80004e8:	0c09      	lsrs	r1, r1, #16
 80004ea:	464e      	mov	r6, r9
 80004ec:	000d      	movs	r5, r1
 80004ee:	0412      	lsls	r2, r2, #16
 80004f0:	0c12      	lsrs	r2, r2, #16
 80004f2:	4345      	muls	r5, r0
 80004f4:	9105      	str	r1, [sp, #20]
 80004f6:	4351      	muls	r1, r2
 80004f8:	4372      	muls	r2, r6
 80004fa:	4370      	muls	r0, r6
 80004fc:	1952      	adds	r2, r2, r5
 80004fe:	0c0e      	lsrs	r6, r1, #16
 8000500:	18b2      	adds	r2, r6, r2
 8000502:	4295      	cmp	r5, r2
 8000504:	d903      	bls.n	800050e <__aeabi_ddiv+0x2de>
 8000506:	2580      	movs	r5, #128	; 0x80
 8000508:	026d      	lsls	r5, r5, #9
 800050a:	46ac      	mov	ip, r5
 800050c:	4460      	add	r0, ip
 800050e:	0c15      	lsrs	r5, r2, #16
 8000510:	0409      	lsls	r1, r1, #16
 8000512:	0412      	lsls	r2, r2, #16
 8000514:	0c09      	lsrs	r1, r1, #16
 8000516:	1828      	adds	r0, r5, r0
 8000518:	1852      	adds	r2, r2, r1
 800051a:	4283      	cmp	r3, r0
 800051c:	d200      	bcs.n	8000520 <__aeabi_ddiv+0x2f0>
 800051e:	e0ce      	b.n	80006be <__aeabi_ddiv+0x48e>
 8000520:	d100      	bne.n	8000524 <__aeabi_ddiv+0x2f4>
 8000522:	e0c8      	b.n	80006b6 <__aeabi_ddiv+0x486>
 8000524:	1a1d      	subs	r5, r3, r0
 8000526:	4653      	mov	r3, sl
 8000528:	1a9e      	subs	r6, r3, r2
 800052a:	45b2      	cmp	sl, r6
 800052c:	4192      	sbcs	r2, r2
 800052e:	4252      	negs	r2, r2
 8000530:	1aab      	subs	r3, r5, r2
 8000532:	469a      	mov	sl, r3
 8000534:	4598      	cmp	r8, r3
 8000536:	d100      	bne.n	800053a <__aeabi_ddiv+0x30a>
 8000538:	e117      	b.n	800076a <__aeabi_ddiv+0x53a>
 800053a:	0039      	movs	r1, r7
 800053c:	0018      	movs	r0, r3
 800053e:	f7ff fdeb 	bl	8000118 <__udivsi3>
 8000542:	9b01      	ldr	r3, [sp, #4]
 8000544:	0005      	movs	r5, r0
 8000546:	4343      	muls	r3, r0
 8000548:	0039      	movs	r1, r7
 800054a:	4650      	mov	r0, sl
 800054c:	9304      	str	r3, [sp, #16]
 800054e:	f7ff fe69 	bl	8000224 <__aeabi_uidivmod>
 8000552:	9804      	ldr	r0, [sp, #16]
 8000554:	040b      	lsls	r3, r1, #16
 8000556:	0c31      	lsrs	r1, r6, #16
 8000558:	4319      	orrs	r1, r3
 800055a:	4288      	cmp	r0, r1
 800055c:	d909      	bls.n	8000572 <__aeabi_ddiv+0x342>
 800055e:	4441      	add	r1, r8
 8000560:	1e6b      	subs	r3, r5, #1
 8000562:	4588      	cmp	r8, r1
 8000564:	d900      	bls.n	8000568 <__aeabi_ddiv+0x338>
 8000566:	e107      	b.n	8000778 <__aeabi_ddiv+0x548>
 8000568:	4288      	cmp	r0, r1
 800056a:	d800      	bhi.n	800056e <__aeabi_ddiv+0x33e>
 800056c:	e104      	b.n	8000778 <__aeabi_ddiv+0x548>
 800056e:	3d02      	subs	r5, #2
 8000570:	4441      	add	r1, r8
 8000572:	9b04      	ldr	r3, [sp, #16]
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	0018      	movs	r0, r3
 8000578:	0039      	movs	r1, r7
 800057a:	9304      	str	r3, [sp, #16]
 800057c:	f7ff fdcc 	bl	8000118 <__udivsi3>
 8000580:	9b01      	ldr	r3, [sp, #4]
 8000582:	4682      	mov	sl, r0
 8000584:	4343      	muls	r3, r0
 8000586:	0039      	movs	r1, r7
 8000588:	9804      	ldr	r0, [sp, #16]
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	f7ff fe4a 	bl	8000224 <__aeabi_uidivmod>
 8000590:	9801      	ldr	r0, [sp, #4]
 8000592:	040b      	lsls	r3, r1, #16
 8000594:	0431      	lsls	r1, r6, #16
 8000596:	0c09      	lsrs	r1, r1, #16
 8000598:	4319      	orrs	r1, r3
 800059a:	4288      	cmp	r0, r1
 800059c:	d90d      	bls.n	80005ba <__aeabi_ddiv+0x38a>
 800059e:	4653      	mov	r3, sl
 80005a0:	4441      	add	r1, r8
 80005a2:	3b01      	subs	r3, #1
 80005a4:	4588      	cmp	r8, r1
 80005a6:	d900      	bls.n	80005aa <__aeabi_ddiv+0x37a>
 80005a8:	e0e8      	b.n	800077c <__aeabi_ddiv+0x54c>
 80005aa:	4288      	cmp	r0, r1
 80005ac:	d800      	bhi.n	80005b0 <__aeabi_ddiv+0x380>
 80005ae:	e0e5      	b.n	800077c <__aeabi_ddiv+0x54c>
 80005b0:	2302      	movs	r3, #2
 80005b2:	425b      	negs	r3, r3
 80005b4:	469c      	mov	ip, r3
 80005b6:	4441      	add	r1, r8
 80005b8:	44e2      	add	sl, ip
 80005ba:	9b01      	ldr	r3, [sp, #4]
 80005bc:	042d      	lsls	r5, r5, #16
 80005be:	1ace      	subs	r6, r1, r3
 80005c0:	4651      	mov	r1, sl
 80005c2:	4329      	orrs	r1, r5
 80005c4:	9d05      	ldr	r5, [sp, #20]
 80005c6:	464f      	mov	r7, r9
 80005c8:	002a      	movs	r2, r5
 80005ca:	040b      	lsls	r3, r1, #16
 80005cc:	0c08      	lsrs	r0, r1, #16
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	435a      	muls	r2, r3
 80005d2:	4345      	muls	r5, r0
 80005d4:	437b      	muls	r3, r7
 80005d6:	4378      	muls	r0, r7
 80005d8:	195b      	adds	r3, r3, r5
 80005da:	0c17      	lsrs	r7, r2, #16
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	429d      	cmp	r5, r3
 80005e0:	d903      	bls.n	80005ea <__aeabi_ddiv+0x3ba>
 80005e2:	2580      	movs	r5, #128	; 0x80
 80005e4:	026d      	lsls	r5, r5, #9
 80005e6:	46ac      	mov	ip, r5
 80005e8:	4460      	add	r0, ip
 80005ea:	0c1d      	lsrs	r5, r3, #16
 80005ec:	0412      	lsls	r2, r2, #16
 80005ee:	041b      	lsls	r3, r3, #16
 80005f0:	0c12      	lsrs	r2, r2, #16
 80005f2:	1828      	adds	r0, r5, r0
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	4286      	cmp	r6, r0
 80005f8:	d200      	bcs.n	80005fc <__aeabi_ddiv+0x3cc>
 80005fa:	e093      	b.n	8000724 <__aeabi_ddiv+0x4f4>
 80005fc:	d100      	bne.n	8000600 <__aeabi_ddiv+0x3d0>
 80005fe:	e08e      	b.n	800071e <__aeabi_ddiv+0x4ee>
 8000600:	2301      	movs	r3, #1
 8000602:	4319      	orrs	r1, r3
 8000604:	4ba0      	ldr	r3, [pc, #640]	; (8000888 <__aeabi_ddiv+0x658>)
 8000606:	18e3      	adds	r3, r4, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	dc00      	bgt.n	800060e <__aeabi_ddiv+0x3de>
 800060c:	e099      	b.n	8000742 <__aeabi_ddiv+0x512>
 800060e:	074a      	lsls	r2, r1, #29
 8000610:	d000      	beq.n	8000614 <__aeabi_ddiv+0x3e4>
 8000612:	e09e      	b.n	8000752 <__aeabi_ddiv+0x522>
 8000614:	465a      	mov	r2, fp
 8000616:	01d2      	lsls	r2, r2, #7
 8000618:	d506      	bpl.n	8000628 <__aeabi_ddiv+0x3f8>
 800061a:	465a      	mov	r2, fp
 800061c:	4b9b      	ldr	r3, [pc, #620]	; (800088c <__aeabi_ddiv+0x65c>)
 800061e:	401a      	ands	r2, r3
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	4693      	mov	fp, r2
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	18e3      	adds	r3, r4, r3
 8000628:	4a99      	ldr	r2, [pc, #612]	; (8000890 <__aeabi_ddiv+0x660>)
 800062a:	4293      	cmp	r3, r2
 800062c:	dd68      	ble.n	8000700 <__aeabi_ddiv+0x4d0>
 800062e:	2301      	movs	r3, #1
 8000630:	9a02      	ldr	r2, [sp, #8]
 8000632:	4c98      	ldr	r4, [pc, #608]	; (8000894 <__aeabi_ddiv+0x664>)
 8000634:	401a      	ands	r2, r3
 8000636:	2300      	movs	r3, #0
 8000638:	4694      	mov	ip, r2
 800063a:	4698      	mov	r8, r3
 800063c:	2200      	movs	r2, #0
 800063e:	e6c5      	b.n	80003cc <__aeabi_ddiv+0x19c>
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	464b      	mov	r3, r9
 8000644:	0312      	lsls	r2, r2, #12
 8000646:	4213      	tst	r3, r2
 8000648:	d00a      	beq.n	8000660 <__aeabi_ddiv+0x430>
 800064a:	465b      	mov	r3, fp
 800064c:	4213      	tst	r3, r2
 800064e:	d106      	bne.n	800065e <__aeabi_ddiv+0x42e>
 8000650:	431a      	orrs	r2, r3
 8000652:	0312      	lsls	r2, r2, #12
 8000654:	0b12      	lsrs	r2, r2, #12
 8000656:	46ac      	mov	ip, r5
 8000658:	4688      	mov	r8, r1
 800065a:	4c8e      	ldr	r4, [pc, #568]	; (8000894 <__aeabi_ddiv+0x664>)
 800065c:	e6b6      	b.n	80003cc <__aeabi_ddiv+0x19c>
 800065e:	464b      	mov	r3, r9
 8000660:	431a      	orrs	r2, r3
 8000662:	0312      	lsls	r2, r2, #12
 8000664:	0b12      	lsrs	r2, r2, #12
 8000666:	46bc      	mov	ip, r7
 8000668:	4c8a      	ldr	r4, [pc, #552]	; (8000894 <__aeabi_ddiv+0x664>)
 800066a:	e6af      	b.n	80003cc <__aeabi_ddiv+0x19c>
 800066c:	0003      	movs	r3, r0
 800066e:	465a      	mov	r2, fp
 8000670:	3b28      	subs	r3, #40	; 0x28
 8000672:	409a      	lsls	r2, r3
 8000674:	2300      	movs	r3, #0
 8000676:	4691      	mov	r9, r2
 8000678:	4698      	mov	r8, r3
 800067a:	e657      	b.n	800032c <__aeabi_ddiv+0xfc>
 800067c:	4658      	mov	r0, fp
 800067e:	f000 fc9f 	bl	8000fc0 <__clzsi2>
 8000682:	3020      	adds	r0, #32
 8000684:	e640      	b.n	8000308 <__aeabi_ddiv+0xd8>
 8000686:	0003      	movs	r3, r0
 8000688:	4652      	mov	r2, sl
 800068a:	3b28      	subs	r3, #40	; 0x28
 800068c:	409a      	lsls	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	4693      	mov	fp, r2
 8000692:	e677      	b.n	8000384 <__aeabi_ddiv+0x154>
 8000694:	f000 fc94 	bl	8000fc0 <__clzsi2>
 8000698:	3020      	adds	r0, #32
 800069a:	e65f      	b.n	800035c <__aeabi_ddiv+0x12c>
 800069c:	4588      	cmp	r8, r1
 800069e:	d200      	bcs.n	80006a2 <__aeabi_ddiv+0x472>
 80006a0:	e6c7      	b.n	8000432 <__aeabi_ddiv+0x202>
 80006a2:	464b      	mov	r3, r9
 80006a4:	07de      	lsls	r6, r3, #31
 80006a6:	085d      	lsrs	r5, r3, #1
 80006a8:	4643      	mov	r3, r8
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	431e      	orrs	r6, r3
 80006ae:	4643      	mov	r3, r8
 80006b0:	07db      	lsls	r3, r3, #31
 80006b2:	469a      	mov	sl, r3
 80006b4:	e6c2      	b.n	800043c <__aeabi_ddiv+0x20c>
 80006b6:	2500      	movs	r5, #0
 80006b8:	4592      	cmp	sl, r2
 80006ba:	d300      	bcc.n	80006be <__aeabi_ddiv+0x48e>
 80006bc:	e733      	b.n	8000526 <__aeabi_ddiv+0x2f6>
 80006be:	9e03      	ldr	r6, [sp, #12]
 80006c0:	4659      	mov	r1, fp
 80006c2:	46b4      	mov	ip, r6
 80006c4:	44e2      	add	sl, ip
 80006c6:	45b2      	cmp	sl, r6
 80006c8:	41ad      	sbcs	r5, r5
 80006ca:	426d      	negs	r5, r5
 80006cc:	4445      	add	r5, r8
 80006ce:	18eb      	adds	r3, r5, r3
 80006d0:	3901      	subs	r1, #1
 80006d2:	4598      	cmp	r8, r3
 80006d4:	d207      	bcs.n	80006e6 <__aeabi_ddiv+0x4b6>
 80006d6:	4298      	cmp	r0, r3
 80006d8:	d900      	bls.n	80006dc <__aeabi_ddiv+0x4ac>
 80006da:	e07f      	b.n	80007dc <__aeabi_ddiv+0x5ac>
 80006dc:	d100      	bne.n	80006e0 <__aeabi_ddiv+0x4b0>
 80006de:	e0bc      	b.n	800085a <__aeabi_ddiv+0x62a>
 80006e0:	1a1d      	subs	r5, r3, r0
 80006e2:	468b      	mov	fp, r1
 80006e4:	e71f      	b.n	8000526 <__aeabi_ddiv+0x2f6>
 80006e6:	4598      	cmp	r8, r3
 80006e8:	d1fa      	bne.n	80006e0 <__aeabi_ddiv+0x4b0>
 80006ea:	9d03      	ldr	r5, [sp, #12]
 80006ec:	4555      	cmp	r5, sl
 80006ee:	d9f2      	bls.n	80006d6 <__aeabi_ddiv+0x4a6>
 80006f0:	4643      	mov	r3, r8
 80006f2:	468b      	mov	fp, r1
 80006f4:	1a1d      	subs	r5, r3, r0
 80006f6:	e716      	b.n	8000526 <__aeabi_ddiv+0x2f6>
 80006f8:	469b      	mov	fp, r3
 80006fa:	e6ca      	b.n	8000492 <__aeabi_ddiv+0x262>
 80006fc:	0015      	movs	r5, r2
 80006fe:	e6e7      	b.n	80004d0 <__aeabi_ddiv+0x2a0>
 8000700:	465a      	mov	r2, fp
 8000702:	08c9      	lsrs	r1, r1, #3
 8000704:	0752      	lsls	r2, r2, #29
 8000706:	430a      	orrs	r2, r1
 8000708:	055b      	lsls	r3, r3, #21
 800070a:	4690      	mov	r8, r2
 800070c:	0d5c      	lsrs	r4, r3, #21
 800070e:	465a      	mov	r2, fp
 8000710:	2301      	movs	r3, #1
 8000712:	9902      	ldr	r1, [sp, #8]
 8000714:	0252      	lsls	r2, r2, #9
 8000716:	4019      	ands	r1, r3
 8000718:	0b12      	lsrs	r2, r2, #12
 800071a:	468c      	mov	ip, r1
 800071c:	e656      	b.n	80003cc <__aeabi_ddiv+0x19c>
 800071e:	2b00      	cmp	r3, #0
 8000720:	d100      	bne.n	8000724 <__aeabi_ddiv+0x4f4>
 8000722:	e76f      	b.n	8000604 <__aeabi_ddiv+0x3d4>
 8000724:	4446      	add	r6, r8
 8000726:	1e4a      	subs	r2, r1, #1
 8000728:	45b0      	cmp	r8, r6
 800072a:	d929      	bls.n	8000780 <__aeabi_ddiv+0x550>
 800072c:	0011      	movs	r1, r2
 800072e:	4286      	cmp	r6, r0
 8000730:	d000      	beq.n	8000734 <__aeabi_ddiv+0x504>
 8000732:	e765      	b.n	8000600 <__aeabi_ddiv+0x3d0>
 8000734:	9a03      	ldr	r2, [sp, #12]
 8000736:	4293      	cmp	r3, r2
 8000738:	d000      	beq.n	800073c <__aeabi_ddiv+0x50c>
 800073a:	e761      	b.n	8000600 <__aeabi_ddiv+0x3d0>
 800073c:	e762      	b.n	8000604 <__aeabi_ddiv+0x3d4>
 800073e:	2101      	movs	r1, #1
 8000740:	4249      	negs	r1, r1
 8000742:	2001      	movs	r0, #1
 8000744:	1ac2      	subs	r2, r0, r3
 8000746:	2a38      	cmp	r2, #56	; 0x38
 8000748:	dd21      	ble.n	800078e <__aeabi_ddiv+0x55e>
 800074a:	9b02      	ldr	r3, [sp, #8]
 800074c:	4003      	ands	r3, r0
 800074e:	469c      	mov	ip, r3
 8000750:	e638      	b.n	80003c4 <__aeabi_ddiv+0x194>
 8000752:	220f      	movs	r2, #15
 8000754:	400a      	ands	r2, r1
 8000756:	2a04      	cmp	r2, #4
 8000758:	d100      	bne.n	800075c <__aeabi_ddiv+0x52c>
 800075a:	e75b      	b.n	8000614 <__aeabi_ddiv+0x3e4>
 800075c:	000a      	movs	r2, r1
 800075e:	1d11      	adds	r1, r2, #4
 8000760:	4291      	cmp	r1, r2
 8000762:	4192      	sbcs	r2, r2
 8000764:	4252      	negs	r2, r2
 8000766:	4493      	add	fp, r2
 8000768:	e754      	b.n	8000614 <__aeabi_ddiv+0x3e4>
 800076a:	4b47      	ldr	r3, [pc, #284]	; (8000888 <__aeabi_ddiv+0x658>)
 800076c:	18e3      	adds	r3, r4, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	dde5      	ble.n	800073e <__aeabi_ddiv+0x50e>
 8000772:	2201      	movs	r2, #1
 8000774:	4252      	negs	r2, r2
 8000776:	e7f2      	b.n	800075e <__aeabi_ddiv+0x52e>
 8000778:	001d      	movs	r5, r3
 800077a:	e6fa      	b.n	8000572 <__aeabi_ddiv+0x342>
 800077c:	469a      	mov	sl, r3
 800077e:	e71c      	b.n	80005ba <__aeabi_ddiv+0x38a>
 8000780:	42b0      	cmp	r0, r6
 8000782:	d839      	bhi.n	80007f8 <__aeabi_ddiv+0x5c8>
 8000784:	d06e      	beq.n	8000864 <__aeabi_ddiv+0x634>
 8000786:	0011      	movs	r1, r2
 8000788:	e73a      	b.n	8000600 <__aeabi_ddiv+0x3d0>
 800078a:	9302      	str	r3, [sp, #8]
 800078c:	e73a      	b.n	8000604 <__aeabi_ddiv+0x3d4>
 800078e:	2a1f      	cmp	r2, #31
 8000790:	dc3c      	bgt.n	800080c <__aeabi_ddiv+0x5dc>
 8000792:	2320      	movs	r3, #32
 8000794:	1a9b      	subs	r3, r3, r2
 8000796:	000c      	movs	r4, r1
 8000798:	4658      	mov	r0, fp
 800079a:	4099      	lsls	r1, r3
 800079c:	4098      	lsls	r0, r3
 800079e:	1e4b      	subs	r3, r1, #1
 80007a0:	4199      	sbcs	r1, r3
 80007a2:	465b      	mov	r3, fp
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	4320      	orrs	r0, r4
 80007aa:	4308      	orrs	r0, r1
 80007ac:	001a      	movs	r2, r3
 80007ae:	0743      	lsls	r3, r0, #29
 80007b0:	d009      	beq.n	80007c6 <__aeabi_ddiv+0x596>
 80007b2:	230f      	movs	r3, #15
 80007b4:	4003      	ands	r3, r0
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d005      	beq.n	80007c6 <__aeabi_ddiv+0x596>
 80007ba:	0001      	movs	r1, r0
 80007bc:	1d08      	adds	r0, r1, #4
 80007be:	4288      	cmp	r0, r1
 80007c0:	419b      	sbcs	r3, r3
 80007c2:	425b      	negs	r3, r3
 80007c4:	18d2      	adds	r2, r2, r3
 80007c6:	0213      	lsls	r3, r2, #8
 80007c8:	d53a      	bpl.n	8000840 <__aeabi_ddiv+0x610>
 80007ca:	2301      	movs	r3, #1
 80007cc:	9a02      	ldr	r2, [sp, #8]
 80007ce:	2401      	movs	r4, #1
 80007d0:	401a      	ands	r2, r3
 80007d2:	2300      	movs	r3, #0
 80007d4:	4694      	mov	ip, r2
 80007d6:	4698      	mov	r8, r3
 80007d8:	2200      	movs	r2, #0
 80007da:	e5f7      	b.n	80003cc <__aeabi_ddiv+0x19c>
 80007dc:	2102      	movs	r1, #2
 80007de:	4249      	negs	r1, r1
 80007e0:	468c      	mov	ip, r1
 80007e2:	9d03      	ldr	r5, [sp, #12]
 80007e4:	44e3      	add	fp, ip
 80007e6:	46ac      	mov	ip, r5
 80007e8:	44e2      	add	sl, ip
 80007ea:	45aa      	cmp	sl, r5
 80007ec:	41ad      	sbcs	r5, r5
 80007ee:	426d      	negs	r5, r5
 80007f0:	4445      	add	r5, r8
 80007f2:	18ed      	adds	r5, r5, r3
 80007f4:	1a2d      	subs	r5, r5, r0
 80007f6:	e696      	b.n	8000526 <__aeabi_ddiv+0x2f6>
 80007f8:	1e8a      	subs	r2, r1, #2
 80007fa:	9903      	ldr	r1, [sp, #12]
 80007fc:	004d      	lsls	r5, r1, #1
 80007fe:	428d      	cmp	r5, r1
 8000800:	4189      	sbcs	r1, r1
 8000802:	4249      	negs	r1, r1
 8000804:	4441      	add	r1, r8
 8000806:	1876      	adds	r6, r6, r1
 8000808:	9503      	str	r5, [sp, #12]
 800080a:	e78f      	b.n	800072c <__aeabi_ddiv+0x4fc>
 800080c:	201f      	movs	r0, #31
 800080e:	4240      	negs	r0, r0
 8000810:	1ac3      	subs	r3, r0, r3
 8000812:	4658      	mov	r0, fp
 8000814:	40d8      	lsrs	r0, r3
 8000816:	0003      	movs	r3, r0
 8000818:	2a20      	cmp	r2, #32
 800081a:	d028      	beq.n	800086e <__aeabi_ddiv+0x63e>
 800081c:	2040      	movs	r0, #64	; 0x40
 800081e:	465d      	mov	r5, fp
 8000820:	1a82      	subs	r2, r0, r2
 8000822:	4095      	lsls	r5, r2
 8000824:	4329      	orrs	r1, r5
 8000826:	1e4a      	subs	r2, r1, #1
 8000828:	4191      	sbcs	r1, r2
 800082a:	4319      	orrs	r1, r3
 800082c:	2307      	movs	r3, #7
 800082e:	2200      	movs	r2, #0
 8000830:	400b      	ands	r3, r1
 8000832:	d009      	beq.n	8000848 <__aeabi_ddiv+0x618>
 8000834:	230f      	movs	r3, #15
 8000836:	2200      	movs	r2, #0
 8000838:	400b      	ands	r3, r1
 800083a:	0008      	movs	r0, r1
 800083c:	2b04      	cmp	r3, #4
 800083e:	d1bd      	bne.n	80007bc <__aeabi_ddiv+0x58c>
 8000840:	0001      	movs	r1, r0
 8000842:	0753      	lsls	r3, r2, #29
 8000844:	0252      	lsls	r2, r2, #9
 8000846:	0b12      	lsrs	r2, r2, #12
 8000848:	08c9      	lsrs	r1, r1, #3
 800084a:	4319      	orrs	r1, r3
 800084c:	2301      	movs	r3, #1
 800084e:	4688      	mov	r8, r1
 8000850:	9902      	ldr	r1, [sp, #8]
 8000852:	2400      	movs	r4, #0
 8000854:	4019      	ands	r1, r3
 8000856:	468c      	mov	ip, r1
 8000858:	e5b8      	b.n	80003cc <__aeabi_ddiv+0x19c>
 800085a:	4552      	cmp	r2, sl
 800085c:	d8be      	bhi.n	80007dc <__aeabi_ddiv+0x5ac>
 800085e:	468b      	mov	fp, r1
 8000860:	2500      	movs	r5, #0
 8000862:	e660      	b.n	8000526 <__aeabi_ddiv+0x2f6>
 8000864:	9d03      	ldr	r5, [sp, #12]
 8000866:	429d      	cmp	r5, r3
 8000868:	d3c6      	bcc.n	80007f8 <__aeabi_ddiv+0x5c8>
 800086a:	0011      	movs	r1, r2
 800086c:	e762      	b.n	8000734 <__aeabi_ddiv+0x504>
 800086e:	2500      	movs	r5, #0
 8000870:	e7d8      	b.n	8000824 <__aeabi_ddiv+0x5f4>
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	465b      	mov	r3, fp
 8000876:	0312      	lsls	r2, r2, #12
 8000878:	431a      	orrs	r2, r3
 800087a:	9b01      	ldr	r3, [sp, #4]
 800087c:	0312      	lsls	r2, r2, #12
 800087e:	0b12      	lsrs	r2, r2, #12
 8000880:	469c      	mov	ip, r3
 8000882:	4688      	mov	r8, r1
 8000884:	4c03      	ldr	r4, [pc, #12]	; (8000894 <__aeabi_ddiv+0x664>)
 8000886:	e5a1      	b.n	80003cc <__aeabi_ddiv+0x19c>
 8000888:	000003ff 	.word	0x000003ff
 800088c:	feffffff 	.word	0xfeffffff
 8000890:	000007fe 	.word	0x000007fe
 8000894:	000007ff 	.word	0x000007ff

08000898 <__aeabi_dmul>:
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	4657      	mov	r7, sl
 800089c:	4645      	mov	r5, r8
 800089e:	46de      	mov	lr, fp
 80008a0:	464e      	mov	r6, r9
 80008a2:	b5e0      	push	{r5, r6, r7, lr}
 80008a4:	030c      	lsls	r4, r1, #12
 80008a6:	4698      	mov	r8, r3
 80008a8:	004e      	lsls	r6, r1, #1
 80008aa:	0b23      	lsrs	r3, r4, #12
 80008ac:	b087      	sub	sp, #28
 80008ae:	0007      	movs	r7, r0
 80008b0:	4692      	mov	sl, r2
 80008b2:	469b      	mov	fp, r3
 80008b4:	0d76      	lsrs	r6, r6, #21
 80008b6:	0fcd      	lsrs	r5, r1, #31
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d06b      	beq.n	8000994 <__aeabi_dmul+0xfc>
 80008bc:	4b6d      	ldr	r3, [pc, #436]	; (8000a74 <__aeabi_dmul+0x1dc>)
 80008be:	429e      	cmp	r6, r3
 80008c0:	d035      	beq.n	800092e <__aeabi_dmul+0x96>
 80008c2:	2480      	movs	r4, #128	; 0x80
 80008c4:	465b      	mov	r3, fp
 80008c6:	0f42      	lsrs	r2, r0, #29
 80008c8:	0424      	lsls	r4, r4, #16
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	4314      	orrs	r4, r2
 80008ce:	431c      	orrs	r4, r3
 80008d0:	00c3      	lsls	r3, r0, #3
 80008d2:	4699      	mov	r9, r3
 80008d4:	4b68      	ldr	r3, [pc, #416]	; (8000a78 <__aeabi_dmul+0x1e0>)
 80008d6:	46a3      	mov	fp, r4
 80008d8:	469c      	mov	ip, r3
 80008da:	2300      	movs	r3, #0
 80008dc:	2700      	movs	r7, #0
 80008de:	4466      	add	r6, ip
 80008e0:	9302      	str	r3, [sp, #8]
 80008e2:	4643      	mov	r3, r8
 80008e4:	031c      	lsls	r4, r3, #12
 80008e6:	005a      	lsls	r2, r3, #1
 80008e8:	0fdb      	lsrs	r3, r3, #31
 80008ea:	4650      	mov	r0, sl
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	4698      	mov	r8, r3
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dmul+0x5e>
 80008f4:	e076      	b.n	80009e4 <__aeabi_dmul+0x14c>
 80008f6:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <__aeabi_dmul+0x1dc>)
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d06d      	beq.n	80009d8 <__aeabi_dmul+0x140>
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	0f41      	lsrs	r1, r0, #29
 8000900:	041b      	lsls	r3, r3, #16
 8000902:	430b      	orrs	r3, r1
 8000904:	495c      	ldr	r1, [pc, #368]	; (8000a78 <__aeabi_dmul+0x1e0>)
 8000906:	00e4      	lsls	r4, r4, #3
 8000908:	468c      	mov	ip, r1
 800090a:	431c      	orrs	r4, r3
 800090c:	00c3      	lsls	r3, r0, #3
 800090e:	2000      	movs	r0, #0
 8000910:	4462      	add	r2, ip
 8000912:	4641      	mov	r1, r8
 8000914:	18b6      	adds	r6, r6, r2
 8000916:	4069      	eors	r1, r5
 8000918:	1c72      	adds	r2, r6, #1
 800091a:	9101      	str	r1, [sp, #4]
 800091c:	4694      	mov	ip, r2
 800091e:	4307      	orrs	r7, r0
 8000920:	2f0f      	cmp	r7, #15
 8000922:	d900      	bls.n	8000926 <__aeabi_dmul+0x8e>
 8000924:	e0b0      	b.n	8000a88 <__aeabi_dmul+0x1f0>
 8000926:	4a55      	ldr	r2, [pc, #340]	; (8000a7c <__aeabi_dmul+0x1e4>)
 8000928:	00bf      	lsls	r7, r7, #2
 800092a:	59d2      	ldr	r2, [r2, r7]
 800092c:	4697      	mov	pc, r2
 800092e:	465b      	mov	r3, fp
 8000930:	4303      	orrs	r3, r0
 8000932:	4699      	mov	r9, r3
 8000934:	d000      	beq.n	8000938 <__aeabi_dmul+0xa0>
 8000936:	e087      	b.n	8000a48 <__aeabi_dmul+0x1b0>
 8000938:	2300      	movs	r3, #0
 800093a:	469b      	mov	fp, r3
 800093c:	3302      	adds	r3, #2
 800093e:	2708      	movs	r7, #8
 8000940:	9302      	str	r3, [sp, #8]
 8000942:	e7ce      	b.n	80008e2 <__aeabi_dmul+0x4a>
 8000944:	4642      	mov	r2, r8
 8000946:	9201      	str	r2, [sp, #4]
 8000948:	2802      	cmp	r0, #2
 800094a:	d067      	beq.n	8000a1c <__aeabi_dmul+0x184>
 800094c:	2803      	cmp	r0, #3
 800094e:	d100      	bne.n	8000952 <__aeabi_dmul+0xba>
 8000950:	e20e      	b.n	8000d70 <__aeabi_dmul+0x4d8>
 8000952:	2801      	cmp	r0, #1
 8000954:	d000      	beq.n	8000958 <__aeabi_dmul+0xc0>
 8000956:	e162      	b.n	8000c1e <__aeabi_dmul+0x386>
 8000958:	2300      	movs	r3, #0
 800095a:	2400      	movs	r4, #0
 800095c:	2200      	movs	r2, #0
 800095e:	4699      	mov	r9, r3
 8000960:	9901      	ldr	r1, [sp, #4]
 8000962:	4001      	ands	r1, r0
 8000964:	b2cd      	uxtb	r5, r1
 8000966:	2100      	movs	r1, #0
 8000968:	0312      	lsls	r2, r2, #12
 800096a:	0d0b      	lsrs	r3, r1, #20
 800096c:	0b12      	lsrs	r2, r2, #12
 800096e:	051b      	lsls	r3, r3, #20
 8000970:	4313      	orrs	r3, r2
 8000972:	4a43      	ldr	r2, [pc, #268]	; (8000a80 <__aeabi_dmul+0x1e8>)
 8000974:	0524      	lsls	r4, r4, #20
 8000976:	4013      	ands	r3, r2
 8000978:	431c      	orrs	r4, r3
 800097a:	0064      	lsls	r4, r4, #1
 800097c:	07ed      	lsls	r5, r5, #31
 800097e:	0864      	lsrs	r4, r4, #1
 8000980:	432c      	orrs	r4, r5
 8000982:	4648      	mov	r0, r9
 8000984:	0021      	movs	r1, r4
 8000986:	b007      	add	sp, #28
 8000988:	bc3c      	pop	{r2, r3, r4, r5}
 800098a:	4690      	mov	r8, r2
 800098c:	4699      	mov	r9, r3
 800098e:	46a2      	mov	sl, r4
 8000990:	46ab      	mov	fp, r5
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000994:	4303      	orrs	r3, r0
 8000996:	4699      	mov	r9, r3
 8000998:	d04f      	beq.n	8000a3a <__aeabi_dmul+0x1a2>
 800099a:	465b      	mov	r3, fp
 800099c:	2b00      	cmp	r3, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_dmul+0x10a>
 80009a0:	e189      	b.n	8000cb6 <__aeabi_dmul+0x41e>
 80009a2:	4658      	mov	r0, fp
 80009a4:	f000 fb0c 	bl	8000fc0 <__clzsi2>
 80009a8:	0003      	movs	r3, r0
 80009aa:	3b0b      	subs	r3, #11
 80009ac:	2b1c      	cmp	r3, #28
 80009ae:	dd00      	ble.n	80009b2 <__aeabi_dmul+0x11a>
 80009b0:	e17a      	b.n	8000ca8 <__aeabi_dmul+0x410>
 80009b2:	221d      	movs	r2, #29
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	003a      	movs	r2, r7
 80009b8:	0001      	movs	r1, r0
 80009ba:	465c      	mov	r4, fp
 80009bc:	40da      	lsrs	r2, r3
 80009be:	3908      	subs	r1, #8
 80009c0:	408c      	lsls	r4, r1
 80009c2:	0013      	movs	r3, r2
 80009c4:	408f      	lsls	r7, r1
 80009c6:	4323      	orrs	r3, r4
 80009c8:	469b      	mov	fp, r3
 80009ca:	46b9      	mov	r9, r7
 80009cc:	2300      	movs	r3, #0
 80009ce:	4e2d      	ldr	r6, [pc, #180]	; (8000a84 <__aeabi_dmul+0x1ec>)
 80009d0:	2700      	movs	r7, #0
 80009d2:	1a36      	subs	r6, r6, r0
 80009d4:	9302      	str	r3, [sp, #8]
 80009d6:	e784      	b.n	80008e2 <__aeabi_dmul+0x4a>
 80009d8:	4653      	mov	r3, sl
 80009da:	4323      	orrs	r3, r4
 80009dc:	d12a      	bne.n	8000a34 <__aeabi_dmul+0x19c>
 80009de:	2400      	movs	r4, #0
 80009e0:	2002      	movs	r0, #2
 80009e2:	e796      	b.n	8000912 <__aeabi_dmul+0x7a>
 80009e4:	4653      	mov	r3, sl
 80009e6:	4323      	orrs	r3, r4
 80009e8:	d020      	beq.n	8000a2c <__aeabi_dmul+0x194>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dmul+0x158>
 80009ee:	e157      	b.n	8000ca0 <__aeabi_dmul+0x408>
 80009f0:	0020      	movs	r0, r4
 80009f2:	f000 fae5 	bl	8000fc0 <__clzsi2>
 80009f6:	0003      	movs	r3, r0
 80009f8:	3b0b      	subs	r3, #11
 80009fa:	2b1c      	cmp	r3, #28
 80009fc:	dd00      	ble.n	8000a00 <__aeabi_dmul+0x168>
 80009fe:	e149      	b.n	8000c94 <__aeabi_dmul+0x3fc>
 8000a00:	211d      	movs	r1, #29
 8000a02:	1acb      	subs	r3, r1, r3
 8000a04:	4651      	mov	r1, sl
 8000a06:	0002      	movs	r2, r0
 8000a08:	40d9      	lsrs	r1, r3
 8000a0a:	4653      	mov	r3, sl
 8000a0c:	3a08      	subs	r2, #8
 8000a0e:	4094      	lsls	r4, r2
 8000a10:	4093      	lsls	r3, r2
 8000a12:	430c      	orrs	r4, r1
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <__aeabi_dmul+0x1ec>)
 8000a16:	1a12      	subs	r2, r2, r0
 8000a18:	2000      	movs	r0, #0
 8000a1a:	e77a      	b.n	8000912 <__aeabi_dmul+0x7a>
 8000a1c:	2501      	movs	r5, #1
 8000a1e:	9b01      	ldr	r3, [sp, #4]
 8000a20:	4c14      	ldr	r4, [pc, #80]	; (8000a74 <__aeabi_dmul+0x1dc>)
 8000a22:	401d      	ands	r5, r3
 8000a24:	2300      	movs	r3, #0
 8000a26:	2200      	movs	r2, #0
 8000a28:	4699      	mov	r9, r3
 8000a2a:	e79c      	b.n	8000966 <__aeabi_dmul+0xce>
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2001      	movs	r0, #1
 8000a32:	e76e      	b.n	8000912 <__aeabi_dmul+0x7a>
 8000a34:	4653      	mov	r3, sl
 8000a36:	2003      	movs	r0, #3
 8000a38:	e76b      	b.n	8000912 <__aeabi_dmul+0x7a>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	469b      	mov	fp, r3
 8000a3e:	3301      	adds	r3, #1
 8000a40:	2704      	movs	r7, #4
 8000a42:	2600      	movs	r6, #0
 8000a44:	9302      	str	r3, [sp, #8]
 8000a46:	e74c      	b.n	80008e2 <__aeabi_dmul+0x4a>
 8000a48:	2303      	movs	r3, #3
 8000a4a:	4681      	mov	r9, r0
 8000a4c:	270c      	movs	r7, #12
 8000a4e:	9302      	str	r3, [sp, #8]
 8000a50:	e747      	b.n	80008e2 <__aeabi_dmul+0x4a>
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	2300      	movs	r3, #0
 8000a56:	2500      	movs	r5, #0
 8000a58:	0312      	lsls	r2, r2, #12
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	4c05      	ldr	r4, [pc, #20]	; (8000a74 <__aeabi_dmul+0x1dc>)
 8000a5e:	e782      	b.n	8000966 <__aeabi_dmul+0xce>
 8000a60:	465c      	mov	r4, fp
 8000a62:	464b      	mov	r3, r9
 8000a64:	9802      	ldr	r0, [sp, #8]
 8000a66:	e76f      	b.n	8000948 <__aeabi_dmul+0xb0>
 8000a68:	465c      	mov	r4, fp
 8000a6a:	464b      	mov	r3, r9
 8000a6c:	9501      	str	r5, [sp, #4]
 8000a6e:	9802      	ldr	r0, [sp, #8]
 8000a70:	e76a      	b.n	8000948 <__aeabi_dmul+0xb0>
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	000007ff 	.word	0x000007ff
 8000a78:	fffffc01 	.word	0xfffffc01
 8000a7c:	080084e4 	.word	0x080084e4
 8000a80:	800fffff 	.word	0x800fffff
 8000a84:	fffffc0d 	.word	0xfffffc0d
 8000a88:	464a      	mov	r2, r9
 8000a8a:	4649      	mov	r1, r9
 8000a8c:	0c17      	lsrs	r7, r2, #16
 8000a8e:	0c1a      	lsrs	r2, r3, #16
 8000a90:	041b      	lsls	r3, r3, #16
 8000a92:	0c1b      	lsrs	r3, r3, #16
 8000a94:	0408      	lsls	r0, r1, #16
 8000a96:	0019      	movs	r1, r3
 8000a98:	0c00      	lsrs	r0, r0, #16
 8000a9a:	4341      	muls	r1, r0
 8000a9c:	0015      	movs	r5, r2
 8000a9e:	4688      	mov	r8, r1
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	437d      	muls	r5, r7
 8000aa4:	4379      	muls	r1, r7
 8000aa6:	9503      	str	r5, [sp, #12]
 8000aa8:	4689      	mov	r9, r1
 8000aaa:	0029      	movs	r1, r5
 8000aac:	0015      	movs	r5, r2
 8000aae:	4345      	muls	r5, r0
 8000ab0:	444d      	add	r5, r9
 8000ab2:	9502      	str	r5, [sp, #8]
 8000ab4:	4645      	mov	r5, r8
 8000ab6:	0c2d      	lsrs	r5, r5, #16
 8000ab8:	46aa      	mov	sl, r5
 8000aba:	9d02      	ldr	r5, [sp, #8]
 8000abc:	4455      	add	r5, sl
 8000abe:	45a9      	cmp	r9, r5
 8000ac0:	d906      	bls.n	8000ad0 <__aeabi_dmul+0x238>
 8000ac2:	468a      	mov	sl, r1
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	0249      	lsls	r1, r1, #9
 8000ac8:	4689      	mov	r9, r1
 8000aca:	44ca      	add	sl, r9
 8000acc:	4651      	mov	r1, sl
 8000ace:	9103      	str	r1, [sp, #12]
 8000ad0:	0c29      	lsrs	r1, r5, #16
 8000ad2:	9104      	str	r1, [sp, #16]
 8000ad4:	4641      	mov	r1, r8
 8000ad6:	0409      	lsls	r1, r1, #16
 8000ad8:	042d      	lsls	r5, r5, #16
 8000ada:	0c09      	lsrs	r1, r1, #16
 8000adc:	4688      	mov	r8, r1
 8000ade:	0029      	movs	r1, r5
 8000ae0:	0c25      	lsrs	r5, r4, #16
 8000ae2:	0424      	lsls	r4, r4, #16
 8000ae4:	4441      	add	r1, r8
 8000ae6:	0c24      	lsrs	r4, r4, #16
 8000ae8:	9105      	str	r1, [sp, #20]
 8000aea:	0021      	movs	r1, r4
 8000aec:	4341      	muls	r1, r0
 8000aee:	4688      	mov	r8, r1
 8000af0:	0021      	movs	r1, r4
 8000af2:	4379      	muls	r1, r7
 8000af4:	468a      	mov	sl, r1
 8000af6:	4368      	muls	r0, r5
 8000af8:	4641      	mov	r1, r8
 8000afa:	4450      	add	r0, sl
 8000afc:	4681      	mov	r9, r0
 8000afe:	0c08      	lsrs	r0, r1, #16
 8000b00:	4448      	add	r0, r9
 8000b02:	436f      	muls	r7, r5
 8000b04:	4582      	cmp	sl, r0
 8000b06:	d903      	bls.n	8000b10 <__aeabi_dmul+0x278>
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	0249      	lsls	r1, r1, #9
 8000b0c:	4689      	mov	r9, r1
 8000b0e:	444f      	add	r7, r9
 8000b10:	0c01      	lsrs	r1, r0, #16
 8000b12:	4689      	mov	r9, r1
 8000b14:	0039      	movs	r1, r7
 8000b16:	4449      	add	r1, r9
 8000b18:	9102      	str	r1, [sp, #8]
 8000b1a:	4641      	mov	r1, r8
 8000b1c:	040f      	lsls	r7, r1, #16
 8000b1e:	9904      	ldr	r1, [sp, #16]
 8000b20:	0c3f      	lsrs	r7, r7, #16
 8000b22:	4688      	mov	r8, r1
 8000b24:	0400      	lsls	r0, r0, #16
 8000b26:	19c0      	adds	r0, r0, r7
 8000b28:	4480      	add	r8, r0
 8000b2a:	4641      	mov	r1, r8
 8000b2c:	9104      	str	r1, [sp, #16]
 8000b2e:	4659      	mov	r1, fp
 8000b30:	0c0f      	lsrs	r7, r1, #16
 8000b32:	0409      	lsls	r1, r1, #16
 8000b34:	0c09      	lsrs	r1, r1, #16
 8000b36:	4688      	mov	r8, r1
 8000b38:	4359      	muls	r1, r3
 8000b3a:	468a      	mov	sl, r1
 8000b3c:	0039      	movs	r1, r7
 8000b3e:	4351      	muls	r1, r2
 8000b40:	4689      	mov	r9, r1
 8000b42:	4641      	mov	r1, r8
 8000b44:	434a      	muls	r2, r1
 8000b46:	4651      	mov	r1, sl
 8000b48:	0c09      	lsrs	r1, r1, #16
 8000b4a:	468b      	mov	fp, r1
 8000b4c:	437b      	muls	r3, r7
 8000b4e:	18d2      	adds	r2, r2, r3
 8000b50:	445a      	add	r2, fp
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d903      	bls.n	8000b5e <__aeabi_dmul+0x2c6>
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	025b      	lsls	r3, r3, #9
 8000b5a:	469b      	mov	fp, r3
 8000b5c:	44d9      	add	r9, fp
 8000b5e:	4651      	mov	r1, sl
 8000b60:	0409      	lsls	r1, r1, #16
 8000b62:	0c09      	lsrs	r1, r1, #16
 8000b64:	468a      	mov	sl, r1
 8000b66:	4641      	mov	r1, r8
 8000b68:	4361      	muls	r1, r4
 8000b6a:	437c      	muls	r4, r7
 8000b6c:	0c13      	lsrs	r3, r2, #16
 8000b6e:	0412      	lsls	r2, r2, #16
 8000b70:	444b      	add	r3, r9
 8000b72:	4452      	add	r2, sl
 8000b74:	46a1      	mov	r9, r4
 8000b76:	468a      	mov	sl, r1
 8000b78:	003c      	movs	r4, r7
 8000b7a:	4641      	mov	r1, r8
 8000b7c:	436c      	muls	r4, r5
 8000b7e:	434d      	muls	r5, r1
 8000b80:	4651      	mov	r1, sl
 8000b82:	444d      	add	r5, r9
 8000b84:	0c0f      	lsrs	r7, r1, #16
 8000b86:	197d      	adds	r5, r7, r5
 8000b88:	45a9      	cmp	r9, r5
 8000b8a:	d903      	bls.n	8000b94 <__aeabi_dmul+0x2fc>
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	0249      	lsls	r1, r1, #9
 8000b90:	4688      	mov	r8, r1
 8000b92:	4444      	add	r4, r8
 8000b94:	9f04      	ldr	r7, [sp, #16]
 8000b96:	9903      	ldr	r1, [sp, #12]
 8000b98:	46b8      	mov	r8, r7
 8000b9a:	4441      	add	r1, r8
 8000b9c:	468b      	mov	fp, r1
 8000b9e:	4583      	cmp	fp, r0
 8000ba0:	4180      	sbcs	r0, r0
 8000ba2:	4241      	negs	r1, r0
 8000ba4:	4688      	mov	r8, r1
 8000ba6:	4651      	mov	r1, sl
 8000ba8:	0408      	lsls	r0, r1, #16
 8000baa:	042f      	lsls	r7, r5, #16
 8000bac:	0c00      	lsrs	r0, r0, #16
 8000bae:	183f      	adds	r7, r7, r0
 8000bb0:	4658      	mov	r0, fp
 8000bb2:	9902      	ldr	r1, [sp, #8]
 8000bb4:	1810      	adds	r0, r2, r0
 8000bb6:	4689      	mov	r9, r1
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	4192      	sbcs	r2, r2
 8000bbc:	444f      	add	r7, r9
 8000bbe:	46ba      	mov	sl, r7
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	4693      	mov	fp, r2
 8000bc6:	44c2      	add	sl, r8
 8000bc8:	44d1      	add	r9, sl
 8000bca:	44cb      	add	fp, r9
 8000bcc:	428f      	cmp	r7, r1
 8000bce:	41bf      	sbcs	r7, r7
 8000bd0:	45c2      	cmp	sl, r8
 8000bd2:	4189      	sbcs	r1, r1
 8000bd4:	4599      	cmp	r9, r3
 8000bd6:	419b      	sbcs	r3, r3
 8000bd8:	4593      	cmp	fp, r2
 8000bda:	4192      	sbcs	r2, r2
 8000bdc:	427f      	negs	r7, r7
 8000bde:	4249      	negs	r1, r1
 8000be0:	0c2d      	lsrs	r5, r5, #16
 8000be2:	4252      	negs	r2, r2
 8000be4:	430f      	orrs	r7, r1
 8000be6:	425b      	negs	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	197f      	adds	r7, r7, r5
 8000bec:	18ff      	adds	r7, r7, r3
 8000bee:	465b      	mov	r3, fp
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	0ddb      	lsrs	r3, r3, #23
 8000bf4:	9a05      	ldr	r2, [sp, #20]
 8000bf6:	0264      	lsls	r4, r4, #9
 8000bf8:	431c      	orrs	r4, r3
 8000bfa:	0243      	lsls	r3, r0, #9
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	1e5d      	subs	r5, r3, #1
 8000c00:	41ab      	sbcs	r3, r5
 8000c02:	465a      	mov	r2, fp
 8000c04:	0dc0      	lsrs	r0, r0, #23
 8000c06:	4303      	orrs	r3, r0
 8000c08:	0252      	lsls	r2, r2, #9
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	01e2      	lsls	r2, r4, #7
 8000c0e:	d556      	bpl.n	8000cbe <__aeabi_dmul+0x426>
 8000c10:	2001      	movs	r0, #1
 8000c12:	085a      	lsrs	r2, r3, #1
 8000c14:	4003      	ands	r3, r0
 8000c16:	4313      	orrs	r3, r2
 8000c18:	07e2      	lsls	r2, r4, #31
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	0864      	lsrs	r4, r4, #1
 8000c1e:	485a      	ldr	r0, [pc, #360]	; (8000d88 <__aeabi_dmul+0x4f0>)
 8000c20:	4460      	add	r0, ip
 8000c22:	2800      	cmp	r0, #0
 8000c24:	dd4d      	ble.n	8000cc2 <__aeabi_dmul+0x42a>
 8000c26:	075a      	lsls	r2, r3, #29
 8000c28:	d009      	beq.n	8000c3e <__aeabi_dmul+0x3a6>
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	2a04      	cmp	r2, #4
 8000c30:	d005      	beq.n	8000c3e <__aeabi_dmul+0x3a6>
 8000c32:	1d1a      	adds	r2, r3, #4
 8000c34:	429a      	cmp	r2, r3
 8000c36:	419b      	sbcs	r3, r3
 8000c38:	425b      	negs	r3, r3
 8000c3a:	18e4      	adds	r4, r4, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	01e2      	lsls	r2, r4, #7
 8000c40:	d504      	bpl.n	8000c4c <__aeabi_dmul+0x3b4>
 8000c42:	2080      	movs	r0, #128	; 0x80
 8000c44:	4a51      	ldr	r2, [pc, #324]	; (8000d8c <__aeabi_dmul+0x4f4>)
 8000c46:	00c0      	lsls	r0, r0, #3
 8000c48:	4014      	ands	r4, r2
 8000c4a:	4460      	add	r0, ip
 8000c4c:	4a50      	ldr	r2, [pc, #320]	; (8000d90 <__aeabi_dmul+0x4f8>)
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	dd00      	ble.n	8000c54 <__aeabi_dmul+0x3bc>
 8000c52:	e6e3      	b.n	8000a1c <__aeabi_dmul+0x184>
 8000c54:	2501      	movs	r5, #1
 8000c56:	08db      	lsrs	r3, r3, #3
 8000c58:	0762      	lsls	r2, r4, #29
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	0264      	lsls	r4, r4, #9
 8000c5e:	9b01      	ldr	r3, [sp, #4]
 8000c60:	4691      	mov	r9, r2
 8000c62:	0b22      	lsrs	r2, r4, #12
 8000c64:	0544      	lsls	r4, r0, #21
 8000c66:	0d64      	lsrs	r4, r4, #21
 8000c68:	401d      	ands	r5, r3
 8000c6a:	e67c      	b.n	8000966 <__aeabi_dmul+0xce>
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	4659      	mov	r1, fp
 8000c70:	0312      	lsls	r2, r2, #12
 8000c72:	4211      	tst	r1, r2
 8000c74:	d008      	beq.n	8000c88 <__aeabi_dmul+0x3f0>
 8000c76:	4214      	tst	r4, r2
 8000c78:	d106      	bne.n	8000c88 <__aeabi_dmul+0x3f0>
 8000c7a:	4322      	orrs	r2, r4
 8000c7c:	0312      	lsls	r2, r2, #12
 8000c7e:	0b12      	lsrs	r2, r2, #12
 8000c80:	4645      	mov	r5, r8
 8000c82:	4699      	mov	r9, r3
 8000c84:	4c43      	ldr	r4, [pc, #268]	; (8000d94 <__aeabi_dmul+0x4fc>)
 8000c86:	e66e      	b.n	8000966 <__aeabi_dmul+0xce>
 8000c88:	465b      	mov	r3, fp
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	0312      	lsls	r2, r2, #12
 8000c8e:	0b12      	lsrs	r2, r2, #12
 8000c90:	4c40      	ldr	r4, [pc, #256]	; (8000d94 <__aeabi_dmul+0x4fc>)
 8000c92:	e668      	b.n	8000966 <__aeabi_dmul+0xce>
 8000c94:	0003      	movs	r3, r0
 8000c96:	4654      	mov	r4, sl
 8000c98:	3b28      	subs	r3, #40	; 0x28
 8000c9a:	409c      	lsls	r4, r3
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e6b9      	b.n	8000a14 <__aeabi_dmul+0x17c>
 8000ca0:	f000 f98e 	bl	8000fc0 <__clzsi2>
 8000ca4:	3020      	adds	r0, #32
 8000ca6:	e6a6      	b.n	80009f6 <__aeabi_dmul+0x15e>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	3b28      	subs	r3, #40	; 0x28
 8000cac:	409f      	lsls	r7, r3
 8000cae:	2300      	movs	r3, #0
 8000cb0:	46bb      	mov	fp, r7
 8000cb2:	4699      	mov	r9, r3
 8000cb4:	e68a      	b.n	80009cc <__aeabi_dmul+0x134>
 8000cb6:	f000 f983 	bl	8000fc0 <__clzsi2>
 8000cba:	3020      	adds	r0, #32
 8000cbc:	e674      	b.n	80009a8 <__aeabi_dmul+0x110>
 8000cbe:	46b4      	mov	ip, r6
 8000cc0:	e7ad      	b.n	8000c1e <__aeabi_dmul+0x386>
 8000cc2:	2501      	movs	r5, #1
 8000cc4:	1a2a      	subs	r2, r5, r0
 8000cc6:	2a38      	cmp	r2, #56	; 0x38
 8000cc8:	dd06      	ble.n	8000cd8 <__aeabi_dmul+0x440>
 8000cca:	9b01      	ldr	r3, [sp, #4]
 8000ccc:	2400      	movs	r4, #0
 8000cce:	401d      	ands	r5, r3
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4699      	mov	r9, r3
 8000cd6:	e646      	b.n	8000966 <__aeabi_dmul+0xce>
 8000cd8:	2a1f      	cmp	r2, #31
 8000cda:	dc21      	bgt.n	8000d20 <__aeabi_dmul+0x488>
 8000cdc:	2520      	movs	r5, #32
 8000cde:	0020      	movs	r0, r4
 8000ce0:	1aad      	subs	r5, r5, r2
 8000ce2:	001e      	movs	r6, r3
 8000ce4:	40ab      	lsls	r3, r5
 8000ce6:	40a8      	lsls	r0, r5
 8000ce8:	40d6      	lsrs	r6, r2
 8000cea:	1e5d      	subs	r5, r3, #1
 8000cec:	41ab      	sbcs	r3, r5
 8000cee:	4330      	orrs	r0, r6
 8000cf0:	4318      	orrs	r0, r3
 8000cf2:	40d4      	lsrs	r4, r2
 8000cf4:	0743      	lsls	r3, r0, #29
 8000cf6:	d009      	beq.n	8000d0c <__aeabi_dmul+0x474>
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	4003      	ands	r3, r0
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d005      	beq.n	8000d0c <__aeabi_dmul+0x474>
 8000d00:	0003      	movs	r3, r0
 8000d02:	1d18      	adds	r0, r3, #4
 8000d04:	4298      	cmp	r0, r3
 8000d06:	419b      	sbcs	r3, r3
 8000d08:	425b      	negs	r3, r3
 8000d0a:	18e4      	adds	r4, r4, r3
 8000d0c:	0223      	lsls	r3, r4, #8
 8000d0e:	d521      	bpl.n	8000d54 <__aeabi_dmul+0x4bc>
 8000d10:	2501      	movs	r5, #1
 8000d12:	9b01      	ldr	r3, [sp, #4]
 8000d14:	2401      	movs	r4, #1
 8000d16:	401d      	ands	r5, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4699      	mov	r9, r3
 8000d1e:	e622      	b.n	8000966 <__aeabi_dmul+0xce>
 8000d20:	251f      	movs	r5, #31
 8000d22:	0021      	movs	r1, r4
 8000d24:	426d      	negs	r5, r5
 8000d26:	1a28      	subs	r0, r5, r0
 8000d28:	40c1      	lsrs	r1, r0
 8000d2a:	0008      	movs	r0, r1
 8000d2c:	2a20      	cmp	r2, #32
 8000d2e:	d01d      	beq.n	8000d6c <__aeabi_dmul+0x4d4>
 8000d30:	355f      	adds	r5, #95	; 0x5f
 8000d32:	1aaa      	subs	r2, r5, r2
 8000d34:	4094      	lsls	r4, r2
 8000d36:	4323      	orrs	r3, r4
 8000d38:	1e5c      	subs	r4, r3, #1
 8000d3a:	41a3      	sbcs	r3, r4
 8000d3c:	2507      	movs	r5, #7
 8000d3e:	4303      	orrs	r3, r0
 8000d40:	401d      	ands	r5, r3
 8000d42:	2200      	movs	r2, #0
 8000d44:	2d00      	cmp	r5, #0
 8000d46:	d009      	beq.n	8000d5c <__aeabi_dmul+0x4c4>
 8000d48:	220f      	movs	r2, #15
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	0018      	movs	r0, r3
 8000d50:	2a04      	cmp	r2, #4
 8000d52:	d1d6      	bne.n	8000d02 <__aeabi_dmul+0x46a>
 8000d54:	0003      	movs	r3, r0
 8000d56:	0765      	lsls	r5, r4, #29
 8000d58:	0264      	lsls	r4, r4, #9
 8000d5a:	0b22      	lsrs	r2, r4, #12
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	432b      	orrs	r3, r5
 8000d60:	2501      	movs	r5, #1
 8000d62:	4699      	mov	r9, r3
 8000d64:	9b01      	ldr	r3, [sp, #4]
 8000d66:	2400      	movs	r4, #0
 8000d68:	401d      	ands	r5, r3
 8000d6a:	e5fc      	b.n	8000966 <__aeabi_dmul+0xce>
 8000d6c:	2400      	movs	r4, #0
 8000d6e:	e7e2      	b.n	8000d36 <__aeabi_dmul+0x49e>
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	2501      	movs	r5, #1
 8000d74:	0312      	lsls	r2, r2, #12
 8000d76:	4322      	orrs	r2, r4
 8000d78:	9901      	ldr	r1, [sp, #4]
 8000d7a:	0312      	lsls	r2, r2, #12
 8000d7c:	0b12      	lsrs	r2, r2, #12
 8000d7e:	400d      	ands	r5, r1
 8000d80:	4699      	mov	r9, r3
 8000d82:	4c04      	ldr	r4, [pc, #16]	; (8000d94 <__aeabi_dmul+0x4fc>)
 8000d84:	e5ef      	b.n	8000966 <__aeabi_dmul+0xce>
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	000003ff 	.word	0x000003ff
 8000d8c:	feffffff 	.word	0xfeffffff
 8000d90:	000007fe 	.word	0x000007fe
 8000d94:	000007ff 	.word	0x000007ff

08000d98 <__aeabi_ui2d>:
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	1e04      	subs	r4, r0, #0
 8000d9c:	d028      	beq.n	8000df0 <__aeabi_ui2d+0x58>
 8000d9e:	f000 f90f 	bl	8000fc0 <__clzsi2>
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <__aeabi_ui2d+0x60>)
 8000da4:	4a15      	ldr	r2, [pc, #84]	; (8000dfc <__aeabi_ui2d+0x64>)
 8000da6:	1a1b      	subs	r3, r3, r0
 8000da8:	1ad2      	subs	r2, r2, r3
 8000daa:	2a1f      	cmp	r2, #31
 8000dac:	dd15      	ble.n	8000dda <__aeabi_ui2d+0x42>
 8000dae:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <__aeabi_ui2d+0x68>)
 8000db0:	1ad2      	subs	r2, r2, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	2200      	movs	r2, #0
 8000db6:	0324      	lsls	r4, r4, #12
 8000db8:	055b      	lsls	r3, r3, #21
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	0d5b      	lsrs	r3, r3, #21
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	0010      	movs	r0, r2
 8000dc2:	0324      	lsls	r4, r4, #12
 8000dc4:	0d0a      	lsrs	r2, r1, #20
 8000dc6:	0b24      	lsrs	r4, r4, #12
 8000dc8:	0512      	lsls	r2, r2, #20
 8000dca:	4322      	orrs	r2, r4
 8000dcc:	4c0d      	ldr	r4, [pc, #52]	; (8000e04 <__aeabi_ui2d+0x6c>)
 8000dce:	051b      	lsls	r3, r3, #20
 8000dd0:	4022      	ands	r2, r4
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	0859      	lsrs	r1, r3, #1
 8000dd8:	bd10      	pop	{r4, pc}
 8000dda:	0021      	movs	r1, r4
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	000a      	movs	r2, r1
 8000de0:	210b      	movs	r1, #11
 8000de2:	1a08      	subs	r0, r1, r0
 8000de4:	40c4      	lsrs	r4, r0
 8000de6:	055b      	lsls	r3, r3, #21
 8000de8:	0324      	lsls	r4, r4, #12
 8000dea:	0b24      	lsrs	r4, r4, #12
 8000dec:	0d5b      	lsrs	r3, r3, #21
 8000dee:	e7e6      	b.n	8000dbe <__aeabi_ui2d+0x26>
 8000df0:	2300      	movs	r3, #0
 8000df2:	2400      	movs	r4, #0
 8000df4:	2200      	movs	r2, #0
 8000df6:	e7e2      	b.n	8000dbe <__aeabi_ui2d+0x26>
 8000df8:	0000041e 	.word	0x0000041e
 8000dfc:	00000433 	.word	0x00000433
 8000e00:	00000413 	.word	0x00000413
 8000e04:	800fffff 	.word	0x800fffff

08000e08 <__aeabi_f2d>:
 8000e08:	0041      	lsls	r1, r0, #1
 8000e0a:	0e09      	lsrs	r1, r1, #24
 8000e0c:	1c4b      	adds	r3, r1, #1
 8000e0e:	b570      	push	{r4, r5, r6, lr}
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	0246      	lsls	r6, r0, #9
 8000e14:	0a75      	lsrs	r5, r6, #9
 8000e16:	0fc4      	lsrs	r4, r0, #31
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	dd14      	ble.n	8000e46 <__aeabi_f2d+0x3e>
 8000e1c:	23e0      	movs	r3, #224	; 0xe0
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	076d      	lsls	r5, r5, #29
 8000e22:	0b36      	lsrs	r6, r6, #12
 8000e24:	18cb      	adds	r3, r1, r3
 8000e26:	2100      	movs	r1, #0
 8000e28:	0d0a      	lsrs	r2, r1, #20
 8000e2a:	0028      	movs	r0, r5
 8000e2c:	0512      	lsls	r2, r2, #20
 8000e2e:	4d1c      	ldr	r5, [pc, #112]	; (8000ea0 <__aeabi_f2d+0x98>)
 8000e30:	4332      	orrs	r2, r6
 8000e32:	055b      	lsls	r3, r3, #21
 8000e34:	402a      	ands	r2, r5
 8000e36:	085b      	lsrs	r3, r3, #1
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	07e4      	lsls	r4, r4, #31
 8000e3e:	085b      	lsrs	r3, r3, #1
 8000e40:	4323      	orrs	r3, r4
 8000e42:	0019      	movs	r1, r3
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
 8000e46:	2900      	cmp	r1, #0
 8000e48:	d114      	bne.n	8000e74 <__aeabi_f2d+0x6c>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d01e      	beq.n	8000e8c <__aeabi_f2d+0x84>
 8000e4e:	0028      	movs	r0, r5
 8000e50:	f000 f8b6 	bl	8000fc0 <__clzsi2>
 8000e54:	280a      	cmp	r0, #10
 8000e56:	dc1c      	bgt.n	8000e92 <__aeabi_f2d+0x8a>
 8000e58:	230b      	movs	r3, #11
 8000e5a:	002a      	movs	r2, r5
 8000e5c:	1a1b      	subs	r3, r3, r0
 8000e5e:	40da      	lsrs	r2, r3
 8000e60:	0003      	movs	r3, r0
 8000e62:	3315      	adds	r3, #21
 8000e64:	409d      	lsls	r5, r3
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <__aeabi_f2d+0x9c>)
 8000e68:	0312      	lsls	r2, r2, #12
 8000e6a:	1a1b      	subs	r3, r3, r0
 8000e6c:	055b      	lsls	r3, r3, #21
 8000e6e:	0b16      	lsrs	r6, r2, #12
 8000e70:	0d5b      	lsrs	r3, r3, #21
 8000e72:	e7d8      	b.n	8000e26 <__aeabi_f2d+0x1e>
 8000e74:	2d00      	cmp	r5, #0
 8000e76:	d006      	beq.n	8000e86 <__aeabi_f2d+0x7e>
 8000e78:	0b32      	lsrs	r2, r6, #12
 8000e7a:	2680      	movs	r6, #128	; 0x80
 8000e7c:	0336      	lsls	r6, r6, #12
 8000e7e:	076d      	lsls	r5, r5, #29
 8000e80:	4316      	orrs	r6, r2
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <__aeabi_f2d+0xa0>)
 8000e84:	e7cf      	b.n	8000e26 <__aeabi_f2d+0x1e>
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <__aeabi_f2d+0xa0>)
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e7cc      	b.n	8000e26 <__aeabi_f2d+0x1e>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	2600      	movs	r6, #0
 8000e90:	e7c9      	b.n	8000e26 <__aeabi_f2d+0x1e>
 8000e92:	0003      	movs	r3, r0
 8000e94:	002a      	movs	r2, r5
 8000e96:	3b0b      	subs	r3, #11
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	e7e3      	b.n	8000e66 <__aeabi_f2d+0x5e>
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	800fffff 	.word	0x800fffff
 8000ea4:	00000389 	.word	0x00000389
 8000ea8:	000007ff 	.word	0x000007ff

08000eac <__aeabi_d2f>:
 8000eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eae:	004c      	lsls	r4, r1, #1
 8000eb0:	0d64      	lsrs	r4, r4, #21
 8000eb2:	030b      	lsls	r3, r1, #12
 8000eb4:	1c62      	adds	r2, r4, #1
 8000eb6:	0f45      	lsrs	r5, r0, #29
 8000eb8:	0a5b      	lsrs	r3, r3, #9
 8000eba:	0552      	lsls	r2, r2, #21
 8000ebc:	432b      	orrs	r3, r5
 8000ebe:	0fc9      	lsrs	r1, r1, #31
 8000ec0:	00c5      	lsls	r5, r0, #3
 8000ec2:	0d52      	lsrs	r2, r2, #21
 8000ec4:	2a01      	cmp	r2, #1
 8000ec6:	dd28      	ble.n	8000f1a <__aeabi_d2f+0x6e>
 8000ec8:	4a3a      	ldr	r2, [pc, #232]	; (8000fb4 <__aeabi_d2f+0x108>)
 8000eca:	18a6      	adds	r6, r4, r2
 8000ecc:	2efe      	cmp	r6, #254	; 0xfe
 8000ece:	dc1b      	bgt.n	8000f08 <__aeabi_d2f+0x5c>
 8000ed0:	2e00      	cmp	r6, #0
 8000ed2:	dd3e      	ble.n	8000f52 <__aeabi_d2f+0xa6>
 8000ed4:	0180      	lsls	r0, r0, #6
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	1e50      	subs	r0, r2, #1
 8000eda:	4182      	sbcs	r2, r0
 8000edc:	0f6d      	lsrs	r5, r5, #29
 8000ede:	432a      	orrs	r2, r5
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	075a      	lsls	r2, r3, #29
 8000ee6:	d004      	beq.n	8000ef2 <__aeabi_d2f+0x46>
 8000ee8:	220f      	movs	r2, #15
 8000eea:	401a      	ands	r2, r3
 8000eec:	2a04      	cmp	r2, #4
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_d2f+0x46>
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	04d2      	lsls	r2, r2, #19
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	d05a      	beq.n	8000fb0 <__aeabi_d2f+0x104>
 8000efa:	3601      	adds	r6, #1
 8000efc:	2eff      	cmp	r6, #255	; 0xff
 8000efe:	d003      	beq.n	8000f08 <__aeabi_d2f+0x5c>
 8000f00:	019b      	lsls	r3, r3, #6
 8000f02:	0a5b      	lsrs	r3, r3, #9
 8000f04:	b2f4      	uxtb	r4, r6
 8000f06:	e001      	b.n	8000f0c <__aeabi_d2f+0x60>
 8000f08:	24ff      	movs	r4, #255	; 0xff
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	0258      	lsls	r0, r3, #9
 8000f0e:	05e4      	lsls	r4, r4, #23
 8000f10:	0a40      	lsrs	r0, r0, #9
 8000f12:	07c9      	lsls	r1, r1, #31
 8000f14:	4320      	orrs	r0, r4
 8000f16:	4308      	orrs	r0, r1
 8000f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1a:	2c00      	cmp	r4, #0
 8000f1c:	d007      	beq.n	8000f2e <__aeabi_d2f+0x82>
 8000f1e:	431d      	orrs	r5, r3
 8000f20:	d0f2      	beq.n	8000f08 <__aeabi_d2f+0x5c>
 8000f22:	2080      	movs	r0, #128	; 0x80
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	0480      	lsls	r0, r0, #18
 8000f28:	4303      	orrs	r3, r0
 8000f2a:	26ff      	movs	r6, #255	; 0xff
 8000f2c:	e7da      	b.n	8000ee4 <__aeabi_d2f+0x38>
 8000f2e:	432b      	orrs	r3, r5
 8000f30:	d003      	beq.n	8000f3a <__aeabi_d2f+0x8e>
 8000f32:	2305      	movs	r3, #5
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	2cff      	cmp	r4, #255	; 0xff
 8000f38:	d003      	beq.n	8000f42 <__aeabi_d2f+0x96>
 8000f3a:	025b      	lsls	r3, r3, #9
 8000f3c:	0a5b      	lsrs	r3, r3, #9
 8000f3e:	b2e4      	uxtb	r4, r4
 8000f40:	e7e4      	b.n	8000f0c <__aeabi_d2f+0x60>
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d032      	beq.n	8000fac <__aeabi_d2f+0x100>
 8000f46:	2080      	movs	r0, #128	; 0x80
 8000f48:	03c0      	lsls	r0, r0, #15
 8000f4a:	4303      	orrs	r3, r0
 8000f4c:	025b      	lsls	r3, r3, #9
 8000f4e:	0a5b      	lsrs	r3, r3, #9
 8000f50:	e7dc      	b.n	8000f0c <__aeabi_d2f+0x60>
 8000f52:	0032      	movs	r2, r6
 8000f54:	3217      	adds	r2, #23
 8000f56:	db14      	blt.n	8000f82 <__aeabi_d2f+0xd6>
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	271e      	movs	r7, #30
 8000f5c:	0412      	lsls	r2, r2, #16
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	1bbf      	subs	r7, r7, r6
 8000f62:	2f1f      	cmp	r7, #31
 8000f64:	dc0f      	bgt.n	8000f86 <__aeabi_d2f+0xda>
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <__aeabi_d2f+0x10c>)
 8000f68:	4694      	mov	ip, r2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	002a      	movs	r2, r5
 8000f6e:	40a5      	lsls	r5, r4
 8000f70:	002e      	movs	r6, r5
 8000f72:	40a3      	lsls	r3, r4
 8000f74:	1e75      	subs	r5, r6, #1
 8000f76:	41ae      	sbcs	r6, r5
 8000f78:	40fa      	lsrs	r2, r7
 8000f7a:	4333      	orrs	r3, r6
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	2600      	movs	r6, #0
 8000f80:	e7b0      	b.n	8000ee4 <__aeabi_d2f+0x38>
 8000f82:	2400      	movs	r4, #0
 8000f84:	e7d5      	b.n	8000f32 <__aeabi_d2f+0x86>
 8000f86:	2202      	movs	r2, #2
 8000f88:	4252      	negs	r2, r2
 8000f8a:	1b96      	subs	r6, r2, r6
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	40f2      	lsrs	r2, r6
 8000f90:	2f20      	cmp	r7, #32
 8000f92:	d009      	beq.n	8000fa8 <__aeabi_d2f+0xfc>
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <__aeabi_d2f+0x110>)
 8000f96:	4684      	mov	ip, r0
 8000f98:	4464      	add	r4, ip
 8000f9a:	40a3      	lsls	r3, r4
 8000f9c:	432b      	orrs	r3, r5
 8000f9e:	1e5d      	subs	r5, r3, #1
 8000fa0:	41ab      	sbcs	r3, r5
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	e79d      	b.n	8000ee4 <__aeabi_d2f+0x38>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e7f7      	b.n	8000f9c <__aeabi_d2f+0xf0>
 8000fac:	2300      	movs	r3, #0
 8000fae:	e7ad      	b.n	8000f0c <__aeabi_d2f+0x60>
 8000fb0:	0034      	movs	r4, r6
 8000fb2:	e7bf      	b.n	8000f34 <__aeabi_d2f+0x88>
 8000fb4:	fffffc80 	.word	0xfffffc80
 8000fb8:	fffffc82 	.word	0xfffffc82
 8000fbc:	fffffca2 	.word	0xfffffca2

08000fc0 <__clzsi2>:
 8000fc0:	211c      	movs	r1, #28
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	041b      	lsls	r3, r3, #16
 8000fc6:	4298      	cmp	r0, r3
 8000fc8:	d301      	bcc.n	8000fce <__clzsi2+0xe>
 8000fca:	0c00      	lsrs	r0, r0, #16
 8000fcc:	3910      	subs	r1, #16
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	4298      	cmp	r0, r3
 8000fd2:	d301      	bcc.n	8000fd8 <__clzsi2+0x18>
 8000fd4:	0a00      	lsrs	r0, r0, #8
 8000fd6:	3908      	subs	r1, #8
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	d301      	bcc.n	8000fe2 <__clzsi2+0x22>
 8000fde:	0900      	lsrs	r0, r0, #4
 8000fe0:	3904      	subs	r1, #4
 8000fe2:	a202      	add	r2, pc, #8	; (adr r2, 8000fec <__clzsi2+0x2c>)
 8000fe4:	5c10      	ldrb	r0, [r2, r0]
 8000fe6:	1840      	adds	r0, r0, r1
 8000fe8:	4770      	bx	lr
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	02020304 	.word	0x02020304
 8000ff0:	01010101 	.word	0x01010101
	...

08000ffc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <HAL_Init+0x24>)
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x24>)
 8001004:	6812      	ldr	r2, [r2, #0]
 8001006:	2110      	movs	r1, #16
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800100c:	2000      	movs	r0, #0
 800100e:	f006 fa21 	bl	8007454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001012:	f005 ffbd 	bl	8006f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  uwTick++;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_IncTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	4b02      	ldr	r3, [pc, #8]	; (8001038 <HAL_IncTick+0x14>)
 8001030:	601a      	str	r2, [r3, #0]
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20001a14 	.word	0x20001a14

0800103c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b02      	ldr	r3, [pc, #8]	; (800104c <HAL_GetTick+0x10>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	20001a14 	.word	0x20001a14

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff fff0 	bl	800103c <HAL_GetTick>
 800105c:	0003      	movs	r3, r0
 800105e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	d002      	beq.n	8001070 <HAL_Delay+0x20>
  {
     wait++;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	f7ff ffe3 	bl	800103c <HAL_GetTick>
 8001076:	0002      	movs	r2, r0
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1ad2      	subs	r2, r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3f7      	bcc.n	8001072 <HAL_Delay+0x22>
  {
  }
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b004      	add	sp, #16
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001094:	230f      	movs	r3, #15
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e124      	b.n	80012f4 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10a      	bne.n	80010c8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2240      	movs	r2, #64	; 0x40
 80010bc:	2100      	movs	r1, #0
 80010be:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	0018      	movs	r0, r3
 80010c4:	f005 ff9c 	bl	8007000 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	2210      	movs	r2, #16
 80010ce:	4013      	ands	r3, r2
 80010d0:	d000      	beq.n	80010d4 <HAL_ADC_Init+0x48>
 80010d2:	e102      	b.n	80012da <HAL_ADC_Init+0x24e>
 80010d4:	230f      	movs	r3, #15
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d000      	beq.n	80010e0 <HAL_ADC_Init+0x54>
 80010de:	e0fc      	b.n	80012da <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2204      	movs	r2, #4
 80010e8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80010ea:	d000      	beq.n	80010ee <HAL_ADC_Init+0x62>
 80010ec:	e0f5      	b.n	80012da <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a82      	ldr	r2, [pc, #520]	; (80012fc <HAL_ADC_Init+0x270>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	2202      	movs	r2, #2
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2203      	movs	r2, #3
 8001106:	4013      	ands	r3, r2
 8001108:	2b01      	cmp	r3, #1
 800110a:	d112      	bne.n	8001132 <HAL_ADC_Init+0xa6>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2201      	movs	r2, #1
 8001114:	4013      	ands	r3, r2
 8001116:	2b01      	cmp	r3, #1
 8001118:	d009      	beq.n	800112e <HAL_ADC_Init+0xa2>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	401a      	ands	r2, r3
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	429a      	cmp	r2, r3
 800112c:	d101      	bne.n	8001132 <HAL_ADC_Init+0xa6>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_ADC_Init+0xa8>
 8001132:	2300      	movs	r3, #0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d116      	bne.n	8001166 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	68d2      	ldr	r2, [r2, #12]
 8001142:	2118      	movs	r1, #24
 8001144:	438a      	bics	r2, r1
 8001146:	0011      	movs	r1, r2
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6892      	ldr	r2, [r2, #8]
 800114c:	430a      	orrs	r2, r1
 800114e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	6912      	ldr	r2, [r2, #16]
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	0891      	lsrs	r1, r2, #2
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6852      	ldr	r2, [r2, #4]
 8001162:	430a      	orrs	r2, r1
 8001164:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	68d2      	ldr	r2, [r2, #12]
 8001170:	4963      	ldr	r1, [pc, #396]	; (8001300 <HAL_ADC_Init+0x274>)
 8001172:	400a      	ands	r2, r1
 8001174:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001182:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800118a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001190:	2b01      	cmp	r3, #1
 8001192:	d002      	beq.n	800119a <HAL_ADC_Init+0x10e>
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	015b      	lsls	r3, r3, #5
 8001198:	e000      	b.n	800119c <HAL_ADC_Init+0x110>
 800119a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800119c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80011a2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d101      	bne.n	80011b0 <HAL_ADC_Init+0x124>
 80011ac:	2304      	movs	r3, #4
 80011ae:	e000      	b.n	80011b2 <HAL_ADC_Init+0x126>
 80011b0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 80011b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80011ba:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	4313      	orrs	r3, r2
 80011c0:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d115      	bne.n	80011f6 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d105      	bne.n	80011de <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	4313      	orrs	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	e00b      	b.n	80011f6 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	2220      	movs	r2, #32
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ee:	2201      	movs	r2, #1
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011fa:	23c2      	movs	r3, #194	; 0xc2
 80011fc:	33ff      	adds	r3, #255	; 0xff
 80011fe:	429a      	cmp	r2, r3
 8001200:	d007      	beq.n	8001212 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800120a:	4313      	orrs	r3, r2
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	4313      	orrs	r3, r2
 8001210:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	68d1      	ldr	r1, [r2, #12]
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	430a      	orrs	r2, r1
 8001220:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	055b      	lsls	r3, r3, #21
 800122a:	429a      	cmp	r2, r3
 800122c:	d01b      	beq.n	8001266 <HAL_ADC_Init+0x1da>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001232:	2b01      	cmp	r3, #1
 8001234:	d017      	beq.n	8001266 <HAL_ADC_Init+0x1da>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123a:	2b02      	cmp	r3, #2
 800123c:	d013      	beq.n	8001266 <HAL_ADC_Init+0x1da>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001242:	2b03      	cmp	r3, #3
 8001244:	d00f      	beq.n	8001266 <HAL_ADC_Init+0x1da>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124a:	2b04      	cmp	r3, #4
 800124c:	d00b      	beq.n	8001266 <HAL_ADC_Init+0x1da>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001252:	2b05      	cmp	r3, #5
 8001254:	d007      	beq.n	8001266 <HAL_ADC_Init+0x1da>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125a:	2b06      	cmp	r3, #6
 800125c:	d003      	beq.n	8001266 <HAL_ADC_Init+0x1da>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001262:	2b07      	cmp	r3, #7
 8001264:	d112      	bne.n	800128c <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	6952      	ldr	r2, [r2, #20]
 8001270:	2107      	movs	r1, #7
 8001272:	438a      	bics	r2, r1
 8001274:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	6951      	ldr	r1, [r2, #20]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001284:	2007      	movs	r0, #7
 8001286:	4002      	ands	r2, r0
 8001288:	430a      	orrs	r2, r1
 800128a:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <HAL_ADC_Init+0x278>)
 8001294:	401a      	ands	r2, r3
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	429a      	cmp	r2, r3
 800129a:	d10b      	bne.n	80012b4 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	2203      	movs	r2, #3
 80012a8:	4393      	bics	r3, r2
 80012aa:	2201      	movs	r2, #1
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012b2:	e01c      	b.n	80012ee <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b8:	2212      	movs	r2, #18
 80012ba:	4393      	bics	r3, r2
 80012bc:	2210      	movs	r2, #16
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c8:	2201      	movs	r2, #1
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 80012d0:	230f      	movs	r3, #15
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012d8:	e009      	b.n	80012ee <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	2210      	movs	r2, #16
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 80012e6:	230f      	movs	r3, #15
 80012e8:	18fb      	adds	r3, r7, r3
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012ee:	230f      	movs	r3, #15
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	781b      	ldrb	r3, [r3, #0]
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b004      	add	sp, #16
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	fffffefd 	.word	0xfffffefd
 8001300:	fffe0219 	.word	0xfffe0219
 8001304:	833fffe7 	.word	0x833fffe7

08001308 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	230f      	movs	r3, #15
 8001312:	18fb      	adds	r3, r7, r3
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2204      	movs	r2, #4
 8001320:	4013      	ands	r3, r2
 8001322:	d138      	bne.n	8001396 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2240      	movs	r2, #64	; 0x40
 8001328:	5c9b      	ldrb	r3, [r3, r2]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_ADC_Start+0x2a>
 800132e:	2302      	movs	r3, #2
 8001330:	e038      	b.n	80013a4 <HAL_ADC_Start+0x9c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	2101      	movs	r1, #1
 8001338:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d007      	beq.n	8001352 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001342:	230f      	movs	r3, #15
 8001344:	18fc      	adds	r4, r7, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0018      	movs	r0, r3
 800134a:	f000 fa1d 	bl	8001788 <ADC_Enable>
 800134e:	0003      	movs	r3, r0
 8001350:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001352:	230f      	movs	r3, #15
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d120      	bne.n	800139e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_ADC_Start+0xa4>)
 8001362:	4013      	ands	r3, r2
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	0052      	lsls	r2, r2, #1
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2240      	movs	r2, #64	; 0x40
 8001378:	2100      	movs	r1, #0
 800137a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	221c      	movs	r2, #28
 8001382:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	6892      	ldr	r2, [r2, #8]
 800138e:	2104      	movs	r1, #4
 8001390:	430a      	orrs	r2, r1
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	e003      	b.n	800139e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001396:	230f      	movs	r3, #15
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	2202      	movs	r2, #2
 800139c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800139e:	230f      	movs	r3, #15
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	781b      	ldrb	r3, [r3, #0]
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b005      	add	sp, #20
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	fffff0fe 	.word	0xfffff0fe

080013b0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	230f      	movs	r3, #15
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	5c9b      	ldrb	r3, [r3, r2]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_Stop+0x1e>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e02c      	b.n	8001428 <HAL_ADC_Stop+0x78>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2240      	movs	r2, #64	; 0x40
 80013d2:	2101      	movs	r1, #1
 80013d4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80013d6:	230f      	movs	r3, #15
 80013d8:	18fc      	adds	r4, r7, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	0018      	movs	r0, r3
 80013de:	f000 fab8 	bl	8001952 <ADC_ConversionStop>
 80013e2:	0003      	movs	r3, r0
 80013e4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80013e6:	230f      	movs	r3, #15
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d114      	bne.n	800141a <HAL_ADC_Stop+0x6a>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80013f0:	230f      	movs	r3, #15
 80013f2:	18fc      	adds	r4, r7, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	0018      	movs	r0, r3
 80013f8:	f000 fa42 	bl	8001880 <ADC_Disable>
 80013fc:	0003      	movs	r3, r0
 80013fe:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001400:	230f      	movs	r3, #15
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d107      	bne.n	800141a <HAL_ADC_Stop+0x6a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_ADC_Stop+0x80>)
 8001410:	4013      	ands	r3, r2
 8001412:	2201      	movs	r2, #1
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2240      	movs	r2, #64	; 0x40
 800141e:	2100      	movs	r1, #0
 8001420:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001422:	230f      	movs	r3, #15
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b005      	add	sp, #20
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	fffffefe 	.word	0xfffffefe

08001434 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b08      	cmp	r3, #8
 8001444:	d102      	bne.n	800144c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001446:	2308      	movs	r3, #8
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	e013      	b.n	8001474 <HAL_ADC_PollForConversion+0x40>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	d00b      	beq.n	8001470 <HAL_ADC_PollForConversion+0x3c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145c:	2220      	movs	r2, #32
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2240      	movs	r2, #64	; 0x40
 8001468:	2100      	movs	r1, #0
 800146a:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e06b      	b.n	8001548 <HAL_ADC_PollForConversion+0x114>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001470:	230c      	movs	r3, #12
 8001472:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001474:	f7ff fde2 	bl	800103c <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800147c:	e019      	b.n	80014b2 <HAL_ADC_PollForConversion+0x7e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	d016      	beq.n	80014b2 <HAL_ADC_PollForConversion+0x7e>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_ADC_PollForConversion+0x66>
 800148a:	f7ff fdd7 	bl	800103c <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1ad2      	subs	r2, r2, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d90b      	bls.n	80014b2 <HAL_ADC_PollForConversion+0x7e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	2204      	movs	r2, #4
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2240      	movs	r2, #64	; 0x40
 80014aa:	2100      	movs	r1, #0
 80014ac:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e04a      	b.n	8001548 <HAL_ADC_PollForConversion+0x114>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	4013      	ands	r3, r2
 80014bc:	d0df      	beq.n	800147e <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	23c0      	movs	r3, #192	; 0xc0
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	4013      	ands	r3, r2
 80014d8:	d12d      	bne.n	8001536 <HAL_ADC_PollForConversion+0x102>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d129      	bne.n	8001536 <HAL_ADC_PollForConversion+0x102>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2208      	movs	r2, #8
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d122      	bne.n	8001536 <HAL_ADC_PollForConversion+0x102>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2204      	movs	r2, #4
 80014f8:	4013      	ands	r3, r2
 80014fa:	d110      	bne.n	800151e <HAL_ADC_PollForConversion+0xea>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	6852      	ldr	r2, [r2, #4]
 8001506:	210c      	movs	r1, #12
 8001508:	438a      	bics	r2, r1
 800150a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_ADC_PollForConversion+0x11c>)
 8001512:	4013      	ands	r3, r2
 8001514:	2201      	movs	r2, #1
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	645a      	str	r2, [r3, #68]	; 0x44
 800151c:	e00b      	b.n	8001536 <HAL_ADC_PollForConversion+0x102>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	2220      	movs	r2, #32
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	2201      	movs	r2, #1
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d103      	bne.n	8001546 <HAL_ADC_PollForConversion+0x112>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b004      	add	sp, #16
 800154e:	bd80      	pop	{r7, pc}
 8001550:	fffffefe 	.word	0xfffffefe

08001554 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001562:	0018      	movs	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	b002      	add	sp, #8
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001576:	230f      	movs	r3, #15
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	055b      	lsls	r3, r3, #21
 800158a:	429a      	cmp	r2, r3
 800158c:	d011      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x46>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001592:	2b01      	cmp	r3, #1
 8001594:	d00d      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x46>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	2b02      	cmp	r3, #2
 800159c:	d009      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x46>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d005      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x46>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d001      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x46>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2240      	movs	r2, #64	; 0x40
 80015b6:	5c9b      	ldrb	r3, [r3, r2]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x54>
 80015bc:	2302      	movs	r3, #2
 80015be:	e0d1      	b.n	8001764 <HAL_ADC_ConfigChannel+0x1f8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2240      	movs	r2, #64	; 0x40
 80015c4:	2101      	movs	r1, #1
 80015c6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2204      	movs	r2, #4
 80015d0:	4013      	ands	r3, r2
 80015d2:	d000      	beq.n	80015d6 <HAL_ADC_ConfigChannel+0x6a>
 80015d4:	e0b5      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1d6>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a64      	ldr	r2, [pc, #400]	; (800176c <HAL_ADC_ConfigChannel+0x200>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d100      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x76>
 80015e0:	e083      	b.n	80016ea <HAL_ADC_ConfigChannel+0x17e>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	2001      	movs	r0, #1
 80015f2:	4090      	lsls	r0, r2
 80015f4:	0002      	movs	r2, r0
 80015f6:	430a      	orrs	r2, r1
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	055b      	lsls	r3, r3, #21
 8001602:	429a      	cmp	r2, r3
 8001604:	d037      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x10a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160a:	2b01      	cmp	r3, #1
 800160c:	d033      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x10a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001612:	2b02      	cmp	r3, #2
 8001614:	d02f      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x10a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161a:	2b03      	cmp	r3, #3
 800161c:	d02b      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x10a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001622:	2b04      	cmp	r3, #4
 8001624:	d027      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x10a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162a:	2b05      	cmp	r3, #5
 800162c:	d023      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x10a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001632:	2b06      	cmp	r3, #6
 8001634:	d01f      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x10a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163a:	2b07      	cmp	r3, #7
 800163c:	d01b      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x10a>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	2107      	movs	r1, #7
 800164a:	400b      	ands	r3, r1
 800164c:	429a      	cmp	r2, r3
 800164e:	d012      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x10a>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	6952      	ldr	r2, [r2, #20]
 800165a:	2107      	movs	r1, #7
 800165c:	438a      	bics	r2, r1
 800165e:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	6951      	ldr	r1, [r2, #20]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	6892      	ldr	r2, [r2, #8]
 800166e:	2007      	movs	r0, #7
 8001670:	4002      	ands	r2, r0
 8001672:	430a      	orrs	r2, r1
 8001674:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b10      	cmp	r3, #16
 800167c:	d007      	beq.n	800168e <HAL_ADC_ConfigChannel+0x122>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b11      	cmp	r3, #17
 8001684:	d003      	beq.n	800168e <HAL_ADC_ConfigChannel+0x122>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b12      	cmp	r3, #18
 800168c:	d163      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800168e:	4a38      	ldr	r2, [pc, #224]	; (8001770 <HAL_ADC_ConfigChannel+0x204>)
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <HAL_ADC_ConfigChannel+0x204>)
 8001692:	6819      	ldr	r1, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b10      	cmp	r3, #16
 800169a:	d009      	beq.n	80016b0 <HAL_ADC_ConfigChannel+0x144>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b11      	cmp	r3, #17
 80016a2:	d102      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x13e>
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	03db      	lsls	r3, r3, #15
 80016a8:	e004      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x148>
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	045b      	lsls	r3, r3, #17
 80016ae:	e001      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x148>
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	041b      	lsls	r3, r3, #16
 80016b4:	430b      	orrs	r3, r1
 80016b6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b10      	cmp	r3, #16
 80016be:	d14a      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x1ea>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_ADC_ConfigChannel+0x208>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	492c      	ldr	r1, [pc, #176]	; (8001778 <HAL_ADC_ConfigChannel+0x20c>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7fe fd26 	bl	8000118 <__udivsi3>
 80016cc:	0003      	movs	r3, r0
 80016ce:	001a      	movs	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	189b      	adds	r3, r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016da:	e002      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x176>
          {
            wait_loop_index--;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	3b01      	subs	r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f9      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x170>
 80016e8:	e035      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1ea>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	2001      	movs	r0, #1
 80016fa:	4090      	lsls	r0, r2
 80016fc:	0002      	movs	r2, r0
 80016fe:	43d2      	mvns	r2, r2
 8001700:	400a      	ands	r2, r1
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b10      	cmp	r3, #16
 800170a:	d007      	beq.n	800171c <HAL_ADC_ConfigChannel+0x1b0>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b11      	cmp	r3, #17
 8001712:	d003      	beq.n	800171c <HAL_ADC_ConfigChannel+0x1b0>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b12      	cmp	r3, #18
 800171a:	d11c      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <HAL_ADC_ConfigChannel+0x204>)
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_ADC_ConfigChannel+0x204>)
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b10      	cmp	r3, #16
 8001728:	d007      	beq.n	800173a <HAL_ADC_ConfigChannel+0x1ce>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b11      	cmp	r3, #17
 8001730:	d101      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x1ca>
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_ADC_ConfigChannel+0x210>)
 8001734:	e002      	b.n	800173c <HAL_ADC_ConfigChannel+0x1d0>
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_ADC_ConfigChannel+0x214>)
 8001738:	e000      	b.n	800173c <HAL_ADC_ConfigChannel+0x1d0>
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_ADC_ConfigChannel+0x218>)
 800173c:	400b      	ands	r3, r1
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e009      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1ea>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	2220      	movs	r2, #32
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800174e:	230f      	movs	r3, #15
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2240      	movs	r2, #64	; 0x40
 800175a:	2100      	movs	r1, #0
 800175c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800175e:	230f      	movs	r3, #15
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	781b      	ldrb	r3, [r3, #0]
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b004      	add	sp, #16
 800176a:	bd80      	pop	{r7, pc}
 800176c:	00001001 	.word	0x00001001
 8001770:	40012708 	.word	0x40012708
 8001774:	20000064 	.word	0x20000064
 8001778:	000f4240 	.word	0x000f4240
 800177c:	ffbfffff 	.word	0xffbfffff
 8001780:	feffffff 	.word	0xfeffffff
 8001784:	ff7fffff 	.word	0xff7fffff

08001788 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2203      	movs	r2, #3
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d112      	bne.n	80017cc <ADC_Enable+0x44>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2201      	movs	r2, #1
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d009      	beq.n	80017c8 <ADC_Enable+0x40>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	401a      	ands	r2, r3
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d101      	bne.n	80017cc <ADC_Enable+0x44>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <ADC_Enable+0x46>
 80017cc:	2300      	movs	r3, #0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d14b      	bne.n	800186a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a26      	ldr	r2, [pc, #152]	; (8001874 <ADC_Enable+0xec>)
 80017da:	4013      	ands	r3, r2
 80017dc:	d00d      	beq.n	80017fa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	2210      	movs	r2, #16
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ee:	2201      	movs	r2, #1
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e038      	b.n	800186c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	6892      	ldr	r2, [r2, #8]
 8001804:	2101      	movs	r1, #1
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <ADC_Enable+0xf0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	491b      	ldr	r1, [pc, #108]	; (800187c <ADC_Enable+0xf4>)
 8001810:	0018      	movs	r0, r3
 8001812:	f7fe fc81 	bl	8000118 <__udivsi3>
 8001816:	0003      	movs	r3, r0
 8001818:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800181a:	e002      	b.n	8001822 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	3b01      	subs	r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f9      	bne.n	800181c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001828:	f7ff fc08 	bl	800103c <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001830:	e014      	b.n	800185c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001832:	f7ff fc03 	bl	800103c <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d90d      	bls.n	800185c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	2210      	movs	r2, #16
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001850:	2201      	movs	r2, #1
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e007      	b.n	800186c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2201      	movs	r2, #1
 8001864:	4013      	ands	r3, r2
 8001866:	2b01      	cmp	r3, #1
 8001868:	d1e3      	bne.n	8001832 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	b004      	add	sp, #16
 8001872:	bd80      	pop	{r7, pc}
 8001874:	80000017 	.word	0x80000017
 8001878:	20000064 	.word	0x20000064
 800187c:	000f4240 	.word	0x000f4240

08001880 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2203      	movs	r2, #3
 8001894:	4013      	ands	r3, r2
 8001896:	2b01      	cmp	r3, #1
 8001898:	d112      	bne.n	80018c0 <ADC_Disable+0x40>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d009      	beq.n	80018bc <ADC_Disable+0x3c>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	401a      	ands	r2, r3
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d101      	bne.n	80018c0 <ADC_Disable+0x40>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <ADC_Disable+0x42>
 80018c0:	2300      	movs	r3, #0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d040      	beq.n	8001948 <ADC_Disable+0xc8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2205      	movs	r2, #5
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d110      	bne.n	80018f6 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	6892      	ldr	r2, [r2, #8]
 80018de:	2102      	movs	r1, #2
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2203      	movs	r2, #3
 80018ea:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018ec:	f7ff fba6 	bl	800103c <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018f4:	e022      	b.n	800193c <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	2210      	movs	r2, #16
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001906:	2201      	movs	r2, #1
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e01b      	b.n	800194a <ADC_Disable+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001912:	f7ff fb93 	bl	800103c <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d90d      	bls.n	800193c <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	2210      	movs	r2, #16
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001930:	2201      	movs	r2, #1
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e006      	b.n	800194a <ADC_Disable+0xca>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2201      	movs	r2, #1
 8001944:	4013      	ands	r3, r2
 8001946:	d1e4      	bne.n	8001912 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b004      	add	sp, #16
 8001950:	bd80      	pop	{r7, pc}

08001952 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2204      	movs	r2, #4
 8001966:	4013      	ands	r3, r2
 8001968:	d033      	beq.n	80019d2 <ADC_ConversionStop+0x80>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2204      	movs	r2, #4
 8001972:	4013      	ands	r3, r2
 8001974:	d00d      	beq.n	8001992 <ADC_ConversionStop+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2202      	movs	r2, #2
 800197e:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001980:	d107      	bne.n	8001992 <ADC_ConversionStop+0x40>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	6892      	ldr	r2, [r2, #8]
 800198c:	2110      	movs	r1, #16
 800198e:	430a      	orrs	r2, r1
 8001990:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001992:	f7ff fb53 	bl	800103c <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800199a:	e014      	b.n	80019c6 <ADC_ConversionStop+0x74>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800199c:	f7ff fb4e 	bl	800103c <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d90d      	bls.n	80019c6 <ADC_ConversionStop+0x74>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	2210      	movs	r2, #16
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ba:	2201      	movs	r2, #1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e006      	b.n	80019d4 <ADC_ConversionStop+0x82>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2204      	movs	r2, #4
 80019ce:	4013      	ands	r3, r2
 80019d0:	d1e4      	bne.n	800199c <ADC_ConversionStop+0x4a>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b004      	add	sp, #16
 80019da:	bd80      	pop	{r7, pc}

080019dc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	0002      	movs	r2, r0
 80019e4:	1dfb      	adds	r3, r7, #7
 80019e6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <NVIC_EnableIRQ+0x28>)
 80019ea:	1dfa      	adds	r2, r7, #7
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	0011      	movs	r1, r2
 80019f0:	221f      	movs	r2, #31
 80019f2:	400a      	ands	r2, r1
 80019f4:	2101      	movs	r1, #1
 80019f6:	4091      	lsls	r1, r2
 80019f8:	000a      	movs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b002      	add	sp, #8
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	0002      	movs	r2, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a1c:	d932      	bls.n	8001a84 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a1e:	4c2f      	ldr	r4, [pc, #188]	; (8001adc <NVIC_SetPriority+0xd4>)
 8001a20:	1dfb      	adds	r3, r7, #7
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	001a      	movs	r2, r3
 8001a26:	230f      	movs	r3, #15
 8001a28:	4013      	ands	r3, r2
 8001a2a:	3b08      	subs	r3, #8
 8001a2c:	0899      	lsrs	r1, r3, #2
 8001a2e:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <NVIC_SetPriority+0xd4>)
 8001a30:	1dfb      	adds	r3, r7, #7
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	0018      	movs	r0, r3
 8001a36:	230f      	movs	r3, #15
 8001a38:	4003      	ands	r3, r0
 8001a3a:	3b08      	subs	r3, #8
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3306      	adds	r3, #6
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	18d3      	adds	r3, r2, r3
 8001a44:	3304      	adds	r3, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	1dfa      	adds	r2, r7, #7
 8001a4a:	7812      	ldrb	r2, [r2, #0]
 8001a4c:	0010      	movs	r0, r2
 8001a4e:	2203      	movs	r2, #3
 8001a50:	4002      	ands	r2, r0
 8001a52:	00d2      	lsls	r2, r2, #3
 8001a54:	20ff      	movs	r0, #255	; 0xff
 8001a56:	4090      	lsls	r0, r2
 8001a58:	0002      	movs	r2, r0
 8001a5a:	43d2      	mvns	r2, r2
 8001a5c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	20ff      	movs	r0, #255	; 0xff
 8001a64:	4018      	ands	r0, r3
 8001a66:	1dfb      	adds	r3, r7, #7
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	001d      	movs	r5, r3
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	402b      	ands	r3, r5
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4098      	lsls	r0, r3
 8001a74:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a76:	431a      	orrs	r2, r3
 8001a78:	1d8b      	adds	r3, r1, #6
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	18e3      	adds	r3, r4, r3
 8001a7e:	3304      	adds	r3, #4
 8001a80:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a82:	e027      	b.n	8001ad4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a84:	4c16      	ldr	r4, [pc, #88]	; (8001ae0 <NVIC_SetPriority+0xd8>)
 8001a86:	1dfb      	adds	r3, r7, #7
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	4914      	ldr	r1, [pc, #80]	; (8001ae0 <NVIC_SetPriority+0xd8>)
 8001a90:	1dfa      	adds	r2, r7, #7
 8001a92:	7812      	ldrb	r2, [r2, #0]
 8001a94:	b252      	sxtb	r2, r2
 8001a96:	0892      	lsrs	r2, r2, #2
 8001a98:	32c0      	adds	r2, #192	; 0xc0
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	5852      	ldr	r2, [r2, r1]
 8001a9e:	1df9      	adds	r1, r7, #7
 8001aa0:	7809      	ldrb	r1, [r1, #0]
 8001aa2:	0008      	movs	r0, r1
 8001aa4:	2103      	movs	r1, #3
 8001aa6:	4001      	ands	r1, r0
 8001aa8:	00c9      	lsls	r1, r1, #3
 8001aaa:	20ff      	movs	r0, #255	; 0xff
 8001aac:	4088      	lsls	r0, r1
 8001aae:	0001      	movs	r1, r0
 8001ab0:	43c9      	mvns	r1, r1
 8001ab2:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	0192      	lsls	r2, r2, #6
 8001ab8:	20ff      	movs	r0, #255	; 0xff
 8001aba:	4010      	ands	r0, r2
 8001abc:	1dfa      	adds	r2, r7, #7
 8001abe:	7812      	ldrb	r2, [r2, #0]
 8001ac0:	0015      	movs	r5, r2
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	402a      	ands	r2, r5
 8001ac6:	00d2      	lsls	r2, r2, #3
 8001ac8:	4090      	lsls	r0, r2
 8001aca:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001acc:	430a      	orrs	r2, r1
 8001ace:	33c0      	adds	r3, #192	; 0xc0
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	511a      	str	r2, [r3, r4]
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bdb0      	pop	{r4, r5, r7, pc}
 8001adc:	e000ed00 	.word	0xe000ed00
 8001ae0:	e000e100 	.word	0xe000e100

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <SysTick_Config+0x40>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e010      	b.n	8001b1c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <SysTick_Config+0x44>)
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	3a01      	subs	r2, #1
 8001b00:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	2301      	movs	r3, #1
 8001b04:	425b      	negs	r3, r3
 8001b06:	2103      	movs	r1, #3
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff ff7d 	bl	8001a08 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <SysTick_Config+0x44>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x44>)
 8001b16:	2207      	movs	r2, #7
 8001b18:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	00ffffff 	.word	0x00ffffff
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	230f      	movs	r3, #15
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	1c02      	adds	r2, r0, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	230f      	movs	r3, #15
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	0011      	movs	r1, r2
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f7ff ff5c 	bl	8001a08 <NVIC_SetPriority>
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b004      	add	sp, #16
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	0002      	movs	r2, r0
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f7ff ff36 	bl	80019dc <NVIC_EnableIRQ>
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7ff ffae 	bl	8001ae4 <SysTick_Config>
 8001b88:	0003      	movs	r3, r0
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d106      	bne.n	8001bb0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	2104      	movs	r1, #4
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001bae:	e005      	b.n	8001bbc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001bb2:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	438a      	bics	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2221      	movs	r2, #33	; 0x21
 8001bdc:	5c9b      	ldrb	r3, [r3, r2]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d007      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2204      	movs	r2, #4
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bea:	230f      	movs	r3, #15
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e028      	b.n	8001c46 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	210e      	movs	r1, #14
 8001c00:	438a      	bics	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	2101      	movs	r1, #1
 8001c10:	438a      	bics	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	4091      	lsls	r1, r2
 8001c20:	000a      	movs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2221      	movs	r2, #33	; 0x21
 8001c28:	2101      	movs	r1, #1
 8001c2a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	2100      	movs	r1, #0
 8001c32:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	0010      	movs	r0, r2
 8001c44:	4798      	blx	r3
    } 
  }
  return status;
 8001c46:	230f      	movs	r3, #15
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	781b      	ldrb	r3, [r3, #0]
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b004      	add	sp, #16
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001c6a:	e155      	b.n	8001f18 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4091      	lsls	r1, r2
 8001c76:	000a      	movs	r2, r1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d100      	bne.n	8001c84 <HAL_GPIO_Init+0x30>
 8001c82:	e146      	b.n	8001f12 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x40>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b12      	cmp	r3, #18
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	58d3      	ldr	r3, [r2, r3]
 8001ca0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	409a      	lsls	r2, r3
 8001cae:	0013      	movs	r3, r2
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2107      	movs	r1, #7
 8001cc0:	400b      	ands	r3, r1
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	6939      	ldr	r1, [r7, #16]
 8001cda:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	0013      	movs	r3, r2
 8001cec:	43da      	mvns	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	409a      	lsls	r2, r3
 8001d02:	0013      	movs	r3, r2
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d00b      	beq.n	8001d30 <HAL_GPIO_Init+0xdc>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d007      	beq.n	8001d30 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d24:	2b11      	cmp	r3, #17
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b12      	cmp	r3, #18
 8001d2e:	d130      	bne.n	8001d92 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	0013      	movs	r3, r2
 8001d40:	43da      	mvns	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	409a      	lsls	r2, r3
 8001d52:	0013      	movs	r3, r2
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001d66:	2201      	movs	r2, #1
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	0013      	movs	r3, r2
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
 8001d84:	0013      	movs	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	0013      	movs	r3, r2
 8001da2:	43da      	mvns	r2, r3
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	409a      	lsls	r2, r3
 8001db4:	0013      	movs	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	055b      	lsls	r3, r3, #21
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <HAL_GPIO_Init+0x17c>
 8001dce:	e0a0      	b.n	8001f12 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd0:	4b57      	ldr	r3, [pc, #348]	; (8001f30 <HAL_GPIO_Init+0x2dc>)
 8001dd2:	4a57      	ldr	r2, [pc, #348]	; (8001f30 <HAL_GPIO_Init+0x2dc>)
 8001dd4:	6992      	ldr	r2, [r2, #24]
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	619a      	str	r2, [r3, #24]
 8001ddc:	4b54      	ldr	r3, [pc, #336]	; (8001f30 <HAL_GPIO_Init+0x2dc>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2201      	movs	r2, #1
 8001de2:	4013      	ands	r3, r2
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001de8:	4a52      	ldr	r2, [pc, #328]	; (8001f34 <HAL_GPIO_Init+0x2e0>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	589b      	ldr	r3, [r3, r2]
 8001df4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	409a      	lsls	r2, r3
 8001e02:	0013      	movs	r3, r2
 8001e04:	43da      	mvns	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	2390      	movs	r3, #144	; 0x90
 8001e10:	05db      	lsls	r3, r3, #23
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d019      	beq.n	8001e4a <HAL_GPIO_Init+0x1f6>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_GPIO_Init+0x2e4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x1f2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a46      	ldr	r2, [pc, #280]	; (8001f3c <HAL_GPIO_Init+0x2e8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00d      	beq.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <HAL_GPIO_Init+0x1ea>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a44      	ldr	r2, [pc, #272]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_GPIO_Init+0x1e6>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x1f8>
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x1f8>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x1f8>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x1f8>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x1f8>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	2103      	movs	r1, #3
 8001e50:	400a      	ands	r2, r1
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e5c:	4935      	ldr	r1, [pc, #212]	; (8001f34 <HAL_GPIO_Init+0x2e0>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6a:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_GPIO_Init+0x2f4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43da      	mvns	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	025b      	lsls	r3, r3, #9
 8001e82:	4013      	ands	r3, r2
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e8e:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_GPIO_Init+0x2f4>)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_GPIO_Init+0x2f4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	029b      	lsls	r3, r3, #10
 8001eac:	4013      	ands	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001eb8:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_GPIO_Init+0x2f4>)
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_GPIO_Init+0x2f4>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	035b      	lsls	r3, r3, #13
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_GPIO_Init+0x2f4>)
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_GPIO_Init+0x2f4>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	039b      	lsls	r3, r3, #14
 8001f00:	4013      	ands	r3, r2
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_GPIO_Init+0x2f4>)
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	40da      	lsrs	r2, r3
 8001f20:	1e13      	subs	r3, r2, #0
 8001f22:	d000      	beq.n	8001f26 <HAL_GPIO_Init+0x2d2>
 8001f24:	e6a2      	b.n	8001c6c <HAL_GPIO_Init+0x18>
  } 
}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b006      	add	sp, #24
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000
 8001f38:	48000400 	.word	0x48000400
 8001f3c:	48000800 	.word	0x48000800
 8001f40:	48000c00 	.word	0x48000c00
 8001f44:	48001000 	.word	0x48001000
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	000a      	movs	r2, r1
 8001f56:	1cbb      	adds	r3, r7, #2
 8001f58:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	1cba      	adds	r2, r7, #2
 8001f60:	8812      	ldrh	r2, [r2, #0]
 8001f62:	4013      	ands	r3, r2
 8001f64:	d004      	beq.n	8001f70 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f66:	230f      	movs	r3, #15
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e003      	b.n	8001f78 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f70:	230f      	movs	r3, #15
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f78:	230f      	movs	r3, #15
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	781b      	ldrb	r3, [r3, #0]
  }
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b004      	add	sp, #16
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	0008      	movs	r0, r1
 8001f90:	0011      	movs	r1, r2
 8001f92:	1cbb      	adds	r3, r7, #2
 8001f94:	1c02      	adds	r2, r0, #0
 8001f96:	801a      	strh	r2, [r3, #0]
 8001f98:	1c7b      	adds	r3, r7, #1
 8001f9a:	1c0a      	adds	r2, r1, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f9e:	1c7b      	adds	r3, r7, #1
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa6:	1cbb      	adds	r3, r7, #2
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fae:	e003      	b.n	8001fb8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb0:	1cbb      	adds	r3, r7, #2
 8001fb2:	881a      	ldrh	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d100      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x18>
 8001fd6:	e08d      	b.n	80020f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fd8:	4bc5      	ldr	r3, [pc, #788]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	220c      	movs	r2, #12
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d00e      	beq.n	8002002 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fe4:	4bc2      	ldr	r3, [pc, #776]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	220c      	movs	r2, #12
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d116      	bne.n	800201e <HAL_RCC_OscConfig+0x5e>
 8001ff0:	4bbf      	ldr	r3, [pc, #764]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	23c0      	movs	r3, #192	; 0xc0
 8001ff6:	025b      	lsls	r3, r3, #9
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	025b      	lsls	r3, r3, #9
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d10d      	bne.n	800201e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002002:	4bbb      	ldr	r3, [pc, #748]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	029b      	lsls	r3, r3, #10
 800200a:	4013      	ands	r3, r2
 800200c:	d100      	bne.n	8002010 <HAL_RCC_OscConfig+0x50>
 800200e:	e070      	b.n	80020f2 <HAL_RCC_OscConfig+0x132>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d000      	beq.n	800201a <HAL_RCC_OscConfig+0x5a>
 8002018:	e06b      	b.n	80020f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e327      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_RCC_OscConfig+0x76>
 8002026:	4bb2      	ldr	r3, [pc, #712]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002028:	4ab1      	ldr	r2, [pc, #708]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	0249      	lsls	r1, r1, #9
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e02f      	b.n	8002096 <HAL_RCC_OscConfig+0xd6>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x98>
 800203e:	4bac      	ldr	r3, [pc, #688]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002040:	4aab      	ldr	r2, [pc, #684]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	49ab      	ldr	r1, [pc, #684]	; (80022f4 <HAL_RCC_OscConfig+0x334>)
 8002046:	400a      	ands	r2, r1
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	4ba9      	ldr	r3, [pc, #676]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 800204c:	4aa8      	ldr	r2, [pc, #672]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	49a9      	ldr	r1, [pc, #676]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002052:	400a      	ands	r2, r1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e01e      	b.n	8002096 <HAL_RCC_OscConfig+0xd6>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d10e      	bne.n	800207e <HAL_RCC_OscConfig+0xbe>
 8002060:	4ba3      	ldr	r3, [pc, #652]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002062:	4aa3      	ldr	r2, [pc, #652]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	2180      	movs	r1, #128	; 0x80
 8002068:	02c9      	lsls	r1, r1, #11
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	4ba0      	ldr	r3, [pc, #640]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002070:	4a9f      	ldr	r2, [pc, #636]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0249      	lsls	r1, r1, #9
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e00b      	b.n	8002096 <HAL_RCC_OscConfig+0xd6>
 800207e:	4b9c      	ldr	r3, [pc, #624]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002080:	4a9b      	ldr	r2, [pc, #620]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	499b      	ldr	r1, [pc, #620]	; (80022f4 <HAL_RCC_OscConfig+0x334>)
 8002086:	400a      	ands	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	4b99      	ldr	r3, [pc, #612]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 800208c:	4a98      	ldr	r2, [pc, #608]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	4999      	ldr	r1, [pc, #612]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002092:	400a      	ands	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d014      	beq.n	80020c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe ffcd 	bl	800103c <HAL_GetTick>
 80020a2:	0003      	movs	r3, r0
 80020a4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a8:	f7fe ffc8 	bl	800103c <HAL_GetTick>
 80020ac:	0002      	movs	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e2d9      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b8d      	ldr	r3, [pc, #564]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	029b      	lsls	r3, r3, #10
 80020c2:	4013      	ands	r3, r2
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xe8>
 80020c6:	e015      	b.n	80020f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe ffb8 	bl	800103c <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d2:	f7fe ffb3 	bl	800103c <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e2c4      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e4:	4b82      	ldr	r3, [pc, #520]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	029b      	lsls	r3, r3, #10
 80020ec:	4013      	ands	r3, r2
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x112>
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2202      	movs	r2, #2
 80020fa:	4013      	ands	r3, r2
 80020fc:	d100      	bne.n	8002100 <HAL_RCC_OscConfig+0x140>
 80020fe:	e06c      	b.n	80021da <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002100:	4b7b      	ldr	r3, [pc, #492]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	220c      	movs	r2, #12
 8002106:	4013      	ands	r3, r2
 8002108:	d00e      	beq.n	8002128 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800210a:	4b79      	ldr	r3, [pc, #484]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	220c      	movs	r2, #12
 8002110:	4013      	ands	r3, r2
 8002112:	2b08      	cmp	r3, #8
 8002114:	d11f      	bne.n	8002156 <HAL_RCC_OscConfig+0x196>
 8002116:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	025b      	lsls	r3, r3, #9
 800211e:	401a      	ands	r2, r3
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	429a      	cmp	r2, r3
 8002126:	d116      	bne.n	8002156 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002128:	4b71      	ldr	r3, [pc, #452]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2202      	movs	r2, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x17e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e297      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4a6c      	ldr	r2, [pc, #432]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002140:	4b6b      	ldr	r3, [pc, #428]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	21f8      	movs	r1, #248	; 0xf8
 8002146:	438b      	bics	r3, r1
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	430b      	orrs	r3, r1
 8002152:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002154:	e041      	b.n	80021da <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d024      	beq.n	80021a8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215e:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002160:	4a63      	ldr	r2, [pc, #396]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	430a      	orrs	r2, r1
 8002168:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7fe ff67 	bl	800103c <HAL_GetTick>
 800216e:	0003      	movs	r3, r0
 8002170:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002174:	f7fe ff62 	bl	800103c <HAL_GetTick>
 8002178:	0002      	movs	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e273      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d0f1      	beq.n	8002174 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002192:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	21f8      	movs	r1, #248	; 0xf8
 8002198:	438b      	bics	r3, r1
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	430b      	orrs	r3, r1
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e018      	b.n	80021da <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a8:	4b51      	ldr	r3, [pc, #324]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 80021aa:	4a51      	ldr	r2, [pc, #324]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	2101      	movs	r1, #1
 80021b0:	438a      	bics	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe ff42 	bl	800103c <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021be:	f7fe ff3d 	bl	800103c <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e24e      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d0:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2202      	movs	r2, #2
 80021d6:	4013      	ands	r3, r2
 80021d8:	d1f1      	bne.n	80021be <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2208      	movs	r2, #8
 80021e0:	4013      	ands	r3, r2
 80021e2:	d036      	beq.n	8002252 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d019      	beq.n	8002220 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ec:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 80021ee:	4a40      	ldr	r2, [pc, #256]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 80021f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021f2:	2101      	movs	r1, #1
 80021f4:	430a      	orrs	r2, r1
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7fe ff20 	bl	800103c <HAL_GetTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002202:	f7fe ff1b 	bl	800103c <HAL_GetTick>
 8002206:	0002      	movs	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e22c      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2202      	movs	r2, #2
 800221a:	4013      	ands	r3, r2
 800221c:	d0f1      	beq.n	8002202 <HAL_RCC_OscConfig+0x242>
 800221e:	e018      	b.n	8002252 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002220:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002222:	4a33      	ldr	r2, [pc, #204]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002224:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002226:	2101      	movs	r1, #1
 8002228:	438a      	bics	r2, r1
 800222a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7fe ff06 	bl	800103c <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002236:	f7fe ff01 	bl	800103c <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e212      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	2202      	movs	r2, #2
 800224e:	4013      	ands	r3, r2
 8002250:	d1f1      	bne.n	8002236 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2204      	movs	r2, #4
 8002258:	4013      	ands	r3, r2
 800225a:	d100      	bne.n	800225e <HAL_RCC_OscConfig+0x29e>
 800225c:	e0b6      	b.n	80023cc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225e:	2317      	movs	r3, #23
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	055b      	lsls	r3, r3, #21
 800226e:	4013      	ands	r3, r2
 8002270:	d111      	bne.n	8002296 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002274:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002276:	69d2      	ldr	r2, [r2, #28]
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	0549      	lsls	r1, r1, #21
 800227c:	430a      	orrs	r2, r1
 800227e:	61da      	str	r2, [r3, #28]
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	055b      	lsls	r3, r3, #21
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800228e:	2317      	movs	r3, #23
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_RCC_OscConfig+0x33c>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	d11a      	bne.n	80022d8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_RCC_OscConfig+0x33c>)
 80022a4:	4a15      	ldr	r2, [pc, #84]	; (80022fc <HAL_RCC_OscConfig+0x33c>)
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	0049      	lsls	r1, r1, #1
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b0:	f7fe fec4 	bl	800103c <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ba:	f7fe febf 	bl	800103c <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b64      	cmp	r3, #100	; 0x64
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1d0      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_OscConfig+0x33c>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4013      	ands	r3, r2
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10f      	bne.n	8002300 <HAL_RCC_OscConfig+0x340>
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 80022e2:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <HAL_RCC_OscConfig+0x330>)
 80022e4:	6a12      	ldr	r2, [r2, #32]
 80022e6:	2101      	movs	r1, #1
 80022e8:	430a      	orrs	r2, r1
 80022ea:	621a      	str	r2, [r3, #32]
 80022ec:	e036      	b.n	800235c <HAL_RCC_OscConfig+0x39c>
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	40021000 	.word	0x40021000
 80022f4:	fffeffff 	.word	0xfffeffff
 80022f8:	fffbffff 	.word	0xfffbffff
 80022fc:	40007000 	.word	0x40007000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0x362>
 8002308:	4bc9      	ldr	r3, [pc, #804]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800230a:	4ac9      	ldr	r2, [pc, #804]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800230c:	6a12      	ldr	r2, [r2, #32]
 800230e:	2101      	movs	r1, #1
 8002310:	438a      	bics	r2, r1
 8002312:	621a      	str	r2, [r3, #32]
 8002314:	4bc6      	ldr	r3, [pc, #792]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002316:	4ac6      	ldr	r2, [pc, #792]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002318:	6a12      	ldr	r2, [r2, #32]
 800231a:	2104      	movs	r1, #4
 800231c:	438a      	bics	r2, r1
 800231e:	621a      	str	r2, [r3, #32]
 8002320:	e01c      	b.n	800235c <HAL_RCC_OscConfig+0x39c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b05      	cmp	r3, #5
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x384>
 800232a:	4bc1      	ldr	r3, [pc, #772]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800232c:	4ac0      	ldr	r2, [pc, #768]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800232e:	6a12      	ldr	r2, [r2, #32]
 8002330:	2104      	movs	r1, #4
 8002332:	430a      	orrs	r2, r1
 8002334:	621a      	str	r2, [r3, #32]
 8002336:	4bbe      	ldr	r3, [pc, #760]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002338:	4abd      	ldr	r2, [pc, #756]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800233a:	6a12      	ldr	r2, [r2, #32]
 800233c:	2101      	movs	r1, #1
 800233e:	430a      	orrs	r2, r1
 8002340:	621a      	str	r2, [r3, #32]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0x39c>
 8002344:	4bba      	ldr	r3, [pc, #744]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002346:	4aba      	ldr	r2, [pc, #744]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002348:	6a12      	ldr	r2, [r2, #32]
 800234a:	2101      	movs	r1, #1
 800234c:	438a      	bics	r2, r1
 800234e:	621a      	str	r2, [r3, #32]
 8002350:	4bb7      	ldr	r3, [pc, #732]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002352:	4ab7      	ldr	r2, [pc, #732]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002354:	6a12      	ldr	r2, [r2, #32]
 8002356:	2104      	movs	r1, #4
 8002358:	438a      	bics	r2, r1
 800235a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d014      	beq.n	800238e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7fe fe6a 	bl	800103c <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	e009      	b.n	8002382 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fe65 	bl	800103c <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	4aae      	ldr	r2, [pc, #696]	; (8002634 <HAL_RCC_OscConfig+0x674>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e175      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	4bab      	ldr	r3, [pc, #684]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	2202      	movs	r2, #2
 8002388:	4013      	ands	r3, r2
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x3ae>
 800238c:	e013      	b.n	80023b6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7fe fe55 	bl	800103c <HAL_GetTick>
 8002392:	0003      	movs	r3, r0
 8002394:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002396:	e009      	b.n	80023ac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7fe fe50 	bl	800103c <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	4aa4      	ldr	r2, [pc, #656]	; (8002634 <HAL_RCC_OscConfig+0x674>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e160      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ac:	4ba0      	ldr	r3, [pc, #640]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	2202      	movs	r2, #2
 80023b2:	4013      	ands	r3, r2
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b6:	2317      	movs	r3, #23
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c0:	4b9b      	ldr	r3, [pc, #620]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80023c2:	4a9b      	ldr	r2, [pc, #620]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80023c4:	69d2      	ldr	r2, [r2, #28]
 80023c6:	499c      	ldr	r1, [pc, #624]	; (8002638 <HAL_RCC_OscConfig+0x678>)
 80023c8:	400a      	ands	r2, r1
 80023ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2210      	movs	r2, #16
 80023d2:	4013      	ands	r3, r2
 80023d4:	d063      	beq.n	800249e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d12a      	bne.n	8002434 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023de:	4b94      	ldr	r3, [pc, #592]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80023e0:	4a93      	ldr	r2, [pc, #588]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80023e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023e4:	2104      	movs	r1, #4
 80023e6:	430a      	orrs	r2, r1
 80023e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80023ea:	4b91      	ldr	r3, [pc, #580]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80023ec:	4a90      	ldr	r2, [pc, #576]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80023ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023f0:	2101      	movs	r1, #1
 80023f2:	430a      	orrs	r2, r1
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f6:	f7fe fe21 	bl	800103c <HAL_GetTick>
 80023fa:	0003      	movs	r3, r0
 80023fc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002400:	f7fe fe1c 	bl	800103c <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e12d      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002412:	4b87      	ldr	r3, [pc, #540]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002416:	2202      	movs	r2, #2
 8002418:	4013      	ands	r3, r2
 800241a:	d0f1      	beq.n	8002400 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800241c:	4a84      	ldr	r2, [pc, #528]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800241e:	4b84      	ldr	r3, [pc, #528]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002422:	21f8      	movs	r1, #248	; 0xf8
 8002424:	438b      	bics	r3, r1
 8002426:	0019      	movs	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	430b      	orrs	r3, r1
 8002430:	6353      	str	r3, [r2, #52]	; 0x34
 8002432:	e034      	b.n	800249e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	3305      	adds	r3, #5
 800243a:	d111      	bne.n	8002460 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800243c:	4b7c      	ldr	r3, [pc, #496]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800243e:	4a7c      	ldr	r2, [pc, #496]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002440:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002442:	2104      	movs	r1, #4
 8002444:	438a      	bics	r2, r1
 8002446:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002448:	4a79      	ldr	r2, [pc, #484]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800244a:	4b79      	ldr	r3, [pc, #484]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800244c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244e:	21f8      	movs	r1, #248	; 0xf8
 8002450:	438b      	bics	r3, r1
 8002452:	0019      	movs	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	430b      	orrs	r3, r1
 800245c:	6353      	str	r3, [r2, #52]	; 0x34
 800245e:	e01e      	b.n	800249e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002460:	4b73      	ldr	r3, [pc, #460]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002462:	4a73      	ldr	r2, [pc, #460]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002464:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002466:	2104      	movs	r1, #4
 8002468:	430a      	orrs	r2, r1
 800246a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800246c:	4b70      	ldr	r3, [pc, #448]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800246e:	4a70      	ldr	r2, [pc, #448]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002470:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002472:	2101      	movs	r1, #1
 8002474:	438a      	bics	r2, r1
 8002476:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7fe fde0 	bl	800103c <HAL_GetTick>
 800247c:	0003      	movs	r3, r0
 800247e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002482:	f7fe fddb 	bl	800103c <HAL_GetTick>
 8002486:	0002      	movs	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0ec      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002494:	4b66      	ldr	r3, [pc, #408]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	2202      	movs	r2, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d1f1      	bne.n	8002482 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2220      	movs	r2, #32
 80024a4:	4013      	ands	r3, r2
 80024a6:	d05c      	beq.n	8002562 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024a8:	4b61      	ldr	r3, [pc, #388]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	220c      	movs	r2, #12
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d00e      	beq.n	80024d2 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024b4:	4b5e      	ldr	r3, [pc, #376]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	220c      	movs	r2, #12
 80024ba:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d114      	bne.n	80024ea <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024c0:	4b5b      	ldr	r3, [pc, #364]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	23c0      	movs	r3, #192	; 0xc0
 80024c6:	025b      	lsls	r3, r3, #9
 80024c8:	401a      	ands	r2, r3
 80024ca:	23c0      	movs	r3, #192	; 0xc0
 80024cc:	025b      	lsls	r3, r3, #9
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d10b      	bne.n	80024ea <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80024d2:	4b57      	ldr	r3, [pc, #348]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80024d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	025b      	lsls	r3, r3, #9
 80024da:	4013      	ands	r3, r2
 80024dc:	d040      	beq.n	8002560 <HAL_RCC_OscConfig+0x5a0>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d03c      	beq.n	8002560 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0c1      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01b      	beq.n	800252a <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80024f2:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80024f4:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80024f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0249      	lsls	r1, r1, #9
 80024fc:	430a      	orrs	r2, r1
 80024fe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fd9c 	bl	800103c <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800250a:	f7fe fd97 	bl	800103c <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0a8      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800251c:	4b44      	ldr	r3, [pc, #272]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800251e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	025b      	lsls	r3, r3, #9
 8002524:	4013      	ands	r3, r2
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x54a>
 8002528:	e01b      	b.n	8002562 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800252a:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800252c:	4a40      	ldr	r2, [pc, #256]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800252e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002530:	4942      	ldr	r1, [pc, #264]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002532:	400a      	ands	r2, r1
 8002534:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe fd81 	bl	800103c <HAL_GetTick>
 800253a:	0003      	movs	r3, r0
 800253c:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002540:	f7fe fd7c 	bl	800103c <HAL_GetTick>
 8002544:	0002      	movs	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e08d      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002552:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	025b      	lsls	r3, r3, #9
 800255a:	4013      	ands	r3, r2
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x580>
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002560:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	2b00      	cmp	r3, #0
 8002568:	d100      	bne.n	800256c <HAL_RCC_OscConfig+0x5ac>
 800256a:	e07f      	b.n	800266c <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256c:	4b30      	ldr	r3, [pc, #192]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	220c      	movs	r2, #12
 8002572:	4013      	ands	r3, r2
 8002574:	2b08      	cmp	r3, #8
 8002576:	d100      	bne.n	800257a <HAL_RCC_OscConfig+0x5ba>
 8002578:	e076      	b.n	8002668 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2b02      	cmp	r3, #2
 8002580:	d14b      	bne.n	800261a <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002584:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	492d      	ldr	r1, [pc, #180]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 800258a:	400a      	ands	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fd55 	bl	800103c <HAL_GetTick>
 8002592:	0003      	movs	r3, r0
 8002594:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fd50 	bl	800103c <HAL_GetTick>
 800259c:	0002      	movs	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e061      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025aa:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	049b      	lsls	r3, r3, #18
 80025b2:	4013      	ands	r3, r2
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b6:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	210f      	movs	r1, #15
 80025be:	438b      	bics	r3, r1
 80025c0:	0019      	movs	r1, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	430b      	orrs	r3, r1
 80025c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80025ca:	4a19      	ldr	r2, [pc, #100]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	491c      	ldr	r1, [pc, #112]	; (8002644 <HAL_RCC_OscConfig+0x684>)
 80025d2:	4019      	ands	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	4303      	orrs	r3, r0
 80025de:	430b      	orrs	r3, r1
 80025e0:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	0449      	lsls	r1, r1, #17
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fd24 	bl	800103c <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe fd1f 	bl	800103c <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e030      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	049b      	lsls	r3, r3, #18
 8002614:	4013      	ands	r3, r2
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x63a>
 8002618:	e028      	b.n	800266c <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_RCC_OscConfig+0x670>)
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002622:	400a      	ands	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7fe fd09 	bl	800103c <HAL_GetTick>
 800262a:	0003      	movs	r3, r0
 800262c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	e014      	b.n	800265a <HAL_RCC_OscConfig+0x69a>
 8002630:	40021000 	.word	0x40021000
 8002634:	00001388 	.word	0x00001388
 8002638:	efffffff 	.word	0xefffffff
 800263c:	fffeffff 	.word	0xfffeffff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe fcf8 	bl	800103c <HAL_GetTick>
 800264c:	0002      	movs	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e009      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <HAL_RCC_OscConfig+0x6b8>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	049b      	lsls	r3, r3, #18
 8002662:	4013      	ands	r3, r2
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x688>
 8002666:	e001      	b.n	800266c <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b006      	add	sp, #24
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40021000 	.word	0x40021000

0800267c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800268a:	4b7a      	ldr	r3, [pc, #488]	; (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2201      	movs	r2, #1
 8002690:	401a      	ands	r2, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d211      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002698:	4b76      	ldr	r3, [pc, #472]	; (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800269a:	4a76      	ldr	r2, [pc, #472]	; (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	2101      	movs	r1, #1
 80026a0:	438a      	bics	r2, r1
 80026a2:	0011      	movs	r1, r2
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026aa:	4b72      	ldr	r3, [pc, #456]	; (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2201      	movs	r2, #1
 80026b0:	401a      	ands	r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d7      	b.n	800286c <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2202      	movs	r2, #2
 80026c2:	4013      	ands	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c6:	4a6c      	ldr	r2, [pc, #432]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 80026c8:	4b6b      	ldr	r3, [pc, #428]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	21f0      	movs	r1, #240	; 0xf0
 80026ce:	438b      	bics	r3, r1
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	430b      	orrs	r3, r1
 80026d8:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	d100      	bne.n	80026e6 <HAL_RCC_ClockConfig+0x6a>
 80026e4:	e089      	b.n	80027fa <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b62      	ldr	r3, [pc, #392]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	029b      	lsls	r3, r3, #10
 80026f6:	4013      	ands	r3, r2
 80026f8:	d120      	bne.n	800273c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0b6      	b.n	800286c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	4b5c      	ldr	r3, [pc, #368]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	049b      	lsls	r3, r3, #18
 800270e:	4013      	ands	r3, r2
 8002710:	d114      	bne.n	800273c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0aa      	b.n	800286c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800271e:	4b56      	ldr	r3, [pc, #344]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 8002720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	025b      	lsls	r3, r3, #9
 8002726:	4013      	ands	r3, r2
 8002728:	d108      	bne.n	800273c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e09e      	b.n	800286c <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272e:	4b52      	ldr	r3, [pc, #328]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2202      	movs	r2, #2
 8002734:	4013      	ands	r3, r2
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e097      	b.n	800286c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273c:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 800273e:	4b4e      	ldr	r3, [pc, #312]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2103      	movs	r1, #3
 8002744:	438b      	bics	r3, r1
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	430b      	orrs	r3, r1
 800274e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002750:	f7fe fc74 	bl	800103c <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d111      	bne.n	8002784 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002760:	e009      	b.n	8002776 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002762:	f7fe fc6b 	bl	800103c <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	4a43      	ldr	r2, [pc, #268]	; (800287c <HAL_RCC_ClockConfig+0x200>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e07a      	b.n	800286c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002776:	4b40      	ldr	r3, [pc, #256]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	220c      	movs	r2, #12
 800277c:	4013      	ands	r3, r2
 800277e:	2b04      	cmp	r3, #4
 8002780:	d1ef      	bne.n	8002762 <HAL_RCC_ClockConfig+0xe6>
 8002782:	e03a      	b.n	80027fa <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d111      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800278c:	e009      	b.n	80027a2 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278e:	f7fe fc55 	bl	800103c <HAL_GetTick>
 8002792:	0002      	movs	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	4a38      	ldr	r2, [pc, #224]	; (800287c <HAL_RCC_ClockConfig+0x200>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e064      	b.n	800286c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a2:	4b35      	ldr	r3, [pc, #212]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	220c      	movs	r2, #12
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d1ef      	bne.n	800278e <HAL_RCC_ClockConfig+0x112>
 80027ae:	e024      	b.n	80027fa <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d11b      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80027b8:	e009      	b.n	80027ce <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ba:	f7fe fc3f 	bl	800103c <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	4a2d      	ldr	r2, [pc, #180]	; (800287c <HAL_RCC_ClockConfig+0x200>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e04e      	b.n	800286c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	220c      	movs	r2, #12
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d1ef      	bne.n	80027ba <HAL_RCC_ClockConfig+0x13e>
 80027da:	e00e      	b.n	80027fa <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7fe fc2e 	bl	800103c <HAL_GetTick>
 80027e0:	0002      	movs	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	4a25      	ldr	r2, [pc, #148]	; (800287c <HAL_RCC_ClockConfig+0x200>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e03d      	b.n	800286c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	220c      	movs	r2, #12
 80027f6:	4013      	ands	r3, r2
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80027fa:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	401a      	ands	r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d911      	bls.n	800282c <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	2101      	movs	r1, #1
 8002810:	438a      	bics	r2, r1
 8002812:	0011      	movs	r1, r2
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <HAL_RCC_ClockConfig+0x1f8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2201      	movs	r2, #1
 8002820:	401a      	ands	r2, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e01f      	b.n	800286c <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2204      	movs	r2, #4
 8002832:	4013      	ands	r3, r2
 8002834:	d008      	beq.n	8002848 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002836:	4a10      	ldr	r2, [pc, #64]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4910      	ldr	r1, [pc, #64]	; (8002880 <HAL_RCC_ClockConfig+0x204>)
 800283e:	4019      	ands	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	430b      	orrs	r3, r1
 8002846:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002848:	f000 f820 	bl	800288c <HAL_RCC_GetSysClockFreq>
 800284c:	0001      	movs	r1, r0
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_ClockConfig+0x1fc>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	220f      	movs	r2, #15
 8002856:	4013      	ands	r3, r2
 8002858:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x208>)
 800285a:	5cd3      	ldrb	r3, [r2, r3]
 800285c:	000a      	movs	r2, r1
 800285e:	40da      	lsrs	r2, r3
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x20c>)
 8002862:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002864:	2000      	movs	r0, #0
 8002866:	f004 fdf5 	bl	8007454 <HAL_InitTick>
  
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b004      	add	sp, #16
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40022000 	.word	0x40022000
 8002878:	40021000 	.word	0x40021000
 800287c:	00001388 	.word	0x00001388
 8002880:	fffff8ff 	.word	0xfffff8ff
 8002884:	08008634 	.word	0x08008634
 8002888:	20000064 	.word	0x20000064

0800288c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b08f      	sub	sp, #60	; 0x3c
 8002890:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002892:	2314      	movs	r3, #20
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	4a37      	ldr	r2, [pc, #220]	; (8002974 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002898:	ca13      	ldmia	r2!, {r0, r1, r4}
 800289a:	c313      	stmia	r3!, {r0, r1, r4}
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	4a35      	ldr	r2, [pc, #212]	; (8002978 <HAL_RCC_GetSysClockFreq+0xec>)
 80028a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028a6:	c313      	stmia	r3!, {r0, r1, r4}
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	2300      	movs	r3, #0
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b4:	2300      	movs	r3, #0
 80028b6:	637b      	str	r3, [r7, #52]	; 0x34
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80028c0:	4b2e      	ldr	r3, [pc, #184]	; (800297c <HAL_RCC_GetSysClockFreq+0xf0>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	220c      	movs	r2, #12
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d006      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x52>
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	d043      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0xd0>
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d144      	bne.n	8002962 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d8:	4b29      	ldr	r3, [pc, #164]	; (8002980 <HAL_RCC_GetSysClockFreq+0xf4>)
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028dc:	e044      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	0c9b      	lsrs	r3, r3, #18
 80028e2:	220f      	movs	r2, #15
 80028e4:	4013      	ands	r3, r2
 80028e6:	2214      	movs	r2, #20
 80028e8:	18ba      	adds	r2, r7, r2
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028ee:	4b23      	ldr	r3, [pc, #140]	; (800297c <HAL_RCC_GetSysClockFreq+0xf0>)
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	220f      	movs	r2, #15
 80028f4:	4013      	ands	r3, r2
 80028f6:	1d3a      	adds	r2, r7, #4
 80028f8:	5cd3      	ldrb	r3, [r2, r3]
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fe:	23c0      	movs	r3, #192	; 0xc0
 8002900:	025b      	lsls	r3, r3, #9
 8002902:	401a      	ands	r2, r3
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	025b      	lsls	r3, r3, #9
 8002908:	429a      	cmp	r2, r3
 800290a:	d109      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800290c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800290e:	481c      	ldr	r0, [pc, #112]	; (8002980 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002910:	f7fd fc02 	bl	8000118 <__udivsi3>
 8002914:	0003      	movs	r3, r0
 8002916:	001a      	movs	r2, r3
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	4353      	muls	r3, r2
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
 800291e:	e01a      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002922:	23c0      	movs	r3, #192	; 0xc0
 8002924:	025b      	lsls	r3, r3, #9
 8002926:	401a      	ands	r2, r3
 8002928:	23c0      	movs	r3, #192	; 0xc0
 800292a:	025b      	lsls	r3, r3, #9
 800292c:	429a      	cmp	r2, r3
 800292e:	d109      	bne.n	8002944 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8002930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002932:	4814      	ldr	r0, [pc, #80]	; (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002934:	f7fd fbf0 	bl	8000118 <__udivsi3>
 8002938:	0003      	movs	r3, r0
 800293a:	001a      	movs	r2, r3
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	4353      	muls	r3, r2
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
 8002942:	e008      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8002944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002946:	480e      	ldr	r0, [pc, #56]	; (8002980 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002948:	f7fd fbe6 	bl	8000118 <__udivsi3>
 800294c:	0003      	movs	r3, r0
 800294e:	001a      	movs	r2, r3
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	4353      	muls	r3, r2
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8002956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800295a:	e005      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_RCC_GetSysClockFreq+0xf8>)
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002960:	e002      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002966:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b00f      	add	sp, #60	; 0x3c
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	08008228 	.word	0x08008228
 8002978:	08008238 	.word	0x08008238
 800297c:	40021000 	.word	0x40021000
 8002980:	007a1200 	.word	0x007a1200
 8002984:	02dc6c00 	.word	0x02dc6c00

08002988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800298c:	4b02      	ldr	r3, [pc, #8]	; (8002998 <HAL_RCC_GetHCLKFreq+0x10>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	20000064 	.word	0x20000064

0800299c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80029a0:	f7ff fff2 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029a4:	0001      	movs	r1, r0
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	2207      	movs	r2, #7
 80029ae:	4013      	ands	r3, r2
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	40d9      	lsrs	r1, r3
 80029b6:	000b      	movs	r3, r1
}    
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08008644 	.word	0x08008644

080029c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2207      	movs	r2, #7
 80029d6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_RCC_GetClockConfig+0x4c>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2203      	movs	r2, #3
 80029de:	401a      	ands	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_GetClockConfig+0x4c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	22f0      	movs	r2, #240	; 0xf0
 80029ea:	401a      	ands	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_RCC_GetClockConfig+0x4c>)
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	23e0      	movs	r3, #224	; 0xe0
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	401a      	ands	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_GetClockConfig+0x50>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2201      	movs	r2, #1
 8002a04:	401a      	ands	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	601a      	str	r2, [r3, #0]
}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b002      	add	sp, #8
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40022000 	.word	0x40022000

08002a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	025b      	lsls	r3, r3, #9
 8002a34:	4013      	ands	r3, r2
 8002a36:	d100      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a38:	e08e      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a3a:	2317      	movs	r3, #23
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a42:	4b6e      	ldr	r3, [pc, #440]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	055b      	lsls	r3, r3, #21
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d111      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b6b      	ldr	r3, [pc, #428]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a50:	4a6a      	ldr	r2, [pc, #424]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a52:	69d2      	ldr	r2, [r2, #28]
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	0549      	lsls	r1, r1, #21
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	61da      	str	r2, [r3, #28]
 8002a5c:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	055b      	lsls	r3, r3, #21
 8002a64:	4013      	ands	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6a:	2317      	movs	r3, #23
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7e:	4b60      	ldr	r3, [pc, #384]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a80:	4a5f      	ldr	r2, [pc, #380]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	2180      	movs	r1, #128	; 0x80
 8002a86:	0049      	lsls	r1, r1, #1
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fad6 	bl	800103c <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	e008      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a96:	f7fe fad1 	bl	800103c <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b64      	cmp	r3, #100	; 0x64
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e0a4      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa8:	4b55      	ldr	r3, [pc, #340]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ab4:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	23c0      	movs	r3, #192	; 0xc0
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d034      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	23c0      	movs	r3, #192	; 0xc0
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	401a      	ands	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d02c      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ad6:	4b49      	ldr	r3, [pc, #292]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4a4a      	ldr	r2, [pc, #296]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ae0:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ae2:	4a46      	ldr	r2, [pc, #280]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ae4:	6a12      	ldr	r2, [r2, #32]
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	0249      	lsls	r1, r1, #9
 8002aea:	430a      	orrs	r2, r1
 8002aec:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aee:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002af0:	4a42      	ldr	r2, [pc, #264]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002af2:	6a12      	ldr	r2, [r2, #32]
 8002af4:	4944      	ldr	r1, [pc, #272]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002af6:	400a      	ands	r2, r1
 8002af8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002afa:	4b40      	ldr	r3, [pc, #256]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	4013      	ands	r3, r2
 8002b06:	d013      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fa98 	bl	800103c <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	e009      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fe fa93 	bl	800103c <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	4a3b      	ldr	r2, [pc, #236]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e065      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b30:	4a32      	ldr	r2, [pc, #200]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b32:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4933      	ldr	r1, [pc, #204]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002b38:	4019      	ands	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b42:	2317      	movs	r3, #23
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b4e:	4a2b      	ldr	r2, [pc, #172]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b50:	69d2      	ldr	r2, [r2, #28]
 8002b52:	492f      	ldr	r1, [pc, #188]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002b54:	400a      	ands	r2, r1
 8002b56:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d009      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b62:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	2103      	movs	r1, #3
 8002b6a:	438b      	bics	r3, r1
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	430b      	orrs	r3, r1
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b80:	4a1e      	ldr	r2, [pc, #120]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4923      	ldr	r1, [pc, #140]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b88:	4019      	ands	r1, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2220      	movs	r2, #32
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b9c:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	2110      	movs	r1, #16
 8002ba4:	438b      	bics	r3, r1
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	029b      	lsls	r3, r3, #10
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d009      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bbc:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	438b      	bics	r3, r1
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bdc:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	2140      	movs	r1, #64	; 0x40
 8002be4:	438b      	bics	r3, r1
 8002be6:	0019      	movs	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	430b      	orrs	r3, r1
 8002bee:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b006      	add	sp, #24
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40007000 	.word	0x40007000
 8002c04:	fffffcff 	.word	0xfffffcff
 8002c08:	fffeffff 	.word	0xfffeffff
 8002c0c:	00001388 	.word	0x00001388
 8002c10:	efffffff 	.word	0xefffffff
 8002c14:	fffcffff 	.word	0xfffcffff

08002c18 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e01e      	b.n	8002c68 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	223d      	movs	r2, #61	; 0x3d
 8002c2e:	5c9b      	ldrb	r3, [r3, r2]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	223c      	movs	r2, #60	; 0x3c
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f004 fa57 	bl	80070f4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	223d      	movs	r2, #61	; 0x3d
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3304      	adds	r3, #4
 8002c56:	0019      	movs	r1, r3
 8002c58:	0010      	movs	r0, r2
 8002c5a:	f000 fb8b 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	223d      	movs	r2, #61	; 0x3d
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	68d2      	ldr	r2, [r2, #12]
 8002c82:	2101      	movs	r1, #1
 8002c84:	430a      	orrs	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	2101      	movs	r1, #1
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b002      	add	sp, #8
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	68d2      	ldr	r2, [r2, #12]
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	438a      	bics	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <HAL_TIM_Base_Stop_IT+0x4c>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_TIM_Base_Stop_IT+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <HAL_TIM_Base_Stop_IT+0x50>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_Base_Stop_IT+0x40>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	2101      	movs	r1, #1
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b002      	add	sp, #8
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	00001111 	.word	0x00001111
 8002cf4:	00000444 	.word	0x00000444

08002cf8 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e01e      	b.n	8002d48 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	223d      	movs	r2, #61	; 0x3d
 8002d0e:	5c9b      	ldrb	r3, [r3, r2]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d107      	bne.n	8002d26 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	223c      	movs	r2, #60	; 0x3c
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f004 f9b5 	bl	8007090 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	223d      	movs	r2, #61	; 0x3d
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3304      	adds	r3, #4
 8002d36:	0019      	movs	r1, r3
 8002d38:	0010      	movs	r0, r2
 8002d3a:	f000 fb1b 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	223d      	movs	r2, #61	; 0x3d
 8002d42:	2101      	movs	r1, #1
 8002d44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6839      	ldr	r1, [r7, #0]
 8002d60:	2201      	movs	r2, #1
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 fe46 	bl	80039f4 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_TIM_PWM_Start+0x78>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00e      	beq.n	8002d90 <HAL_TIM_PWM_Start+0x40>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <HAL_TIM_PWM_Start+0x7c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d009      	beq.n	8002d90 <HAL_TIM_PWM_Start+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <HAL_TIM_PWM_Start+0x80>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_TIM_PWM_Start+0x40>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <HAL_TIM_PWM_Start+0x84>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d101      	bne.n	8002d94 <HAL_TIM_PWM_Start+0x44>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <HAL_TIM_PWM_Start+0x46>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0209      	lsls	r1, r1, #8
 8002da8:	430a      	orrs	r2, r1
 8002daa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	2101      	movs	r1, #1
 8002db8:	430a      	orrs	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	40014400 	.word	0x40014400
 8002dd4:	40014800 	.word	0x40014800

08002dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2202      	movs	r2, #2
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d124      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2202      	movs	r2, #2
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d11d      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2203      	movs	r2, #3
 8002e02:	4252      	negs	r2, r2
 8002e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2203      	movs	r2, #3
 8002e14:	4013      	ands	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 fa92 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8002e20:	e007      	b.n	8002e32 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f000 fa85 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 fa91 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2204      	movs	r2, #4
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d125      	bne.n	8002e92 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d11e      	bne.n	8002e92 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2205      	movs	r2, #5
 8002e5a:	4252      	negs	r2, r2
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	23c0      	movs	r3, #192	; 0xc0
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f000 fa65 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8002e7a:	e007      	b.n	8002e8c <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 fa58 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 fa64 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d124      	bne.n	8002eea <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d11d      	bne.n	8002eea <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2209      	movs	r2, #9
 8002eb4:	4252      	negs	r2, r2
 8002eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 fa39 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8002ed2:	e007      	b.n	8002ee4 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 fa2c 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 fa38 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d125      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2210      	movs	r2, #16
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d11e      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2211      	movs	r2, #17
 8002f0c:	4252      	negs	r2, r2
 8002f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2208      	movs	r2, #8
 8002f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	23c0      	movs	r3, #192	; 0xc0
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4013      	ands	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 fa0c 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8002f2c:	e007      	b.n	8002f3e <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 f9ff 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f000 fa0b 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10f      	bne.n	8002f72 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d108      	bne.n	8002f72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2202      	movs	r2, #2
 8002f66:	4252      	negs	r2, r2
 8002f68:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f003 ff4f 	bl	8006e10 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2280      	movs	r2, #128	; 0x80
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d10f      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2280      	movs	r2, #128	; 0x80
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d108      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2281      	movs	r2, #129	; 0x81
 8002f94:	4252      	negs	r2, r2
 8002f96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 fe04 	bl	8003ba8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2240      	movs	r2, #64	; 0x40
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	d10f      	bne.n	8002fce <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2240      	movs	r2, #64	; 0x40
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d108      	bne.n	8002fce <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2241      	movs	r2, #65	; 0x41
 8002fc2:	4252      	negs	r2, r2
 8002fc4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 f9cb 	bl	8003364 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d10f      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d108      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2221      	movs	r2, #33	; 0x21
 8002ff0:	4252      	negs	r2, r2
 8002ff2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 fdce 	bl	8003b98 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	223c      	movs	r2, #60	; 0x3c
 8003014:	5c9b      	ldrb	r3, [r3, r2]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800301a:	2302      	movs	r3, #2
 800301c:	e0a4      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x164>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	223c      	movs	r2, #60	; 0x3c
 8003022:	2101      	movs	r1, #1
 8003024:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	223d      	movs	r2, #61	; 0x3d
 800302a:	2102      	movs	r1, #2
 800302c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b04      	cmp	r3, #4
 8003032:	d029      	beq.n	8003088 <HAL_TIM_PWM_ConfigChannel+0x84>
 8003034:	d802      	bhi.n	800303c <HAL_TIM_PWM_ConfigChannel+0x38>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 800303a:	e08c      	b.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800303c:	2b08      	cmp	r3, #8
 800303e:	d046      	beq.n	80030ce <HAL_TIM_PWM_ConfigChannel+0xca>
 8003040:	2b0c      	cmp	r3, #12
 8003042:	d065      	beq.n	8003110 <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8003044:	e087      	b.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	0011      	movs	r1, r2
 800304e:	0018      	movs	r0, r3
 8003050:	f000 fa12 	bl	8003478 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	6992      	ldr	r2, [r2, #24]
 800305e:	2108      	movs	r1, #8
 8003060:	430a      	orrs	r2, r1
 8003062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	6992      	ldr	r2, [r2, #24]
 800306e:	2104      	movs	r1, #4
 8003070:	438a      	bics	r2, r1
 8003072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	6991      	ldr	r1, [r2, #24]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	6912      	ldr	r2, [r2, #16]
 8003082:	430a      	orrs	r2, r1
 8003084:	619a      	str	r2, [r3, #24]
    break;
 8003086:	e066      	b.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	0011      	movs	r1, r2
 8003090:	0018      	movs	r0, r3
 8003092:	f000 fa7f 	bl	8003594 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	6992      	ldr	r2, [r2, #24]
 80030a0:	2180      	movs	r1, #128	; 0x80
 80030a2:	0109      	lsls	r1, r1, #4
 80030a4:	430a      	orrs	r2, r1
 80030a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	6992      	ldr	r2, [r2, #24]
 80030b2:	492f      	ldr	r1, [pc, #188]	; (8003170 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80030b4:	400a      	ands	r2, r1
 80030b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	6991      	ldr	r1, [r2, #24]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	6912      	ldr	r2, [r2, #16]
 80030c6:	0212      	lsls	r2, r2, #8
 80030c8:	430a      	orrs	r2, r1
 80030ca:	619a      	str	r2, [r3, #24]
    break;
 80030cc:	e043      	b.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	0011      	movs	r1, r2
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fae6 	bl	80036a8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	69d2      	ldr	r2, [r2, #28]
 80030e6:	2108      	movs	r1, #8
 80030e8:	430a      	orrs	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	69d2      	ldr	r2, [r2, #28]
 80030f6:	2104      	movs	r1, #4
 80030f8:	438a      	bics	r2, r1
 80030fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	69d1      	ldr	r1, [r2, #28]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	6912      	ldr	r2, [r2, #16]
 800310a:	430a      	orrs	r2, r1
 800310c:	61da      	str	r2, [r3, #28]
    break;
 800310e:	e022      	b.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	0011      	movs	r1, r2
 8003118:	0018      	movs	r0, r3
 800311a:	f000 fb51 	bl	80037c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	69d2      	ldr	r2, [r2, #28]
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	0109      	lsls	r1, r1, #4
 800312c:	430a      	orrs	r2, r1
 800312e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	69d2      	ldr	r2, [r2, #28]
 800313a:	490d      	ldr	r1, [pc, #52]	; (8003170 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800313c:	400a      	ands	r2, r1
 800313e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	69d1      	ldr	r1, [r2, #28]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	6912      	ldr	r2, [r2, #16]
 800314e:	0212      	lsls	r2, r2, #8
 8003150:	430a      	orrs	r2, r1
 8003152:	61da      	str	r2, [r3, #28]
    break;
 8003154:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	223d      	movs	r2, #61	; 0x3d
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	223c      	movs	r2, #60	; 0x3c
 8003162:	2100      	movs	r1, #0
 8003164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b004      	add	sp, #16
 800316e:	bd80      	pop	{r7, pc}
 8003170:	fffffbff 	.word	0xfffffbff

08003174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	223c      	movs	r2, #60	; 0x3c
 8003186:	5c9b      	ldrb	r3, [r3, r2]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_TIM_ConfigClockSource+0x1c>
 800318c:	2302      	movs	r3, #2
 800318e:	e0ca      	b.n	8003326 <HAL_TIM_ConfigClockSource+0x1b2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	223c      	movs	r2, #60	; 0x3c
 8003194:	2101      	movs	r1, #1
 8003196:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	223d      	movs	r2, #61	; 0x3d
 800319c:	2102      	movs	r1, #2
 800319e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2277      	movs	r2, #119	; 0x77
 80031ac:	4393      	bics	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a5f      	ldr	r2, [pc, #380]	; (8003330 <HAL_TIM_ConfigClockSource+0x1bc>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d100      	bne.n	80031ca <HAL_TIM_ConfigClockSource+0x56>
 80031c8:	e078      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x148>
 80031ca:	d80e      	bhi.n	80031ea <HAL_TIM_ConfigClockSource+0x76>
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d100      	bne.n	80031d2 <HAL_TIM_ConfigClockSource+0x5e>
 80031d0:	e08b      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x176>
 80031d2:	d803      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x68>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d100      	bne.n	80031da <HAL_TIM_ConfigClockSource+0x66>
 80031d8:	e080      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80031da:	e09b      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d100      	bne.n	80031e2 <HAL_TIM_ConfigClockSource+0x6e>
 80031e0:	e08a      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>
 80031e2:	2b30      	cmp	r3, #48	; 0x30
 80031e4:	d100      	bne.n	80031e8 <HAL_TIM_ConfigClockSource+0x74>
 80031e6:	e08e      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x192>
    break;
 80031e8:	e094      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 80031ea:	2b70      	cmp	r3, #112	; 0x70
 80031ec:	d017      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xaa>
 80031ee:	d804      	bhi.n	80031fa <HAL_TIM_ConfigClockSource+0x86>
 80031f0:	2b50      	cmp	r3, #80	; 0x50
 80031f2:	d043      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x108>
 80031f4:	2b60      	cmp	r3, #96	; 0x60
 80031f6:	d051      	beq.n	800329c <HAL_TIM_ConfigClockSource+0x128>
    break;
 80031f8:	e08c      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 80031fa:	2280      	movs	r2, #128	; 0x80
 80031fc:	0152      	lsls	r2, r2, #5
 80031fe:	4293      	cmp	r3, r2
 8003200:	d004      	beq.n	800320c <HAL_TIM_ConfigClockSource+0x98>
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	0192      	lsls	r2, r2, #6
 8003206:	4293      	cmp	r3, r2
 8003208:	d024      	beq.n	8003254 <HAL_TIM_ConfigClockSource+0xe0>
    break;
 800320a:	e083      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	6892      	ldr	r2, [r2, #8]
 8003216:	2107      	movs	r1, #7
 8003218:	438a      	bics	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
    break;
 800321c:	e07a      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6899      	ldr	r1, [r3, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f000 fbbf 	bl	80039b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2277      	movs	r2, #119	; 0x77
 800323e:	4393      	bics	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2277      	movs	r2, #119	; 0x77
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	609a      	str	r2, [r3, #8]
    break;
 8003252:	e05f      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f000 fba4 	bl	80039b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	6892      	ldr	r2, [r2, #8]
 8003272:	2180      	movs	r1, #128	; 0x80
 8003274:	01c9      	lsls	r1, r1, #7
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]
    break;
 800327a:	e04b      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	001a      	movs	r2, r3
 800328a:	f000 fb09 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2150      	movs	r1, #80	; 0x50
 8003294:	0018      	movs	r0, r3
 8003296:	f000 fb6b 	bl	8003970 <TIM_ITRx_SetConfig>
    break;
 800329a:	e03b      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	001a      	movs	r2, r3
 80032aa:	f000 fb2b 	bl	8003904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2160      	movs	r1, #96	; 0x60
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 fb5b 	bl	8003970 <TIM_ITRx_SetConfig>
    break;
 80032ba:	e02b      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	001a      	movs	r2, r3
 80032ca:	f000 fae9 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2140      	movs	r1, #64	; 0x40
 80032d4:	0018      	movs	r0, r3
 80032d6:	f000 fb4b 	bl	8003970 <TIM_ITRx_SetConfig>
    break;
 80032da:	e01b      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2100      	movs	r1, #0
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 fb44 	bl	8003970 <TIM_ITRx_SetConfig>
    break;
 80032e8:	e014      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2110      	movs	r1, #16
 80032f0:	0018      	movs	r0, r3
 80032f2:	f000 fb3d 	bl	8003970 <TIM_ITRx_SetConfig>
    break;
 80032f6:	e00d      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2120      	movs	r1, #32
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 fb36 	bl	8003970 <TIM_ITRx_SetConfig>
    break;
 8003304:	e006      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2130      	movs	r1, #48	; 0x30
 800330c:	0018      	movs	r0, r3
 800330e:	f000 fb2f 	bl	8003970 <TIM_ITRx_SetConfig>
    break;
 8003312:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	223d      	movs	r2, #61	; 0x3d
 8003318:	2101      	movs	r1, #1
 800331a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	223c      	movs	r2, #60	; 0x3c
 8003320:	2100      	movs	r1, #0
 8003322:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	ffff00ff 	.word	0xffff00ff

08003334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a34      	ldr	r2, [pc, #208]	; (800345c <TIM_Base_SetConfig+0xe8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d008      	beq.n	80033a2 <TIM_Base_SetConfig+0x2e>
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	05db      	lsls	r3, r3, #23
 8003396:	429a      	cmp	r2, r3
 8003398:	d003      	beq.n	80033a2 <TIM_Base_SetConfig+0x2e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a30      	ldr	r2, [pc, #192]	; (8003460 <TIM_Base_SetConfig+0xec>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d108      	bne.n	80033b4 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2270      	movs	r2, #112	; 0x70
 80033a6:	4393      	bics	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a29      	ldr	r2, [pc, #164]	; (800345c <TIM_Base_SetConfig+0xe8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d018      	beq.n	80033ee <TIM_Base_SetConfig+0x7a>
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	05db      	lsls	r3, r3, #23
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d013      	beq.n	80033ee <TIM_Base_SetConfig+0x7a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a25      	ldr	r2, [pc, #148]	; (8003460 <TIM_Base_SetConfig+0xec>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00f      	beq.n	80033ee <TIM_Base_SetConfig+0x7a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a24      	ldr	r2, [pc, #144]	; (8003464 <TIM_Base_SetConfig+0xf0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00b      	beq.n	80033ee <TIM_Base_SetConfig+0x7a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a23      	ldr	r2, [pc, #140]	; (8003468 <TIM_Base_SetConfig+0xf4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <TIM_Base_SetConfig+0x7a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a22      	ldr	r2, [pc, #136]	; (800346c <TIM_Base_SetConfig+0xf8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d003      	beq.n	80033ee <TIM_Base_SetConfig+0x7a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a21      	ldr	r2, [pc, #132]	; (8003470 <TIM_Base_SetConfig+0xfc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d108      	bne.n	8003400 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4a20      	ldr	r2, [pc, #128]	; (8003474 <TIM_Base_SetConfig+0x100>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	4393      	bics	r3, r2
 8003406:	001a      	movs	r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a0c      	ldr	r2, [pc, #48]	; (800345c <TIM_Base_SetConfig+0xe8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00b      	beq.n	8003446 <TIM_Base_SetConfig+0xd2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <TIM_Base_SetConfig+0xf4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <TIM_Base_SetConfig+0xd2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a0c      	ldr	r2, [pc, #48]	; (800346c <TIM_Base_SetConfig+0xf8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_Base_SetConfig+0xd2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <TIM_Base_SetConfig+0xfc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d103      	bne.n	800344e <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	615a      	str	r2, [r3, #20]
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b004      	add	sp, #16
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40000400 	.word	0x40000400
 8003464:	40002000 	.word	0x40002000
 8003468:	40014000 	.word	0x40014000
 800346c:	40014400 	.word	0x40014400
 8003470:	40014800 	.word	0x40014800
 8003474:	fffffcff 	.word	0xfffffcff

08003478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	2201      	movs	r2, #1
 8003494:	4393      	bics	r3, r2
 8003496:	001a      	movs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2270      	movs	r2, #112	; 0x70
 80034b2:	4393      	bics	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2203      	movs	r2, #3
 80034ba:	4393      	bics	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2202      	movs	r2, #2
 80034cc:	4393      	bics	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <TIM_OC1_SetConfig+0x104>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00b      	beq.n	80034fa <TIM_OC1_SetConfig+0x82>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a26      	ldr	r2, [pc, #152]	; (8003580 <TIM_OC1_SetConfig+0x108>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <TIM_OC1_SetConfig+0x82>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a25      	ldr	r2, [pc, #148]	; (8003584 <TIM_OC1_SetConfig+0x10c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_OC1_SetConfig+0x82>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a24      	ldr	r2, [pc, #144]	; (8003588 <TIM_OC1_SetConfig+0x110>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10c      	bne.n	8003514 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2208      	movs	r2, #8
 80034fe:	4393      	bics	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2204      	movs	r2, #4
 8003510:	4393      	bics	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a19      	ldr	r2, [pc, #100]	; (800357c <TIM_OC1_SetConfig+0x104>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00b      	beq.n	8003534 <TIM_OC1_SetConfig+0xbc>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <TIM_OC1_SetConfig+0x108>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_OC1_SetConfig+0xbc>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a17      	ldr	r2, [pc, #92]	; (8003584 <TIM_OC1_SetConfig+0x10c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_OC1_SetConfig+0xbc>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a16      	ldr	r2, [pc, #88]	; (8003588 <TIM_OC1_SetConfig+0x110>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <TIM_OC1_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4a15      	ldr	r2, [pc, #84]	; (800358c <TIM_OC1_SetConfig+0x114>)
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4a14      	ldr	r2, [pc, #80]	; (8003590 <TIM_OC1_SetConfig+0x118>)
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	46bd      	mov	sp, r7
 8003576:	b006      	add	sp, #24
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40014000 	.word	0x40014000
 8003584:	40014400 	.word	0x40014400
 8003588:	40014800 	.word	0x40014800
 800358c:	fffffeff 	.word	0xfffffeff
 8003590:	fffffdff 	.word	0xfffffdff

08003594 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	2210      	movs	r2, #16
 80035b0:	4393      	bics	r3, r2
 80035b2:	001a      	movs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <TIM_OC2_SetConfig+0xf4>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4a2d      	ldr	r2, [pc, #180]	; (800368c <TIM_OC2_SetConfig+0xf8>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2220      	movs	r2, #32
 80035ea:	4393      	bics	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a24      	ldr	r2, [pc, #144]	; (8003690 <TIM_OC2_SetConfig+0xfc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d10d      	bne.n	800361e <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	4393      	bics	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2240      	movs	r2, #64	; 0x40
 800361a:	4393      	bics	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <TIM_OC2_SetConfig+0xfc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <TIM_OC2_SetConfig+0xaa>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a1a      	ldr	r2, [pc, #104]	; (8003694 <TIM_OC2_SetConfig+0x100>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <TIM_OC2_SetConfig+0xaa>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a19      	ldr	r2, [pc, #100]	; (8003698 <TIM_OC2_SetConfig+0x104>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_OC2_SetConfig+0xaa>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a18      	ldr	r2, [pc, #96]	; (800369c <TIM_OC2_SetConfig+0x108>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d113      	bne.n	8003666 <TIM_OC2_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4a17      	ldr	r2, [pc, #92]	; (80036a0 <TIM_OC2_SetConfig+0x10c>)
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4a16      	ldr	r2, [pc, #88]	; (80036a4 <TIM_OC2_SetConfig+0x110>)
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	621a      	str	r2, [r3, #32]
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b006      	add	sp, #24
 8003686:	bd80      	pop	{r7, pc}
 8003688:	ffff8fff 	.word	0xffff8fff
 800368c:	fffffcff 	.word	0xfffffcff
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40014000 	.word	0x40014000
 8003698:	40014400 	.word	0x40014400
 800369c:	40014800 	.word	0x40014800
 80036a0:	fffffbff 	.word	0xfffffbff
 80036a4:	fffff7ff 	.word	0xfffff7ff

080036a8 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a35      	ldr	r2, [pc, #212]	; (8003798 <TIM_OC3_SetConfig+0xf0>)
 80036c4:	401a      	ands	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2270      	movs	r2, #112	; 0x70
 80036e0:	4393      	bics	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2203      	movs	r2, #3
 80036e8:	4393      	bics	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	4a28      	ldr	r2, [pc, #160]	; (800379c <TIM_OC3_SetConfig+0xf4>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <TIM_OC3_SetConfig+0xf8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10d      	bne.n	800372e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <TIM_OC3_SetConfig+0xfc>)
 8003716:	4013      	ands	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <TIM_OC3_SetConfig+0x100>)
 800372a:	4013      	ands	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <TIM_OC3_SetConfig+0xf8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00b      	beq.n	800374e <TIM_OC3_SetConfig+0xa6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <TIM_OC3_SetConfig+0x104>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <TIM_OC3_SetConfig+0xa6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <TIM_OC3_SetConfig+0x108>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d003      	beq.n	800374e <TIM_OC3_SetConfig+0xa6>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1a      	ldr	r2, [pc, #104]	; (80037b4 <TIM_OC3_SetConfig+0x10c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d113      	bne.n	8003776 <TIM_OC3_SetConfig+0xce>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <TIM_OC3_SetConfig+0x110>)
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4a18      	ldr	r2, [pc, #96]	; (80037bc <TIM_OC3_SetConfig+0x114>)
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	621a      	str	r2, [r3, #32]
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b006      	add	sp, #24
 8003796:	bd80      	pop	{r7, pc}
 8003798:	fffffeff 	.word	0xfffffeff
 800379c:	fffffdff 	.word	0xfffffdff
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	fffff7ff 	.word	0xfffff7ff
 80037a8:	fffffbff 	.word	0xfffffbff
 80037ac:	40014000 	.word	0x40014000
 80037b0:	40014400 	.word	0x40014400
 80037b4:	40014800 	.word	0x40014800
 80037b8:	ffffefff 	.word	0xffffefff
 80037bc:	ffffdfff 	.word	0xffffdfff

080037c0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4a28      	ldr	r2, [pc, #160]	; (800387c <TIM_OC4_SetConfig+0xbc>)
 80037dc:	401a      	ands	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4a22      	ldr	r2, [pc, #136]	; (8003880 <TIM_OC4_SetConfig+0xc0>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4a21      	ldr	r2, [pc, #132]	; (8003884 <TIM_OC4_SetConfig+0xc4>)
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <TIM_OC4_SetConfig+0xc8>)
 8003814:	4013      	ands	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	031b      	lsls	r3, r3, #12
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a19      	ldr	r2, [pc, #100]	; (800388c <TIM_OC4_SetConfig+0xcc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00b      	beq.n	8003844 <TIM_OC4_SetConfig+0x84>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a18      	ldr	r2, [pc, #96]	; (8003890 <TIM_OC4_SetConfig+0xd0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d007      	beq.n	8003844 <TIM_OC4_SetConfig+0x84>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a17      	ldr	r2, [pc, #92]	; (8003894 <TIM_OC4_SetConfig+0xd4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_OC4_SetConfig+0x84>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a16      	ldr	r2, [pc, #88]	; (8003898 <TIM_OC4_SetConfig+0xd8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d109      	bne.n	8003858 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	4a15      	ldr	r2, [pc, #84]	; (800389c <TIM_OC4_SetConfig+0xdc>)
 8003848:	4013      	ands	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	019b      	lsls	r3, r3, #6
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b006      	add	sp, #24
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	ffffefff 	.word	0xffffefff
 8003880:	ffff8fff 	.word	0xffff8fff
 8003884:	fffffcff 	.word	0xfffffcff
 8003888:	ffffdfff 	.word	0xffffdfff
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800
 800389c:	ffffbfff 	.word	0xffffbfff

080038a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	2201      	movs	r2, #1
 80038c0:	4393      	bics	r3, r2
 80038c2:	001a      	movs	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	22f0      	movs	r2, #240	; 0xf0
 80038d2:	4393      	bics	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	220a      	movs	r2, #10
 80038e4:	4393      	bics	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	621a      	str	r2, [r3, #32]
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b006      	add	sp, #24
 8003902:	bd80      	pop	{r7, pc}

08003904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	2210      	movs	r2, #16
 800391e:	4393      	bics	r3, r2
 8003920:	001a      	movs	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	4a0d      	ldr	r2, [pc, #52]	; (800396c <TIM_TI2_ConfigInputStage+0x68>)
 8003936:	4013      	ands	r3, r2
 8003938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	031b      	lsls	r3, r3, #12
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	22a0      	movs	r2, #160	; 0xa0
 8003948:	4393      	bics	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b006      	add	sp, #24
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	ffff0fff 	.word	0xffff0fff

08003970 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	000a      	movs	r2, r1
 800397a:	1cbb      	adds	r3, r7, #2
 800397c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2270      	movs	r2, #112	; 0x70
 800398c:	4393      	bics	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003990:	1cbb      	adds	r3, r7, #2
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	2207      	movs	r2, #7
 8003996:	4313      	orrs	r3, r2
 8003998:	b29b      	uxth	r3, r3
 800399a:	001a      	movs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	4a09      	ldr	r2, [pc, #36]	; (80039f0 <TIM_ETR_SetConfig+0x40>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	021a      	lsls	r2, r3, #8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4313      	orrs	r3, r2
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	609a      	str	r2, [r3, #8]
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b006      	add	sp, #24
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	ffff00ff 	.word	0xffff00ff

080039f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003a04:	2201      	movs	r2, #1
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	0013      	movs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	43d2      	mvns	r2, r2
 8003a16:	401a      	ands	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4099      	lsls	r1, r3
 8003a26:	000b      	movs	r3, r1
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b006      	add	sp, #24
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	223c      	movs	r2, #60	; 0x3c
 8003a44:	5c9b      	ldrb	r3, [r3, r2]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e032      	b.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	223c      	movs	r2, #60	; 0x3c
 8003a52:	2101      	movs	r1, #1
 8003a54:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	223d      	movs	r2, #61	; 0x3d
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	6852      	ldr	r2, [r2, #4]
 8003a68:	2170      	movs	r1, #112	; 0x70
 8003a6a:	438a      	bics	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	6851      	ldr	r1, [r2, #4]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	6892      	ldr	r2, [r2, #8]
 8003a8a:	2180      	movs	r1, #128	; 0x80
 8003a8c:	438a      	bics	r2, r1
 8003a8e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	6891      	ldr	r1, [r2, #8]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	6852      	ldr	r2, [r2, #4]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	223d      	movs	r2, #61	; 0x3d
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	223c      	movs	r2, #60	; 0x3c
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	223c      	movs	r2, #60	; 0x3c
 8003ace:	5c9b      	ldrb	r3, [r3, r2]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e04d      	b.n	8003b74 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	223c      	movs	r2, #60	; 0x3c
 8003adc:	2101      	movs	r1, #1
 8003ade:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	223d      	movs	r2, #61	; 0x3d
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	22ff      	movs	r2, #255	; 0xff
 8003aec:	4393      	bics	r3, r2
 8003aee:	001a      	movs	r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a20      	ldr	r2, [pc, #128]	; (8003b7c <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8003afc:	401a      	ands	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8003b18:	401a      	ands	r2, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>)
 8003b26:	401a      	ands	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8003b34:	401a      	ands	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>)
 8003b42:	401a      	ands	r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0xd8>)
 8003b50:	401a      	ands	r2, r3
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	223d      	movs	r2, #61	; 0x3d
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	223c      	movs	r2, #60	; 0x3c
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b004      	add	sp, #16
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	fffffcff 	.word	0xfffffcff
 8003b80:	fffffbff 	.word	0xfffffbff
 8003b84:	fffff7ff 	.word	0xfffff7ff
 8003b88:	ffffefff 	.word	0xffffefff
 8003b8c:	ffffdfff 	.word	0xffffdfff
 8003b90:	ffffbfff 	.word	0xffffbfff
 8003b94:	ffff7fff 	.word	0xffff7fff

08003b98 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b002      	add	sp, #8
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e047      	b.n	8003c5a <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2269      	movs	r2, #105	; 0x69
 8003bce:	5c9b      	ldrb	r3, [r3, r2]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d107      	bne.n	8003be6 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2268      	movs	r2, #104	; 0x68
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f003 fbc7 	bl	8007374 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2269      	movs	r2, #105	; 0x69
 8003bea:	2124      	movs	r1, #36	; 0x24
 8003bec:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	438a      	bics	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 fae5 	bl	80041d0 <UART_SetConfig>
 8003c06:	0003      	movs	r3, r0
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e024      	b.n	8003c5a <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 fc94 	bl	8004548 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	6852      	ldr	r2, [r2, #4]
 8003c2a:	490e      	ldr	r1, [pc, #56]	; (8003c64 <HAL_UART_Init+0xac>)
 8003c2c:	400a      	ands	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	6892      	ldr	r2, [r2, #8]
 8003c3a:	212a      	movs	r1, #42	; 0x2a
 8003c3c:	438a      	bics	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	0018      	movs	r0, r3
 8003c54:	f000 fd24 	bl	80046a0 <UART_CheckIdleState>
 8003c58:	0003      	movs	r3, r0
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b002      	add	sp, #8
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	ffffb7ff 	.word	0xffffb7ff

08003c68 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	1dbb      	adds	r3, r7, #6
 8003c76:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2269      	movs	r2, #105	; 0x69
 8003c80:	5c9b      	ldrb	r3, [r3, r2]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d000      	beq.n	8003c8a <HAL_UART_Transmit+0x22>
 8003c88:	e08c      	b.n	8003da4 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_UART_Transmit+0x30>
 8003c90:	1dbb      	adds	r3, r7, #6
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e084      	b.n	8003da6 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	015b      	lsls	r3, r3, #5
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d109      	bne.n	8003cbc <HAL_UART_Transmit+0x54>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d001      	beq.n	8003cbc <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e074      	b.n	8003da6 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2268      	movs	r2, #104	; 0x68
 8003cc0:	5c9b      	ldrb	r3, [r3, r2]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_UART_Transmit+0x62>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e06d      	b.n	8003da6 <HAL_UART_Transmit+0x13e>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2268      	movs	r2, #104	; 0x68
 8003cce:	2101      	movs	r1, #1
 8003cd0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2269      	movs	r2, #105	; 0x69
 8003cdc:	2121      	movs	r1, #33	; 0x21
 8003cde:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ce0:	f7fd f9ac 	bl	800103c <HAL_GetTick>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1dba      	adds	r2, r7, #6
 8003cec:	2150      	movs	r1, #80	; 0x50
 8003cee:	8812      	ldrh	r2, [r2, #0]
 8003cf0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1dba      	adds	r2, r7, #6
 8003cf6:	2152      	movs	r1, #82	; 0x52
 8003cf8:	8812      	ldrh	r2, [r2, #0]
 8003cfa:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8003cfc:	e035      	b.n	8003d6a <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2252      	movs	r2, #82	; 0x52
 8003d02:	5a9b      	ldrh	r3, [r3, r2]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b299      	uxth	r1, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2252      	movs	r2, #82	; 0x52
 8003d0e:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	0013      	movs	r3, r2
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2180      	movs	r1, #128	; 0x80
 8003d1e:	f000 fd17 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 8003d22:	1e03      	subs	r3, r0, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e03d      	b.n	8003da6 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	2380      	movs	r3, #128	; 0x80
 8003d30:	015b      	lsls	r3, r3, #5
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d111      	bne.n	8003d5a <HAL_UART_Transmit+0xf2>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10d      	bne.n	8003d5a <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	8812      	ldrh	r2, [r2, #0]
 8003d4a:	05d2      	lsls	r2, r2, #23
 8003d4c:	0dd2      	lsrs	r2, r2, #23
 8003d4e:	b292      	uxth	r2, r2
 8003d50:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	3302      	adds	r3, #2
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	e007      	b.n	8003d6a <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	1c59      	adds	r1, r3, #1
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2252      	movs	r2, #82	; 0x52
 8003d6e:	5a9b      	ldrh	r3, [r3, r2]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1c3      	bne.n	8003cfe <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	0013      	movs	r3, r2
 8003d80:	2200      	movs	r2, #0
 8003d82:	2140      	movs	r1, #64	; 0x40
 8003d84:	f000 fce4 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e00a      	b.n	8003da6 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2269      	movs	r2, #105	; 0x69
 8003d94:	2120      	movs	r1, #32
 8003d96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2268      	movs	r2, #104	; 0x68
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
  }
}
 8003da6:	0018      	movs	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b006      	add	sp, #24
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	1dbb      	adds	r3, r7, #6
 8003dbe:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	226a      	movs	r2, #106	; 0x6a
 8003dc8:	5c9b      	ldrb	r3, [r3, r2]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d000      	beq.n	8003dd2 <HAL_UART_Receive+0x22>
 8003dd0:	e0c8      	b.n	8003f64 <HAL_UART_Receive+0x1b4>
  {
    if((pData == NULL ) || (Size == 0U))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_UART_Receive+0x30>
 8003dd8:	1dbb      	adds	r3, r7, #6
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0c0      	b.n	8003f66 <HAL_UART_Receive+0x1b6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	015b      	lsls	r3, r3, #5
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d109      	bne.n	8003e04 <HAL_UART_Receive+0x54>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <HAL_UART_Receive+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d001      	beq.n	8003e04 <HAL_UART_Receive+0x54>
      {
        return  HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0b0      	b.n	8003f66 <HAL_UART_Receive+0x1b6>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2268      	movs	r2, #104	; 0x68
 8003e08:	5c9b      	ldrb	r3, [r3, r2]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Receive+0x62>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e0a9      	b.n	8003f66 <HAL_UART_Receive+0x1b6>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2268      	movs	r2, #104	; 0x68
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	226a      	movs	r2, #106	; 0x6a
 8003e24:	2122      	movs	r1, #34	; 0x22
 8003e26:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003e28:	f7fd f908 	bl	800103c <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	61fb      	str	r3, [r7, #28]

    huart->RxXferSize = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1dba      	adds	r2, r7, #6
 8003e34:	2158      	movs	r1, #88	; 0x58
 8003e36:	8812      	ldrh	r2, [r2, #0]
 8003e38:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1dba      	adds	r2, r7, #6
 8003e3e:	215a      	movs	r1, #90	; 0x5a
 8003e40:	8812      	ldrh	r2, [r2, #0]
 8003e42:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	015b      	lsls	r3, r3, #5
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d10d      	bne.n	8003e6c <HAL_UART_Receive+0xbc>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d104      	bne.n	8003e62 <HAL_UART_Receive+0xb2>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	225c      	movs	r2, #92	; 0x5c
 8003e5c:	4944      	ldr	r1, [pc, #272]	; (8003f70 <HAL_UART_Receive+0x1c0>)
 8003e5e:	5299      	strh	r1, [r3, r2]
 8003e60:	e029      	b.n	8003eb6 <HAL_UART_Receive+0x106>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	225c      	movs	r2, #92	; 0x5c
 8003e66:	21ff      	movs	r1, #255	; 0xff
 8003e68:	5299      	strh	r1, [r3, r2]
 8003e6a:	e024      	b.n	8003eb6 <HAL_UART_Receive+0x106>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_UART_Receive+0xe0>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_UART_Receive+0xd6>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	225c      	movs	r2, #92	; 0x5c
 8003e80:	21ff      	movs	r1, #255	; 0xff
 8003e82:	5299      	strh	r1, [r3, r2]
 8003e84:	e017      	b.n	8003eb6 <HAL_UART_Receive+0x106>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	225c      	movs	r2, #92	; 0x5c
 8003e8a:	217f      	movs	r1, #127	; 0x7f
 8003e8c:	5299      	strh	r1, [r3, r2]
 8003e8e:	e012      	b.n	8003eb6 <HAL_UART_Receive+0x106>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	055b      	lsls	r3, r3, #21
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d10c      	bne.n	8003eb6 <HAL_UART_Receive+0x106>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <HAL_UART_Receive+0xfe>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	225c      	movs	r2, #92	; 0x5c
 8003ea8:	217f      	movs	r1, #127	; 0x7f
 8003eaa:	5299      	strh	r1, [r3, r2]
 8003eac:	e003      	b.n	8003eb6 <HAL_UART_Receive+0x106>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	225c      	movs	r2, #92	; 0x5c
 8003eb2:	213f      	movs	r1, #63	; 0x3f
 8003eb4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003eb6:	231a      	movs	r3, #26
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	215c      	movs	r1, #92	; 0x5c
 8003ebe:	5a52      	ldrh	r2, [r2, r1]
 8003ec0:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8003ec2:	e03f      	b.n	8003f44 <HAL_UART_Receive+0x194>
    {
      huart->RxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	225a      	movs	r2, #90	; 0x5a
 8003ec8:	5a9b      	ldrh	r3, [r3, r2]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b299      	uxth	r1, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	225a      	movs	r2, #90	; 0x5a
 8003ed4:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	0013      	movs	r3, r2
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	f000 fc34 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 8003ee8:	1e03      	subs	r3, r0, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_UART_Receive+0x140>
      {
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e03a      	b.n	8003f66 <HAL_UART_Receive+0x1b6>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	015b      	lsls	r3, r3, #5
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d114      	bne.n	8003f26 <HAL_UART_Receive+0x176>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d110      	bne.n	8003f26 <HAL_UART_Receive+0x176>
      {
        tmp = (uint16_t*) pData ;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	221a      	movs	r2, #26
 8003f12:	18ba      	adds	r2, r7, r2
 8003f14:	8812      	ldrh	r2, [r2, #0]
 8003f16:	4013      	ands	r3, r2
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3302      	adds	r3, #2
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	e00e      	b.n	8003f44 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	60ba      	str	r2, [r7, #8]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003f32:	b292      	uxth	r2, r2
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	211a      	movs	r1, #26
 8003f38:	1879      	adds	r1, r7, r1
 8003f3a:	8809      	ldrh	r1, [r1, #0]
 8003f3c:	b2c9      	uxtb	r1, r1
 8003f3e:	400a      	ands	r2, r1
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	225a      	movs	r2, #90	; 0x5a
 8003f48:	5a9b      	ldrh	r3, [r3, r2]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1b9      	bne.n	8003ec4 <HAL_UART_Receive+0x114>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	226a      	movs	r2, #106	; 0x6a
 8003f54:	2120      	movs	r1, #32
 8003f56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2268      	movs	r2, #104	; 0x68
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e000      	b.n	8003f66 <HAL_UART_Receive+0x1b6>
  }
  else
  {
    return HAL_BUSY;
 8003f64:	2302      	movs	r3, #2
  }
}
 8003f66:	0018      	movs	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b008      	add	sp, #32
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	000001ff 	.word	0x000001ff

08003f74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	220f      	movs	r2, #15
 8003f90:	4013      	ands	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10c      	bne.n	8003fb4 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d008      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x40>
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 fcc1 	bl	8004934 <UART_Receive_IT>
      return;
 8003fb2:	e0ef      	b.n	8004194 <HAL_UART_IRQHandler+0x220>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d100      	bne.n	8003fc4 <HAL_UART_IRQHandler+0x50>
 8003fc2:	e0af      	b.n	8004124 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d105      	bne.n	8003fd8 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	2390      	movs	r3, #144	; 0x90
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d100      	bne.n	8003fd8 <HAL_UART_IRQHandler+0x64>
 8003fd6:	e0a5      	b.n	8004124 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_UART_IRQHandler+0x8a>
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2202      	movs	r2, #2
 8004002:	4013      	ands	r3, r2
 8004004:	d00d      	beq.n	8004022 <HAL_UART_IRQHandler+0xae>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2201      	movs	r2, #1
 800400a:	4013      	ands	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2202      	movs	r2, #2
 8004014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401a:	2204      	movs	r2, #4
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2204      	movs	r2, #4
 8004026:	4013      	ands	r3, r2
 8004028:	d00d      	beq.n	8004046 <HAL_UART_IRQHandler+0xd2>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2201      	movs	r2, #1
 800402e:	4013      	ands	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2204      	movs	r2, #4
 8004038:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	2202      	movs	r2, #2
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2208      	movs	r2, #8
 800404a:	4013      	ands	r3, r2
 800404c:	d011      	beq.n	8004072 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2220      	movs	r2, #32
 8004052:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8004054:	d103      	bne.n	800405e <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2201      	movs	r2, #1
 800405a:	4013      	ands	r3, r2
 800405c:	d009      	beq.n	8004072 <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2208      	movs	r2, #8
 8004064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406a:	2208      	movs	r2, #8
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d100      	bne.n	800407c <HAL_UART_IRQHandler+0x108>
 800407a:	e08a      	b.n	8004192 <HAL_UART_IRQHandler+0x21e>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2220      	movs	r2, #32
 8004080:	4013      	ands	r3, r2
 8004082:	d007      	beq.n	8004094 <HAL_UART_IRQHandler+0x120>
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2220      	movs	r2, #32
 8004088:	4013      	ands	r3, r2
 800408a:	d003      	beq.n	8004094 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	0018      	movs	r0, r3
 8004090:	f000 fc50 	bl	8004934 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004098:	2208      	movs	r2, #8
 800409a:	4013      	ands	r3, r2
 800409c:	d105      	bne.n	80040aa <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2240      	movs	r2, #64	; 0x40
 80040a6:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80040a8:	d032      	beq.n	8004110 <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 fb9b 	bl	80047e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2240      	movs	r2, #64	; 0x40
 80040ba:	4013      	ands	r3, r2
 80040bc:	d023      	beq.n	8004106 <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	6892      	ldr	r2, [r2, #8]
 80040c8:	2140      	movs	r1, #64	; 0x40
 80040ca:	438a      	bics	r2, r1
 80040cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d012      	beq.n	80040fc <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040da:	4a30      	ldr	r2, [pc, #192]	; (800419c <HAL_UART_IRQHandler+0x228>)
 80040dc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040e2:	0018      	movs	r0, r3
 80040e4:	f7fd fd70 	bl	8001bc8 <HAL_DMA_Abort_IT>
 80040e8:	1e03      	subs	r3, r0, #0
 80040ea:	d019      	beq.n	8004120 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f6:	0018      	movs	r0, r3
 80040f8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fa:	e011      	b.n	8004120 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 f85e 	bl	80041c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	e00c      	b.n	8004120 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	0018      	movs	r0, r3
 800410a:	f000 f859 	bl	80041c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410e:	e007      	b.n	8004120 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	0018      	movs	r0, r3
 8004114:	f000 f854 	bl	80041c0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 800411e:	e038      	b.n	8004192 <HAL_UART_IRQHandler+0x21e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	46c0      	nop			; (mov r8, r8)
    return;
 8004122:	e036      	b.n	8004192 <HAL_UART_IRQHandler+0x21e>

  } /* End if some error occurs */

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	035b      	lsls	r3, r3, #13
 800412a:	4013      	ands	r3, r2
 800412c:	d016      	beq.n	800415c <HAL_UART_IRQHandler+0x1e8>
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	03db      	lsls	r3, r3, #15
 8004134:	4013      	ands	r3, r2
 8004136:	d011      	beq.n	800415c <HAL_UART_IRQHandler+0x1e8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2280      	movs	r2, #128	; 0x80
 800413e:	0352      	lsls	r2, r2, #13
 8004140:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2269      	movs	r2, #105	; 0x69
 8004146:	2120      	movs	r1, #32
 8004148:	5499      	strb	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	226a      	movs	r2, #106	; 0x6a
 800414e:	2120      	movs	r1, #32
 8004150:	5499      	strb	r1, [r3, r2]
    HAL_UARTEx_WakeupCallback(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	0018      	movs	r0, r3
 8004156:	f000 fc67 	bl	8004a28 <HAL_UARTEx_WakeupCallback>
    return;
 800415a:	e01b      	b.n	8004194 <HAL_UART_IRQHandler+0x220>
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	4013      	ands	r3, r2
 8004162:	d008      	beq.n	8004176 <HAL_UART_IRQHandler+0x202>
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2280      	movs	r2, #128	; 0x80
 8004168:	4013      	ands	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_UART_IRQHandler+0x202>
  {
    UART_Transmit_IT(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	0018      	movs	r0, r3
 8004170:	f000 fb6f 	bl	8004852 <UART_Transmit_IT>
    return;
 8004174:	e00e      	b.n	8004194 <HAL_UART_IRQHandler+0x220>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2240      	movs	r2, #64	; 0x40
 800417a:	4013      	ands	r3, r2
 800417c:	d00a      	beq.n	8004194 <HAL_UART_IRQHandler+0x220>
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2240      	movs	r2, #64	; 0x40
 8004182:	4013      	ands	r3, r2
 8004184:	d006      	beq.n	8004194 <HAL_UART_IRQHandler+0x220>
  {
    UART_EndTransmit_IT(huart);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	0018      	movs	r0, r3
 800418a:	f000 fbb9 	bl	8004900 <UART_EndTransmit_IT>
    return;
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	e000      	b.n	8004194 <HAL_UART_IRQHandler+0x220>
    return;
 8004192:	46c0      	nop			; (mov r8, r8)
  }

}
 8004194:	46bd      	mov	sp, r7
 8004196:	b006      	add	sp, #24
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	08004825 	.word	0x08004825

080041a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b002      	add	sp, #8
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80041dc:	2317      	movs	r3, #23
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	2210      	movs	r2, #16
 80041e2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80041e4:	230a      	movs	r3, #10
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	2200      	movs	r2, #0
 80041ea:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80041ec:	2314      	movs	r3, #20
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	2200      	movs	r2, #0
 80041f2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f4:	2313      	movs	r3, #19
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	49c0      	ldr	r1, [pc, #768]	; (8004520 <UART_SetConfig+0x350>)
 8004220:	4011      	ands	r1, r2
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	6852      	ldr	r2, [r2, #4]
 8004232:	49bc      	ldr	r1, [pc, #752]	; (8004524 <UART_SetConfig+0x354>)
 8004234:	4011      	ands	r1, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68d2      	ldr	r2, [r2, #12]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	6892      	ldr	r2, [r2, #8]
 8004254:	49b4      	ldr	r1, [pc, #720]	; (8004528 <UART_SetConfig+0x358>)
 8004256:	4011      	ands	r1, r2
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	430a      	orrs	r2, r1
 800425c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4ab2      	ldr	r2, [pc, #712]	; (800452c <UART_SetConfig+0x35c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d125      	bne.n	80042b4 <UART_SetConfig+0xe4>
 8004268:	4bb1      	ldr	r3, [pc, #708]	; (8004530 <UART_SetConfig+0x360>)
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	2203      	movs	r2, #3
 800426e:	4013      	ands	r3, r2
 8004270:	2b01      	cmp	r3, #1
 8004272:	d00f      	beq.n	8004294 <UART_SetConfig+0xc4>
 8004274:	d304      	bcc.n	8004280 <UART_SetConfig+0xb0>
 8004276:	2b02      	cmp	r3, #2
 8004278:	d011      	beq.n	800429e <UART_SetConfig+0xce>
 800427a:	2b03      	cmp	r3, #3
 800427c:	d005      	beq.n	800428a <UART_SetConfig+0xba>
 800427e:	e013      	b.n	80042a8 <UART_SetConfig+0xd8>
 8004280:	2317      	movs	r3, #23
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	e064      	b.n	8004354 <UART_SetConfig+0x184>
 800428a:	2317      	movs	r3, #23
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	2202      	movs	r2, #2
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e05f      	b.n	8004354 <UART_SetConfig+0x184>
 8004294:	2317      	movs	r3, #23
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	2204      	movs	r2, #4
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e05a      	b.n	8004354 <UART_SetConfig+0x184>
 800429e:	2317      	movs	r3, #23
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	2208      	movs	r2, #8
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	e055      	b.n	8004354 <UART_SetConfig+0x184>
 80042a8:	2317      	movs	r3, #23
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	2210      	movs	r2, #16
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	46c0      	nop			; (mov r8, r8)
 80042b2:	e04f      	b.n	8004354 <UART_SetConfig+0x184>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a9e      	ldr	r2, [pc, #632]	; (8004534 <UART_SetConfig+0x364>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d132      	bne.n	8004324 <UART_SetConfig+0x154>
 80042be:	4b9c      	ldr	r3, [pc, #624]	; (8004530 <UART_SetConfig+0x360>)
 80042c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c2:	23c0      	movs	r3, #192	; 0xc0
 80042c4:	029b      	lsls	r3, r3, #10
 80042c6:	4013      	ands	r3, r2
 80042c8:	2280      	movs	r2, #128	; 0x80
 80042ca:	0252      	lsls	r2, r2, #9
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d019      	beq.n	8004304 <UART_SetConfig+0x134>
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	0252      	lsls	r2, r2, #9
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d802      	bhi.n	80042de <UART_SetConfig+0x10e>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <UART_SetConfig+0x120>
 80042dc:	e01c      	b.n	8004318 <UART_SetConfig+0x148>
 80042de:	2280      	movs	r2, #128	; 0x80
 80042e0:	0292      	lsls	r2, r2, #10
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <UART_SetConfig+0x13e>
 80042e6:	22c0      	movs	r2, #192	; 0xc0
 80042e8:	0292      	lsls	r2, r2, #10
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d005      	beq.n	80042fa <UART_SetConfig+0x12a>
 80042ee:	e013      	b.n	8004318 <UART_SetConfig+0x148>
 80042f0:	2317      	movs	r3, #23
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e02c      	b.n	8004354 <UART_SetConfig+0x184>
 80042fa:	2317      	movs	r3, #23
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	2202      	movs	r2, #2
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e027      	b.n	8004354 <UART_SetConfig+0x184>
 8004304:	2317      	movs	r3, #23
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	2204      	movs	r2, #4
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e022      	b.n	8004354 <UART_SetConfig+0x184>
 800430e:	2317      	movs	r3, #23
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	2208      	movs	r2, #8
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e01d      	b.n	8004354 <UART_SetConfig+0x184>
 8004318:	2317      	movs	r3, #23
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	2210      	movs	r2, #16
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	e017      	b.n	8004354 <UART_SetConfig+0x184>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a83      	ldr	r2, [pc, #524]	; (8004538 <UART_SetConfig+0x368>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d104      	bne.n	8004338 <UART_SetConfig+0x168>
 800432e:	2317      	movs	r3, #23
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e00d      	b.n	8004354 <UART_SetConfig+0x184>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a7f      	ldr	r2, [pc, #508]	; (800453c <UART_SetConfig+0x36c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d104      	bne.n	800434c <UART_SetConfig+0x17c>
 8004342:	2317      	movs	r3, #23
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	e003      	b.n	8004354 <UART_SetConfig+0x184>
 800434c:	2317      	movs	r3, #23
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	2210      	movs	r2, #16
 8004352:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	429a      	cmp	r2, r3
 800435e:	d000      	beq.n	8004362 <UART_SetConfig+0x192>
 8004360:	e07b      	b.n	800445a <UART_SetConfig+0x28a>
  {
    switch (clocksource)
 8004362:	2317      	movs	r3, #23
 8004364:	18fb      	adds	r3, r7, r3
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d01c      	beq.n	80043a6 <UART_SetConfig+0x1d6>
 800436c:	dc02      	bgt.n	8004374 <UART_SetConfig+0x1a4>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <UART_SetConfig+0x1ae>
 8004372:	e04f      	b.n	8004414 <UART_SetConfig+0x244>
 8004374:	2b04      	cmp	r3, #4
 8004376:	d027      	beq.n	80043c8 <UART_SetConfig+0x1f8>
 8004378:	2b08      	cmp	r3, #8
 800437a:	d039      	beq.n	80043f0 <UART_SetConfig+0x220>
 800437c:	e04a      	b.n	8004414 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800437e:	f7fe fb0d 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8004382:	0003      	movs	r3, r0
 8004384:	005a      	lsls	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	18d2      	adds	r2, r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	0019      	movs	r1, r3
 8004394:	0010      	movs	r0, r2
 8004396:	f7fb febf 	bl	8000118 <__udivsi3>
 800439a:	0003      	movs	r3, r0
 800439c:	001a      	movs	r2, r3
 800439e:	2314      	movs	r3, #20
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	801a      	strh	r2, [r3, #0]
        break;
 80043a4:	e03b      	b.n	800441e <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	4a64      	ldr	r2, [pc, #400]	; (8004540 <UART_SetConfig+0x370>)
 80043ae:	189a      	adds	r2, r3, r2
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	0019      	movs	r1, r3
 80043b6:	0010      	movs	r0, r2
 80043b8:	f7fb feae 	bl	8000118 <__udivsi3>
 80043bc:	0003      	movs	r3, r0
 80043be:	001a      	movs	r2, r3
 80043c0:	2314      	movs	r3, #20
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	801a      	strh	r2, [r3, #0]
        break;
 80043c6:	e02a      	b.n	800441e <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043c8:	f7fe fa60 	bl	800288c <HAL_RCC_GetSysClockFreq>
 80043cc:	0003      	movs	r3, r0
 80043ce:	005a      	lsls	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	18d2      	adds	r2, r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	0019      	movs	r1, r3
 80043de:	0010      	movs	r0, r2
 80043e0:	f7fb fe9a 	bl	8000118 <__udivsi3>
 80043e4:	0003      	movs	r3, r0
 80043e6:	001a      	movs	r2, r3
 80043e8:	2314      	movs	r3, #20
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	801a      	strh	r2, [r3, #0]
        break;
 80043ee:	e016      	b.n	800441e <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	2280      	movs	r2, #128	; 0x80
 80043f8:	0252      	lsls	r2, r2, #9
 80043fa:	189a      	adds	r2, r3, r2
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	0019      	movs	r1, r3
 8004402:	0010      	movs	r0, r2
 8004404:	f7fb fe88 	bl	8000118 <__udivsi3>
 8004408:	0003      	movs	r3, r0
 800440a:	001a      	movs	r2, r3
 800440c:	2314      	movs	r3, #20
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	801a      	strh	r2, [r3, #0]
        break;
 8004412:	e004      	b.n	800441e <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004414:	2313      	movs	r3, #19
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	2201      	movs	r2, #1
 800441a:	701a      	strb	r2, [r3, #0]
        break;
 800441c:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 800441e:	230a      	movs	r3, #10
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	2214      	movs	r2, #20
 8004424:	18ba      	adds	r2, r7, r2
 8004426:	8812      	ldrh	r2, [r2, #0]
 8004428:	210f      	movs	r1, #15
 800442a:	438a      	bics	r2, r1
 800442c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800442e:	2314      	movs	r3, #20
 8004430:	18fb      	adds	r3, r7, r3
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	105b      	asrs	r3, r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	2207      	movs	r2, #7
 800443a:	4013      	ands	r3, r2
 800443c:	b299      	uxth	r1, r3
 800443e:	230a      	movs	r3, #10
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	220a      	movs	r2, #10
 8004444:	18ba      	adds	r2, r7, r2
 8004446:	8812      	ldrh	r2, [r2, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	220a      	movs	r2, #10
 8004452:	18ba      	adds	r2, r7, r2
 8004454:	8812      	ldrh	r2, [r2, #0]
 8004456:	60da      	str	r2, [r3, #12]
 8004458:	e05b      	b.n	8004512 <UART_SetConfig+0x342>
  }
  else
  {
    switch (clocksource)
 800445a:	2317      	movs	r3, #23
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d01b      	beq.n	800449c <UART_SetConfig+0x2cc>
 8004464:	dc02      	bgt.n	800446c <UART_SetConfig+0x29c>
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <UART_SetConfig+0x2a6>
 800446a:	e04d      	b.n	8004508 <UART_SetConfig+0x338>
 800446c:	2b04      	cmp	r3, #4
 800446e:	d026      	beq.n	80044be <UART_SetConfig+0x2ee>
 8004470:	2b08      	cmp	r3, #8
 8004472:	d037      	beq.n	80044e4 <UART_SetConfig+0x314>
 8004474:	e048      	b.n	8004508 <UART_SetConfig+0x338>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681c      	ldr	r4, [r3, #0]
 800447a:	f7fe fa8f 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 800447e:	0002      	movs	r2, r0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	18d2      	adds	r2, r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0019      	movs	r1, r3
 800448e:	0010      	movs	r0, r2
 8004490:	f7fb fe42 	bl	8000118 <__udivsi3>
 8004494:	0003      	movs	r3, r0
 8004496:	b29b      	uxth	r3, r3
 8004498:	60e3      	str	r3, [r4, #12]
        break;
 800449a:	e03a      	b.n	8004512 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681c      	ldr	r4, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	085b      	lsrs	r3, r3, #1
 80044a6:	4a27      	ldr	r2, [pc, #156]	; (8004544 <UART_SetConfig+0x374>)
 80044a8:	189a      	adds	r2, r3, r2
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	0019      	movs	r1, r3
 80044b0:	0010      	movs	r0, r2
 80044b2:	f7fb fe31 	bl	8000118 <__udivsi3>
 80044b6:	0003      	movs	r3, r0
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	60e3      	str	r3, [r4, #12]
        break;
 80044bc:	e029      	b.n	8004512 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681c      	ldr	r4, [r3, #0]
 80044c2:	f7fe f9e3 	bl	800288c <HAL_RCC_GetSysClockFreq>
 80044c6:	0002      	movs	r2, r0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	18d2      	adds	r2, r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	0019      	movs	r1, r3
 80044d6:	0010      	movs	r0, r2
 80044d8:	f7fb fe1e 	bl	8000118 <__udivsi3>
 80044dc:	0003      	movs	r3, r0
 80044de:	b29b      	uxth	r3, r3
 80044e0:	60e3      	str	r3, [r4, #12]
        break;
 80044e2:	e016      	b.n	8004512 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681c      	ldr	r4, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	085b      	lsrs	r3, r3, #1
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	0212      	lsls	r2, r2, #8
 80044f2:	189a      	adds	r2, r3, r2
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	0019      	movs	r1, r3
 80044fa:	0010      	movs	r0, r2
 80044fc:	f7fb fe0c 	bl	8000118 <__udivsi3>
 8004500:	0003      	movs	r3, r0
 8004502:	b29b      	uxth	r3, r3
 8004504:	60e3      	str	r3, [r4, #12]
        break;
 8004506:	e004      	b.n	8004512 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004508:	2313      	movs	r3, #19
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
        break;
 8004510:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8004512:	2313      	movs	r3, #19
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	781b      	ldrb	r3, [r3, #0]

}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	b007      	add	sp, #28
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	efff69f3 	.word	0xefff69f3
 8004524:	ffffcfff 	.word	0xffffcfff
 8004528:	fffff4ff 	.word	0xfffff4ff
 800452c:	40013800 	.word	0x40013800
 8004530:	40021000 	.word	0x40021000
 8004534:	40004400 	.word	0x40004400
 8004538:	40004800 	.word	0x40004800
 800453c:	40004c00 	.word	0x40004c00
 8004540:	00f42400 	.word	0x00f42400
 8004544:	007a1200 	.word	0x007a1200

08004548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	2201      	movs	r2, #1
 8004556:	4013      	ands	r3, r2
 8004558:	d00a      	beq.n	8004570 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	6852      	ldr	r2, [r2, #4]
 8004564:	4945      	ldr	r1, [pc, #276]	; (800467c <UART_AdvFeatureConfig+0x134>)
 8004566:	4011      	ands	r1, r2
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800456c:	430a      	orrs	r2, r1
 800456e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2202      	movs	r2, #2
 8004576:	4013      	ands	r3, r2
 8004578:	d00a      	beq.n	8004590 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	6852      	ldr	r2, [r2, #4]
 8004584:	493e      	ldr	r1, [pc, #248]	; (8004680 <UART_AdvFeatureConfig+0x138>)
 8004586:	4011      	ands	r1, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	2204      	movs	r2, #4
 8004596:	4013      	ands	r3, r2
 8004598:	d00a      	beq.n	80045b0 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	6852      	ldr	r2, [r2, #4]
 80045a4:	4937      	ldr	r1, [pc, #220]	; (8004684 <UART_AdvFeatureConfig+0x13c>)
 80045a6:	4011      	ands	r1, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	2208      	movs	r2, #8
 80045b6:	4013      	ands	r3, r2
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	6852      	ldr	r2, [r2, #4]
 80045c4:	4930      	ldr	r1, [pc, #192]	; (8004688 <UART_AdvFeatureConfig+0x140>)
 80045c6:	4011      	ands	r1, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	2210      	movs	r2, #16
 80045d6:	4013      	ands	r3, r2
 80045d8:	d00a      	beq.n	80045f0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	6892      	ldr	r2, [r2, #8]
 80045e4:	4929      	ldr	r1, [pc, #164]	; (800468c <UART_AdvFeatureConfig+0x144>)
 80045e6:	4011      	ands	r1, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045ec:	430a      	orrs	r2, r1
 80045ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	2220      	movs	r2, #32
 80045f6:	4013      	ands	r3, r2
 80045f8:	d00a      	beq.n	8004610 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	6892      	ldr	r2, [r2, #8]
 8004604:	4922      	ldr	r1, [pc, #136]	; (8004690 <UART_AdvFeatureConfig+0x148>)
 8004606:	4011      	ands	r1, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800460c:	430a      	orrs	r2, r1
 800460e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2240      	movs	r2, #64	; 0x40
 8004616:	4013      	ands	r3, r2
 8004618:	d01b      	beq.n	8004652 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	6852      	ldr	r2, [r2, #4]
 8004624:	491b      	ldr	r1, [pc, #108]	; (8004694 <UART_AdvFeatureConfig+0x14c>)
 8004626:	4011      	ands	r1, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	035b      	lsls	r3, r3, #13
 8004638:	429a      	cmp	r2, r3
 800463a:	d10a      	bne.n	8004652 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	6852      	ldr	r2, [r2, #4]
 8004646:	4914      	ldr	r1, [pc, #80]	; (8004698 <UART_AdvFeatureConfig+0x150>)
 8004648:	4011      	ands	r1, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2280      	movs	r2, #128	; 0x80
 8004658:	4013      	ands	r3, r2
 800465a:	d00a      	beq.n	8004672 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	6852      	ldr	r2, [r2, #4]
 8004666:	490d      	ldr	r1, [pc, #52]	; (800469c <UART_AdvFeatureConfig+0x154>)
 8004668:	4011      	ands	r1, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
  }
}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	b002      	add	sp, #8
 8004678:	bd80      	pop	{r7, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	fffdffff 	.word	0xfffdffff
 8004680:	fffeffff 	.word	0xfffeffff
 8004684:	fffbffff 	.word	0xfffbffff
 8004688:	ffff7fff 	.word	0xffff7fff
 800468c:	ffffefff 	.word	0xffffefff
 8004690:	ffffdfff 	.word	0xffffdfff
 8004694:	ffefffff 	.word	0xffefffff
 8004698:	ff9fffff 	.word	0xff9fffff
 800469c:	fff7ffff 	.word	0xfff7ffff

080046a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80046b2:	f7fc fcc3 	bl	800103c <HAL_GetTick>
 80046b6:	0003      	movs	r3, r0
 80046b8:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a21      	ldr	r2, [pc, #132]	; (8004744 <UART_CheckIdleState+0xa4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <UART_CheckIdleState+0x2e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1f      	ldr	r2, [pc, #124]	; (8004748 <UART_CheckIdleState+0xa8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d129      	bne.n	8004722 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2208      	movs	r2, #8
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d10d      	bne.n	80046f8 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	0399      	lsls	r1, r3, #14
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <UART_CheckIdleState+0xac>)
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	0013      	movs	r3, r2
 80046ea:	2200      	movs	r2, #0
 80046ec:	f000 f830 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d001      	beq.n	80046f8 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e021      	b.n	800473c <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2204      	movs	r2, #4
 8004700:	4013      	ands	r3, r2
 8004702:	2b04      	cmp	r3, #4
 8004704:	d10d      	bne.n	8004722 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	03d9      	lsls	r1, r3, #15
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4b0f      	ldr	r3, [pc, #60]	; (800474c <UART_CheckIdleState+0xac>)
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	0013      	movs	r3, r2
 8004714:	2200      	movs	r2, #0
 8004716:	f000 f81b 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 800471a:	1e03      	subs	r3, r0, #0
 800471c:	d001      	beq.n	8004722 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e00c      	b.n	800473c <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2269      	movs	r2, #105	; 0x69
 8004726:	2120      	movs	r1, #32
 8004728:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	226a      	movs	r2, #106	; 0x6a
 800472e:	2120      	movs	r1, #32
 8004730:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2268      	movs	r2, #104	; 0x68
 8004736:	2100      	movs	r1, #0
 8004738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	b004      	add	sp, #16
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40013800 	.word	0x40013800
 8004748:	40004400 	.word	0x40004400
 800474c:	01ffffff 	.word	0x01ffffff

08004750 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	1dfb      	adds	r3, r7, #7
 800475e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004760:	e02b      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	3301      	adds	r3, #1
 8004766:	d028      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0x2e>
 800476e:	f7fc fc65 	bl	800103c <HAL_GetTick>
 8004772:	0002      	movs	r2, r0
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	1ad2      	subs	r2, r2, r3
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	429a      	cmp	r2, r3
 800477c:	d91d      	bls.n	80047ba <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	4916      	ldr	r1, [pc, #88]	; (80047e4 <UART_WaitOnFlagUntilTimeout+0x94>)
 800478a:	400a      	ands	r2, r1
 800478c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	6892      	ldr	r2, [r2, #8]
 8004798:	2101      	movs	r1, #1
 800479a:	438a      	bics	r2, r1
 800479c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2269      	movs	r2, #105	; 0x69
 80047a2:	2120      	movs	r1, #32
 80047a4:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	226a      	movs	r2, #106	; 0x6a
 80047aa:	2120      	movs	r1, #32
 80047ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2268      	movs	r2, #104	; 0x68
 80047b2:	2100      	movs	r1, #0
 80047b4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00f      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	401a      	ands	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	425a      	negs	r2, r3
 80047ca:	4153      	adcs	r3, r2
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	001a      	movs	r2, r3
 80047d0:	1dfb      	adds	r3, r7, #7
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d0c4      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b004      	add	sp, #16
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	fffffe5f 	.word	0xfffffe5f

080047e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	4909      	ldr	r1, [pc, #36]	; (8004820 <UART_EndRxTransfer+0x38>)
 80047fc:	400a      	ands	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	6892      	ldr	r2, [r2, #8]
 800480a:	2101      	movs	r1, #1
 800480c:	438a      	bics	r2, r1
 800480e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	226a      	movs	r2, #106	; 0x6a
 8004814:	2120      	movs	r1, #32
 8004816:	5499      	strb	r1, [r3, r2]
}
 8004818:	46c0      	nop			; (mov r8, r8)
 800481a:	46bd      	mov	sp, r7
 800481c:	b002      	add	sp, #8
 800481e:	bd80      	pop	{r7, pc}
 8004820:	fffffedf 	.word	0xfffffedf

08004824 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	225a      	movs	r2, #90	; 0x5a
 8004836:	2100      	movs	r1, #0
 8004838:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2252      	movs	r2, #82	; 0x52
 800483e:	2100      	movs	r1, #0
 8004840:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	0018      	movs	r0, r3
 8004846:	f7ff fcbb 	bl	80041c0 <HAL_UART_ErrorCallback>
}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	46bd      	mov	sp, r7
 800484e:	b004      	add	sp, #16
 8004850:	bd80      	pop	{r7, pc}

08004852 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2269      	movs	r2, #105	; 0x69
 800485e:	5c9b      	ldrb	r3, [r3, r2]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b21      	cmp	r3, #33	; 0x21
 8004864:	d147      	bne.n	80048f6 <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2252      	movs	r2, #82	; 0x52
 800486a:	5a9b      	ldrh	r3, [r3, r2]
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d111      	bne.n	8004896 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	438a      	bics	r2, r1
 8004880:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	2140      	movs	r1, #64	; 0x40
 800488e:	430a      	orrs	r2, r1
 8004890:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e030      	b.n	80048f8 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	015b      	lsls	r3, r3, #5
 800489e:	429a      	cmp	r2, r3
 80048a0:	d114      	bne.n	80048cc <UART_Transmit_IT+0x7a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d110      	bne.n	80048cc <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	8812      	ldrh	r2, [r2, #0]
 80048b8:	05d2      	lsls	r2, r2, #23
 80048ba:	0dd2      	lsrs	r2, r2, #23
 80048bc:	b292      	uxth	r2, r2
 80048be:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c4:	1c9a      	adds	r2, r3, #2
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80048ca:	e009      	b.n	80048e0 <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d4:	1c58      	adds	r0, r3, #1
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	64d0      	str	r0, [r2, #76]	; 0x4c
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	850b      	strh	r3, [r1, #40]	; 0x28
      }
      huart->TxXferCount--;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2252      	movs	r2, #82	; 0x52
 80048e4:	5a9b      	ldrh	r3, [r3, r2]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b299      	uxth	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2252      	movs	r2, #82	; 0x52
 80048f0:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e000      	b.n	80048f8 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
  }
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b004      	add	sp, #16
 80048fe:	bd80      	pop	{r7, pc}

08004900 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	2140      	movs	r1, #64	; 0x40
 8004914:	438a      	bics	r2, r1
 8004916:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2269      	movs	r2, #105	; 0x69
 800491c:	2120      	movs	r1, #32
 800491e:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	0018      	movs	r0, r3
 8004924:	f7ff fc3c 	bl	80041a0 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	0018      	movs	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	b002      	add	sp, #8
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 800493c:	230e      	movs	r3, #14
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	215c      	movs	r1, #92	; 0x5c
 8004944:	5a52      	ldrh	r2, [r2, r1]
 8004946:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	226a      	movs	r2, #106	; 0x6a
 800494c:	5c9b      	ldrb	r3, [r3, r2]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b22      	cmp	r3, #34	; 0x22
 8004952:	d15a      	bne.n	8004a0a <UART_Receive_IT+0xd6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	230c      	movs	r3, #12
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800495e:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	015b      	lsls	r3, r3, #5
 8004968:	429a      	cmp	r2, r3
 800496a:	d116      	bne.n	800499a <UART_Receive_IT+0x66>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d112      	bne.n	800499a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 800497a:	230c      	movs	r3, #12
 800497c:	18fb      	adds	r3, r7, r3
 800497e:	220e      	movs	r2, #14
 8004980:	18ba      	adds	r2, r7, r2
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	8812      	ldrh	r2, [r2, #0]
 8004986:	4013      	ands	r3, r2
 8004988:	b29a      	uxth	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	1c9a      	adds	r2, r3, #2
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	655a      	str	r2, [r3, #84]	; 0x54
 8004998:	e00f      	b.n	80049ba <UART_Receive_IT+0x86>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	1c59      	adds	r1, r3, #1
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6551      	str	r1, [r2, #84]	; 0x54
 80049a4:	220c      	movs	r2, #12
 80049a6:	18ba      	adds	r2, r7, r2
 80049a8:	8812      	ldrh	r2, [r2, #0]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	210e      	movs	r1, #14
 80049ae:	1879      	adds	r1, r7, r1
 80049b0:	8809      	ldrh	r1, [r1, #0]
 80049b2:	b2c9      	uxtb	r1, r1
 80049b4:	400a      	ands	r2, r1
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	225a      	movs	r2, #90	; 0x5a
 80049be:	5a9b      	ldrh	r3, [r3, r2]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	215a      	movs	r1, #90	; 0x5a
 80049ca:	1c18      	adds	r0, r3, #0
 80049cc:	5250      	strh	r0, [r2, r1]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d119      	bne.n	8004a06 <UART_Receive_IT+0xd2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	4911      	ldr	r1, [pc, #68]	; (8004a24 <UART_Receive_IT+0xf0>)
 80049de:	400a      	ands	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	6892      	ldr	r2, [r2, #8]
 80049ec:	2101      	movs	r1, #1
 80049ee:	438a      	bics	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	226a      	movs	r2, #106	; 0x6a
 80049f6:	2120      	movs	r1, #32
 80049f8:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7ff fbd7 	bl	80041b0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e00a      	b.n	8004a1c <UART_Receive_IT+0xe8>
    }

    return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e008      	b.n	8004a1c <UART_Receive_IT+0xe8>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	6992      	ldr	r2, [r2, #24]
 8004a14:	2108      	movs	r1, #8
 8004a16:	430a      	orrs	r2, r1
 8004a18:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b004      	add	sp, #16
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	fffffedf 	.word	0xfffffedf

08004a28 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	46bd      	mov	sp, r7
 8004a34:	b002      	add	sp, #8
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004a3c:	f000 ff5e 	bl	80058fc <xTaskGetSchedulerState>
 8004a40:	0003      	movs	r3, r0
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d001      	beq.n	8004a4a <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8004a46:	f000 f997 	bl	8004d78 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	001a      	movs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	4252      	negs	r2, r2
 8004a68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	001a      	movs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3308      	adds	r3, #8
 8004a78:	001a      	movs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a84:	46c0      	nop			; (mov r8, r8)
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b002      	add	sp, #8
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b004      	add	sp, #16
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	3301      	adds	r3, #1
 8004afa:	d103      	bne.n	8004b04 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	e00c      	b.n	8004b1e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3308      	adds	r3, #8
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e002      	b.n	8004b12 <vListInsert+0x2c>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d9f6      	bls.n	8004b0c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	601a      	str	r2, [r3, #0]
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b004      	add	sp, #16
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6892      	ldr	r2, [r2, #8]
 8004b68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6852      	ldr	r2, [r2, #4]
 8004b72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d103      	bne.n	8004b86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	1e5a      	subs	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
}
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b004      	add	sp, #16
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3b04      	subs	r3, #4
 8004bb4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2280      	movs	r2, #128	; 0x80
 8004bba:	0452      	lsls	r2, r2, #17
 8004bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b04      	subs	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3b04      	subs	r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bd0:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <pxPortInitialiseStack+0x50>)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3b14      	subs	r3, #20
 8004bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3b20      	subs	r3, #32
 8004be6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004be8:	68fb      	ldr	r3, [r7, #12]
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b004      	add	sp, #16
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	08004bf9 	.word	0x08004bf9

08004bf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bfc:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <prvTaskExitError+0x14>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	d001      	beq.n	8004c08 <prvTaskExitError+0x10>
 8004c04:	b672      	cpsid	i
 8004c06:	e7fe      	b.n	8004c06 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8004c08:	b672      	cpsid	i
	for( ;; );
 8004c0a:	e7fe      	b.n	8004c0a <prvTaskExitError+0x12>
 8004c0c:	20000000 	.word	0x20000000

08004c10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	0000      	movs	r0, r0
 8004c1c:	0000      	movs	r0, r0
	...

08004c20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004c20:	4a0b      	ldr	r2, [pc, #44]	; (8004c50 <pxCurrentTCBConst2>)
 8004c22:	6813      	ldr	r3, [r2, #0]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	3020      	adds	r0, #32
 8004c28:	f380 8809 	msr	PSP, r0
 8004c2c:	2002      	movs	r0, #2
 8004c2e:	f380 8814 	msr	CONTROL, r0
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004c38:	46ae      	mov	lr, r5
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	bc04      	pop	{r2}
 8004c3e:	b662      	cpsie	i
 8004c40:	4718      	bx	r3
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	46c0      	nop			; (mov r8, r8)
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	46c0      	nop			; (mov r8, r8)
 8004c4e:	46c0      	nop			; (mov r8, r8)

08004c50 <pxCurrentTCBConst2>:
 8004c50:	20001878 	.word	0x20001878
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	46c0      	nop			; (mov r8, r8)

08004c58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <xPortStartScheduler+0x3c>)
 8004c5e:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <xPortStartScheduler+0x3c>)
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	21ff      	movs	r1, #255	; 0xff
 8004c64:	0409      	lsls	r1, r1, #16
 8004c66:	430a      	orrs	r2, r1
 8004c68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <xPortStartScheduler+0x3c>)
 8004c6c:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <xPortStartScheduler+0x3c>)
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	21ff      	movs	r1, #255	; 0xff
 8004c72:	0609      	lsls	r1, r1, #24
 8004c74:	430a      	orrs	r2, r1
 8004c76:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c78:	f000 f898 	bl	8004dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <xPortStartScheduler+0x40>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004c82:	f7ff ffcd 	bl	8004c20 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8004c86:	f7ff ffb7 	bl	8004bf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	e000ed20 	.word	0xe000ed20
 8004c98:	20000000 	.word	0x20000000

08004c9c <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <vPortYield+0x1c>)
 8004ca2:	2280      	movs	r2, #128	; 0x80
 8004ca4:	0552      	lsls	r2, r2, #21
 8004ca6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8004ca8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004cac:	f3bf 8f6f 	isb	sy
}
 8004cb0:	46c0      	nop			; (mov r8, r8)
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004cc0:	b672      	cpsid	i
    uxCriticalNesting++;
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <vPortEnterCritical+0x20>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <vPortEnterCritical+0x20>)
 8004cca:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8004ccc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004cd0:	f3bf 8f6f 	isb	sy
}
 8004cd4:	46c0      	nop			; (mov r8, r8)
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	20000000 	.word	0x20000000

08004ce0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ce4:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <vPortExitCritical+0x2c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <vPortExitCritical+0x10>
 8004cec:	b672      	cpsid	i
 8004cee:	e7fe      	b.n	8004cee <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <vPortExitCritical+0x2c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	1e5a      	subs	r2, r3, #1
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <vPortExitCritical+0x2c>)
 8004cf8:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8004cfa:	4b04      	ldr	r3, [pc, #16]	; (8004d0c <vPortExitCritical+0x2c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d100      	bne.n	8004d04 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004d02:	b662      	cpsie	i
    }
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	20000000 	.word	0x20000000

08004d10 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004d10:	f3ef 8010 	mrs	r0, PRIMASK
 8004d14:	b672      	cpsid	i
 8004d16:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	0018      	movs	r0, r3

08004d1c <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 8004d1c:	f380 8810 	msr	PRIMASK, r0
 8004d20:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
 8004d22:	46c0      	nop			; (mov r8, r8)
	...

08004d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d30:	f3ef 8009 	mrs	r0, PSP
 8004d34:	4b0e      	ldr	r3, [pc, #56]	; (8004d70 <pxCurrentTCBConst>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	3820      	subs	r0, #32
 8004d3a:	6010      	str	r0, [r2, #0]
 8004d3c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004d3e:	4644      	mov	r4, r8
 8004d40:	464d      	mov	r5, r9
 8004d42:	4656      	mov	r6, sl
 8004d44:	465f      	mov	r7, fp
 8004d46:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004d48:	b508      	push	{r3, lr}
 8004d4a:	b672      	cpsid	i
 8004d4c:	f000 fcc0 	bl	80056d0 <vTaskSwitchContext>
 8004d50:	b662      	cpsie	i
 8004d52:	bc0c      	pop	{r2, r3}
 8004d54:	6811      	ldr	r1, [r2, #0]
 8004d56:	6808      	ldr	r0, [r1, #0]
 8004d58:	3010      	adds	r0, #16
 8004d5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004d5c:	46a0      	mov	r8, r4
 8004d5e:	46a9      	mov	r9, r5
 8004d60:	46b2      	mov	sl, r6
 8004d62:	46bb      	mov	fp, r7
 8004d64:	f380 8809 	msr	PSP, r0
 8004d68:	3820      	subs	r0, #32
 8004d6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004d6c:	4718      	bx	r3
 8004d6e:	46c0      	nop			; (mov r8, r8)

08004d70 <pxCurrentTCBConst>:
 8004d70:	20001878 	.word	0x20001878
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	46c0      	nop			; (mov r8, r8)

08004d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d7e:	f7ff ffc7 	bl	8004d10 <ulSetInterruptMaskFromISR>
 8004d82:	0003      	movs	r3, r0
 8004d84:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d86:	f000 fbef 	bl	8005568 <xTaskIncrementTick>
 8004d8a:	1e03      	subs	r3, r0, #0
 8004d8c:	d003      	beq.n	8004d96 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <xPortSysTickHandler+0x30>)
 8004d90:	2280      	movs	r2, #128	; 0x80
 8004d92:	0552      	lsls	r2, r2, #21
 8004d94:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7ff ffbf 	bl	8004d1c <vClearInterruptMaskFromISR>
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b002      	add	sp, #8
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dac:	b5b0      	push	{r4, r5, r7, lr}
 8004dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004db0:	4c07      	ldr	r4, [pc, #28]	; (8004dd0 <vPortSetupTimerInterrupt+0x24>)
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <vPortSetupTimerInterrupt+0x28>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	21c8      	movs	r1, #200	; 0xc8
 8004db8:	0018      	movs	r0, r3
 8004dba:	f7fb f9ad 	bl	8000118 <__udivsi3>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <vPortSetupTimerInterrupt+0x2c>)
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	601a      	str	r2, [r3, #0]
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bdb0      	pop	{r4, r5, r7, pc}
 8004dd0:	e000e014 	.word	0xe000e014
 8004dd4:	20000064 	.word	0x20000064
 8004dd8:	e000e010 	.word	0xe000e010

08004ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004de8:	f000 fb26 	bl	8005438 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dec:	4b49      	ldr	r3, [pc, #292]	; (8004f14 <pvPortMalloc+0x138>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004df4:	f000 f8e0 	bl	8004fb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004df8:	4b47      	ldr	r3, [pc, #284]	; (8004f18 <pvPortMalloc+0x13c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d000      	beq.n	8004e04 <pvPortMalloc+0x28>
 8004e02:	e079      	b.n	8004ef8 <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d012      	beq.n	8004e30 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	189b      	adds	r3, r3, r2
 8004e10:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2207      	movs	r2, #7
 8004e16:	4013      	ands	r3, r2
 8004e18:	d00a      	beq.n	8004e30 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2207      	movs	r2, #7
 8004e1e:	4393      	bics	r3, r2
 8004e20:	3308      	adds	r3, #8
 8004e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2207      	movs	r2, #7
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d001      	beq.n	8004e30 <pvPortMalloc+0x54>
 8004e2c:	b672      	cpsid	i
 8004e2e:	e7fe      	b.n	8004e2e <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d060      	beq.n	8004ef8 <pvPortMalloc+0x11c>
 8004e36:	4b39      	ldr	r3, [pc, #228]	; (8004f1c <pvPortMalloc+0x140>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d85b      	bhi.n	8004ef8 <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e40:	4b37      	ldr	r3, [pc, #220]	; (8004f20 <pvPortMalloc+0x144>)
 8004e42:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004e44:	4b36      	ldr	r3, [pc, #216]	; (8004f20 <pvPortMalloc+0x144>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e4a:	e004      	b.n	8004e56 <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d203      	bcs.n	8004e68 <pvPortMalloc+0x8c>
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f1      	bne.n	8004e4c <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e68:	4b2a      	ldr	r3, [pc, #168]	; (8004f14 <pvPortMalloc+0x138>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d042      	beq.n	8004ef8 <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2208      	movs	r2, #8
 8004e78:	189b      	adds	r3, r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1ad2      	subs	r2, r2, r3
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d916      	bls.n	8004ec2 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	18d3      	adds	r3, r2, r3
 8004e9a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2207      	movs	r2, #7
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d001      	beq.n	8004ea8 <pvPortMalloc+0xcc>
 8004ea4:	b672      	cpsid	i
 8004ea6:	e7fe      	b.n	8004ea6 <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	1ad2      	subs	r2, r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f000 f8db 	bl	8005078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ec2:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <pvPortMalloc+0x140>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	1ad2      	subs	r2, r2, r3
 8004ecc:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <pvPortMalloc+0x140>)
 8004ece:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <pvPortMalloc+0x140>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <pvPortMalloc+0x148>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d203      	bcs.n	8004ee4 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004edc:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <pvPortMalloc+0x140>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <pvPortMalloc+0x148>)
 8004ee2:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <pvPortMalloc+0x13c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ef8:	f000 faaa 	bl	8005450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2207      	movs	r2, #7
 8004f00:	4013      	ands	r3, r2
 8004f02:	d001      	beq.n	8004f08 <pvPortMalloc+0x12c>
 8004f04:	b672      	cpsid	i
 8004f06:	e7fe      	b.n	8004f06 <pvPortMalloc+0x12a>
	return pvReturn;
 8004f08:	68fb      	ldr	r3, [r7, #12]
}
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b006      	add	sp, #24
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	20001868 	.word	0x20001868
 8004f18:	20001874 	.word	0x20001874
 8004f1c:	2000186c 	.word	0x2000186c
 8004f20:	20001860 	.word	0x20001860
 8004f24:	20001870 	.word	0x20001870

08004f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d035      	beq.n	8004fa6 <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	425b      	negs	r3, r3
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	18d3      	adds	r3, r2, r3
 8004f42:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <vPortFree+0x88>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4013      	ands	r3, r2
 8004f52:	d101      	bne.n	8004f58 <vPortFree+0x30>
 8004f54:	b672      	cpsid	i
 8004f56:	e7fe      	b.n	8004f56 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <vPortFree+0x3c>
 8004f60:	b672      	cpsid	i
 8004f62:	e7fe      	b.n	8004f62 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <vPortFree+0x88>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d01a      	beq.n	8004fa6 <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d116      	bne.n	8004fa6 <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <vPortFree+0x88>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	401a      	ands	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f88:	f000 fa56 	bl	8005438 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <vPortFree+0x8c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	18d2      	adds	r2, r2, r3
 8004f96:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <vPortFree+0x8c>)
 8004f98:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f000 f86b 	bl	8005078 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004fa2:	f000 fa55 	bl	8005450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b004      	add	sp, #16
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	20001874 	.word	0x20001874
 8004fb4:	2000186c 	.word	0x2000186c

08004fb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fbe:	4b27      	ldr	r3, [pc, #156]	; (800505c <prvHeapInit+0xa4>)
 8004fc0:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fc2:	4b27      	ldr	r3, [pc, #156]	; (8005060 <prvHeapInit+0xa8>)
 8004fc4:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2207      	movs	r2, #7
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d00c      	beq.n	8004fe8 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3307      	adds	r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2207      	movs	r2, #7
 8004fd8:	4393      	bics	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad2      	subs	r2, r2, r3
 8004fe2:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <prvHeapInit+0xa8>)
 8004fe4:	18d3      	adds	r3, r2, r3
 8004fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fec:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <prvHeapInit+0xac>)
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <prvHeapInit+0xac>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	18d3      	adds	r3, r2, r3
 8004ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005000:	2208      	movs	r2, #8
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2207      	movs	r2, #7
 800500c:	4393      	bics	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <prvHeapInit+0xb0>)
 8005014:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <prvHeapInit+0xb0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <prvHeapInit+0xb0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	1ad2      	subs	r2, r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <prvHeapInit+0xb0>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <prvHeapInit+0xb4>)
 8005042:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <prvHeapInit+0xb8>)
 800504a:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <prvHeapInit+0xbc>)
 800504e:	2280      	movs	r2, #128	; 0x80
 8005050:	0612      	lsls	r2, r2, #24
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	46bd      	mov	sp, r7
 8005058:	b004      	add	sp, #16
 800505a:	bd80      	pop	{r7, pc}
 800505c:	00001770 	.word	0x00001770
 8005060:	200000f0 	.word	0x200000f0
 8005064:	20001860 	.word	0x20001860
 8005068:	20001868 	.word	0x20001868
 800506c:	20001870 	.word	0x20001870
 8005070:	2000186c 	.word	0x2000186c
 8005074:	20001874 	.word	0x20001874

08005078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005080:	4b27      	ldr	r3, [pc, #156]	; (8005120 <prvInsertBlockIntoFreeList+0xa8>)
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e002      	b.n	800508c <prvInsertBlockIntoFreeList+0x14>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d3f7      	bcc.n	8005086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	18d2      	adds	r2, r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d108      	bne.n	80050ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	18d2      	adds	r2, r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	18d2      	adds	r2, r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d118      	bne.n	8005100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b14      	ldr	r3, [pc, #80]	; (8005124 <prvInsertBlockIntoFreeList+0xac>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d00d      	beq.n	80050f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	18d2      	adds	r2, r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e008      	b.n	8005108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <prvInsertBlockIntoFreeList+0xac>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e003      	b.n	8005108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	d002      	beq.n	8005116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	46bd      	mov	sp, r7
 800511a:	b004      	add	sp, #16
 800511c:	bd80      	pop	{r7, pc}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	20001860 	.word	0x20001860
 8005124:	20001868 	.word	0x20001868

08005128 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b08d      	sub	sp, #52	; 0x34
 800512c:	af04      	add	r7, sp, #16
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	1dbb      	adds	r3, r7, #6
 8005136:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005138:	1dbb      	adds	r3, r7, #6
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	0018      	movs	r0, r3
 8005140:	f7ff fe4c 	bl	8004ddc <pvPortMalloc>
 8005144:	0003      	movs	r3, r0
 8005146:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d010      	beq.n	8005170 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800514e:	2054      	movs	r0, #84	; 0x54
 8005150:	f7ff fe44 	bl	8004ddc <pvPortMalloc>
 8005154:	0003      	movs	r3, r0
 8005156:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
 8005164:	e006      	b.n	8005174 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	0018      	movs	r0, r3
 800516a:	f7ff fedd 	bl	8004f28 <vPortFree>
 800516e:	e001      	b.n	8005174 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d016      	beq.n	80051a8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800517a:	1dbb      	adds	r3, r7, #6
 800517c:	881a      	ldrh	r2, [r3, #0]
 800517e:	683c      	ldr	r4, [r7, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	2300      	movs	r3, #0
 8005186:	9303      	str	r3, [sp, #12]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	9302      	str	r3, [sp, #8]
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	0023      	movs	r3, r4
 8005196:	f000 f80f 	bl	80051b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	0018      	movs	r0, r3
 800519e:	f000 f887 	bl	80052b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051a2:	2301      	movs	r3, #1
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	e002      	b.n	80051ae <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051a8:	2301      	movs	r3, #1
 80051aa:	425b      	negs	r3, r3
 80051ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051ae:	69bb      	ldr	r3, [r7, #24]
	}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b009      	add	sp, #36	; 0x24
 80051b6:	bd90      	pop	{r4, r7, pc}

080051b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	001a      	movs	r2, r3
 80051d0:	21a5      	movs	r1, #165	; 0xa5
 80051d2:	f002 fbe8 	bl	80079a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4933      	ldr	r1, [pc, #204]	; (80052ac <prvInitialiseNewTask+0xf4>)
 80051de:	468c      	mov	ip, r1
 80051e0:	4463      	add	r3, ip
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	18d3      	adds	r3, r2, r3
 80051e6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2207      	movs	r2, #7
 80051ec:	4393      	bics	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2207      	movs	r2, #7
 80051f4:	4013      	ands	r3, r2
 80051f6:	d001      	beq.n	80051fc <prvInitialiseNewTask+0x44>
 80051f8:	b672      	cpsid	i
 80051fa:	e7fe      	b.n	80051fa <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e013      	b.n	800522a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	18d3      	adds	r3, r2, r3
 8005208:	7818      	ldrb	r0, [r3, #0]
 800520a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800520c:	2134      	movs	r1, #52	; 0x34
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	18d3      	adds	r3, r2, r3
 8005212:	185b      	adds	r3, r3, r1
 8005214:	1c02      	adds	r2, r0, #0
 8005216:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	18d3      	adds	r3, r2, r3
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d006      	beq.n	8005232 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	3301      	adds	r3, #1
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b0f      	cmp	r3, #15
 800522e:	d9e8      	bls.n	8005202 <prvInitialiseNewTask+0x4a>
 8005230:	e000      	b.n	8005234 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005232:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	2243      	movs	r2, #67	; 0x43
 8005238:	2100      	movs	r1, #0
 800523a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	2b04      	cmp	r3, #4
 8005240:	d901      	bls.n	8005246 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005242:	2304      	movs	r3, #4
 8005244:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	6a3a      	ldr	r2, [r7, #32]
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	3304      	adds	r3, #4
 8005250:	0018      	movs	r0, r3
 8005252:	f7ff fc1b 	bl	8004a8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	3318      	adds	r3, #24
 800525a:	0018      	movs	r0, r3
 800525c:	f7ff fc16 	bl	8004a8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005264:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	2205      	movs	r2, #5
 800526a:	1ad2      	subs	r2, r2, r3
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005274:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	2200      	movs	r2, #0
 800527a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	2250      	movs	r2, #80	; 0x50
 8005280:	2100      	movs	r1, #0
 8005282:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	0018      	movs	r0, r3
 800528c:	f7ff fc8a 	bl	8004ba4 <pxPortInitialiseStack>
 8005290:	0002      	movs	r2, r0
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <prvInitialiseNewTask+0xea>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b006      	add	sp, #24
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	3fffffff 	.word	0x3fffffff

080052b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052b8:	f7ff fd00 	bl	8004cbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052bc:	4b2a      	ldr	r3, [pc, #168]	; (8005368 <prvAddNewTaskToReadyList+0xb8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	4b29      	ldr	r3, [pc, #164]	; (8005368 <prvAddNewTaskToReadyList+0xb8>)
 80052c4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80052c6:	4b29      	ldr	r3, [pc, #164]	; (800536c <prvAddNewTaskToReadyList+0xbc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052ce:	4b27      	ldr	r3, [pc, #156]	; (800536c <prvAddNewTaskToReadyList+0xbc>)
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052d4:	4b24      	ldr	r3, [pc, #144]	; (8005368 <prvAddNewTaskToReadyList+0xb8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d110      	bne.n	80052fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052dc:	f000 fa5a 	bl	8005794 <prvInitialiseTaskLists>
 80052e0:	e00d      	b.n	80052fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052e2:	4b23      	ldr	r3, [pc, #140]	; (8005370 <prvAddNewTaskToReadyList+0xc0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052ea:	4b20      	ldr	r3, [pc, #128]	; (800536c <prvAddNewTaskToReadyList+0xbc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d802      	bhi.n	80052fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052f8:	4b1c      	ldr	r3, [pc, #112]	; (800536c <prvAddNewTaskToReadyList+0xbc>)
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052fe:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <prvAddNewTaskToReadyList+0xc4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <prvAddNewTaskToReadyList+0xc4>)
 8005306:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005308:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <prvAddNewTaskToReadyList+0xc4>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005314:	4b18      	ldr	r3, [pc, #96]	; (8005378 <prvAddNewTaskToReadyList+0xc8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d903      	bls.n	8005324 <prvAddNewTaskToReadyList+0x74>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	4b15      	ldr	r3, [pc, #84]	; (8005378 <prvAddNewTaskToReadyList+0xc8>)
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005328:	0013      	movs	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	189b      	adds	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4a12      	ldr	r2, [pc, #72]	; (800537c <prvAddNewTaskToReadyList+0xcc>)
 8005332:	189a      	adds	r2, r3, r2
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	0019      	movs	r1, r3
 800533a:	0010      	movs	r0, r2
 800533c:	f7ff fbb1 	bl	8004aa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005340:	f7ff fcce 	bl	8004ce0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <prvAddNewTaskToReadyList+0xc0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800534c:	4b07      	ldr	r3, [pc, #28]	; (800536c <prvAddNewTaskToReadyList+0xbc>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	429a      	cmp	r2, r3
 8005358:	d201      	bcs.n	800535e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800535a:	f7ff fc9f 	bl	8004c9c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	46bd      	mov	sp, r7
 8005362:	b002      	add	sp, #8
 8005364:	bd80      	pop	{r7, pc}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	20001950 	.word	0x20001950
 800536c:	20001878 	.word	0x20001878
 8005370:	2000195c 	.word	0x2000195c
 8005374:	2000196c 	.word	0x2000196c
 8005378:	20001958 	.word	0x20001958
 800537c:	2000187c 	.word	0x2000187c

08005380 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005392:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <vTaskDelay+0x48>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <vTaskDelay+0x1e>
 800539a:	b672      	cpsid	i
 800539c:	e7fe      	b.n	800539c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800539e:	f000 f84b 	bl	8005438 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2100      	movs	r1, #0
 80053a6:	0018      	movs	r0, r3
 80053a8:	f000 fac4 	bl	8005934 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053ac:	f000 f850 	bl	8005450 <xTaskResumeAll>
 80053b0:	0003      	movs	r3, r0
 80053b2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80053ba:	f7ff fc6f 	bl	8004c9c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b004      	add	sp, #16
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	20001978 	.word	0x20001978

080053cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80053d2:	4913      	ldr	r1, [pc, #76]	; (8005420 <vTaskStartScheduler+0x54>)
 80053d4:	4813      	ldr	r0, [pc, #76]	; (8005424 <vTaskStartScheduler+0x58>)
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <vTaskStartScheduler+0x5c>)
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	2300      	movs	r3, #0
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	2300      	movs	r3, #0
 80053e0:	2240      	movs	r2, #64	; 0x40
 80053e2:	f7ff fea1 	bl	8005128 <xTaskCreate>
 80053e6:	0003      	movs	r3, r0
 80053e8:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d10d      	bne.n	800540c <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80053f0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053f2:	4b0e      	ldr	r3, [pc, #56]	; (800542c <vTaskStartScheduler+0x60>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	4252      	negs	r2, r2
 80053f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053fa:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <vTaskStartScheduler+0x64>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005400:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <vTaskStartScheduler+0x68>)
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005406:	f7ff fc27 	bl	8004c58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800540a:	e004      	b.n	8005416 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3301      	adds	r3, #1
 8005410:	d101      	bne.n	8005416 <vTaskStartScheduler+0x4a>
 8005412:	b672      	cpsid	i
 8005414:	e7fe      	b.n	8005414 <vTaskStartScheduler+0x48>
}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	46bd      	mov	sp, r7
 800541a:	b002      	add	sp, #8
 800541c:	bd80      	pop	{r7, pc}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	08008248 	.word	0x08008248
 8005424:	08005775 	.word	0x08005775
 8005428:	20001974 	.word	0x20001974
 800542c:	20001970 	.word	0x20001970
 8005430:	2000195c 	.word	0x2000195c
 8005434:	20001954 	.word	0x20001954

08005438 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800543c:	4b03      	ldr	r3, [pc, #12]	; (800544c <vTaskSuspendAll+0x14>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	4b02      	ldr	r3, [pc, #8]	; (800544c <vTaskSuspendAll+0x14>)
 8005444:	601a      	str	r2, [r3, #0]
}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20001978 	.word	0x20001978

08005450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800545a:	2300      	movs	r3, #0
 800545c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800545e:	4b3a      	ldr	r3, [pc, #232]	; (8005548 <xTaskResumeAll+0xf8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <xTaskResumeAll+0x1a>
 8005466:	b672      	cpsid	i
 8005468:	e7fe      	b.n	8005468 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800546a:	f7ff fc27 	bl	8004cbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800546e:	4b36      	ldr	r3, [pc, #216]	; (8005548 <xTaskResumeAll+0xf8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	1e5a      	subs	r2, r3, #1
 8005474:	4b34      	ldr	r3, [pc, #208]	; (8005548 <xTaskResumeAll+0xf8>)
 8005476:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005478:	4b33      	ldr	r3, [pc, #204]	; (8005548 <xTaskResumeAll+0xf8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d15b      	bne.n	8005538 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005480:	4b32      	ldr	r3, [pc, #200]	; (800554c <xTaskResumeAll+0xfc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d057      	beq.n	8005538 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005488:	e02f      	b.n	80054ea <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <xTaskResumeAll+0x100>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3318      	adds	r3, #24
 8005496:	0018      	movs	r0, r3
 8005498:	f7ff fb5b 	bl	8004b52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3304      	adds	r3, #4
 80054a0:	0018      	movs	r0, r3
 80054a2:	f7ff fb56 	bl	8004b52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054aa:	4b2a      	ldr	r3, [pc, #168]	; (8005554 <xTaskResumeAll+0x104>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d903      	bls.n	80054ba <xTaskResumeAll+0x6a>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b6:	4b27      	ldr	r3, [pc, #156]	; (8005554 <xTaskResumeAll+0x104>)
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054be:	0013      	movs	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	189b      	adds	r3, r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4a24      	ldr	r2, [pc, #144]	; (8005558 <xTaskResumeAll+0x108>)
 80054c8:	189a      	adds	r2, r3, r2
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3304      	adds	r3, #4
 80054ce:	0019      	movs	r1, r3
 80054d0:	0010      	movs	r0, r2
 80054d2:	f7ff fae6 	bl	8004aa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054da:	4b20      	ldr	r3, [pc, #128]	; (800555c <xTaskResumeAll+0x10c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d302      	bcc.n	80054ea <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80054e4:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <xTaskResumeAll+0x110>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054ea:	4b19      	ldr	r3, [pc, #100]	; (8005550 <xTaskResumeAll+0x100>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1cb      	bne.n	800548a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054f8:	f000 f9dc 	bl	80058b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <xTaskResumeAll+0x114>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00f      	beq.n	8005528 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005508:	f000 f82e 	bl	8005568 <xTaskIncrementTick>
 800550c:	1e03      	subs	r3, r0, #0
 800550e:	d002      	beq.n	8005516 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005510:	4b13      	ldr	r3, [pc, #76]	; (8005560 <xTaskResumeAll+0x110>)
 8005512:	2201      	movs	r2, #1
 8005514:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3b01      	subs	r3, #1
 800551a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f2      	bne.n	8005508 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <xTaskResumeAll+0x114>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005528:	4b0d      	ldr	r3, [pc, #52]	; (8005560 <xTaskResumeAll+0x110>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005530:	2301      	movs	r3, #1
 8005532:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005534:	f7ff fbb2 	bl	8004c9c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005538:	f7ff fbd2 	bl	8004ce0 <vPortExitCritical>

	return xAlreadyYielded;
 800553c:	68bb      	ldr	r3, [r7, #8]
}
 800553e:	0018      	movs	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	b004      	add	sp, #16
 8005544:	bd80      	pop	{r7, pc}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	20001978 	.word	0x20001978
 800554c:	20001950 	.word	0x20001950
 8005550:	20001910 	.word	0x20001910
 8005554:	20001958 	.word	0x20001958
 8005558:	2000187c 	.word	0x2000187c
 800555c:	20001878 	.word	0x20001878
 8005560:	20001964 	.word	0x20001964
 8005564:	20001960 	.word	0x20001960

08005568 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005572:	4b4c      	ldr	r3, [pc, #304]	; (80056a4 <xTaskIncrementTick+0x13c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d000      	beq.n	800557c <xTaskIncrementTick+0x14>
 800557a:	e083      	b.n	8005684 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800557c:	4b4a      	ldr	r3, [pc, #296]	; (80056a8 <xTaskIncrementTick+0x140>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005584:	4b48      	ldr	r3, [pc, #288]	; (80056a8 <xTaskIncrementTick+0x140>)
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d117      	bne.n	80055c0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005590:	4b46      	ldr	r3, [pc, #280]	; (80056ac <xTaskIncrementTick+0x144>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <xTaskIncrementTick+0x36>
 800559a:	b672      	cpsid	i
 800559c:	e7fe      	b.n	800559c <xTaskIncrementTick+0x34>
 800559e:	4b43      	ldr	r3, [pc, #268]	; (80056ac <xTaskIncrementTick+0x144>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	4b42      	ldr	r3, [pc, #264]	; (80056b0 <xTaskIncrementTick+0x148>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4b40      	ldr	r3, [pc, #256]	; (80056ac <xTaskIncrementTick+0x144>)
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	4b40      	ldr	r3, [pc, #256]	; (80056b0 <xTaskIncrementTick+0x148>)
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	4b40      	ldr	r3, [pc, #256]	; (80056b4 <xTaskIncrementTick+0x14c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	4b3e      	ldr	r3, [pc, #248]	; (80056b4 <xTaskIncrementTick+0x14c>)
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f000 f97a 	bl	80058b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055c0:	4b3d      	ldr	r3, [pc, #244]	; (80056b8 <xTaskIncrementTick+0x150>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d34e      	bcc.n	8005668 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ca:	4b38      	ldr	r3, [pc, #224]	; (80056ac <xTaskIncrementTick+0x144>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <xTaskIncrementTick+0x70>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <xTaskIncrementTick+0x72>
 80055d8:	2300      	movs	r3, #0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055de:	4b36      	ldr	r3, [pc, #216]	; (80056b8 <xTaskIncrementTick+0x150>)
 80055e0:	2201      	movs	r2, #1
 80055e2:	4252      	negs	r2, r2
 80055e4:	601a      	str	r2, [r3, #0]
					break;
 80055e6:	e03f      	b.n	8005668 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055e8:	4b30      	ldr	r3, [pc, #192]	; (80056ac <xTaskIncrementTick+0x144>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d203      	bcs.n	8005608 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005600:	4b2d      	ldr	r3, [pc, #180]	; (80056b8 <xTaskIncrementTick+0x150>)
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	601a      	str	r2, [r3, #0]
						break;
 8005606:	e02f      	b.n	8005668 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	3304      	adds	r3, #4
 800560c:	0018      	movs	r0, r3
 800560e:	f7ff faa0 	bl	8004b52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3318      	adds	r3, #24
 800561e:	0018      	movs	r0, r3
 8005620:	f7ff fa97 	bl	8004b52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005628:	4b24      	ldr	r3, [pc, #144]	; (80056bc <xTaskIncrementTick+0x154>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d903      	bls.n	8005638 <xTaskIncrementTick+0xd0>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	4b21      	ldr	r3, [pc, #132]	; (80056bc <xTaskIncrementTick+0x154>)
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563c:	0013      	movs	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	189b      	adds	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <xTaskIncrementTick+0x158>)
 8005646:	189a      	adds	r2, r3, r2
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	3304      	adds	r3, #4
 800564c:	0019      	movs	r1, r3
 800564e:	0010      	movs	r0, r2
 8005650:	f7ff fa27 	bl	8004aa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005658:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <xTaskIncrementTick+0x15c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	429a      	cmp	r2, r3
 8005660:	d3b3      	bcc.n	80055ca <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005662:	2301      	movs	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005666:	e7b0      	b.n	80055ca <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005668:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <xTaskIncrementTick+0x15c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566e:	4914      	ldr	r1, [pc, #80]	; (80056c0 <xTaskIncrementTick+0x158>)
 8005670:	0013      	movs	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	189b      	adds	r3, r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	585b      	ldr	r3, [r3, r1]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d907      	bls.n	800568e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800567e:	2301      	movs	r3, #1
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e004      	b.n	800568e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005684:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <xTaskIncrementTick+0x160>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <xTaskIncrementTick+0x160>)
 800568c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800568e:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <xTaskIncrementTick+0x164>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8005696:	2301      	movs	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800569a:	697b      	ldr	r3, [r7, #20]
}
 800569c:	0018      	movs	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	b006      	add	sp, #24
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20001978 	.word	0x20001978
 80056a8:	20001954 	.word	0x20001954
 80056ac:	20001908 	.word	0x20001908
 80056b0:	2000190c 	.word	0x2000190c
 80056b4:	20001968 	.word	0x20001968
 80056b8:	20001970 	.word	0x20001970
 80056bc:	20001958 	.word	0x20001958
 80056c0:	2000187c 	.word	0x2000187c
 80056c4:	20001878 	.word	0x20001878
 80056c8:	20001960 	.word	0x20001960
 80056cc:	20001964 	.word	0x20001964

080056d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056d6:	4b22      	ldr	r3, [pc, #136]	; (8005760 <vTaskSwitchContext+0x90>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056de:	4b21      	ldr	r3, [pc, #132]	; (8005764 <vTaskSwitchContext+0x94>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056e4:	e037      	b.n	8005756 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80056e6:	4b1f      	ldr	r3, [pc, #124]	; (8005764 <vTaskSwitchContext+0x94>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80056ec:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <vTaskSwitchContext+0x98>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	e007      	b.n	8005704 <vTaskSwitchContext+0x34>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <vTaskSwitchContext+0x2e>
 80056fa:	b672      	cpsid	i
 80056fc:	e7fe      	b.n	80056fc <vTaskSwitchContext+0x2c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3b01      	subs	r3, #1
 8005702:	607b      	str	r3, [r7, #4]
 8005704:	4919      	ldr	r1, [pc, #100]	; (800576c <vTaskSwitchContext+0x9c>)
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	0013      	movs	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	189b      	adds	r3, r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	585b      	ldr	r3, [r3, r1]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0ee      	beq.n	80056f4 <vTaskSwitchContext+0x24>
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	0013      	movs	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	189b      	adds	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4a12      	ldr	r2, [pc, #72]	; (800576c <vTaskSwitchContext+0x9c>)
 8005722:	189b      	adds	r3, r3, r2
 8005724:	603b      	str	r3, [r7, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	605a      	str	r2, [r3, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	429a      	cmp	r2, r3
 800573a:	d104      	bne.n	8005746 <vTaskSwitchContext+0x76>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	4b08      	ldr	r3, [pc, #32]	; (8005770 <vTaskSwitchContext+0xa0>)
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	4b05      	ldr	r3, [pc, #20]	; (8005768 <vTaskSwitchContext+0x98>)
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	601a      	str	r2, [r3, #0]
}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	46bd      	mov	sp, r7
 800575a:	b002      	add	sp, #8
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	20001978 	.word	0x20001978
 8005764:	20001964 	.word	0x20001964
 8005768:	20001958 	.word	0x20001958
 800576c:	2000187c 	.word	0x2000187c
 8005770:	20001878 	.word	0x20001878

08005774 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800577c:	f000 f84e 	bl	800581c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005780:	4b03      	ldr	r3, [pc, #12]	; (8005790 <prvIdleTask+0x1c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d9f9      	bls.n	800577c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005788:	f7ff fa88 	bl	8004c9c <vPortYield>
		prvCheckTasksWaitingTermination();
 800578c:	e7f6      	b.n	800577c <prvIdleTask+0x8>
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	2000187c 	.word	0x2000187c

08005794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800579a:	2300      	movs	r3, #0
 800579c:	607b      	str	r3, [r7, #4]
 800579e:	e00c      	b.n	80057ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	0013      	movs	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	189b      	adds	r3, r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4a14      	ldr	r2, [pc, #80]	; (80057fc <prvInitialiseTaskLists+0x68>)
 80057ac:	189b      	adds	r3, r3, r2
 80057ae:	0018      	movs	r0, r3
 80057b0:	f7ff f94e 	bl	8004a50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3301      	adds	r3, #1
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d9ef      	bls.n	80057a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057c0:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <prvInitialiseTaskLists+0x6c>)
 80057c2:	0018      	movs	r0, r3
 80057c4:	f7ff f944 	bl	8004a50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057c8:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <prvInitialiseTaskLists+0x70>)
 80057ca:	0018      	movs	r0, r3
 80057cc:	f7ff f940 	bl	8004a50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057d0:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <prvInitialiseTaskLists+0x74>)
 80057d2:	0018      	movs	r0, r3
 80057d4:	f7ff f93c 	bl	8004a50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057d8:	4b0c      	ldr	r3, [pc, #48]	; (800580c <prvInitialiseTaskLists+0x78>)
 80057da:	0018      	movs	r0, r3
 80057dc:	f7ff f938 	bl	8004a50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <prvInitialiseTaskLists+0x7c>)
 80057e2:	0018      	movs	r0, r3
 80057e4:	f7ff f934 	bl	8004a50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <prvInitialiseTaskLists+0x80>)
 80057ea:	4a05      	ldr	r2, [pc, #20]	; (8005800 <prvInitialiseTaskLists+0x6c>)
 80057ec:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <prvInitialiseTaskLists+0x84>)
 80057f0:	4a04      	ldr	r2, [pc, #16]	; (8005804 <prvInitialiseTaskLists+0x70>)
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	46c0      	nop			; (mov r8, r8)
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b002      	add	sp, #8
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	2000187c 	.word	0x2000187c
 8005800:	200018e0 	.word	0x200018e0
 8005804:	200018f4 	.word	0x200018f4
 8005808:	20001910 	.word	0x20001910
 800580c:	20001924 	.word	0x20001924
 8005810:	2000193c 	.word	0x2000193c
 8005814:	20001908 	.word	0x20001908
 8005818:	2000190c 	.word	0x2000190c

0800581c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005822:	e027      	b.n	8005874 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 8005824:	f7ff fe08 	bl	8005438 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005828:	4b16      	ldr	r3, [pc, #88]	; (8005884 <prvCheckTasksWaitingTermination+0x68>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	425a      	negs	r2, r3
 800582e:	4153      	adcs	r3, r2
 8005830:	b2db      	uxtb	r3, r3
 8005832:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8005834:	f7ff fe0c 	bl	8005450 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d11a      	bne.n	8005874 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800583e:	f7ff fa3d 	bl	8004cbc <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005842:	4b10      	ldr	r3, [pc, #64]	; (8005884 <prvCheckTasksWaitingTermination+0x68>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	3304      	adds	r3, #4
 800584e:	0018      	movs	r0, r3
 8005850:	f7ff f97f 	bl	8004b52 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <prvCheckTasksWaitingTermination+0x6c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <prvCheckTasksWaitingTermination+0x6c>)
 800585c:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 800585e:	4b0b      	ldr	r3, [pc, #44]	; (800588c <prvCheckTasksWaitingTermination+0x70>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	1e5a      	subs	r2, r3, #1
 8005864:	4b09      	ldr	r3, [pc, #36]	; (800588c <prvCheckTasksWaitingTermination+0x70>)
 8005866:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8005868:	f7ff fa3a 	bl	8004ce0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	0018      	movs	r0, r3
 8005870:	f000 f80e 	bl	8005890 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <prvCheckTasksWaitingTermination+0x70>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1d3      	bne.n	8005824 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	b002      	add	sp, #8
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20001924 	.word	0x20001924
 8005888:	20001950 	.word	0x20001950
 800588c:	20001938 	.word	0x20001938

08005890 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589c:	0018      	movs	r0, r3
 800589e:	f7ff fb43 	bl	8004f28 <vPortFree>
			vPortFree( pxTCB );
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7ff fb3f 	bl	8004f28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b002      	add	sp, #8
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ba:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <prvResetNextTaskUnblockTime+0x40>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <prvResetNextTaskUnblockTime+0x14>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <prvResetNextTaskUnblockTime+0x16>
 80058c8:	2300      	movs	r3, #0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058ce:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <prvResetNextTaskUnblockTime+0x44>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	4252      	negs	r2, r2
 80058d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058d6:	e008      	b.n	80058ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <prvResetNextTaskUnblockTime+0x40>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <prvResetNextTaskUnblockTime+0x44>)
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b002      	add	sp, #8
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	20001908 	.word	0x20001908
 80058f8:	20001970 	.word	0x20001970

080058fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <xTaskGetSchedulerState+0x30>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800590a:	2301      	movs	r3, #1
 800590c:	607b      	str	r3, [r7, #4]
 800590e:	e008      	b.n	8005922 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <xTaskGetSchedulerState+0x34>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005918:	2302      	movs	r3, #2
 800591a:	607b      	str	r3, [r7, #4]
 800591c:	e001      	b.n	8005922 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005922:	687b      	ldr	r3, [r7, #4]
	}
 8005924:	0018      	movs	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	b002      	add	sp, #8
 800592a:	bd80      	pop	{r7, pc}
 800592c:	2000195c 	.word	0x2000195c
 8005930:	20001978 	.word	0x20001978

08005934 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800593e:	4b21      	ldr	r3, [pc, #132]	; (80059c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005944:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3304      	adds	r3, #4
 800594a:	0018      	movs	r0, r3
 800594c:	f7ff f901 	bl	8004b52 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3301      	adds	r3, #1
 8005954:	d10b      	bne.n	800596e <prvAddCurrentTaskToDelayedList+0x3a>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800595c:	4b1a      	ldr	r3, [pc, #104]	; (80059c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	1d1a      	adds	r2, r3, #4
 8005962:	4b1a      	ldr	r3, [pc, #104]	; (80059cc <prvAddCurrentTaskToDelayedList+0x98>)
 8005964:	0011      	movs	r1, r2
 8005966:	0018      	movs	r0, r3
 8005968:	f7ff f89b 	bl	8004aa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800596c:	e026      	b.n	80059bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	18d3      	adds	r3, r2, r3
 8005974:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005976:	4b14      	ldr	r3, [pc, #80]	; (80059c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	429a      	cmp	r2, r3
 8005984:	d209      	bcs.n	800599a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3304      	adds	r3, #4
 8005990:	0019      	movs	r1, r3
 8005992:	0010      	movs	r0, r2
 8005994:	f7ff f8a7 	bl	8004ae6 <vListInsert>
}
 8005998:	e010      	b.n	80059bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800599a:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3304      	adds	r3, #4
 80059a4:	0019      	movs	r1, r3
 80059a6:	0010      	movs	r0, r2
 80059a8:	f7ff f89d 	bl	8004ae6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d202      	bcs.n	80059bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059b6:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	601a      	str	r2, [r3, #0]
}
 80059bc:	46c0      	nop			; (mov r8, r8)
 80059be:	46bd      	mov	sp, r7
 80059c0:	b004      	add	sp, #16
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20001954 	.word	0x20001954
 80059c8:	20001878 	.word	0x20001878
 80059cc:	2000193c 	.word	0x2000193c
 80059d0:	2000190c 	.word	0x2000190c
 80059d4:	20001908 	.word	0x20001908
 80059d8:	20001970 	.word	0x20001970

080059dc <select_adc_channel>:

extern ADC_HandleTypeDef hadc;


static uint32_t select_adc_channel(enum DA_ADC_CHANNEL_E adc_channels)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	0002      	movs	r2, r0
 80059e4:	1dfb      	adds	r3, r7, #7
 80059e6:	701a      	strb	r2, [r3, #0]
    switch (adc_channels)
 80059e8:	1dfb      	adds	r3, r7, #7
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b09      	cmp	r3, #9
 80059ee:	d818      	bhi.n	8005a22 <select_adc_channel+0x46>
 80059f0:	009a      	lsls	r2, r3, #2
 80059f2:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <select_adc_channel+0x50>)
 80059f4:	18d3      	adds	r3, r2, r3
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	469f      	mov	pc, r3
    {
    case DA_ADC_CHANNEL0:
        return ADC_CHANNEL_0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e012      	b.n	8005a24 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL1:
        return ADC_CHANNEL_1;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e010      	b.n	8005a24 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL2:
        return ADC_CHANNEL_2;
 8005a02:	2302      	movs	r3, #2
 8005a04:	e00e      	b.n	8005a24 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL3:
        return ADC_CHANNEL_3;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e00c      	b.n	8005a24 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL4:
        return ADC_CHANNEL_4;
 8005a0a:	2304      	movs	r3, #4
 8005a0c:	e00a      	b.n	8005a24 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL5:
        return ADC_CHANNEL_5;
 8005a0e:	2305      	movs	r3, #5
 8005a10:	e008      	b.n	8005a24 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL6:
        return ADC_CHANNEL_6;
 8005a12:	2306      	movs	r3, #6
 8005a14:	e006      	b.n	8005a24 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL7:
        return ADC_CHANNEL_7;
 8005a16:	2307      	movs	r3, #7
 8005a18:	e004      	b.n	8005a24 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL8:
        return ADC_CHANNEL_14;
 8005a1a:	230e      	movs	r3, #14
 8005a1c:	e002      	b.n	8005a24 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL9:
        return ADC_CHANNEL_15;
 8005a1e:	230f      	movs	r3, #15
 8005a20:	e000      	b.n	8005a24 <select_adc_channel+0x48>
        break;
    default:
        return ADC_CHANNEL_0;
 8005a22:	2300      	movs	r3, #0
    }
}
 8005a24:	0018      	movs	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	08008524 	.word	0x08008524

08005a30 <activate_channel>:

static void activate_channel(uint32_t adc_channel)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig;
    sConfig.Channel = adc_channel;
 8005a38:	230c      	movs	r3, #12
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005a40:	230c      	movs	r3, #12
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	2280      	movs	r2, #128	; 0x80
 8005a46:	0152      	lsls	r2, r2, #5
 8005a48:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5; //ADC_SAMPLETIME_71CYCLES_5;
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	18fb      	adds	r3, r7, r3
 8005a4e:	2202      	movs	r2, #2
 8005a50:	609a      	str	r2, [r3, #8]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8005a52:	230c      	movs	r3, #12
 8005a54:	18fa      	adds	r2, r7, r3
 8005a56:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <activate_channel+0x38>)
 8005a58:	0011      	movs	r1, r2
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f7fb fd86 	bl	800156c <HAL_ADC_ConfigChannel>
}
 8005a60:	46c0      	nop			; (mov r8, r8)
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b006      	add	sp, #24
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20001c3c 	.word	0x20001c3c

08005a6c <deactivate_channel>:

static void deactivate_channel(uint32_t adc_channel)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig;
    sConfig.Channel = adc_channel;
 8005a74:	230c      	movs	r3, #12
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_RANK_NONE;
 8005a7c:	230c      	movs	r3, #12
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	4a08      	ldr	r2, [pc, #32]	; (8005aa4 <deactivate_channel+0x38>)
 8005a82:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5; //ADC_SAMPLETIME_71CYCLES_5;
 8005a84:	230c      	movs	r3, #12
 8005a86:	18fb      	adds	r3, r7, r3
 8005a88:	2202      	movs	r2, #2
 8005a8a:	609a      	str	r2, [r3, #8]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8005a8c:	230c      	movs	r3, #12
 8005a8e:	18fa      	adds	r2, r7, r3
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <deactivate_channel+0x3c>)
 8005a92:	0011      	movs	r1, r2
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7fb fd69 	bl	800156c <HAL_ADC_ConfigChannel>
}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b006      	add	sp, #24
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	00001001 	.word	0x00001001
 8005aa8:	20001c3c 	.word	0x20001c3c

08005aac <adc_init>:
// **************************************************************************
// Public interface
// **************************************************************************

void adc_init()
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
    // no initialization
}
 8005ab0:	46c0      	nop			; (mov r8, r8)
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <adc_get_value>:


uint32_t adc_get_value(enum DA_ADC_CHANNEL_E adc_channel_no)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	0002      	movs	r2, r0
 8005ac0:	1dfb      	adds	r3, r7, #7
 8005ac2:	701a      	strb	r2, [r3, #0]
    uint32_t adc_channel = select_adc_channel(adc_channel_no);
 8005ac4:	1dfb      	adds	r3, r7, #7
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f7ff ff87 	bl	80059dc <select_adc_channel>
 8005ace:	0003      	movs	r3, r0
 8005ad0:	617b      	str	r3, [r7, #20]
    uint32_t adc_value = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	613b      	str	r3, [r7, #16]
    uint32_t timeout = 10;
 8005ad6:	230a      	movs	r3, #10
 8005ad8:	60fb      	str	r3, [r7, #12]
    activate_channel(adc_channel);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	0018      	movs	r0, r3
 8005ade:	f7ff ffa7 	bl	8005a30 <activate_channel>
    HAL_ADC_Start(&hadc);
 8005ae2:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <adc_get_value+0x64>)
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7fb fc0f 	bl	8001308 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, timeout);
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <adc_get_value+0x64>)
 8005aee:	0011      	movs	r1, r2
 8005af0:	0018      	movs	r0, r3
 8005af2:	f7fb fc9f 	bl	8001434 <HAL_ADC_PollForConversion>
    adc_value = HAL_ADC_GetValue(&hadc);
 8005af6:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <adc_get_value+0x64>)
 8005af8:	0018      	movs	r0, r3
 8005afa:	f7fb fd2b 	bl	8001554 <HAL_ADC_GetValue>
 8005afe:	0003      	movs	r3, r0
 8005b00:	613b      	str	r3, [r7, #16]
    HAL_ADC_Stop(&hadc);
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <adc_get_value+0x64>)
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7fb fc53 	bl	80013b0 <HAL_ADC_Stop>
    deactivate_channel(adc_channel);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f7ff ffad 	bl	8005a6c <deactivate_channel>
    return adc_value;
 8005b12:	693b      	ldr	r3, [r7, #16]
}
 8005b14:	0018      	movs	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b006      	add	sp, #24
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20001c3c 	.word	0x20001c3c

08005b20 <digital_init>:

static void select_pin(enum DD_PINS_E pin_no, pin_t* currentPin);


void digital_init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	2200      	movs	r2, #0
 8005b2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b2c:	1d3b      	adds	r3, r7, #4
 8005b2e:	2201      	movs	r2, #1
 8005b30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = DIP1_Pin;
 8005b32:	1d3b      	adds	r3, r7, #4
 8005b34:	2280      	movs	r2, #128	; 0x80
 8005b36:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP1_GPIO_Port, &GPIO_InitStruct);
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	4a12      	ldr	r2, [pc, #72]	; (8005b84 <digital_init+0x64>)
 8005b3c:	0019      	movs	r1, r3
 8005b3e:	0010      	movs	r0, r2
 8005b40:	f7fc f888 	bl	8001c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIP2_Pin;
 8005b44:	1d3b      	adds	r3, r7, #4
 8005b46:	2240      	movs	r2, #64	; 0x40
 8005b48:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP2_GPIO_Port, &GPIO_InitStruct);
 8005b4a:	1d3b      	adds	r3, r7, #4
 8005b4c:	4a0d      	ldr	r2, [pc, #52]	; (8005b84 <digital_init+0x64>)
 8005b4e:	0019      	movs	r1, r3
 8005b50:	0010      	movs	r0, r2
 8005b52:	f7fc f87f 	bl	8001c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIP3_Pin;
 8005b56:	1d3b      	adds	r3, r7, #4
 8005b58:	2220      	movs	r2, #32
 8005b5a:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP3_GPIO_Port, &GPIO_InitStruct);
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <digital_init+0x64>)
 8005b60:	0019      	movs	r1, r3
 8005b62:	0010      	movs	r0, r2
 8005b64:	f7fc f876 	bl	8001c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIP4_Pin;
 8005b68:	1d3b      	adds	r3, r7, #4
 8005b6a:	2280      	movs	r2, #128	; 0x80
 8005b6c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP4_GPIO_Port, &GPIO_InitStruct);
 8005b6e:	1d3b      	adds	r3, r7, #4
 8005b70:	4a05      	ldr	r2, [pc, #20]	; (8005b88 <digital_init+0x68>)
 8005b72:	0019      	movs	r1, r3
 8005b74:	0010      	movs	r0, r2
 8005b76:	f7fc f86d 	bl	8001c54 <HAL_GPIO_Init>
}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b006      	add	sp, #24
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	48000400 	.word	0x48000400
 8005b88:	48000c00 	.word	0x48000c00

08005b8c <digital_configure_pin>:

void digital_configure_pin(enum DD_PINS_E pin_no, enum DD_PINCONFIG_E direction)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	0002      	movs	r2, r0
 8005b94:	1dfb      	adds	r3, r7, #7
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	1dbb      	adds	r3, r7, #6
 8005b9a:	1c0a      	adds	r2, r1, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef GPIO_InitStruct;
    pin_t pin;
    select_pin(pin_no, &pin);
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	18fa      	adds	r2, r7, r3
 8005ba2:	1dfb      	adds	r3, r7, #7
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	0011      	movs	r1, r2
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f000 f89d 	bl	8005ce8 <select_pin>
    GPIO_InitStruct.Pin = pin.pin;
 8005bae:	230c      	movs	r3, #12
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	889b      	ldrh	r3, [r3, #4]
 8005bb4:	001a      	movs	r2, r3
 8005bb6:	2314      	movs	r3, #20
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	601a      	str	r2, [r3, #0]
    switch(direction)
 8005bbc:	1dbb      	adds	r3, r7, #6
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d01a      	beq.n	8005bfa <digital_configure_pin+0x6e>
 8005bc4:	dc02      	bgt.n	8005bcc <digital_configure_pin+0x40>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <digital_configure_pin+0x4a>
            GPIO_InitStruct.Pull = GPIO_NOPULL;
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
            break;
        }
    }
}
 8005bca:	e04c      	b.n	8005c66 <digital_configure_pin+0xda>
    switch(direction)
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d026      	beq.n	8005c1e <digital_configure_pin+0x92>
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d036      	beq.n	8005c42 <digital_configure_pin+0xb6>
}
 8005bd4:	e047      	b.n	8005c66 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bd6:	2314      	movs	r3, #20
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	2201      	movs	r2, #1
 8005bdc:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005bde:	2314      	movs	r3, #20
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	2202      	movs	r2, #2
 8005be4:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8005be6:	230c      	movs	r3, #12
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2214      	movs	r2, #20
 8005bee:	18ba      	adds	r2, r7, r2
 8005bf0:	0011      	movs	r1, r2
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f7fc f82e 	bl	8001c54 <HAL_GPIO_Init>
            break;
 8005bf8:	e035      	b.n	8005c66 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bfa:	2314      	movs	r3, #20
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	2200      	movs	r2, #0
 8005c00:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c02:	2314      	movs	r3, #20
 8005c04:	18fb      	adds	r3, r7, r3
 8005c06:	2201      	movs	r2, #1
 8005c08:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8005c0a:	230c      	movs	r3, #12
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2214      	movs	r2, #20
 8005c12:	18ba      	adds	r2, r7, r2
 8005c14:	0011      	movs	r1, r2
 8005c16:	0018      	movs	r0, r3
 8005c18:	f7fc f81c 	bl	8001c54 <HAL_GPIO_Init>
            break;
 8005c1c:	e023      	b.n	8005c66 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c1e:	2314      	movs	r3, #20
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	2200      	movs	r2, #0
 8005c24:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005c26:	2314      	movs	r3, #20
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8005c2e:	230c      	movs	r3, #12
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2214      	movs	r2, #20
 8005c36:	18ba      	adds	r2, r7, r2
 8005c38:	0011      	movs	r1, r2
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f7fc f80a 	bl	8001c54 <HAL_GPIO_Init>
            break;
 8005c40:	e011      	b.n	8005c66 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c42:	2314      	movs	r3, #20
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	2200      	movs	r2, #0
 8005c48:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4a:	2314      	movs	r3, #20
 8005c4c:	18fb      	adds	r3, r7, r3
 8005c4e:	2200      	movs	r2, #0
 8005c50:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8005c52:	230c      	movs	r3, #12
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2214      	movs	r2, #20
 8005c5a:	18ba      	adds	r2, r7, r2
 8005c5c:	0011      	movs	r1, r2
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f7fb fff8 	bl	8001c54 <HAL_GPIO_Init>
            break;
 8005c64:	46c0      	nop			; (mov r8, r8)
}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b00a      	add	sp, #40	; 0x28
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <digital_set_pin>:

void digital_set_pin(enum DD_PINS_E pin_no, enum DD_PINLEVEL_E level)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	0002      	movs	r2, r0
 8005c76:	1dfb      	adds	r3, r7, #7
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	1dbb      	adds	r3, r7, #6
 8005c7c:	1c0a      	adds	r2, r1, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
    pin_t selectedPin;
    select_pin(pin_no, &selectedPin);
 8005c80:	2308      	movs	r3, #8
 8005c82:	18fa      	adds	r2, r7, r3
 8005c84:	1dfb      	adds	r3, r7, #7
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	0011      	movs	r1, r2
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 f82c 	bl	8005ce8 <select_pin>
    HAL_GPIO_WritePin(selectedPin.port, selectedPin.pin, level);
 8005c90:	2308      	movs	r3, #8
 8005c92:	18fb      	adds	r3, r7, r3
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	2308      	movs	r3, #8
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	8899      	ldrh	r1, [r3, #4]
 8005c9c:	1dbb      	adds	r3, r7, #6
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	001a      	movs	r2, r3
 8005ca2:	f7fc f970 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	b004      	add	sp, #16
 8005cac:	bd80      	pop	{r7, pc}

08005cae <digital_get_pin>:

enum DD_PINLEVEL_E digital_get_pin(enum DD_PINS_E pin_no)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	0002      	movs	r2, r0
 8005cb6:	1dfb      	adds	r3, r7, #7
 8005cb8:	701a      	strb	r2, [r3, #0]
    pin_t selectedPin;
    select_pin(pin_no, &selectedPin);
 8005cba:	2308      	movs	r3, #8
 8005cbc:	18fa      	adds	r2, r7, r3
 8005cbe:	1dfb      	adds	r3, r7, #7
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	0011      	movs	r1, r2
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	f000 f80f 	bl	8005ce8 <select_pin>
    return HAL_GPIO_ReadPin(selectedPin.port, selectedPin.pin);
 8005cca:	2308      	movs	r3, #8
 8005ccc:	18fb      	adds	r3, r7, r3
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	18fb      	adds	r3, r7, r3
 8005cd4:	889b      	ldrh	r3, [r3, #4]
 8005cd6:	0019      	movs	r1, r3
 8005cd8:	0010      	movs	r0, r2
 8005cda:	f7fc f937 	bl	8001f4c <HAL_GPIO_ReadPin>
 8005cde:	0003      	movs	r3, r0
}
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b004      	add	sp, #16
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <select_pin>:
    return ( level == DD_LEVEL_HIGH ? DD_DIP_OFF : DD_DIP_ON );
}


static void select_pin(enum DD_PINS_E pin_no, pin_t* currentPin)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	0002      	movs	r2, r0
 8005cf0:	6039      	str	r1, [r7, #0]
 8005cf2:	1dfb      	adds	r3, r7, #7
 8005cf4:	701a      	strb	r2, [r3, #0]
    switch (pin_no)
 8005cf6:	1dfb      	adds	r3, r7, #7
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b11      	cmp	r3, #17
 8005cfc:	d900      	bls.n	8005d00 <select_pin+0x18>
 8005cfe:	e090      	b.n	8005e22 <select_pin+0x13a>
 8005d00:	009a      	lsls	r2, r3, #2
 8005d02:	4b4d      	ldr	r3, [pc, #308]	; (8005e38 <select_pin+0x150>)
 8005d04:	18d3      	adds	r3, r2, r3
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	469f      	mov	pc, r3
    {
    case DD_PIN_PD14:
    {
        currentPin->port = DIGITAL0_GPIO_Port;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	4a4b      	ldr	r2, [pc, #300]	; (8005e3c <select_pin+0x154>)
 8005d0e:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL0_Pin;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2280      	movs	r2, #128	; 0x80
 8005d14:	01d2      	lsls	r2, r2, #7
 8005d16:	809a      	strh	r2, [r3, #4]
        break;
 8005d18:	e08a      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PD15:
    {
        currentPin->port = DIGITAL1_GPIO_Port;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	4a47      	ldr	r2, [pc, #284]	; (8005e3c <select_pin+0x154>)
 8005d1e:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL1_Pin;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	4a47      	ldr	r2, [pc, #284]	; (8005e40 <select_pin+0x158>)
 8005d24:	809a      	strh	r2, [r3, #4]
        break;
 8005d26:	e083      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PC8:
    {
        currentPin->port = DIGITAL2_GPIO_Port;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	4a46      	ldr	r2, [pc, #280]	; (8005e44 <select_pin+0x15c>)
 8005d2c:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL2_Pin;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2280      	movs	r2, #128	; 0x80
 8005d32:	0052      	lsls	r2, r2, #1
 8005d34:	809a      	strh	r2, [r3, #4]
        break;
 8005d36:	e07b      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PC9:
    {
        currentPin->port = DIGITAL3_GPIO_Port;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	4a42      	ldr	r2, [pc, #264]	; (8005e44 <select_pin+0x15c>)
 8005d3c:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL3_Pin;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2280      	movs	r2, #128	; 0x80
 8005d42:	0092      	lsls	r2, r2, #2
 8005d44:	809a      	strh	r2, [r3, #4]
        break;
 8005d46:	e073      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PA8:
    {
        currentPin->port = DIGITAL4_GPIO_Port;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2290      	movs	r2, #144	; 0x90
 8005d4c:	05d2      	lsls	r2, r2, #23
 8005d4e:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL4_Pin;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2280      	movs	r2, #128	; 0x80
 8005d54:	0052      	lsls	r2, r2, #1
 8005d56:	809a      	strh	r2, [r3, #4]
        break;
 8005d58:	e06a      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PC13:
    {
        currentPin->port = DIGITAL5_GPIO_Port;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	4a39      	ldr	r2, [pc, #228]	; (8005e44 <select_pin+0x15c>)
 8005d5e:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL5_Pin;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2280      	movs	r2, #128	; 0x80
 8005d64:	0192      	lsls	r2, r2, #6
 8005d66:	809a      	strh	r2, [r3, #4]
        break;
 8005d68:	e062      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PB11:
    {
        currentPin->port = SERVO0_GPIO_Port;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	4a36      	ldr	r2, [pc, #216]	; (8005e48 <select_pin+0x160>)
 8005d6e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO0_Pin;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2280      	movs	r2, #128	; 0x80
 8005d74:	0112      	lsls	r2, r2, #4
 8005d76:	809a      	strh	r2, [r3, #4]
        break;
 8005d78:	e05a      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PB10:
    {
        currentPin->port = SERVO1_GPIO_Port;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	4a32      	ldr	r2, [pc, #200]	; (8005e48 <select_pin+0x160>)
 8005d7e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO1_Pin;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2280      	movs	r2, #128	; 0x80
 8005d84:	00d2      	lsls	r2, r2, #3
 8005d86:	809a      	strh	r2, [r3, #4]
        break;
 8005d88:	e052      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PE14:
    {
        currentPin->port = SERVO2_GPIO_Port;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	4a2f      	ldr	r2, [pc, #188]	; (8005e4c <select_pin+0x164>)
 8005d8e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO2_Pin;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2280      	movs	r2, #128	; 0x80
 8005d94:	01d2      	lsls	r2, r2, #7
 8005d96:	809a      	strh	r2, [r3, #4]
        break;
 8005d98:	e04a      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PE11:
    {
        currentPin->port = SERVO3_GPIO_Port;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	4a2b      	ldr	r2, [pc, #172]	; (8005e4c <select_pin+0x164>)
 8005d9e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO3_Pin;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	0112      	lsls	r2, r2, #4
 8005da6:	809a      	strh	r2, [r3, #4]
        break;
 8005da8:	e042      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PE9:
    {
        currentPin->port = SERVO4_GPIO_Port;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	4a27      	ldr	r2, [pc, #156]	; (8005e4c <select_pin+0x164>)
 8005dae:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO4_Pin;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2280      	movs	r2, #128	; 0x80
 8005db4:	0092      	lsls	r2, r2, #2
 8005db6:	809a      	strh	r2, [r3, #4]
        break;
 8005db8:	e03a      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PB1:
    {
        currentPin->port = SERVO5_GPIO_Port;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <select_pin+0x160>)
 8005dbe:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO5_Pin;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	809a      	strh	r2, [r3, #4]
        break;
 8005dc6:	e033      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PF10:
    {
        currentPin->port = PWM5_GPIO_Port;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	4a21      	ldr	r2, [pc, #132]	; (8005e50 <select_pin+0x168>)
 8005dcc:	601a      	str	r2, [r3, #0]
        currentPin->pin = PWM5_Pin;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2280      	movs	r2, #128	; 0x80
 8005dd2:	00d2      	lsls	r2, r2, #3
 8005dd4:	809a      	strh	r2, [r3, #4]
        break;
 8005dd6:	e02b      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PF9:
	{
		currentPin->port = PWM4_GPIO_Port;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	4a1d      	ldr	r2, [pc, #116]	; (8005e50 <select_pin+0x168>)
 8005ddc:	601a      	str	r2, [r3, #0]
		currentPin->pin = PWM4_Pin;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2280      	movs	r2, #128	; 0x80
 8005de2:	0092      	lsls	r2, r2, #2
 8005de4:	809a      	strh	r2, [r3, #4]
		break;
 8005de6:	e023      	b.n	8005e30 <select_pin+0x148>
	}
    case DD_PIN_PE1:
    {
    	currentPin->port = PWM3_GPIO_Port;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <select_pin+0x164>)
 8005dec:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM3_Pin;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2202      	movs	r2, #2
 8005df2:	809a      	strh	r2, [r3, #4]
    	break;
 8005df4:	e01c      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PE0:
    {
    	currentPin->port = PWM2_GPIO_Port;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	4a14      	ldr	r2, [pc, #80]	; (8005e4c <select_pin+0x164>)
 8005dfa:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM2_Pin;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	809a      	strh	r2, [r3, #4]
    	break;
 8005e02:	e015      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PB3:
    {
    	currentPin->port = PWM1_GPIO_Port;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	4a10      	ldr	r2, [pc, #64]	; (8005e48 <select_pin+0x160>)
 8005e08:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM1_Pin;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2208      	movs	r2, #8
 8005e0e:	809a      	strh	r2, [r3, #4]
    	break;
 8005e10:	e00e      	b.n	8005e30 <select_pin+0x148>
    }
    case DD_PIN_PA15:
    {
    	currentPin->port = PWM0_GPIO_Port;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2290      	movs	r2, #144	; 0x90
 8005e16:	05d2      	lsls	r2, r2, #23
 8005e18:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM0_Pin;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	4a08      	ldr	r2, [pc, #32]	; (8005e40 <select_pin+0x158>)
 8005e1e:	809a      	strh	r2, [r3, #4]
    	break;
 8005e20:	e006      	b.n	8005e30 <select_pin+0x148>
    }
    default:
    {
        currentPin->port = LED_GREEN_GPIO_Port;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	4a07      	ldr	r2, [pc, #28]	; (8005e44 <select_pin+0x15c>)
 8005e26:	601a      	str	r2, [r3, #0]
        currentPin->pin = LED_GREEN_Pin;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	809a      	strh	r2, [r3, #4]
        break;
 8005e2e:	46c0      	nop			; (mov r8, r8)
    }
        ;
    }
}
 8005e30:	46c0      	nop			; (mov r8, r8)
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b002      	add	sp, #8
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	0800854c 	.word	0x0800854c
 8005e3c:	48000c00 	.word	0x48000c00
 8005e40:	ffff8000 	.word	0xffff8000
 8005e44:	48000800 	.word	0x48000800
 8005e48:	48000400 	.word	0x48000400
 8005e4c:	48001000 	.word	0x48001000
 8005e50:	48001400 	.word	0x48001400

08005e54 <dorobo_init>:
// Die main()-Funktion aus der CubeMX-generierten main() muss in
// init() abgespeichert und hinzugelinkt werden.
extern void init();

void dorobo_init(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
    init();
 8005e58:	f000 f952 	bl	8006100 <init>
    digital_init();
 8005e5c:	f7ff fe60 	bl	8005b20 <digital_init>
}
 8005e60:	46c0      	nop			; (mov r8, r8)
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <led_green>:
}

// ***************************************************************************

void led_green(enum DD_PINLEVEL_E level)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	0002      	movs	r2, r0
 8005e70:	1dfb      	adds	r3, r7, #7
 8005e72:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, level);
 8005e74:	1dfb      	adds	r3, r7, #7
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	4804      	ldr	r0, [pc, #16]	; (8005e8c <led_green+0x24>)
 8005e7a:	001a      	movs	r2, r3
 8005e7c:	2104      	movs	r1, #4
 8005e7e:	f7fc f882 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b002      	add	sp, #8
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	48000800 	.word	0x48000800

08005e90 <led_red>:
{
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}

void led_red(enum DD_PINLEVEL_E level)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	0002      	movs	r2, r0
 8005e98:	1dfb      	adds	r3, r7, #7
 8005e9a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, level);
 8005e9c:	1dfb      	adds	r3, r7, #7
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	4804      	ldr	r0, [pc, #16]	; (8005eb4 <led_red+0x24>)
 8005ea2:	001a      	movs	r2, r3
 8005ea4:	2102      	movs	r1, #2
 8005ea6:	f7fc f86e 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b002      	add	sp, #8
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	48000800 	.word	0x48000800

08005eb8 <_sbrk>:
}

// ***************************************************************************

caddr_t _sbrk(int incr)
{
 8005eb8:	b590      	push	{r4, r7, lr}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
    extern char _ebss;   ///< symbol defined by the linker
    extern char _estack; ///< symbol defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
 8005ec0:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <_sbrk+0x70>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d102      	bne.n	8005ece <_sbrk+0x16>
    {
        heap_end = &_ebss;
 8005ec8:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <_sbrk+0x70>)
 8005eca:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <_sbrk+0x74>)
 8005ecc:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 8005ece:	4b16      	ldr	r3, [pc, #88]	; (8005f28 <_sbrk+0x70>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8005ed4:	f3ef 8308 	mrs	r3, MSP
 8005ed8:	001c      	movs	r4, r3
  return(result);
 8005eda:	0023      	movs	r3, r4
    // determine the maximum address available for the Heap
    // (1) Start with the current stack pointer
    //     This heap end address becomes a problem if
    //     the stack grows further - therefore we allow for
    //     some additional room.
    char *heapMax = (char *) __get_MSP() - 128;
 8005edc:	3b80      	subs	r3, #128	; 0x80
 8005ede:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8005ee0:	f3ef 8308 	mrs	r3, MSP
 8005ee4:	001c      	movs	r4, r3
  return(result);
 8005ee6:	0023      	movs	r3, r4
    if ( (char *) __get_MSP() < prev_heap_end )
 8005ee8:	001a      	movs	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d201      	bcs.n	8005ef4 <_sbrk+0x3c>
    {
        // FreeRTOS multitasking has been started, because
        // the Stack usually lies in an BSS area managed
        // by FreeRTOS. Therefore the maximum heap end is
        // the end of RAM (symbol defined by the linker).
    	heapMax = &_estack; // this symbol is defined at the end of RAM
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <_sbrk+0x78>)
 8005ef2:	60fb      	str	r3, [r7, #12]
    }

    if (heap_end + incr > heapMax)
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <_sbrk+0x70>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	18d2      	adds	r2, r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d907      	bls.n	8005f12 <_sbrk+0x5a>
    {
        //_write (STDERR_FILENO, "Heap and heapMax collision\n", 25);
        errno = ENOMEM;
 8005f02:	f001 fd1d 	bl	8007940 <__errno>
 8005f06:	0003      	movs	r3, r0
 8005f08:	220c      	movs	r2, #12
 8005f0a:	601a      	str	r2, [r3, #0]
        return (caddr_t) -1;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	425b      	negs	r3, r3
 8005f10:	e006      	b.n	8005f20 <_sbrk+0x68>
        // Alternative implementation: exit(-1) to stop the system
    }

    heap_end += incr;
 8005f12:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <_sbrk+0x70>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	18d2      	adds	r2, r2, r3
 8005f1a:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <_sbrk+0x70>)
 8005f1c:	601a      	str	r2, [r3, #0]
    return (caddr_t) prev_heap_end;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
}
 8005f20:	0018      	movs	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b005      	add	sp, #20
 8005f26:	bd90      	pop	{r4, r7, pc}
 8005f28:	2000197c 	.word	0x2000197c
 8005f2c:	20001d28 	.word	0x20001d28
 8005f30:	20004000 	.word	0x20004000

08005f34 <ft_start_sampling>:
	// nothing to initialize
}


void ft_start_sampling(enum DD_PINS_E leftSensor)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	0002      	movs	r2, r0
 8005f3c:	1dfb      	adds	r3, r7, #7
 8005f3e:	701a      	strb	r2, [r3, #0]
    leftIRSensor = leftSensor;
 8005f40:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <ft_start_sampling+0x2c>)
 8005f42:	1dfa      	adds	r2, r7, #7
 8005f44:	7812      	ldrb	r2, [r2, #0]
 8005f46:	701a      	strb	r2, [r3, #0]
    ft_samples_ready = false;
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <ft_start_sampling+0x30>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6);
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <ft_start_sampling+0x34>)
 8005f50:	0018      	movs	r0, r3
 8005f52:	f7fc fe8d 	bl	8002c70 <HAL_TIM_Base_Start_IT>
}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b002      	add	sp, #8
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	20001982 	.word	0x20001982
 8005f64:	20001981 	.word	0x20001981
 8005f68:	20001b4c 	.word	0x20001b4c

08005f6c <ft_is_sampling_finished>:



bool ft_is_sampling_finished(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
    return ft_samples_ready;
 8005f70:	4b02      	ldr	r3, [pc, #8]	; (8005f7c <ft_is_sampling_finished+0x10>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
}
 8005f74:	0018      	movs	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	20001981 	.word	0x20001981

08005f80 <ft_get_transform>:


uint16_t ft_get_transform(DFT_FREQ_T frequency)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	0002      	movs	r2, r0
 8005f88:	1dfb      	adds	r3, r7, #7
 8005f8a:	701a      	strb	r2, [r3, #0]
    int16_t real = 0;
 8005f8c:	2316      	movs	r3, #22
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	2200      	movs	r2, #0
 8005f92:	801a      	strh	r2, [r3, #0]
    int16_t imag = 0;
 8005f94:	2314      	movs	r3, #20
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	2200      	movs	r2, #0
 8005f9a:	801a      	strh	r2, [r3, #0]
    const int8_t *steuervektor_re;
    const int8_t *steuervektor_im;

    // Steuervektor abhängig von der gewünschten Frequenzkomponente auswählen
    switch (frequency)
 8005f9c:	1dfb      	adds	r3, r7, #7
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <ft_get_transform+0x2a>
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d005      	beq.n	8005fb4 <ft_get_transform+0x34>
 8005fa8:	e009      	b.n	8005fbe <ft_get_transform+0x3e>
    {
    case DFT_FREQ100:
        steuervektor_re = STEUERVEKTOR_RE10_;
 8005faa:	4b25      	ldr	r3, [pc, #148]	; (8006040 <ft_get_transform+0xc0>)
 8005fac:	613b      	str	r3, [r7, #16]
        steuervektor_im = STEUERVEKTOR_IM10_;
 8005fae:	4b25      	ldr	r3, [pc, #148]	; (8006044 <ft_get_transform+0xc4>)
 8005fb0:	60fb      	str	r3, [r7, #12]
        break;
 8005fb2:	e004      	b.n	8005fbe <ft_get_transform+0x3e>
    case DFT_FREQ125:
        steuervektor_re = STEUERVEKTOR_RE8_;
 8005fb4:	4b24      	ldr	r3, [pc, #144]	; (8006048 <ft_get_transform+0xc8>)
 8005fb6:	613b      	str	r3, [r7, #16]
        steuervektor_im = STEUERVEKTOR_IM8_;
 8005fb8:	4b24      	ldr	r3, [pc, #144]	; (800604c <ft_get_transform+0xcc>)
 8005fba:	60fb      	str	r3, [r7, #12]
        break;
 8005fbc:	46c0      	nop			; (mov r8, r8)
    }



    // Fouriertransformierte für die gewünschte Frequenzkomponente bestimmen
    for (int i = 0; i < SAMPLES; i++)
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	e024      	b.n	800600e <ft_get_transform+0x8e>
    {
        if (signal1_[i])
 8005fc4:	4a22      	ldr	r2, [pc, #136]	; (8006050 <ft_get_transform+0xd0>)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	18d3      	adds	r3, r2, r3
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <ft_get_transform+0x88>
        {
            real += steuervektor_re[i];
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	18d3      	adds	r3, r2, r3
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b25b      	sxtb	r3, r3
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	2316      	movs	r3, #22
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	18d3      	adds	r3, r2, r3
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	2316      	movs	r3, #22
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	801a      	strh	r2, [r3, #0]
            imag += steuervektor_im[i];
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	18d3      	adds	r3, r2, r3
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	b25b      	sxtb	r3, r3
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	2314      	movs	r3, #20
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	18d3      	adds	r3, r2, r3
 8006000:	b29a      	uxth	r2, r3
 8006002:	2314      	movs	r3, #20
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < SAMPLES; i++)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	3301      	adds	r3, #1
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b27      	cmp	r3, #39	; 0x27
 8006012:	ddd7      	ble.n	8005fc4 <ft_get_transform+0x44>
        }
    }

    // TODO stimmt das?
    return abs(real) + abs(imag);
 8006014:	2316      	movs	r3, #22
 8006016:	18fb      	adds	r3, r7, r3
 8006018:	2200      	movs	r2, #0
 800601a:	5e9b      	ldrsh	r3, [r3, r2]
 800601c:	17da      	asrs	r2, r3, #31
 800601e:	189b      	adds	r3, r3, r2
 8006020:	4053      	eors	r3, r2
 8006022:	b29a      	uxth	r2, r3
 8006024:	2314      	movs	r3, #20
 8006026:	18fb      	adds	r3, r7, r3
 8006028:	2100      	movs	r1, #0
 800602a:	5e5b      	ldrsh	r3, [r3, r1]
 800602c:	17d9      	asrs	r1, r3, #31
 800602e:	185b      	adds	r3, r3, r1
 8006030:	404b      	eors	r3, r1
 8006032:	b29b      	uxth	r3, r3
 8006034:	18d3      	adds	r3, r2, r3
 8006036:	b29b      	uxth	r3, r3
}
 8006038:	0018      	movs	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	b006      	add	sp, #24
 800603e:	bd80      	pop	{r7, pc}
 8006040:	080085e4 	.word	0x080085e4
 8006044:	0800860c 	.word	0x0800860c
 8006048:	08008594 	.word	0x08008594
 800604c:	080085bc 	.word	0x080085bc
 8006050:	20001984 	.word	0x20001984

08006054 <ft_get_samples>:
}

// ***************************************************************************

void ft_get_samples()
{
 8006054:	b5b0      	push	{r4, r5, r7, lr}
 8006056:	af00      	add	r7, sp, #0
    if (ft_sample_index == SAMPLES)
 8006058:	4b15      	ldr	r3, [pc, #84]	; (80060b0 <ft_get_samples+0x5c>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b28      	cmp	r3, #40	; 0x28
 800605e:	d111      	bne.n	8006084 <ft_get_samples+0x30>
    {
        HAL_TIM_Base_Stop_IT(&htim6);
 8006060:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <ft_get_samples+0x60>)
 8006062:	0018      	movs	r0, r3
 8006064:	f7fc fe1e 	bl	8002ca4 <HAL_TIM_Base_Stop_IT>
        ft_sample_index = 0;
 8006068:	4b11      	ldr	r3, [pc, #68]	; (80060b0 <ft_get_samples+0x5c>)
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]
        ft_samples_ready = true;
 800606e:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <ft_get_samples+0x64>)
 8006070:	2201      	movs	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]
        if (sampling_finished != NULL)
 8006074:	4b11      	ldr	r3, [pc, #68]	; (80060bc <ft_get_samples+0x68>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d015      	beq.n	80060a8 <ft_get_samples+0x54>
            sampling_finished();
 800607c:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <ft_get_samples+0x68>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4798      	blx	r3
    else
    {
        signal1_[ft_sample_index] = digital_get_pin(leftIRSensor);
        ft_sample_index++;
    }
}
 8006082:	e011      	b.n	80060a8 <ft_get_samples+0x54>
        signal1_[ft_sample_index] = digital_get_pin(leftIRSensor);
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <ft_get_samples+0x5c>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	001c      	movs	r4, r3
 800608a:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <ft_get_samples+0x6c>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	0018      	movs	r0, r3
 8006090:	f7ff fe0d 	bl	8005cae <digital_get_pin>
 8006094:	0003      	movs	r3, r0
 8006096:	001a      	movs	r2, r3
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <ft_get_samples+0x70>)
 800609a:	551a      	strb	r2, [r3, r4]
        ft_sample_index++;
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <ft_get_samples+0x5c>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	4b02      	ldr	r3, [pc, #8]	; (80060b0 <ft_get_samples+0x5c>)
 80060a6:	701a      	strb	r2, [r3, #0]
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bdb0      	pop	{r4, r5, r7, pc}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	20001980 	.word	0x20001980
 80060b4:	20001b4c 	.word	0x20001b4c
 80060b8:	20001981 	.word	0x20001981
 80060bc:	200019ac 	.word	0x200019ac
 80060c0:	20001982 	.word	0x20001982
 80060c4:	20001984 	.word	0x20001984

080060c8 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
    /* TIM Update event */
    if (__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET)
 80060cc:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <TIM6_DAC_IRQHandler+0x34>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2201      	movs	r2, #1
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d10d      	bne.n	80060f6 <TIM6_DAC_IRQHandler+0x2e>
    {
        if (__HAL_TIM_GET_IT_SOURCE(&htim6, TIM_IT_UPDATE) != RESET)
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <TIM6_DAC_IRQHandler+0x34>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d106      	bne.n	80060f6 <TIM6_DAC_IRQHandler+0x2e>
        {
            __HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80060e8:	4b04      	ldr	r3, [pc, #16]	; (80060fc <TIM6_DAC_IRQHandler+0x34>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2202      	movs	r2, #2
 80060ee:	4252      	negs	r2, r2
 80060f0:	611a      	str	r2, [r3, #16]

            ft_get_samples();
 80060f2:	f7ff ffaf 	bl	8006054 <ft_get_samples>
        }
    }
}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20001b4c 	.word	0x20001b4c

08006100 <init>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void init(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006104:	f7fa ff7a 	bl	8000ffc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8006108:	f000 f819 	bl	800613e <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800610c:	f000 fbae 	bl	800686c <MX_GPIO_Init>
  MX_TIM3_Init();
 8006110:	f000 f97a 	bl	8006408 <MX_TIM3_Init>
  MX_ADC_Init();
 8006114:	f000 f898 	bl	8006248 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8006118:	f000 fb50 	bl	80067bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800611c:	f000 fb7a 	bl	8006814 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8006120:	f000 f92a 	bl	8006378 <MX_TIM2_Init>
  MX_TIM15_Init();
 8006124:	f000 fa00 	bl	8006528 <MX_TIM15_Init>
  MX_TIM16_Init();
 8006128:	f000 fa78 	bl	800661c <MX_TIM16_Init>
  MX_TIM17_Init();
 800612c:	f000 fade 	bl	80066ec <MX_TIM17_Init>
  MX_TIM6_Init();
 8006130:	f000 f9d0 	bl	80064d4 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8006134:	f000 f86a 	bl	800620c <MX_NVIC_Init>
}
 8006138:	46c0      	nop			; (mov r8, r8)
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b098      	sub	sp, #96	; 0x60
 8006142:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8006144:	232c      	movs	r3, #44	; 0x2c
 8006146:	18fb      	adds	r3, r7, r3
 8006148:	2211      	movs	r2, #17
 800614a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800614c:	232c      	movs	r3, #44	; 0x2c
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	2201      	movs	r2, #1
 8006152:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8006154:	232c      	movs	r3, #44	; 0x2c
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	2201      	movs	r2, #1
 800615a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800615c:	232c      	movs	r3, #44	; 0x2c
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	2210      	movs	r2, #16
 8006162:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006164:	232c      	movs	r3, #44	; 0x2c
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	2202      	movs	r2, #2
 800616a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800616c:	232c      	movs	r3, #44	; 0x2c
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	2280      	movs	r2, #128	; 0x80
 8006172:	0252      	lsls	r2, r2, #9
 8006174:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8006176:	232c      	movs	r3, #44	; 0x2c
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	2280      	movs	r2, #128	; 0x80
 800617c:	0352      	lsls	r2, r2, #13
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8006180:	232c      	movs	r3, #44	; 0x2c
 8006182:	18fb      	adds	r3, r7, r3
 8006184:	2200      	movs	r2, #0
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8006188:	232c      	movs	r3, #44	; 0x2c
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	0018      	movs	r0, r3
 800618e:	f7fb ff17 	bl	8001fc0 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006192:	231c      	movs	r3, #28
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	2207      	movs	r2, #7
 8006198:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800619a:	231c      	movs	r3, #28
 800619c:	18fb      	adds	r3, r7, r3
 800619e:	2202      	movs	r2, #2
 80061a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80061a2:	231c      	movs	r3, #28
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	2200      	movs	r2, #0
 80061a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80061aa:	231c      	movs	r3, #28
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	2200      	movs	r2, #0
 80061b0:	60da      	str	r2, [r3, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 80061b2:	231c      	movs	r3, #28
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	2101      	movs	r1, #1
 80061b8:	0018      	movs	r0, r3
 80061ba:	f7fc fa5f 	bl	800267c <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80061be:	003b      	movs	r3, r7
 80061c0:	2203      	movs	r2, #3
 80061c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80061c4:	003b      	movs	r3, r7
 80061c6:	2200      	movs	r2, #0
 80061c8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80061ca:	003b      	movs	r3, r7
 80061cc:	2200      	movs	r2, #0
 80061ce:	60da      	str	r2, [r3, #12]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80061d0:	003b      	movs	r3, r7
 80061d2:	0018      	movs	r0, r3
 80061d4:	f7fc fc22 	bl	8002a1c <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80061d8:	f7fc fbd6 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80061dc:	0002      	movs	r2, r0
 80061de:	23fa      	movs	r3, #250	; 0xfa
 80061e0:	0099      	lsls	r1, r3, #2
 80061e2:	0010      	movs	r0, r2
 80061e4:	f7f9 ff98 	bl	8000118 <__udivsi3>
 80061e8:	0003      	movs	r3, r0
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7fb fcc4 	bl	8001b78 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80061f0:	2004      	movs	r0, #4
 80061f2:	f7fb fccf 	bl	8001b94 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 80061f6:	2301      	movs	r3, #1
 80061f8:	425b      	negs	r3, r3
 80061fa:	2200      	movs	r2, #0
 80061fc:	2103      	movs	r1, #3
 80061fe:	0018      	movs	r0, r3
 8006200:	f7fb fc94 	bl	8001b2c <HAL_NVIC_SetPriority>
}
 8006204:	46c0      	nop			; (mov r8, r8)
 8006206:	46bd      	mov	sp, r7
 8006208:	b018      	add	sp, #96	; 0x60
 800620a:	bd80      	pop	{r7, pc}

0800620c <MX_NVIC_Init>:

/** NVIC Configuration
*/
void MX_NVIC_Init(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8006210:	2200      	movs	r2, #0
 8006212:	2103      	movs	r1, #3
 8006214:	2011      	movs	r0, #17
 8006216:	f7fb fc89 	bl	8001b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800621a:	2011      	movs	r0, #17
 800621c:	f7fb fc9c 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8006220:	2200      	movs	r2, #0
 8006222:	2103      	movs	r1, #3
 8006224:	201b      	movs	r0, #27
 8006226:	f7fb fc81 	bl	8001b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800622a:	201b      	movs	r0, #27
 800622c:	f7fb fc94 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8006230:	2200      	movs	r2, #0
 8006232:	2103      	movs	r1, #3
 8006234:	201c      	movs	r0, #28
 8006236:	f7fb fc79 	bl	8001b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800623a:	201c      	movs	r0, #28
 800623c:	f7fb fc8c 	bl	8001b58 <HAL_NVIC_EnableIRQ>
}
 8006240:	46c0      	nop			; (mov r8, r8)
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <MX_ADC_Init>:

/* ADC init function */
void MX_ADC_Init(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc.Instance = ADC1;
 800624e:	4b47      	ldr	r3, [pc, #284]	; (800636c <MX_ADC_Init+0x124>)
 8006250:	4a47      	ldr	r2, [pc, #284]	; (8006370 <MX_ADC_Init+0x128>)
 8006252:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006254:	4b45      	ldr	r3, [pc, #276]	; (800636c <MX_ADC_Init+0x124>)
 8006256:	2200      	movs	r2, #0
 8006258:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800625a:	4b44      	ldr	r3, [pc, #272]	; (800636c <MX_ADC_Init+0x124>)
 800625c:	2200      	movs	r2, #0
 800625e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006260:	4b42      	ldr	r3, [pc, #264]	; (800636c <MX_ADC_Init+0x124>)
 8006262:	2200      	movs	r2, #0
 8006264:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006266:	4b41      	ldr	r3, [pc, #260]	; (800636c <MX_ADC_Init+0x124>)
 8006268:	2201      	movs	r2, #1
 800626a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800626c:	4b3f      	ldr	r3, [pc, #252]	; (800636c <MX_ADC_Init+0x124>)
 800626e:	2204      	movs	r2, #4
 8006270:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006272:	4b3e      	ldr	r3, [pc, #248]	; (800636c <MX_ADC_Init+0x124>)
 8006274:	2200      	movs	r2, #0
 8006276:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8006278:	4b3c      	ldr	r3, [pc, #240]	; (800636c <MX_ADC_Init+0x124>)
 800627a:	2200      	movs	r2, #0
 800627c:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 800627e:	4b3b      	ldr	r3, [pc, #236]	; (800636c <MX_ADC_Init+0x124>)
 8006280:	2200      	movs	r2, #0
 8006282:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006284:	4b39      	ldr	r3, [pc, #228]	; (800636c <MX_ADC_Init+0x124>)
 8006286:	2201      	movs	r2, #1
 8006288:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800628a:	4b38      	ldr	r3, [pc, #224]	; (800636c <MX_ADC_Init+0x124>)
 800628c:	2200      	movs	r2, #0
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006290:	4b36      	ldr	r3, [pc, #216]	; (800636c <MX_ADC_Init+0x124>)
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006296:	4b35      	ldr	r3, [pc, #212]	; (800636c <MX_ADC_Init+0x124>)
 8006298:	2201      	movs	r2, #1
 800629a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_ADC_Init(&hadc);
 800629c:	4b33      	ldr	r3, [pc, #204]	; (800636c <MX_ADC_Init+0x124>)
 800629e:	0018      	movs	r0, r3
 80062a0:	f7fa fef4 	bl	800108c <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 80062a4:	1d3b      	adds	r3, r7, #4
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE; //ADC_RANK_CHANNEL_NUMBER;
 80062aa:	1d3b      	adds	r3, r7, #4
 80062ac:	4a31      	ldr	r2, [pc, #196]	; (8006374 <MX_ADC_Init+0x12c>)
 80062ae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5; //ADC_SAMPLETIME_71CYCLES_5;
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	2202      	movs	r2, #2
 80062b4:	609a      	str	r2, [r3, #8]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80062b6:	1d3a      	adds	r2, r7, #4
 80062b8:	4b2c      	ldr	r3, [pc, #176]	; (800636c <MX_ADC_Init+0x124>)
 80062ba:	0011      	movs	r1, r2
 80062bc:	0018      	movs	r0, r3
 80062be:	f7fb f955 	bl	800156c <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 80062c2:	1d3b      	adds	r3, r7, #4
 80062c4:	2201      	movs	r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80062c8:	1d3a      	adds	r2, r7, #4
 80062ca:	4b28      	ldr	r3, [pc, #160]	; (800636c <MX_ADC_Init+0x124>)
 80062cc:	0011      	movs	r1, r2
 80062ce:	0018      	movs	r0, r3
 80062d0:	f7fb f94c 	bl	800156c <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 80062d4:	1d3b      	adds	r3, r7, #4
 80062d6:	2202      	movs	r2, #2
 80062d8:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80062da:	1d3a      	adds	r2, r7, #4
 80062dc:	4b23      	ldr	r3, [pc, #140]	; (800636c <MX_ADC_Init+0x124>)
 80062de:	0011      	movs	r1, r2
 80062e0:	0018      	movs	r0, r3
 80062e2:	f7fb f943 	bl	800156c <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 80062e6:	1d3b      	adds	r3, r7, #4
 80062e8:	2203      	movs	r2, #3
 80062ea:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80062ec:	1d3a      	adds	r2, r7, #4
 80062ee:	4b1f      	ldr	r3, [pc, #124]	; (800636c <MX_ADC_Init+0x124>)
 80062f0:	0011      	movs	r1, r2
 80062f2:	0018      	movs	r0, r3
 80062f4:	f7fb f93a 	bl	800156c <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 80062f8:	1d3b      	adds	r3, r7, #4
 80062fa:	2204      	movs	r2, #4
 80062fc:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80062fe:	1d3a      	adds	r2, r7, #4
 8006300:	4b1a      	ldr	r3, [pc, #104]	; (800636c <MX_ADC_Init+0x124>)
 8006302:	0011      	movs	r1, r2
 8006304:	0018      	movs	r0, r3
 8006306:	f7fb f931 	bl	800156c <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 800630a:	1d3b      	adds	r3, r7, #4
 800630c:	2205      	movs	r2, #5
 800630e:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8006310:	1d3a      	adds	r2, r7, #4
 8006312:	4b16      	ldr	r3, [pc, #88]	; (800636c <MX_ADC_Init+0x124>)
 8006314:	0011      	movs	r1, r2
 8006316:	0018      	movs	r0, r3
 8006318:	f7fb f928 	bl	800156c <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 800631c:	1d3b      	adds	r3, r7, #4
 800631e:	2206      	movs	r2, #6
 8006320:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8006322:	1d3a      	adds	r2, r7, #4
 8006324:	4b11      	ldr	r3, [pc, #68]	; (800636c <MX_ADC_Init+0x124>)
 8006326:	0011      	movs	r1, r2
 8006328:	0018      	movs	r0, r3
 800632a:	f7fb f91f 	bl	800156c <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_7;
 800632e:	1d3b      	adds	r3, r7, #4
 8006330:	2207      	movs	r2, #7
 8006332:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8006334:	1d3a      	adds	r2, r7, #4
 8006336:	4b0d      	ldr	r3, [pc, #52]	; (800636c <MX_ADC_Init+0x124>)
 8006338:	0011      	movs	r1, r2
 800633a:	0018      	movs	r0, r3
 800633c:	f7fb f916 	bl	800156c <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_14;
 8006340:	1d3b      	adds	r3, r7, #4
 8006342:	220e      	movs	r2, #14
 8006344:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8006346:	1d3a      	adds	r2, r7, #4
 8006348:	4b08      	ldr	r3, [pc, #32]	; (800636c <MX_ADC_Init+0x124>)
 800634a:	0011      	movs	r1, r2
 800634c:	0018      	movs	r0, r3
 800634e:	f7fb f90d 	bl	800156c <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_15;
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	220f      	movs	r2, #15
 8006356:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8006358:	1d3a      	adds	r2, r7, #4
 800635a:	4b04      	ldr	r3, [pc, #16]	; (800636c <MX_ADC_Init+0x124>)
 800635c:	0011      	movs	r1, r2
 800635e:	0018      	movs	r0, r3
 8006360:	f7fb f904 	bl	800156c <HAL_ADC_ConfigChannel>
}
 8006364:	46c0      	nop			; (mov r8, r8)
 8006366:	46bd      	mov	sp, r7
 8006368:	b004      	add	sp, #16
 800636a:	bd80      	pop	{r7, pc}
 800636c:	20001c3c 	.word	0x20001c3c
 8006370:	40012400 	.word	0x40012400
 8006374:	00001001 	.word	0x00001001

08006378 <MX_TIM2_Init>:

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800637e:	4b21      	ldr	r3, [pc, #132]	; (8006404 <MX_TIM2_Init+0x8c>)
 8006380:	2280      	movs	r2, #128	; 0x80
 8006382:	05d2      	lsls	r2, r2, #23
 8006384:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006386:	4b1f      	ldr	r3, [pc, #124]	; (8006404 <MX_TIM2_Init+0x8c>)
 8006388:	2200      	movs	r2, #0
 800638a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800638c:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <MX_TIM2_Init+0x8c>)
 800638e:	2200      	movs	r2, #0
 8006390:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8006392:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <MX_TIM2_Init+0x8c>)
 8006394:	2200      	movs	r2, #0
 8006396:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006398:	4b1a      	ldr	r3, [pc, #104]	; (8006404 <MX_TIM2_Init+0x8c>)
 800639a:	2200      	movs	r2, #0
 800639c:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&htim2);
 800639e:	4b19      	ldr	r3, [pc, #100]	; (8006404 <MX_TIM2_Init+0x8c>)
 80063a0:	0018      	movs	r0, r3
 80063a2:	f7fc fca9 	bl	8002cf8 <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063a6:	2320      	movs	r3, #32
 80063a8:	18fb      	adds	r3, r7, r3
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063ae:	2320      	movs	r3, #32
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	2200      	movs	r2, #0
 80063b4:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 80063b6:	2320      	movs	r3, #32
 80063b8:	18fa      	adds	r2, r7, r3
 80063ba:	4b12      	ldr	r3, [pc, #72]	; (8006404 <MX_TIM2_Init+0x8c>)
 80063bc:	0011      	movs	r1, r2
 80063be:	0018      	movs	r0, r3
 80063c0:	f7fd fb39 	bl	8003a36 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063c4:	1d3b      	adds	r3, r7, #4
 80063c6:	2260      	movs	r2, #96	; 0x60
 80063c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80063ca:	1d3b      	adds	r3, r7, #4
 80063cc:	2200      	movs	r2, #0
 80063ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063d0:	1d3b      	adds	r3, r7, #4
 80063d2:	2200      	movs	r2, #0
 80063d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063d6:	1d3b      	adds	r3, r7, #4
 80063d8:	2200      	movs	r2, #0
 80063da:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80063dc:	1d39      	adds	r1, r7, #4
 80063de:	4b09      	ldr	r3, [pc, #36]	; (8006404 <MX_TIM2_Init+0x8c>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	0018      	movs	r0, r3
 80063e4:	f7fc fe0e 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 80063e8:	1d39      	adds	r1, r7, #4
 80063ea:	4b06      	ldr	r3, [pc, #24]	; (8006404 <MX_TIM2_Init+0x8c>)
 80063ec:	2204      	movs	r2, #4
 80063ee:	0018      	movs	r0, r3
 80063f0:	f7fc fe08 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim2);
 80063f4:	4b03      	ldr	r3, [pc, #12]	; (8006404 <MX_TIM2_Init+0x8c>)
 80063f6:	0018      	movs	r0, r3
 80063f8:	f000 fee2 	bl	80071c0 <HAL_TIM_MspPostInit>

}
 80063fc:	46c0      	nop			; (mov r8, r8)
 80063fe:	46bd      	mov	sp, r7
 8006400:	b00a      	add	sp, #40	; 0x28
 8006402:	bd80      	pop	{r7, pc}
 8006404:	20001b8c 	.word	0x20001b8c

08006408 <MX_TIM3_Init>:

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08e      	sub	sp, #56	; 0x38
 800640c:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 800640e:	4b2f      	ldr	r3, [pc, #188]	; (80064cc <MX_TIM3_Init+0xc4>)
 8006410:	4a2f      	ldr	r2, [pc, #188]	; (80064d0 <MX_TIM3_Init+0xc8>)
 8006412:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8006414:	4b2d      	ldr	r3, [pc, #180]	; (80064cc <MX_TIM3_Init+0xc4>)
 8006416:	2214      	movs	r2, #20
 8006418:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800641a:	4b2c      	ldr	r3, [pc, #176]	; (80064cc <MX_TIM3_Init+0xc4>)
 800641c:	2200      	movs	r2, #0
 800641e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8006420:	4b2a      	ldr	r3, [pc, #168]	; (80064cc <MX_TIM3_Init+0xc4>)
 8006422:	2264      	movs	r2, #100	; 0x64
 8006424:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006426:	4b29      	ldr	r3, [pc, #164]	; (80064cc <MX_TIM3_Init+0xc4>)
 8006428:	2200      	movs	r2, #0
 800642a:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Init(&htim3);
 800642c:	4b27      	ldr	r3, [pc, #156]	; (80064cc <MX_TIM3_Init+0xc4>)
 800642e:	0018      	movs	r0, r3
 8006430:	f7fc fbf2 	bl	8002c18 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006434:	2328      	movs	r3, #40	; 0x28
 8006436:	18fb      	adds	r3, r7, r3
 8006438:	2280      	movs	r2, #128	; 0x80
 800643a:	0152      	lsls	r2, r2, #5
 800643c:	601a      	str	r2, [r3, #0]
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 800643e:	2328      	movs	r3, #40	; 0x28
 8006440:	18fa      	adds	r2, r7, r3
 8006442:	4b22      	ldr	r3, [pc, #136]	; (80064cc <MX_TIM3_Init+0xc4>)
 8006444:	0011      	movs	r1, r2
 8006446:	0018      	movs	r0, r3
 8006448:	f7fc fe94 	bl	8003174 <HAL_TIM_ConfigClockSource>

  HAL_TIM_PWM_Init(&htim3);
 800644c:	4b1f      	ldr	r3, [pc, #124]	; (80064cc <MX_TIM3_Init+0xc4>)
 800644e:	0018      	movs	r0, r3
 8006450:	f7fc fc52 	bl	8002cf8 <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006454:	2320      	movs	r3, #32
 8006456:	18fb      	adds	r3, r7, r3
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800645c:	2320      	movs	r3, #32
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	2200      	movs	r2, #0
 8006462:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8006464:	2320      	movs	r3, #32
 8006466:	18fa      	adds	r2, r7, r3
 8006468:	4b18      	ldr	r3, [pc, #96]	; (80064cc <MX_TIM3_Init+0xc4>)
 800646a:	0011      	movs	r1, r2
 800646c:	0018      	movs	r0, r3
 800646e:	f7fd fae2 	bl	8003a36 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006472:	1d3b      	adds	r3, r7, #4
 8006474:	2260      	movs	r2, #96	; 0x60
 8006476:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8006478:	1d3b      	adds	r3, r7, #4
 800647a:	2200      	movs	r2, #0
 800647c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800647e:	1d3b      	adds	r3, r7, #4
 8006480:	2200      	movs	r2, #0
 8006482:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006484:	1d3b      	adds	r3, r7, #4
 8006486:	2200      	movs	r2, #0
 8006488:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800648a:	1d39      	adds	r1, r7, #4
 800648c:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <MX_TIM3_Init+0xc4>)
 800648e:	2200      	movs	r2, #0
 8006490:	0018      	movs	r0, r3
 8006492:	f7fc fdb7 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8006496:	1d39      	adds	r1, r7, #4
 8006498:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <MX_TIM3_Init+0xc4>)
 800649a:	2204      	movs	r2, #4
 800649c:	0018      	movs	r0, r3
 800649e:	f7fc fdb1 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 80064a2:	1d39      	adds	r1, r7, #4
 80064a4:	4b09      	ldr	r3, [pc, #36]	; (80064cc <MX_TIM3_Init+0xc4>)
 80064a6:	2208      	movs	r2, #8
 80064a8:	0018      	movs	r0, r3
 80064aa:	f7fc fdab 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
 80064ae:	1d39      	adds	r1, r7, #4
 80064b0:	4b06      	ldr	r3, [pc, #24]	; (80064cc <MX_TIM3_Init+0xc4>)
 80064b2:	220c      	movs	r2, #12
 80064b4:	0018      	movs	r0, r3
 80064b6:	f7fc fda5 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim3);
 80064ba:	4b04      	ldr	r3, [pc, #16]	; (80064cc <MX_TIM3_Init+0xc4>)
 80064bc:	0018      	movs	r0, r3
 80064be:	f000 fe7f 	bl	80071c0 <HAL_TIM_MspPostInit>

}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	46bd      	mov	sp, r7
 80064c6:	b00e      	add	sp, #56	; 0x38
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	20001a9c 	.word	0x20001a9c
 80064d0:	40000400 	.word	0x40000400

080064d4 <MX_TIM6_Init>:

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 80064da:	4b10      	ldr	r3, [pc, #64]	; (800651c <MX_TIM6_Init+0x48>)
 80064dc:	4a10      	ldr	r2, [pc, #64]	; (8006520 <MX_TIM6_Init+0x4c>)
 80064de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48;
 80064e0:	4b0e      	ldr	r3, [pc, #56]	; (800651c <MX_TIM6_Init+0x48>)
 80064e2:	2230      	movs	r2, #48	; 0x30
 80064e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064e6:	4b0d      	ldr	r3, [pc, #52]	; (800651c <MX_TIM6_Init+0x48>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80064ec:	4b0b      	ldr	r3, [pc, #44]	; (800651c <MX_TIM6_Init+0x48>)
 80064ee:	4a0d      	ldr	r2, [pc, #52]	; (8006524 <MX_TIM6_Init+0x50>)
 80064f0:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Init(&htim6);
 80064f2:	4b0a      	ldr	r3, [pc, #40]	; (800651c <MX_TIM6_Init+0x48>)
 80064f4:	0018      	movs	r0, r3
 80064f6:	f7fc fb8f 	bl	8002c18 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80064fa:	003b      	movs	r3, r7
 80064fc:	2220      	movs	r2, #32
 80064fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006500:	003b      	movs	r3, r7
 8006502:	2200      	movs	r2, #0
 8006504:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8006506:	003a      	movs	r2, r7
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <MX_TIM6_Init+0x48>)
 800650a:	0011      	movs	r1, r2
 800650c:	0018      	movs	r0, r3
 800650e:	f7fd fa92 	bl	8003a36 <HAL_TIMEx_MasterConfigSynchronization>

}
 8006512:	46c0      	nop			; (mov r8, r8)
 8006514:	46bd      	mov	sp, r7
 8006516:	b002      	add	sp, #8
 8006518:	bd80      	pop	{r7, pc}
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	20001b4c 	.word	0x20001b4c
 8006520:	40001000 	.word	0x40001000
 8006524:	000003e7 	.word	0x000003e7

08006528 <MX_TIM15_Init>:

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b090      	sub	sp, #64	; 0x40
 800652c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim15.Instance = TIM15;
 800652e:	4b39      	ldr	r3, [pc, #228]	; (8006614 <MX_TIM15_Init+0xec>)
 8006530:	4a39      	ldr	r2, [pc, #228]	; (8006618 <MX_TIM15_Init+0xf0>)
 8006532:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8006534:	4b37      	ldr	r3, [pc, #220]	; (8006614 <MX_TIM15_Init+0xec>)
 8006536:	2200      	movs	r2, #0
 8006538:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800653a:	4b36      	ldr	r3, [pc, #216]	; (8006614 <MX_TIM15_Init+0xec>)
 800653c:	2200      	movs	r2, #0
 800653e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0;
 8006540:	4b34      	ldr	r3, [pc, #208]	; (8006614 <MX_TIM15_Init+0xec>)
 8006542:	2200      	movs	r2, #0
 8006544:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006546:	4b33      	ldr	r3, [pc, #204]	; (8006614 <MX_TIM15_Init+0xec>)
 8006548:	2200      	movs	r2, #0
 800654a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800654c:	4b31      	ldr	r3, [pc, #196]	; (8006614 <MX_TIM15_Init+0xec>)
 800654e:	2200      	movs	r2, #0
 8006550:	615a      	str	r2, [r3, #20]
  HAL_TIM_PWM_Init(&htim15);
 8006552:	4b30      	ldr	r3, [pc, #192]	; (8006614 <MX_TIM15_Init+0xec>)
 8006554:	0018      	movs	r0, r3
 8006556:	f7fc fbcf 	bl	8002cf8 <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800655a:	2338      	movs	r3, #56	; 0x38
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006562:	2338      	movs	r3, #56	; 0x38
 8006564:	18fb      	adds	r3, r7, r3
 8006566:	2200      	movs	r2, #0
 8006568:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800656a:	2338      	movs	r3, #56	; 0x38
 800656c:	18fa      	adds	r2, r7, r3
 800656e:	4b29      	ldr	r3, [pc, #164]	; (8006614 <MX_TIM15_Init+0xec>)
 8006570:	0011      	movs	r1, r2
 8006572:	0018      	movs	r0, r3
 8006574:	f7fd fa5f 	bl	8003a36 <HAL_TIMEx_MasterConfigSynchronization>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006578:	231c      	movs	r3, #28
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006580:	231c      	movs	r3, #28
 8006582:	18fb      	adds	r3, r7, r3
 8006584:	2200      	movs	r2, #0
 8006586:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006588:	231c      	movs	r3, #28
 800658a:	18fb      	adds	r3, r7, r3
 800658c:	2200      	movs	r2, #0
 800658e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006590:	231c      	movs	r3, #28
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	2200      	movs	r2, #0
 8006596:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006598:	231c      	movs	r3, #28
 800659a:	18fb      	adds	r3, r7, r3
 800659c:	2200      	movs	r2, #0
 800659e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80065a0:	231c      	movs	r3, #28
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	2280      	movs	r2, #128	; 0x80
 80065a6:	0192      	lsls	r2, r2, #6
 80065a8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80065aa:	231c      	movs	r3, #28
 80065ac:	18fb      	adds	r3, r7, r3
 80065ae:	2200      	movs	r2, #0
 80065b0:	619a      	str	r2, [r3, #24]
  HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig);
 80065b2:	231c      	movs	r3, #28
 80065b4:	18fa      	adds	r2, r7, r3
 80065b6:	4b17      	ldr	r3, [pc, #92]	; (8006614 <MX_TIM15_Init+0xec>)
 80065b8:	0011      	movs	r1, r2
 80065ba:	0018      	movs	r0, r3
 80065bc:	f7fd fa7e 	bl	8003abc <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065c0:	003b      	movs	r3, r7
 80065c2:	2260      	movs	r2, #96	; 0x60
 80065c4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80065c6:	003b      	movs	r3, r7
 80065c8:	2200      	movs	r2, #0
 80065ca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065cc:	003b      	movs	r3, r7
 80065ce:	2200      	movs	r2, #0
 80065d0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80065d2:	003b      	movs	r3, r7
 80065d4:	2200      	movs	r2, #0
 80065d6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065d8:	003b      	movs	r3, r7
 80065da:	2200      	movs	r2, #0
 80065dc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80065de:	003b      	movs	r3, r7
 80065e0:	2200      	movs	r2, #0
 80065e2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80065e4:	003b      	movs	r3, r7
 80065e6:	2200      	movs	r2, #0
 80065e8:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1);
 80065ea:	0039      	movs	r1, r7
 80065ec:	4b09      	ldr	r3, [pc, #36]	; (8006614 <MX_TIM15_Init+0xec>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7fc fd07 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2);
 80065f6:	0039      	movs	r1, r7
 80065f8:	4b06      	ldr	r3, [pc, #24]	; (8006614 <MX_TIM15_Init+0xec>)
 80065fa:	2204      	movs	r2, #4
 80065fc:	0018      	movs	r0, r3
 80065fe:	f7fc fd01 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim15);
 8006602:	4b04      	ldr	r3, [pc, #16]	; (8006614 <MX_TIM15_Init+0xec>)
 8006604:	0018      	movs	r0, r3
 8006606:	f000 fddb 	bl	80071c0 <HAL_TIM_MspPostInit>

}
 800660a:	46c0      	nop			; (mov r8, r8)
 800660c:	46bd      	mov	sp, r7
 800660e:	b010      	add	sp, #64	; 0x40
 8006610:	bd80      	pop	{r7, pc}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	20001a1c 	.word	0x20001a1c
 8006618:	40014000 	.word	0x40014000

0800661c <MX_TIM16_Init>:

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08e      	sub	sp, #56	; 0x38
 8006620:	af00      	add	r7, sp, #0

  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim16.Instance = TIM16;
 8006622:	4b30      	ldr	r3, [pc, #192]	; (80066e4 <MX_TIM16_Init+0xc8>)
 8006624:	4a30      	ldr	r2, [pc, #192]	; (80066e8 <MX_TIM16_Init+0xcc>)
 8006626:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8006628:	4b2e      	ldr	r3, [pc, #184]	; (80066e4 <MX_TIM16_Init+0xc8>)
 800662a:	2200      	movs	r2, #0
 800662c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800662e:	4b2d      	ldr	r3, [pc, #180]	; (80066e4 <MX_TIM16_Init+0xc8>)
 8006630:	2200      	movs	r2, #0
 8006632:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 8006634:	4b2b      	ldr	r3, [pc, #172]	; (80066e4 <MX_TIM16_Init+0xc8>)
 8006636:	2200      	movs	r2, #0
 8006638:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800663a:	4b2a      	ldr	r3, [pc, #168]	; (80066e4 <MX_TIM16_Init+0xc8>)
 800663c:	2200      	movs	r2, #0
 800663e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006640:	4b28      	ldr	r3, [pc, #160]	; (80066e4 <MX_TIM16_Init+0xc8>)
 8006642:	2200      	movs	r2, #0
 8006644:	615a      	str	r2, [r3, #20]
  HAL_TIM_Base_Init(&htim16);
 8006646:	4b27      	ldr	r3, [pc, #156]	; (80066e4 <MX_TIM16_Init+0xc8>)
 8006648:	0018      	movs	r0, r3
 800664a:	f7fc fae5 	bl	8002c18 <HAL_TIM_Base_Init>

  HAL_TIM_PWM_Init(&htim16);
 800664e:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <MX_TIM16_Init+0xc8>)
 8006650:	0018      	movs	r0, r3
 8006652:	f7fc fb51 	bl	8002cf8 <HAL_TIM_PWM_Init>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006656:	231c      	movs	r3, #28
 8006658:	18fb      	adds	r3, r7, r3
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800665e:	231c      	movs	r3, #28
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	2200      	movs	r2, #0
 8006664:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006666:	231c      	movs	r3, #28
 8006668:	18fb      	adds	r3, r7, r3
 800666a:	2200      	movs	r2, #0
 800666c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800666e:	231c      	movs	r3, #28
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	2200      	movs	r2, #0
 8006674:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006676:	231c      	movs	r3, #28
 8006678:	18fb      	adds	r3, r7, r3
 800667a:	2200      	movs	r2, #0
 800667c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800667e:	231c      	movs	r3, #28
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	2280      	movs	r2, #128	; 0x80
 8006684:	0192      	lsls	r2, r2, #6
 8006686:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006688:	231c      	movs	r3, #28
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	2200      	movs	r2, #0
 800668e:	619a      	str	r2, [r3, #24]
  HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig);
 8006690:	231c      	movs	r3, #28
 8006692:	18fa      	adds	r2, r7, r3
 8006694:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <MX_TIM16_Init+0xc8>)
 8006696:	0011      	movs	r1, r2
 8006698:	0018      	movs	r0, r3
 800669a:	f7fd fa0f 	bl	8003abc <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800669e:	003b      	movs	r3, r7
 80066a0:	2260      	movs	r2, #96	; 0x60
 80066a2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80066a4:	003b      	movs	r3, r7
 80066a6:	2200      	movs	r2, #0
 80066a8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066aa:	003b      	movs	r3, r7
 80066ac:	2200      	movs	r2, #0
 80066ae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80066b0:	003b      	movs	r3, r7
 80066b2:	2200      	movs	r2, #0
 80066b4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066b6:	003b      	movs	r3, r7
 80066b8:	2200      	movs	r2, #0
 80066ba:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80066bc:	003b      	movs	r3, r7
 80066be:	2200      	movs	r2, #0
 80066c0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80066c2:	003b      	movs	r3, r7
 80066c4:	2200      	movs	r2, #0
 80066c6:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1);
 80066c8:	0039      	movs	r1, r7
 80066ca:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <MX_TIM16_Init+0xc8>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	0018      	movs	r0, r3
 80066d0:	f7fc fc98 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim16);
 80066d4:	4b03      	ldr	r3, [pc, #12]	; (80066e4 <MX_TIM16_Init+0xc8>)
 80066d6:	0018      	movs	r0, r3
 80066d8:	f000 fd72 	bl	80071c0 <HAL_TIM_MspPostInit>

}
 80066dc:	46c0      	nop			; (mov r8, r8)
 80066de:	46bd      	mov	sp, r7
 80066e0:	b00e      	add	sp, #56	; 0x38
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20001c88 	.word	0x20001c88
 80066e8:	40014400 	.word	0x40014400

080066ec <MX_TIM17_Init>:

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08e      	sub	sp, #56	; 0x38
 80066f0:	af00      	add	r7, sp, #0

  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim17.Instance = TIM17;
 80066f2:	4b30      	ldr	r3, [pc, #192]	; (80067b4 <MX_TIM17_Init+0xc8>)
 80066f4:	4a30      	ldr	r2, [pc, #192]	; (80067b8 <MX_TIM17_Init+0xcc>)
 80066f6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80066f8:	4b2e      	ldr	r3, [pc, #184]	; (80067b4 <MX_TIM17_Init+0xc8>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066fe:	4b2d      	ldr	r3, [pc, #180]	; (80067b4 <MX_TIM17_Init+0xc8>)
 8006700:	2200      	movs	r2, #0
 8006702:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8006704:	4b2b      	ldr	r3, [pc, #172]	; (80067b4 <MX_TIM17_Init+0xc8>)
 8006706:	2200      	movs	r2, #0
 8006708:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800670a:	4b2a      	ldr	r3, [pc, #168]	; (80067b4 <MX_TIM17_Init+0xc8>)
 800670c:	2200      	movs	r2, #0
 800670e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006710:	4b28      	ldr	r3, [pc, #160]	; (80067b4 <MX_TIM17_Init+0xc8>)
 8006712:	2200      	movs	r2, #0
 8006714:	615a      	str	r2, [r3, #20]
  HAL_TIM_Base_Init(&htim17);
 8006716:	4b27      	ldr	r3, [pc, #156]	; (80067b4 <MX_TIM17_Init+0xc8>)
 8006718:	0018      	movs	r0, r3
 800671a:	f7fc fa7d 	bl	8002c18 <HAL_TIM_Base_Init>

  HAL_TIM_PWM_Init(&htim17);
 800671e:	4b25      	ldr	r3, [pc, #148]	; (80067b4 <MX_TIM17_Init+0xc8>)
 8006720:	0018      	movs	r0, r3
 8006722:	f7fc fae9 	bl	8002cf8 <HAL_TIM_PWM_Init>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006726:	231c      	movs	r3, #28
 8006728:	18fb      	adds	r3, r7, r3
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800672e:	231c      	movs	r3, #28
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	2200      	movs	r2, #0
 8006734:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006736:	231c      	movs	r3, #28
 8006738:	18fb      	adds	r3, r7, r3
 800673a:	2200      	movs	r2, #0
 800673c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800673e:	231c      	movs	r3, #28
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	2200      	movs	r2, #0
 8006744:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006746:	231c      	movs	r3, #28
 8006748:	18fb      	adds	r3, r7, r3
 800674a:	2200      	movs	r2, #0
 800674c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800674e:	231c      	movs	r3, #28
 8006750:	18fb      	adds	r3, r7, r3
 8006752:	2280      	movs	r2, #128	; 0x80
 8006754:	0192      	lsls	r2, r2, #6
 8006756:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006758:	231c      	movs	r3, #28
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	2200      	movs	r2, #0
 800675e:	619a      	str	r2, [r3, #24]
  HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig);
 8006760:	231c      	movs	r3, #28
 8006762:	18fa      	adds	r2, r7, r3
 8006764:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <MX_TIM17_Init+0xc8>)
 8006766:	0011      	movs	r1, r2
 8006768:	0018      	movs	r0, r3
 800676a:	f7fd f9a7 	bl	8003abc <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800676e:	003b      	movs	r3, r7
 8006770:	2260      	movs	r2, #96	; 0x60
 8006772:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8006774:	003b      	movs	r3, r7
 8006776:	2200      	movs	r2, #0
 8006778:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800677a:	003b      	movs	r3, r7
 800677c:	2200      	movs	r2, #0
 800677e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006780:	003b      	movs	r3, r7
 8006782:	2200      	movs	r2, #0
 8006784:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006786:	003b      	movs	r3, r7
 8006788:	2200      	movs	r2, #0
 800678a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800678c:	003b      	movs	r3, r7
 800678e:	2200      	movs	r2, #0
 8006790:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006792:	003b      	movs	r3, r7
 8006794:	2200      	movs	r2, #0
 8006796:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1);
 8006798:	0039      	movs	r1, r7
 800679a:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <MX_TIM17_Init+0xc8>)
 800679c:	2200      	movs	r2, #0
 800679e:	0018      	movs	r0, r3
 80067a0:	f7fc fc30 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim17);
 80067a4:	4b03      	ldr	r3, [pc, #12]	; (80067b4 <MX_TIM17_Init+0xc8>)
 80067a6:	0018      	movs	r0, r3
 80067a8:	f000 fd0a 	bl	80071c0 <HAL_TIM_MspPostInit>

}
 80067ac:	46c0      	nop			; (mov r8, r8)
 80067ae:	46bd      	mov	sp, r7
 80067b0:	b00e      	add	sp, #56	; 0x38
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20001a5c 	.word	0x20001a5c
 80067b8:	40014800 	.word	0x40014800

080067bc <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80067c0:	4b12      	ldr	r3, [pc, #72]	; (800680c <MX_USART1_UART_Init+0x50>)
 80067c2:	4a13      	ldr	r2, [pc, #76]	; (8006810 <MX_USART1_UART_Init+0x54>)
 80067c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <MX_USART1_UART_Init+0x50>)
 80067c8:	22e1      	movs	r2, #225	; 0xe1
 80067ca:	0252      	lsls	r2, r2, #9
 80067cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067ce:	4b0f      	ldr	r3, [pc, #60]	; (800680c <MX_USART1_UART_Init+0x50>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067d4:	4b0d      	ldr	r3, [pc, #52]	; (800680c <MX_USART1_UART_Init+0x50>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067da:	4b0c      	ldr	r3, [pc, #48]	; (800680c <MX_USART1_UART_Init+0x50>)
 80067dc:	2200      	movs	r2, #0
 80067de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067e0:	4b0a      	ldr	r3, [pc, #40]	; (800680c <MX_USART1_UART_Init+0x50>)
 80067e2:	220c      	movs	r2, #12
 80067e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067e6:	4b09      	ldr	r3, [pc, #36]	; (800680c <MX_USART1_UART_Init+0x50>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067ec:	4b07      	ldr	r3, [pc, #28]	; (800680c <MX_USART1_UART_Init+0x50>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067f2:	4b06      	ldr	r3, [pc, #24]	; (800680c <MX_USART1_UART_Init+0x50>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067f8:	4b04      	ldr	r3, [pc, #16]	; (800680c <MX_USART1_UART_Init+0x50>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart1);
 80067fe:	4b03      	ldr	r3, [pc, #12]	; (800680c <MX_USART1_UART_Init+0x50>)
 8006800:	0018      	movs	r0, r3
 8006802:	f7fd f9d9 	bl	8003bb8 <HAL_UART_Init>

}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20001adc 	.word	0x20001adc
 8006810:	40013800 	.word	0x40013800

08006814 <MX_USART2_UART_Init>:

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006818:	4b12      	ldr	r3, [pc, #72]	; (8006864 <MX_USART2_UART_Init+0x50>)
 800681a:	4a13      	ldr	r2, [pc, #76]	; (8006868 <MX_USART2_UART_Init+0x54>)
 800681c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800681e:	4b11      	ldr	r3, [pc, #68]	; (8006864 <MX_USART2_UART_Init+0x50>)
 8006820:	22e1      	movs	r2, #225	; 0xe1
 8006822:	0252      	lsls	r2, r2, #9
 8006824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006826:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <MX_USART2_UART_Init+0x50>)
 8006828:	2200      	movs	r2, #0
 800682a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800682c:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <MX_USART2_UART_Init+0x50>)
 800682e:	2200      	movs	r2, #0
 8006830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006832:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <MX_USART2_UART_Init+0x50>)
 8006834:	2200      	movs	r2, #0
 8006836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006838:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <MX_USART2_UART_Init+0x50>)
 800683a:	220c      	movs	r2, #12
 800683c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <MX_USART2_UART_Init+0x50>)
 8006840:	2200      	movs	r2, #0
 8006842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006844:	4b07      	ldr	r3, [pc, #28]	; (8006864 <MX_USART2_UART_Init+0x50>)
 8006846:	2200      	movs	r2, #0
 8006848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800684a:	4b06      	ldr	r3, [pc, #24]	; (8006864 <MX_USART2_UART_Init+0x50>)
 800684c:	2200      	movs	r2, #0
 800684e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006850:	4b04      	ldr	r3, [pc, #16]	; (8006864 <MX_USART2_UART_Init+0x50>)
 8006852:	2200      	movs	r2, #0
 8006854:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart2);
 8006856:	4b03      	ldr	r3, [pc, #12]	; (8006864 <MX_USART2_UART_Init+0x50>)
 8006858:	0018      	movs	r0, r3
 800685a:	f7fd f9ad 	bl	8003bb8 <HAL_UART_Init>
}
 800685e:	46c0      	nop			; (mov r8, r8)
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20001bcc 	.word	0x20001bcc
 8006868:	40004400 	.word	0x40004400

0800686c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08c      	sub	sp, #48	; 0x30
 8006870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006872:	4ba7      	ldr	r3, [pc, #668]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 8006874:	4aa6      	ldr	r2, [pc, #664]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 8006876:	6952      	ldr	r2, [r2, #20]
 8006878:	2180      	movs	r1, #128	; 0x80
 800687a:	0389      	lsls	r1, r1, #14
 800687c:	430a      	orrs	r2, r1
 800687e:	615a      	str	r2, [r3, #20]
 8006880:	4ba3      	ldr	r3, [pc, #652]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 8006882:	695a      	ldr	r2, [r3, #20]
 8006884:	2380      	movs	r3, #128	; 0x80
 8006886:	039b      	lsls	r3, r3, #14
 8006888:	4013      	ands	r3, r2
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800688e:	4ba0      	ldr	r3, [pc, #640]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 8006890:	4a9f      	ldr	r2, [pc, #636]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 8006892:	6952      	ldr	r2, [r2, #20]
 8006894:	2180      	movs	r1, #128	; 0x80
 8006896:	0309      	lsls	r1, r1, #12
 8006898:	430a      	orrs	r2, r1
 800689a:	615a      	str	r2, [r3, #20]
 800689c:	4b9c      	ldr	r3, [pc, #624]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 800689e:	695a      	ldr	r2, [r3, #20]
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	031b      	lsls	r3, r3, #12
 80068a4:	4013      	ands	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80068aa:	4b99      	ldr	r3, [pc, #612]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 80068ac:	4a98      	ldr	r2, [pc, #608]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 80068ae:	6952      	ldr	r2, [r2, #20]
 80068b0:	2180      	movs	r1, #128	; 0x80
 80068b2:	03c9      	lsls	r1, r1, #15
 80068b4:	430a      	orrs	r2, r1
 80068b6:	615a      	str	r2, [r3, #20]
 80068b8:	4b95      	ldr	r3, [pc, #596]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 80068ba:	695a      	ldr	r2, [r3, #20]
 80068bc:	2380      	movs	r3, #128	; 0x80
 80068be:	03db      	lsls	r3, r3, #15
 80068c0:	4013      	ands	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80068c6:	4b92      	ldr	r3, [pc, #584]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 80068c8:	4a91      	ldr	r2, [pc, #580]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 80068ca:	6952      	ldr	r2, [r2, #20]
 80068cc:	2180      	movs	r1, #128	; 0x80
 80068ce:	0289      	lsls	r1, r1, #10
 80068d0:	430a      	orrs	r2, r1
 80068d2:	615a      	str	r2, [r3, #20]
 80068d4:	4b8e      	ldr	r3, [pc, #568]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	2380      	movs	r3, #128	; 0x80
 80068da:	029b      	lsls	r3, r3, #10
 80068dc:	4013      	ands	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80068e2:	4b8b      	ldr	r3, [pc, #556]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 80068e4:	4a8a      	ldr	r2, [pc, #552]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 80068e6:	6952      	ldr	r2, [r2, #20]
 80068e8:	2180      	movs	r1, #128	; 0x80
 80068ea:	02c9      	lsls	r1, r1, #11
 80068ec:	430a      	orrs	r2, r1
 80068ee:	615a      	str	r2, [r3, #20]
 80068f0:	4b87      	ldr	r3, [pc, #540]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 80068f2:	695a      	ldr	r2, [r3, #20]
 80068f4:	2380      	movs	r3, #128	; 0x80
 80068f6:	02db      	lsls	r3, r3, #11
 80068f8:	4013      	ands	r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]
 80068fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80068fe:	4b84      	ldr	r3, [pc, #528]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 8006900:	4a83      	ldr	r2, [pc, #524]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 8006902:	6952      	ldr	r2, [r2, #20]
 8006904:	2180      	movs	r1, #128	; 0x80
 8006906:	0349      	lsls	r1, r1, #13
 8006908:	430a      	orrs	r2, r1
 800690a:	615a      	str	r2, [r3, #20]
 800690c:	4b80      	ldr	r3, [pc, #512]	; (8006b10 <MX_GPIO_Init+0x2a4>)
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	035b      	lsls	r3, r3, #13
 8006914:	4013      	ands	r3, r2
 8006916:	607b      	str	r3, [r7, #4]
 8006918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M0A1_Pin|M2A1_Pin|M2A2_Pin|SERVO4_Pin 
 800691a:	497e      	ldr	r1, [pc, #504]	; (8006b14 <MX_GPIO_Init+0x2a8>)
 800691c:	4b7e      	ldr	r3, [pc, #504]	; (8006b18 <MX_GPIO_Init+0x2ac>)
 800691e:	2200      	movs	r2, #0
 8006920:	0018      	movs	r0, r3
 8006922:	f7fb fb30 	bl	8001f86 <HAL_GPIO_WritePin>
                          |M3B1_Pin|SERVO3_Pin|SERVO2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GREEN_Pin|M3B2_Pin, GPIO_PIN_RESET);
 8006926:	497d      	ldr	r1, [pc, #500]	; (8006b1c <MX_GPIO_Init+0x2b0>)
 8006928:	4b7d      	ldr	r3, [pc, #500]	; (8006b20 <MX_GPIO_Init+0x2b4>)
 800692a:	2200      	movs	r2, #0
 800692c:	0018      	movs	r0, r3
 800692e:	f7fb fb2a 	bl	8001f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO5_Pin|M1B2_Pin|SERVO1_Pin|SERVO0_Pin, GPIO_PIN_RESET);
 8006932:	497c      	ldr	r1, [pc, #496]	; (8006b24 <MX_GPIO_Init+0x2b8>)
 8006934:	4b7c      	ldr	r3, [pc, #496]	; (8006b28 <MX_GPIO_Init+0x2bc>)
 8006936:	2200      	movs	r2, #0
 8006938:	0018      	movs	r0, r3
 800693a:	f7fb fb24 	bl	8001f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1B1_GPIO_Port, M1B1_Pin, GPIO_PIN_RESET);
 800693e:	2380      	movs	r3, #128	; 0x80
 8006940:	019b      	lsls	r3, r3, #6
 8006942:	487a      	ldr	r0, [pc, #488]	; (8006b2c <MX_GPIO_Init+0x2c0>)
 8006944:	2200      	movs	r2, #0
 8006946:	0019      	movs	r1, r3
 8006948:	f7fb fb1d 	bl	8001f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M0A2_GPIO_Port, M0A2_Pin, GPIO_PIN_RESET);
 800694c:	4b78      	ldr	r3, [pc, #480]	; (8006b30 <MX_GPIO_Init+0x2c4>)
 800694e:	2200      	movs	r2, #0
 8006950:	2140      	movs	r1, #64	; 0x40
 8006952:	0018      	movs	r0, r3
 8006954:	f7fb fb17 	bl	8001f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M0A1_Pin M2A1_Pin M2A2_Pin SERVO4_Pin 
                           M3B1_Pin SERVO3_Pin SERVO2_Pin */
  GPIO_InitStruct.Pin = M0A1_Pin|M2A1_Pin|M2A2_Pin|SERVO4_Pin 
 8006958:	231c      	movs	r3, #28
 800695a:	18fb      	adds	r3, r7, r3
 800695c:	4a6d      	ldr	r2, [pc, #436]	; (8006b14 <MX_GPIO_Init+0x2a8>)
 800695e:	601a      	str	r2, [r3, #0]
                          |M3B1_Pin|SERVO3_Pin|SERVO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006960:	231c      	movs	r3, #28
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	2201      	movs	r2, #1
 8006966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006968:	231c      	movs	r3, #28
 800696a:	18fb      	adds	r3, r7, r3
 800696c:	2202      	movs	r2, #2
 800696e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006970:	231c      	movs	r3, #28
 8006972:	18fb      	adds	r3, r7, r3
 8006974:	2200      	movs	r2, #0
 8006976:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006978:	231c      	movs	r3, #28
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	4a66      	ldr	r2, [pc, #408]	; (8006b18 <MX_GPIO_Init+0x2ac>)
 800697e:	0019      	movs	r1, r3
 8006980:	0010      	movs	r0, r2
 8006982:	f7fb f967 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGITAL5_Pin DIGITAL2_Pin DIGITAL3_Pin */
  GPIO_InitStruct.Pin = DIGITAL5_Pin|DIGITAL2_Pin|DIGITAL3_Pin;
 8006986:	231c      	movs	r3, #28
 8006988:	18fb      	adds	r3, r7, r3
 800698a:	228c      	movs	r2, #140	; 0x8c
 800698c:	0192      	lsls	r2, r2, #6
 800698e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006990:	231c      	movs	r3, #28
 8006992:	18fb      	adds	r3, r7, r3
 8006994:	2200      	movs	r2, #0
 8006996:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006998:	231c      	movs	r3, #28
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	2201      	movs	r2, #1
 800699e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069a0:	231c      	movs	r3, #28
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	4a5e      	ldr	r2, [pc, #376]	; (8006b20 <MX_GPIO_Init+0x2b4>)
 80069a6:	0019      	movs	r1, r3
 80069a8:	0010      	movs	r0, r2
 80069aa:	f7fb f953 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin M3B2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|M3B2_Pin;
 80069ae:	231c      	movs	r3, #28
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	4a5a      	ldr	r2, [pc, #360]	; (8006b1c <MX_GPIO_Init+0x2b0>)
 80069b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069b6:	231c      	movs	r3, #28
 80069b8:	18fb      	adds	r3, r7, r3
 80069ba:	2201      	movs	r2, #1
 80069bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80069be:	231c      	movs	r3, #28
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	2202      	movs	r2, #2
 80069c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c6:	231c      	movs	r3, #28
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	2200      	movs	r2, #0
 80069cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069ce:	231c      	movs	r3, #28
 80069d0:	18fb      	adds	r3, r7, r3
 80069d2:	4a53      	ldr	r2, [pc, #332]	; (8006b20 <MX_GPIO_Init+0x2b4>)
 80069d4:	0019      	movs	r1, r3
 80069d6:	0010      	movs	r0, r2
 80069d8:	f7fb f93c 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO5_Pin M1B2_Pin SERVO1_Pin SERVO0_Pin */
  GPIO_InitStruct.Pin = SERVO5_Pin|M1B2_Pin|SERVO1_Pin|SERVO0_Pin;
 80069dc:	231c      	movs	r3, #28
 80069de:	18fb      	adds	r3, r7, r3
 80069e0:	4a50      	ldr	r2, [pc, #320]	; (8006b24 <MX_GPIO_Init+0x2b8>)
 80069e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069e4:	231c      	movs	r3, #28
 80069e6:	18fb      	adds	r3, r7, r3
 80069e8:	2201      	movs	r2, #1
 80069ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80069ec:	231c      	movs	r3, #28
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	2202      	movs	r2, #2
 80069f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069f4:	231c      	movs	r3, #28
 80069f6:	18fb      	adds	r3, r7, r3
 80069f8:	2200      	movs	r2, #0
 80069fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069fc:	231c      	movs	r3, #28
 80069fe:	18fb      	adds	r3, r7, r3
 8006a00:	4a49      	ldr	r2, [pc, #292]	; (8006b28 <MX_GPIO_Init+0x2bc>)
 8006a02:	0019      	movs	r1, r3
 8006a04:	0010      	movs	r0, r2
 8006a06:	f7fb f925 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1B1_Pin */
  GPIO_InitStruct.Pin = M1B1_Pin;
 8006a0a:	231c      	movs	r3, #28
 8006a0c:	18fb      	adds	r3, r7, r3
 8006a0e:	2280      	movs	r2, #128	; 0x80
 8006a10:	0192      	lsls	r2, r2, #6
 8006a12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a14:	231c      	movs	r3, #28
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	2201      	movs	r2, #1
 8006a1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a1c:	231c      	movs	r3, #28
 8006a1e:	18fb      	adds	r3, r7, r3
 8006a20:	2202      	movs	r2, #2
 8006a22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a24:	231c      	movs	r3, #28
 8006a26:	18fb      	adds	r3, r7, r3
 8006a28:	2200      	movs	r2, #0
 8006a2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(M1B1_GPIO_Port, &GPIO_InitStruct);
 8006a2c:	231c      	movs	r3, #28
 8006a2e:	18fb      	adds	r3, r7, r3
 8006a30:	4a3e      	ldr	r2, [pc, #248]	; (8006b2c <MX_GPIO_Init+0x2c0>)
 8006a32:	0019      	movs	r1, r3
 8006a34:	0010      	movs	r0, r2
 8006a36:	f7fb f90d 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGITAL0_Pin DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL0_Pin|DIGITAL1_Pin;
 8006a3a:	231c      	movs	r3, #28
 8006a3c:	18fb      	adds	r3, r7, r3
 8006a3e:	22c0      	movs	r2, #192	; 0xc0
 8006a40:	0212      	lsls	r2, r2, #8
 8006a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a44:	231c      	movs	r3, #28
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	2200      	movs	r2, #0
 8006a4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a4c:	231c      	movs	r3, #28
 8006a4e:	18fb      	adds	r3, r7, r3
 8006a50:	2201      	movs	r2, #1
 8006a52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a54:	231c      	movs	r3, #28
 8006a56:	18fb      	adds	r3, r7, r3
 8006a58:	4a34      	ldr	r2, [pc, #208]	; (8006b2c <MX_GPIO_Init+0x2c0>)
 8006a5a:	0019      	movs	r1, r3
 8006a5c:	0010      	movs	r0, r2
 8006a5e:	f7fb f8f9 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL4_Pin */
  GPIO_InitStruct.Pin = DIGITAL4_Pin;
 8006a62:	231c      	movs	r3, #28
 8006a64:	18fb      	adds	r3, r7, r3
 8006a66:	2280      	movs	r2, #128	; 0x80
 8006a68:	0052      	lsls	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a6c:	231c      	movs	r3, #28
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	2200      	movs	r2, #0
 8006a72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a74:	231c      	movs	r3, #28
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	2201      	movs	r2, #1
 8006a7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIGITAL4_GPIO_Port, &GPIO_InitStruct);
 8006a7c:	231c      	movs	r3, #28
 8006a7e:	18fa      	adds	r2, r7, r3
 8006a80:	2390      	movs	r3, #144	; 0x90
 8006a82:	05db      	lsls	r3, r3, #23
 8006a84:	0011      	movs	r1, r2
 8006a86:	0018      	movs	r0, r3
 8006a88:	f7fb f8e4 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : M0A2_Pin */
  GPIO_InitStruct.Pin = M0A2_Pin;
 8006a8c:	231c      	movs	r3, #28
 8006a8e:	18fb      	adds	r3, r7, r3
 8006a90:	2240      	movs	r2, #64	; 0x40
 8006a92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a94:	231c      	movs	r3, #28
 8006a96:	18fb      	adds	r3, r7, r3
 8006a98:	2201      	movs	r2, #1
 8006a9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a9c:	231c      	movs	r3, #28
 8006a9e:	18fb      	adds	r3, r7, r3
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aa4:	231c      	movs	r3, #28
 8006aa6:	18fb      	adds	r3, r7, r3
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(M0A2_GPIO_Port, &GPIO_InitStruct);
 8006aac:	231c      	movs	r3, #28
 8006aae:	18fb      	adds	r3, r7, r3
 8006ab0:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <MX_GPIO_Init+0x2c4>)
 8006ab2:	0019      	movs	r1, r3
 8006ab4:	0010      	movs	r0, r2
 8006ab6:	f7fb f8cd 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP4_Pin */
  GPIO_InitStruct.Pin = DIP4_Pin;
 8006aba:	231c      	movs	r3, #28
 8006abc:	18fb      	adds	r3, r7, r3
 8006abe:	2280      	movs	r2, #128	; 0x80
 8006ac0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ac2:	231c      	movs	r3, #28
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006aca:	231c      	movs	r3, #28
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	2202      	movs	r2, #2
 8006ad0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIP4_GPIO_Port, &GPIO_InitStruct);
 8006ad2:	231c      	movs	r3, #28
 8006ad4:	18fb      	adds	r3, r7, r3
 8006ad6:	4a15      	ldr	r2, [pc, #84]	; (8006b2c <MX_GPIO_Init+0x2c0>)
 8006ad8:	0019      	movs	r1, r3
 8006ada:	0010      	movs	r0, r2
 8006adc:	f7fb f8ba 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP3_Pin DIP2_Pin DIP1_Pin */
  GPIO_InitStruct.Pin = DIP3_Pin|DIP2_Pin|DIP1_Pin;
 8006ae0:	231c      	movs	r3, #28
 8006ae2:	18fb      	adds	r3, r7, r3
 8006ae4:	22e0      	movs	r2, #224	; 0xe0
 8006ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ae8:	231c      	movs	r3, #28
 8006aea:	18fb      	adds	r3, r7, r3
 8006aec:	2200      	movs	r2, #0
 8006aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006af0:	231c      	movs	r3, #28
 8006af2:	18fb      	adds	r3, r7, r3
 8006af4:	2202      	movs	r2, #2
 8006af6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006af8:	231c      	movs	r3, #28
 8006afa:	18fb      	adds	r3, r7, r3
 8006afc:	4a0a      	ldr	r2, [pc, #40]	; (8006b28 <MX_GPIO_Init+0x2bc>)
 8006afe:	0019      	movs	r1, r3
 8006b00:	0010      	movs	r0, r2
 8006b02:	f7fb f8a7 	bl	8001c54 <HAL_GPIO_Init>

}
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b00c      	add	sp, #48	; 0x30
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	46c0      	nop			; (mov r8, r8)
 8006b10:	40021000 	.word	0x40021000
 8006b14:	00004f84 	.word	0x00004f84
 8006b18:	48001000 	.word	0x48001000
 8006b1c:	00001006 	.word	0x00001006
 8006b20:	48000800 	.word	0x48000800
 8006b24:	00000c06 	.word	0x00000c06
 8006b28:	48000400 	.word	0x48000400
 8006b2c:	48000c00 	.word	0x48000c00
 8006b30:	48001400 	.word	0x48001400

08006b34 <main>:
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af02      	add	r7, sp, #8

    /* MCU Configuration----------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

    dorobo_init();
 8006b3a:	f7ff f98b 	bl	8005e54 <dorobo_init>
    wifi_init();
 8006b3e:	f000 fea7 	bl	8007890 <wifi_init>
    adc_init();
 8006b42:	f7fe ffb3 	bl	8005aac <adc_init>

    motor_init();
 8006b46:	f000 f975 	bl	8006e34 <motor_init>

    digital_configure_pin(DD_PIN_PD14, DD_CFG_INPUT_NOPULL);
 8006b4a:	2103      	movs	r1, #3
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	f7ff f81d 	bl	8005b8c <digital_configure_pin>
    digital_configure_pin(DD_PIN_PC8, DD_CFG_INPUT_NOPULL);
 8006b52:	2103      	movs	r1, #3
 8006b54:	2002      	movs	r0, #2
 8006b56:	f7ff f819 	bl	8005b8c <digital_configure_pin>
    digital_configure_pin(DD_PIN_PC13, DD_CFG_OUTPUT);
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	2005      	movs	r0, #5
 8006b5e:	f7ff f815 	bl	8005b8c <digital_configure_pin>
    digital_configure_pin(DD_PIN_PD15, DD_CFG_INPUT_PULLUP);
 8006b62:	2101      	movs	r1, #1
 8006b64:	2001      	movs	r0, #1
 8006b66:	f7ff f811 	bl	8005b8c <digital_configure_pin>

    digital_set_pin(DD_PIN_PC13, DD_LEVEL_HIGH);
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	2005      	movs	r0, #5
 8006b6e:	f7ff f87e 	bl	8005c6e <digital_set_pin>

    ft_start_sampling(DD_PIN_PD14);
 8006b72:	2000      	movs	r0, #0
 8006b74:	f7ff f9de 	bl	8005f34 <ft_start_sampling>

    //Here HIGH actually means low...
    led_red(DD_LEVEL_HIGH);
 8006b78:	2001      	movs	r0, #1
 8006b7a:	f7ff f989 	bl	8005e90 <led_red>
    led_green(DD_LEVEL_HIGH);
 8006b7e:	2001      	movs	r0, #1
 8006b80:	f7ff f972 	bl	8005e68 <led_green>

    /* Create the thread(s) */
    /* definition and creation of defaultTask */

    //xTaskCreate((TaskFunction_t) Behaviour, "Behaviour", 128, NULL, 1, NULL);
    xTaskCreate((TaskFunction_t) DistanceSensorReading, "SensorReading", 128,
 8006b84:	4916      	ldr	r1, [pc, #88]	; (8006be0 <main+0xac>)
 8006b86:	4817      	ldr	r0, [pc, #92]	; (8006be4 <main+0xb0>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	2304      	movs	r3, #4
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	2280      	movs	r2, #128	; 0x80
 8006b94:	f7fe fac8 	bl	8005128 <xTaskCreate>
    NULL, 4, NULL);
    xTaskCreate((TaskFunction_t) IRSensorTest, "IRSensorReadings", 128, NULL, 3,
 8006b98:	4913      	ldr	r1, [pc, #76]	; (8006be8 <main+0xb4>)
 8006b9a:	4814      	ldr	r0, [pc, #80]	; (8006bec <main+0xb8>)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	2280      	movs	r2, #128	; 0x80
 8006ba8:	f7fe fabe 	bl	8005128 <xTaskCreate>
    NULL);
    xTaskCreate((TaskFunction_t) MotorControl, "MotorControl", 128, NULL, 4,
 8006bac:	4910      	ldr	r1, [pc, #64]	; (8006bf0 <main+0xbc>)
 8006bae:	4811      	ldr	r0, [pc, #68]	; (8006bf4 <main+0xc0>)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2280      	movs	r2, #128	; 0x80
 8006bbc:	f7fe fab4 	bl	8005128 <xTaskCreate>
            NULL);
    xTaskCreate((TaskFunction_t) DefaultIdle, "Idle", 64, NULL, 0, NULL);
 8006bc0:	490d      	ldr	r1, [pc, #52]	; (8006bf8 <main+0xc4>)
 8006bc2:	480e      	ldr	r0, [pc, #56]	; (8006bfc <main+0xc8>)
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	2240      	movs	r2, #64	; 0x40
 8006bd0:	f7fe faaa 	bl	8005128 <xTaskCreate>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Start scheduler */
    //osKernelStart();
    vTaskStartScheduler();
 8006bd4:	f7fe fbfa 	bl	80053cc <vTaskStartScheduler>
 8006bd8:	2300      	movs	r3, #0
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    /* USER CODE END 3 */

}
 8006bda:	0018      	movs	r0, r3
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	08008250 	.word	0x08008250
 8006be4:	08006d35 	.word	0x08006d35
 8006be8:	08008260 	.word	0x08008260
 8006bec:	08006c61 	.word	0x08006c61
 8006bf0:	08008274 	.word	0x08008274
 8006bf4:	08006c01 	.word	0x08006c01
 8006bf8:	08008284 	.word	0x08008284
 8006bfc:	08006df5 	.word	0x08006df5

08006c00 <MotorControl>:
/// -30,30,0 goes in straight line but third wheel lags. When third wheel is
/// not zero it'll just take a turn.
///
/// @param argument
static void MotorControl(void const * argument)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
    while (1)
    {
        if (digital_get_pin(DD_PIN_PD15))
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f7ff f850 	bl	8005cae <digital_get_pin>
 8006c0e:	1e03      	subs	r3, r0, #0
 8006c10:	d00c      	beq.n	8006c2c <MotorControl+0x2c>
        {
            motor_set(DM_MOTOR0, 0);
 8006c12:	2100      	movs	r1, #0
 8006c14:	2000      	movs	r0, #0
 8006c16:	f000 f912 	bl	8006e3e <motor_set>
            motor_set(DM_MOTOR1, 0);
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	f000 f90e 	bl	8006e3e <motor_set>
            motor_set(DM_MOTOR2, 0);
 8006c22:	2100      	movs	r1, #0
 8006c24:	2002      	movs	r0, #2
 8006c26:	f000 f90a 	bl	8006e3e <motor_set>
 8006c2a:	e00f      	b.n	8006c4c <MotorControl+0x4c>
        }
        else
        {
            motor_set(DM_MOTOR0, -30);
 8006c2c:	231e      	movs	r3, #30
 8006c2e:	425b      	negs	r3, r3
 8006c30:	0019      	movs	r1, r3
 8006c32:	2000      	movs	r0, #0
 8006c34:	f000 f903 	bl	8006e3e <motor_set>
            motor_set(DM_MOTOR1, 30);
 8006c38:	211e      	movs	r1, #30
 8006c3a:	2001      	movs	r0, #1
 8006c3c:	f000 f8ff 	bl	8006e3e <motor_set>
            motor_set(DM_MOTOR2, -20);
 8006c40:	2314      	movs	r3, #20
 8006c42:	425b      	negs	r3, r3
 8006c44:	0019      	movs	r1, r3
 8006c46:	2002      	movs	r0, #2
 8006c48:	f000 f8f9 	bl	8006e3e <motor_set>
        /*motor_set(DM_MOTOR0, 20);
         motor_set(DM_MOTOR1, 20);
         motor_set(DM_MOTOR2, 20);*/
        //uint8_t motorSpeed = motor_get_speed(DM_MOTOR0);
        //tracef("Motor Speed :  %d\r\n", motorSpeed);
        tracef("MotorControl \r\n");
 8006c4c:	4b03      	ldr	r3, [pc, #12]	; (8006c5c <MotorControl+0x5c>)
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f000 fd04 	bl	800765c <tracef>
        vTaskDelay(100);
 8006c54:	2064      	movs	r0, #100	; 0x64
 8006c56:	f7fe fb93 	bl	8005380 <vTaskDelay>
        if (digital_get_pin(DD_PIN_PD15))
 8006c5a:	e7d5      	b.n	8006c08 <MotorControl+0x8>
 8006c5c:	0800829c 	.word	0x0800829c

08006c60 <IRSensorTest>:
    }
}

static void IRSensorTest(void const * argument)
{
 8006c60:	b590      	push	{r4, r7, lr}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
    uint32_t sensorValue = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]
    float voltageRead = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	613b      	str	r3, [r7, #16]

    while (1)
    {
        uint8_t levelPin = digital_get_pin(DD_PIN_PD14);
 8006c70:	230f      	movs	r3, #15
 8006c72:	18fc      	adds	r4, r7, r3
 8006c74:	2000      	movs	r0, #0
 8006c76:	f7ff f81a 	bl	8005cae <digital_get_pin>
 8006c7a:	0003      	movs	r3, r0
 8006c7c:	7023      	strb	r3, [r4, #0]
        uint8_t levelPin2 = digital_get_pin(DD_PIN_PC8);
 8006c7e:	230e      	movs	r3, #14
 8006c80:	18fc      	adds	r4, r7, r3
 8006c82:	2002      	movs	r0, #2
 8006c84:	f7ff f813 	bl	8005cae <digital_get_pin>
 8006c88:	0003      	movs	r3, r0
 8006c8a:	7023      	strb	r3, [r4, #0]

       /* tracef(" [Target Sensor] Pin Level : %d,  PIN 2   %d\r\n", levelPin,
                levelPin2);*/

        if (ft_is_sampling_finished())
 8006c8c:	f7ff f96e 	bl	8005f6c <ft_is_sampling_finished>
 8006c90:	1e03      	subs	r3, r0, #0
 8006c92:	d030      	beq.n	8006cf6 <IRSensorTest+0x96>
        {
            uint16_t freq = ft_get_transform(DFT_FREQ100);
 8006c94:	230c      	movs	r3, #12
 8006c96:	18fc      	adds	r4, r7, r3
 8006c98:	2000      	movs	r0, #0
 8006c9a:	f7ff f971 	bl	8005f80 <ft_get_transform>
 8006c9e:	0003      	movs	r3, r0
 8006ca0:	8023      	strh	r3, [r4, #0]
            uint8_t levelPin = digital_get_pin(DD_PIN_PD14);
 8006ca2:	230b      	movs	r3, #11
 8006ca4:	18fc      	adds	r4, r7, r3
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	f7ff f801 	bl	8005cae <digital_get_pin>
 8006cac:	0003      	movs	r3, r0
 8006cae:	7023      	strb	r3, [r4, #0]
            uint8_t levelPin2 = digital_get_pin(DD_PIN_PC8);
 8006cb0:	230a      	movs	r3, #10
 8006cb2:	18fc      	adds	r4, r7, r3
 8006cb4:	2002      	movs	r0, #2
 8006cb6:	f7fe fffa 	bl	8005cae <digital_get_pin>
 8006cba:	0003      	movs	r3, r0
 8006cbc:	7023      	strb	r3, [r4, #0]
            tracef( " [Target Sensor] Pin Level : %d,  Freq Read: %d PIN 2   %d\r\n",
 8006cbe:	230b      	movs	r3, #11
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	7819      	ldrb	r1, [r3, #0]
 8006cc4:	230c      	movs	r3, #12
 8006cc6:	18fb      	adds	r3, r7, r3
 8006cc8:	881a      	ldrh	r2, [r3, #0]
 8006cca:	230a      	movs	r3, #10
 8006ccc:	18fb      	adds	r3, r7, r3
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	4814      	ldr	r0, [pc, #80]	; (8006d24 <IRSensorTest+0xc4>)
 8006cd2:	f000 fcc3 	bl	800765c <tracef>
                   levelPin, freq, levelPin2);

            //TODO Filter maybe?
            freq > 1500 ? led_red(DD_LEVEL_LOW) : led_red(DD_LEVEL_HIGH);
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	18fb      	adds	r3, r7, r3
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	4a12      	ldr	r2, [pc, #72]	; (8006d28 <IRSensorTest+0xc8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d903      	bls.n	8006cea <IRSensorTest+0x8a>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	f7ff f8d4 	bl	8005e90 <led_red>
 8006ce8:	e002      	b.n	8006cf0 <IRSensorTest+0x90>
 8006cea:	2001      	movs	r0, #1
 8006cec:	f7ff f8d0 	bl	8005e90 <led_red>

            //led_red_toggle();
            ft_start_sampling(DD_PIN_PD14);
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	f7ff f91f 	bl	8005f34 <ft_start_sampling>

        }
        uint8_t switchLevel = digital_get_pin(DD_PIN_PD15);
 8006cf6:	2309      	movs	r3, #9
 8006cf8:	18fc      	adds	r4, r7, r3
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	f7fe ffd7 	bl	8005cae <digital_get_pin>
 8006d00:	0003      	movs	r3, r0
 8006d02:	7023      	strb	r3, [r4, #0]

        tracef(" [Switch] Switch Level : %d \r\n", switchLevel);
 8006d04:	2309      	movs	r3, #9
 8006d06:	18fb      	adds	r3, r7, r3
 8006d08:	781a      	ldrb	r2, [r3, #0]
 8006d0a:	4b08      	ldr	r3, [pc, #32]	; (8006d2c <IRSensorTest+0xcc>)
 8006d0c:	0011      	movs	r1, r2
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f000 fca4 	bl	800765c <tracef>
        tracef("IRSensorTest \r\n");
 8006d14:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <IRSensorTest+0xd0>)
 8006d16:	0018      	movs	r0, r3
 8006d18:	f000 fca0 	bl	800765c <tracef>

        vTaskDelay(50);
 8006d1c:	2032      	movs	r0, #50	; 0x32
 8006d1e:	f7fe fb2f 	bl	8005380 <vTaskDelay>
    {
 8006d22:	e7a5      	b.n	8006c70 <IRSensorTest+0x10>
 8006d24:	080082ac 	.word	0x080082ac
 8006d28:	000005dc 	.word	0x000005dc
 8006d2c:	080082ec 	.word	0x080082ec
 8006d30:	0800830c 	.word	0x0800830c

08006d34 <DistanceSensorReading>:
    }
}

static void DistanceSensorReading(void const * argument)
{
 8006d34:	b5b0      	push	{r4, r5, r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	6078      	str	r0, [r7, #4]
    uint32_t sensorValue = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]
    float voltageRead = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]

    while (1)
    {

        sensorValue = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
        for (uint8_t i = 0; i < 10; i++)
 8006d48:	2313      	movs	r3, #19
 8006d4a:	18fb      	adds	r3, r7, r3
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	e00d      	b.n	8006d6e <DistanceSensorReading+0x3a>
        {
            sensorValue += adc_get_value(DA_ADC_CHANNEL0);
 8006d52:	2000      	movs	r0, #0
 8006d54:	f7fe feb0 	bl	8005ab8 <adc_get_value>
 8006d58:	0002      	movs	r2, r0
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	189b      	adds	r3, r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
        for (uint8_t i = 0; i < 10; i++)
 8006d60:	2313      	movs	r3, #19
 8006d62:	18fb      	adds	r3, r7, r3
 8006d64:	781a      	ldrb	r2, [r3, #0]
 8006d66:	2313      	movs	r3, #19
 8006d68:	18fb      	adds	r3, r7, r3
 8006d6a:	3201      	adds	r2, #1
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	2313      	movs	r3, #19
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b09      	cmp	r3, #9
 8006d76:	d9ec      	bls.n	8006d52 <DistanceSensorReading+0x1e>
        }

        sensorValue /= 10;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	210a      	movs	r1, #10
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f7f9 f9cb 	bl	8000118 <__udivsi3>
 8006d82:	0003      	movs	r3, r0
 8006d84:	617b      	str	r3, [r7, #20]

        voltageRead = (sensorValue * 3.6) / 4095;
 8006d86:	6978      	ldr	r0, [r7, #20]
 8006d88:	f7fa f806 	bl	8000d98 <__aeabi_ui2d>
 8006d8c:	4a14      	ldr	r2, [pc, #80]	; (8006de0 <DistanceSensorReading+0xac>)
 8006d8e:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <DistanceSensorReading+0xb0>)
 8006d90:	f7f9 fd82 	bl	8000898 <__aeabi_dmul>
 8006d94:	0003      	movs	r3, r0
 8006d96:	000c      	movs	r4, r1
 8006d98:	0018      	movs	r0, r3
 8006d9a:	0021      	movs	r1, r4
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	4b12      	ldr	r3, [pc, #72]	; (8006de8 <DistanceSensorReading+0xb4>)
 8006da0:	f7f9 fa46 	bl	8000230 <__aeabi_ddiv>
 8006da4:	0003      	movs	r3, r0
 8006da6:	000c      	movs	r4, r1
 8006da8:	0018      	movs	r0, r3
 8006daa:	0021      	movs	r1, r4
 8006dac:	f7fa f87e 	bl	8000eac <__aeabi_d2f>
 8006db0:	1c03      	adds	r3, r0, #0
 8006db2:	60fb      	str	r3, [r7, #12]
        tracef("Voltage: %g, Sensor : %d\r\n", voltageRead, sensorValue);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7fa f827 	bl	8000e08 <__aeabi_f2d>
 8006dba:	0004      	movs	r4, r0
 8006dbc:	000d      	movs	r5, r1
 8006dbe:	490b      	ldr	r1, [pc, #44]	; (8006dec <DistanceSensorReading+0xb8>)
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	0022      	movs	r2, r4
 8006dc6:	002b      	movs	r3, r5
 8006dc8:	0008      	movs	r0, r1
 8006dca:	f000 fc47 	bl	800765c <tracef>
        tracef("DistanceSensorReading \r\n");
 8006dce:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <DistanceSensorReading+0xbc>)
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f000 fc43 	bl	800765c <tracef>
        vTaskDelay(100);       //delay the task for 20 ticks (1 ticks = 50 ms)
 8006dd6:	2064      	movs	r0, #100	; 0x64
 8006dd8:	f7fe fad2 	bl	8005380 <vTaskDelay>
        sensorValue = 0;
 8006ddc:	e7b2      	b.n	8006d44 <DistanceSensorReading+0x10>
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	cccccccd 	.word	0xcccccccd
 8006de4:	400ccccc 	.word	0x400ccccc
 8006de8:	40affe00 	.word	0x40affe00
 8006dec:	0800831c 	.word	0x0800831c
 8006df0:	08008338 	.word	0x08008338

08006df4 <DefaultIdle>:
    }
}

static void DefaultIdle(void const * argument)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
    while (1)
    {
        tracef("DefaultIdle \r\n");
 8006dfc:	4b03      	ldr	r3, [pc, #12]	; (8006e0c <DefaultIdle+0x18>)
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f000 fc2c 	bl	800765c <tracef>
        vTaskDelay(100);
 8006e04:	2064      	movs	r0, #100	; 0x64
 8006e06:	f7fe fabb 	bl	8005380 <vTaskDelay>
        tracef("DefaultIdle \r\n");
 8006e0a:	e7f7      	b.n	8006dfc <DefaultIdle+0x8>
 8006e0c:	08008354 	.word	0x08008354

08006e10 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM14)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d101      	bne.n	8006e26 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8006e22:	f7fa f8ff 	bl	8001024 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	b002      	add	sp, #8
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	40002000 	.word	0x40002000

08006e34 <motor_init>:

static void set_speed(motor_t *, int8_t);
static motor_t* select_motor(enum DM_MOTORS_E);

void motor_init(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
	// nothing to initialize
}
 8006e38:	46c0      	nop			; (mov r8, r8)
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <motor_set>:

void motor_set(enum DM_MOTORS_E motoren, int8_t speed)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	0002      	movs	r2, r0
 8006e46:	1dfb      	adds	r3, r7, #7
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	1dbb      	adds	r3, r7, #6
 8006e4c:	1c0a      	adds	r2, r1, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
    motor_t *motorptr = select_motor(motoren);
 8006e50:	1dfb      	adds	r3, r7, #7
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	0018      	movs	r0, r3
 8006e56:	f000 f86d 	bl	8006f34 <select_motor>
 8006e5a:	0003      	movs	r3, r0
 8006e5c:	60fb      	str	r3, [r7, #12]
    set_speed(motorptr, speed);
 8006e5e:	1dbb      	adds	r3, r7, #6
 8006e60:	2200      	movs	r2, #0
 8006e62:	569a      	ldrsb	r2, [r3, r2]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	0011      	movs	r1, r2
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f000 f805 	bl	8006e78 <set_speed>
}
 8006e6e:	46c0      	nop			; (mov r8, r8)
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b004      	add	sp, #16
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <set_speed>:
   return motorptr->speed;
}


static void set_speed(motor_t *motorptr, int8_t new_speed)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	000a      	movs	r2, r1
 8006e82:	1cfb      	adds	r3, r7, #3
 8006e84:	701a      	strb	r2, [r3, #0]
    if (new_speed < -100)
 8006e86:	1cfb      	adds	r3, r7, #3
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	b25b      	sxtb	r3, r3
 8006e8c:	3364      	adds	r3, #100	; 0x64
 8006e8e:	da03      	bge.n	8006e98 <set_speed+0x20>
    {
        new_speed = -100;
 8006e90:	1cfb      	adds	r3, r7, #3
 8006e92:	229c      	movs	r2, #156	; 0x9c
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	e007      	b.n	8006ea8 <set_speed+0x30>
    }
    else if (new_speed > 100)
 8006e98:	1cfb      	adds	r3, r7, #3
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	b25b      	sxtb	r3, r3
 8006e9e:	2b64      	cmp	r3, #100	; 0x64
 8006ea0:	dd02      	ble.n	8006ea8 <set_speed+0x30>
    {
        new_speed = 100;
 8006ea2:	1cfb      	adds	r3, r7, #3
 8006ea4:	2264      	movs	r2, #100	; 0x64
 8006ea6:	701a      	strb	r2, [r3, #0]
    }

    if (new_speed < 0)
 8006ea8:	1cfb      	adds	r3, r7, #3
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b7f      	cmp	r3, #127	; 0x7f
 8006eae:	d90a      	bls.n	8006ec6 <set_speed+0x4e>
    {
        motorptr->controlPORT1->BRR = motorptr->controlPIN1;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	8892      	ldrh	r2, [r2, #4]
 8006eb8:	629a      	str	r2, [r3, #40]	; 0x28
        motorptr->controlPORT2->BSRR = motorptr->controlPIN2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	8992      	ldrh	r2, [r2, #12]
 8006ec2:	619a      	str	r2, [r3, #24]
 8006ec4:	e009      	b.n	8006eda <set_speed+0x62>
    }
    else
    {
        motorptr->controlPORT1->BSRR = motorptr->controlPIN1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	8892      	ldrh	r2, [r2, #4]
 8006ece:	619a      	str	r2, [r3, #24]
        motorptr->controlPORT2->BRR = motorptr->controlPIN2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	8992      	ldrh	r2, [r2, #12]
 8006ed8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006eda:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <set_speed+0xb4>)
 8006edc:	2260      	movs	r2, #96	; 0x60
 8006ede:	601a      	str	r2, [r3, #0]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ee0:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <set_speed+0xb4>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ee6:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <set_speed+0xb4>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	611a      	str	r2, [r3, #16]
    sConfigOC.Pulse = abs(new_speed);
 8006eec:	1cfb      	adds	r3, r7, #3
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	b25b      	sxtb	r3, r3
 8006ef2:	17da      	asrs	r2, r3, #31
 8006ef4:	189b      	adds	r3, r3, r2
 8006ef6:	4053      	eors	r3, r2
 8006ef8:	001a      	movs	r2, r3
 8006efa:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <set_speed+0xb4>)
 8006efc:	605a      	str	r2, [r3, #4]
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, motorptr->timerChannel);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	490a      	ldr	r1, [pc, #40]	; (8006f2c <set_speed+0xb4>)
 8006f04:	4b0a      	ldr	r3, [pc, #40]	; (8006f30 <set_speed+0xb8>)
 8006f06:	0018      	movs	r0, r3
 8006f08:	f7fc f87c 	bl	8003004 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, motorptr->timerChannel);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <set_speed+0xb8>)
 8006f12:	0011      	movs	r1, r2
 8006f14:	0018      	movs	r0, r3
 8006f16:	f7fb ff1b 	bl	8002d50 <HAL_TIM_PWM_Start>

    motorptr->speed = new_speed;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	1cfa      	adds	r2, r7, #3
 8006f1e:	7812      	ldrb	r2, [r2, #0]
 8006f20:	751a      	strb	r2, [r3, #20]
}
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	46bd      	mov	sp, r7
 8006f26:	b002      	add	sp, #8
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	20001cc8 	.word	0x20001cc8
 8006f30:	20001a9c 	.word	0x20001a9c

08006f34 <select_motor>:

static motor_t* select_motor(enum DM_MOTORS_E motoren)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	0002      	movs	r2, r0
 8006f3c:	1dfb      	adds	r3, r7, #7
 8006f3e:	701a      	strb	r2, [r3, #0]
    motor_t *motorptr = NULL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]
    switch (motoren)
 8006f44:	1dfb      	adds	r3, r7, #7
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d00b      	beq.n	8006f64 <select_motor+0x30>
 8006f4c:	dc02      	bgt.n	8006f54 <select_motor+0x20>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <select_motor+0x2a>
 8006f52:	e010      	b.n	8006f76 <select_motor+0x42>
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d008      	beq.n	8006f6a <select_motor+0x36>
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d009      	beq.n	8006f70 <select_motor+0x3c>
 8006f5c:	e00b      	b.n	8006f76 <select_motor+0x42>
    {
    case DM_MOTOR0:
        motorptr = &motors[0];
 8006f5e:	4b08      	ldr	r3, [pc, #32]	; (8006f80 <select_motor+0x4c>)
 8006f60:	60fb      	str	r3, [r7, #12]
        break;
 8006f62:	e008      	b.n	8006f76 <select_motor+0x42>
    case DM_MOTOR1:
        motorptr = &motors[1];
 8006f64:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <select_motor+0x50>)
 8006f66:	60fb      	str	r3, [r7, #12]
        break;
 8006f68:	e005      	b.n	8006f76 <select_motor+0x42>
    case DM_MOTOR2:
        motorptr = &motors[2];
 8006f6a:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <select_motor+0x54>)
 8006f6c:	60fb      	str	r3, [r7, #12]
        break;
 8006f6e:	e002      	b.n	8006f76 <select_motor+0x42>
    case DM_MOTOR3:
        motorptr = &motors[3];
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <select_motor+0x58>)
 8006f72:	60fb      	str	r3, [r7, #12]
        break;
 8006f74:	46c0      	nop			; (mov r8, r8)
    }
    return motorptr;
 8006f76:	68fb      	ldr	r3, [r7, #12]
}
 8006f78:	0018      	movs	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b004      	add	sp, #16
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20000004 	.word	0x20000004
 8006f84:	2000001c 	.word	0x2000001c
 8006f88:	20000034 	.word	0x20000034
 8006f8c:	2000004c 	.word	0x2000004c

08006f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f96:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <HAL_MspInit+0x6c>)
 8006f98:	4a18      	ldr	r2, [pc, #96]	; (8006ffc <HAL_MspInit+0x6c>)
 8006f9a:	6992      	ldr	r2, [r2, #24]
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	619a      	str	r2, [r3, #24]
 8006fa2:	4b16      	ldr	r3, [pc, #88]	; (8006ffc <HAL_MspInit+0x6c>)
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	4013      	ands	r3, r2
 8006faa:	607b      	str	r3, [r7, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <HAL_MspInit+0x6c>)
 8006fb0:	4a12      	ldr	r2, [pc, #72]	; (8006ffc <HAL_MspInit+0x6c>)
 8006fb2:	69d2      	ldr	r2, [r2, #28]
 8006fb4:	2180      	movs	r1, #128	; 0x80
 8006fb6:	0549      	lsls	r1, r1, #21
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	61da      	str	r2, [r3, #28]
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <HAL_MspInit+0x6c>)
 8006fbe:	69da      	ldr	r2, [r3, #28]
 8006fc0:	2380      	movs	r3, #128	; 0x80
 8006fc2:	055b      	lsls	r3, r3, #21
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8006fca:	2305      	movs	r3, #5
 8006fcc:	425b      	negs	r3, r3
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f7fa fdaa 	bl	8001b2c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8006fd8:	2302      	movs	r3, #2
 8006fda:	425b      	negs	r3, r3
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2103      	movs	r1, #3
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f7fa fda3 	bl	8001b2c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	425b      	negs	r3, r3
 8006fea:	2200      	movs	r2, #0
 8006fec:	2103      	movs	r1, #3
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f7fa fd9c 	bl	8001b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ff4:	46c0      	nop			; (mov r8, r8)
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b002      	add	sp, #8
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40021000 	.word	0x40021000

08007000 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a1d      	ldr	r2, [pc, #116]	; (8007084 <HAL_ADC_MspInit+0x84>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d134      	bne.n	800707c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007012:	4b1d      	ldr	r3, [pc, #116]	; (8007088 <HAL_ADC_MspInit+0x88>)
 8007014:	4a1c      	ldr	r2, [pc, #112]	; (8007088 <HAL_ADC_MspInit+0x88>)
 8007016:	6992      	ldr	r2, [r2, #24]
 8007018:	2180      	movs	r1, #128	; 0x80
 800701a:	0089      	lsls	r1, r1, #2
 800701c:	430a      	orrs	r2, r1
 800701e:	619a      	str	r2, [r3, #24]
 8007020:	4b19      	ldr	r3, [pc, #100]	; (8007088 <HAL_ADC_MspInit+0x88>)
 8007022:	699a      	ldr	r2, [r3, #24]
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4013      	ands	r3, r2
 800702a:	60bb      	str	r3, [r7, #8]
 800702c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15 
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin 
 800702e:	230c      	movs	r3, #12
 8007030:	18fb      	adds	r3, r7, r3
 8007032:	22ff      	movs	r2, #255	; 0xff
 8007034:	601a      	str	r2, [r3, #0]
                          |ADC4_Pin|ADC5_Pin|ADC6_Pin|ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007036:	230c      	movs	r3, #12
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	2203      	movs	r2, #3
 800703c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800703e:	230c      	movs	r3, #12
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	2200      	movs	r2, #0
 8007044:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007046:	230c      	movs	r3, #12
 8007048:	18fa      	adds	r2, r7, r3
 800704a:	2390      	movs	r3, #144	; 0x90
 800704c:	05db      	lsls	r3, r3, #23
 800704e:	0011      	movs	r1, r2
 8007050:	0018      	movs	r0, r3
 8007052:	f7fa fdff 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC8_Pin|ADC9_Pin;
 8007056:	230c      	movs	r3, #12
 8007058:	18fb      	adds	r3, r7, r3
 800705a:	2230      	movs	r2, #48	; 0x30
 800705c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800705e:	230c      	movs	r3, #12
 8007060:	18fb      	adds	r3, r7, r3
 8007062:	2203      	movs	r2, #3
 8007064:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007066:	230c      	movs	r3, #12
 8007068:	18fb      	adds	r3, r7, r3
 800706a:	2200      	movs	r2, #0
 800706c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800706e:	230c      	movs	r3, #12
 8007070:	18fb      	adds	r3, r7, r3
 8007072:	4a06      	ldr	r2, [pc, #24]	; (800708c <HAL_ADC_MspInit+0x8c>)
 8007074:	0019      	movs	r1, r3
 8007076:	0010      	movs	r0, r2
 8007078:	f7fa fdec 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800707c:	46c0      	nop			; (mov r8, r8)
 800707e:	46bd      	mov	sp, r7
 8007080:	b008      	add	sp, #32
 8007082:	bd80      	pop	{r7, pc}
 8007084:	40012400 	.word	0x40012400
 8007088:	40021000 	.word	0x40021000
 800708c:	48000800 	.word	0x48000800

08007090 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	2380      	movs	r3, #128	; 0x80
 800709e:	05db      	lsls	r3, r3, #23
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d10c      	bne.n	80070be <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80070a4:	4b11      	ldr	r3, [pc, #68]	; (80070ec <HAL_TIM_PWM_MspInit+0x5c>)
 80070a6:	4a11      	ldr	r2, [pc, #68]	; (80070ec <HAL_TIM_PWM_MspInit+0x5c>)
 80070a8:	69d2      	ldr	r2, [r2, #28]
 80070aa:	2101      	movs	r1, #1
 80070ac:	430a      	orrs	r2, r1
 80070ae:	61da      	str	r2, [r3, #28]
 80070b0:	4b0e      	ldr	r3, [pc, #56]	; (80070ec <HAL_TIM_PWM_MspInit+0x5c>)
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	2201      	movs	r2, #1
 80070b6:	4013      	ands	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80070bc:	e012      	b.n	80070e4 <HAL_TIM_PWM_MspInit+0x54>
  else if(htim_pwm->Instance==TIM15)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a0b      	ldr	r2, [pc, #44]	; (80070f0 <HAL_TIM_PWM_MspInit+0x60>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d10d      	bne.n	80070e4 <HAL_TIM_PWM_MspInit+0x54>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80070c8:	4b08      	ldr	r3, [pc, #32]	; (80070ec <HAL_TIM_PWM_MspInit+0x5c>)
 80070ca:	4a08      	ldr	r2, [pc, #32]	; (80070ec <HAL_TIM_PWM_MspInit+0x5c>)
 80070cc:	6992      	ldr	r2, [r2, #24]
 80070ce:	2180      	movs	r1, #128	; 0x80
 80070d0:	0249      	lsls	r1, r1, #9
 80070d2:	430a      	orrs	r2, r1
 80070d4:	619a      	str	r2, [r3, #24]
 80070d6:	4b05      	ldr	r3, [pc, #20]	; (80070ec <HAL_TIM_PWM_MspInit+0x5c>)
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	025b      	lsls	r3, r3, #9
 80070de:	4013      	ands	r3, r2
 80070e0:	60bb      	str	r3, [r7, #8]
 80070e2:	68bb      	ldr	r3, [r7, #8]
}
 80070e4:	46c0      	nop			; (mov r8, r8)
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b004      	add	sp, #16
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	40021000 	.word	0x40021000
 80070f0:	40014000 	.word	0x40014000

080070f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM3)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a2a      	ldr	r2, [pc, #168]	; (80071ac <HAL_TIM_Base_MspInit+0xb8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d114      	bne.n	8007130 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007106:	4b2a      	ldr	r3, [pc, #168]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 8007108:	4a29      	ldr	r2, [pc, #164]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 800710a:	69d2      	ldr	r2, [r2, #28]
 800710c:	2102      	movs	r1, #2
 800710e:	430a      	orrs	r2, r1
 8007110:	61da      	str	r2, [r3, #28]
 8007112:	4b27      	ldr	r3, [pc, #156]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	2202      	movs	r2, #2
 8007118:	4013      	ands	r3, r2
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800711e:	2200      	movs	r2, #0
 8007120:	2103      	movs	r1, #3
 8007122:	2010      	movs	r0, #16
 8007124:	f7fa fd02 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007128:	2010      	movs	r0, #16
 800712a:	f7fa fd15 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800712e:	e038      	b.n	80071a2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a1f      	ldr	r2, [pc, #124]	; (80071b4 <HAL_TIM_Base_MspInit+0xc0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d10c      	bne.n	8007154 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800713a:	4b1d      	ldr	r3, [pc, #116]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 800713c:	4a1c      	ldr	r2, [pc, #112]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 800713e:	69d2      	ldr	r2, [r2, #28]
 8007140:	2110      	movs	r1, #16
 8007142:	430a      	orrs	r2, r1
 8007144:	61da      	str	r2, [r3, #28]
 8007146:	4b1a      	ldr	r3, [pc, #104]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	2210      	movs	r2, #16
 800714c:	4013      	ands	r3, r2
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	693b      	ldr	r3, [r7, #16]
}
 8007152:	e026      	b.n	80071a2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM16)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a17      	ldr	r2, [pc, #92]	; (80071b8 <HAL_TIM_Base_MspInit+0xc4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d10e      	bne.n	800717c <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800715e:	4b14      	ldr	r3, [pc, #80]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 8007160:	4a13      	ldr	r2, [pc, #76]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 8007162:	6992      	ldr	r2, [r2, #24]
 8007164:	2180      	movs	r1, #128	; 0x80
 8007166:	0289      	lsls	r1, r1, #10
 8007168:	430a      	orrs	r2, r1
 800716a:	619a      	str	r2, [r3, #24]
 800716c:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 800716e:	699a      	ldr	r2, [r3, #24]
 8007170:	2380      	movs	r3, #128	; 0x80
 8007172:	029b      	lsls	r3, r3, #10
 8007174:	4013      	ands	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
}
 800717a:	e012      	b.n	80071a2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM17)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a0e      	ldr	r2, [pc, #56]	; (80071bc <HAL_TIM_Base_MspInit+0xc8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d10d      	bne.n	80071a2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007186:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 8007188:	4a09      	ldr	r2, [pc, #36]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 800718a:	6992      	ldr	r2, [r2, #24]
 800718c:	2180      	movs	r1, #128	; 0x80
 800718e:	02c9      	lsls	r1, r1, #11
 8007190:	430a      	orrs	r2, r1
 8007192:	619a      	str	r2, [r3, #24]
 8007194:	4b06      	ldr	r3, [pc, #24]	; (80071b0 <HAL_TIM_Base_MspInit+0xbc>)
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	02db      	lsls	r3, r3, #11
 800719c:	4013      	ands	r3, r2
 800719e:	60bb      	str	r3, [r7, #8]
 80071a0:	68bb      	ldr	r3, [r7, #8]
}
 80071a2:	46c0      	nop			; (mov r8, r8)
 80071a4:	46bd      	mov	sp, r7
 80071a6:	b006      	add	sp, #24
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40021000 	.word	0x40021000
 80071b4:	40001000 	.word	0x40001000
 80071b8:	40014400 	.word	0x40014400
 80071bc:	40014800 	.word	0x40014800

080071c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	2380      	movs	r3, #128	; 0x80
 80071ce:	05db      	lsls	r3, r3, #23
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d138      	bne.n	8007246 <HAL_TIM_MspPostInit+0x86>
  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = PWM0_Pin;
 80071d4:	230c      	movs	r3, #12
 80071d6:	18fb      	adds	r3, r7, r3
 80071d8:	2280      	movs	r2, #128	; 0x80
 80071da:	0212      	lsls	r2, r2, #8
 80071dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071de:	230c      	movs	r3, #12
 80071e0:	18fb      	adds	r3, r7, r3
 80071e2:	2202      	movs	r2, #2
 80071e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e6:	230c      	movs	r3, #12
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	2200      	movs	r2, #0
 80071ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80071ee:	230c      	movs	r3, #12
 80071f0:	18fb      	adds	r3, r7, r3
 80071f2:	2203      	movs	r2, #3
 80071f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80071f6:	230c      	movs	r3, #12
 80071f8:	18fb      	adds	r3, r7, r3
 80071fa:	2202      	movs	r2, #2
 80071fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM0_GPIO_Port, &GPIO_InitStruct);
 80071fe:	230c      	movs	r3, #12
 8007200:	18fa      	adds	r2, r7, r3
 8007202:	2390      	movs	r3, #144	; 0x90
 8007204:	05db      	lsls	r3, r3, #23
 8007206:	0011      	movs	r1, r2
 8007208:	0018      	movs	r0, r3
 800720a:	f7fa fd23 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM1_Pin;
 800720e:	230c      	movs	r3, #12
 8007210:	18fb      	adds	r3, r7, r3
 8007212:	2208      	movs	r2, #8
 8007214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007216:	230c      	movs	r3, #12
 8007218:	18fb      	adds	r3, r7, r3
 800721a:	2202      	movs	r2, #2
 800721c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721e:	230c      	movs	r3, #12
 8007220:	18fb      	adds	r3, r7, r3
 8007222:	2200      	movs	r2, #0
 8007224:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007226:	230c      	movs	r3, #12
 8007228:	18fb      	adds	r3, r7, r3
 800722a:	2203      	movs	r2, #3
 800722c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800722e:	230c      	movs	r3, #12
 8007230:	18fb      	adds	r3, r7, r3
 8007232:	2202      	movs	r2, #2
 8007234:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8007236:	230c      	movs	r3, #12
 8007238:	18fb      	adds	r3, r7, r3
 800723a:	4a47      	ldr	r2, [pc, #284]	; (8007358 <HAL_TIM_MspPostInit+0x198>)
 800723c:	0019      	movs	r1, r3
 800723e:	0010      	movs	r0, r2
 8007240:	f7fa fd08 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8007244:	e083      	b.n	800734e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a44      	ldr	r2, [pc, #272]	; (800735c <HAL_TIM_MspPostInit+0x19c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d11b      	bne.n	8007288 <HAL_TIM_MspPostInit+0xc8>
    GPIO_InitStruct.Pin = M0_PWM_Pin|M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin;
 8007250:	230c      	movs	r3, #12
 8007252:	18fb      	adds	r3, r7, r3
 8007254:	2278      	movs	r2, #120	; 0x78
 8007256:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007258:	230c      	movs	r3, #12
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	2202      	movs	r2, #2
 800725e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007260:	230c      	movs	r3, #12
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	2200      	movs	r2, #0
 8007266:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007268:	230c      	movs	r3, #12
 800726a:	18fb      	adds	r3, r7, r3
 800726c:	2203      	movs	r2, #3
 800726e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8007270:	230c      	movs	r3, #12
 8007272:	18fb      	adds	r3, r7, r3
 8007274:	2200      	movs	r2, #0
 8007276:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007278:	230c      	movs	r3, #12
 800727a:	18fb      	adds	r3, r7, r3
 800727c:	4a38      	ldr	r2, [pc, #224]	; (8007360 <HAL_TIM_MspPostInit+0x1a0>)
 800727e:	0019      	movs	r1, r3
 8007280:	0010      	movs	r0, r2
 8007282:	f7fa fce7 	bl	8001c54 <HAL_GPIO_Init>
}
 8007286:	e062      	b.n	800734e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a35      	ldr	r2, [pc, #212]	; (8007364 <HAL_TIM_MspPostInit+0x1a4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d11c      	bne.n	80072cc <HAL_TIM_MspPostInit+0x10c>
    GPIO_InitStruct.Pin = PWM4_Pin|PWM5_Pin;
 8007292:	230c      	movs	r3, #12
 8007294:	18fb      	adds	r3, r7, r3
 8007296:	22c0      	movs	r2, #192	; 0xc0
 8007298:	00d2      	lsls	r2, r2, #3
 800729a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800729c:	230c      	movs	r3, #12
 800729e:	18fb      	adds	r3, r7, r3
 80072a0:	2202      	movs	r2, #2
 80072a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a4:	230c      	movs	r3, #12
 80072a6:	18fb      	adds	r3, r7, r3
 80072a8:	2200      	movs	r2, #0
 80072aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072ac:	230c      	movs	r3, #12
 80072ae:	18fb      	adds	r3, r7, r3
 80072b0:	2203      	movs	r2, #3
 80072b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 80072b4:	230c      	movs	r3, #12
 80072b6:	18fb      	adds	r3, r7, r3
 80072b8:	2200      	movs	r2, #0
 80072ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80072bc:	230c      	movs	r3, #12
 80072be:	18fb      	adds	r3, r7, r3
 80072c0:	4a29      	ldr	r2, [pc, #164]	; (8007368 <HAL_TIM_MspPostInit+0x1a8>)
 80072c2:	0019      	movs	r1, r3
 80072c4:	0010      	movs	r0, r2
 80072c6:	f7fa fcc5 	bl	8001c54 <HAL_GPIO_Init>
}
 80072ca:	e040      	b.n	800734e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM16)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a26      	ldr	r2, [pc, #152]	; (800736c <HAL_TIM_MspPostInit+0x1ac>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d11b      	bne.n	800730e <HAL_TIM_MspPostInit+0x14e>
    GPIO_InitStruct.Pin = PWM2_Pin;
 80072d6:	230c      	movs	r3, #12
 80072d8:	18fb      	adds	r3, r7, r3
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072de:	230c      	movs	r3, #12
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	2202      	movs	r2, #2
 80072e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e6:	230c      	movs	r3, #12
 80072e8:	18fb      	adds	r3, r7, r3
 80072ea:	2200      	movs	r2, #0
 80072ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072ee:	230c      	movs	r3, #12
 80072f0:	18fb      	adds	r3, r7, r3
 80072f2:	2203      	movs	r2, #3
 80072f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM16;
 80072f6:	230c      	movs	r3, #12
 80072f8:	18fb      	adds	r3, r7, r3
 80072fa:	2200      	movs	r2, #0
 80072fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 80072fe:	230c      	movs	r3, #12
 8007300:	18fb      	adds	r3, r7, r3
 8007302:	4a17      	ldr	r2, [pc, #92]	; (8007360 <HAL_TIM_MspPostInit+0x1a0>)
 8007304:	0019      	movs	r1, r3
 8007306:	0010      	movs	r0, r2
 8007308:	f7fa fca4 	bl	8001c54 <HAL_GPIO_Init>
}
 800730c:	e01f      	b.n	800734e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM17)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a17      	ldr	r2, [pc, #92]	; (8007370 <HAL_TIM_MspPostInit+0x1b0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d11a      	bne.n	800734e <HAL_TIM_MspPostInit+0x18e>
    GPIO_InitStruct.Pin = PWM3_Pin;
 8007318:	230c      	movs	r3, #12
 800731a:	18fb      	adds	r3, r7, r3
 800731c:	2202      	movs	r2, #2
 800731e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007320:	230c      	movs	r3, #12
 8007322:	18fb      	adds	r3, r7, r3
 8007324:	2202      	movs	r2, #2
 8007326:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007328:	230c      	movs	r3, #12
 800732a:	18fb      	adds	r3, r7, r3
 800732c:	2200      	movs	r2, #0
 800732e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007330:	230c      	movs	r3, #12
 8007332:	18fb      	adds	r3, r7, r3
 8007334:	2203      	movs	r2, #3
 8007336:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM17;
 8007338:	230c      	movs	r3, #12
 800733a:	18fb      	adds	r3, r7, r3
 800733c:	2200      	movs	r2, #0
 800733e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM3_GPIO_Port, &GPIO_InitStruct);
 8007340:	230c      	movs	r3, #12
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	4a06      	ldr	r2, [pc, #24]	; (8007360 <HAL_TIM_MspPostInit+0x1a0>)
 8007346:	0019      	movs	r1, r3
 8007348:	0010      	movs	r0, r2
 800734a:	f7fa fc83 	bl	8001c54 <HAL_GPIO_Init>
}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	46bd      	mov	sp, r7
 8007352:	b008      	add	sp, #32
 8007354:	bd80      	pop	{r7, pc}
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	48000400 	.word	0x48000400
 800735c:	40000400 	.word	0x40000400
 8007360:	48001000 	.word	0x48001000
 8007364:	40014000 	.word	0x40014000
 8007368:	48001400 	.word	0x48001400
 800736c:	40014400 	.word	0x40014400
 8007370:	40014800 	.word	0x40014800

08007374 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08a      	sub	sp, #40	; 0x28
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a30      	ldr	r2, [pc, #192]	; (8007444 <HAL_UART_MspInit+0xd0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d12b      	bne.n	80073de <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007386:	4b30      	ldr	r3, [pc, #192]	; (8007448 <HAL_UART_MspInit+0xd4>)
 8007388:	4a2f      	ldr	r2, [pc, #188]	; (8007448 <HAL_UART_MspInit+0xd4>)
 800738a:	6992      	ldr	r2, [r2, #24]
 800738c:	2180      	movs	r1, #128	; 0x80
 800738e:	01c9      	lsls	r1, r1, #7
 8007390:	430a      	orrs	r2, r1
 8007392:	619a      	str	r2, [r3, #24]
 8007394:	4b2c      	ldr	r3, [pc, #176]	; (8007448 <HAL_UART_MspInit+0xd4>)
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	01db      	lsls	r3, r3, #7
 800739c:	4013      	ands	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	693b      	ldr	r3, [r7, #16]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = MC_TX1_Pin|MC_RX1_Pin;
 80073a2:	2314      	movs	r3, #20
 80073a4:	18fb      	adds	r3, r7, r3
 80073a6:	22c0      	movs	r2, #192	; 0xc0
 80073a8:	00d2      	lsls	r2, r2, #3
 80073aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ac:	2314      	movs	r3, #20
 80073ae:	18fb      	adds	r3, r7, r3
 80073b0:	2202      	movs	r2, #2
 80073b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b4:	2314      	movs	r3, #20
 80073b6:	18fb      	adds	r3, r7, r3
 80073b8:	2200      	movs	r2, #0
 80073ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80073bc:	2314      	movs	r3, #20
 80073be:	18fb      	adds	r3, r7, r3
 80073c0:	2203      	movs	r2, #3
 80073c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80073c4:	2314      	movs	r3, #20
 80073c6:	18fb      	adds	r3, r7, r3
 80073c8:	2201      	movs	r2, #1
 80073ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073cc:	2314      	movs	r3, #20
 80073ce:	18fa      	adds	r2, r7, r3
 80073d0:	2390      	movs	r3, #144	; 0x90
 80073d2:	05db      	lsls	r3, r3, #23
 80073d4:	0011      	movs	r1, r2
 80073d6:	0018      	movs	r0, r3
 80073d8:	f7fa fc3c 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80073dc:	e02d      	b.n	800743a <HAL_UART_MspInit+0xc6>
  else if(huart->Instance==USART2)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a1a      	ldr	r2, [pc, #104]	; (800744c <HAL_UART_MspInit+0xd8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d128      	bne.n	800743a <HAL_UART_MspInit+0xc6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80073e8:	4b17      	ldr	r3, [pc, #92]	; (8007448 <HAL_UART_MspInit+0xd4>)
 80073ea:	4a17      	ldr	r2, [pc, #92]	; (8007448 <HAL_UART_MspInit+0xd4>)
 80073ec:	69d2      	ldr	r2, [r2, #28]
 80073ee:	2180      	movs	r1, #128	; 0x80
 80073f0:	0289      	lsls	r1, r1, #10
 80073f2:	430a      	orrs	r2, r1
 80073f4:	61da      	str	r2, [r3, #28]
 80073f6:	4b14      	ldr	r3, [pc, #80]	; (8007448 <HAL_UART_MspInit+0xd4>)
 80073f8:	69da      	ldr	r2, [r3, #28]
 80073fa:	2380      	movs	r3, #128	; 0x80
 80073fc:	029b      	lsls	r3, r3, #10
 80073fe:	4013      	ands	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MC_CTS2_Pin|MC_RTS2_Pin|MC_TX2_Pin|MC_RX2_Pin;
 8007404:	2314      	movs	r3, #20
 8007406:	18fb      	adds	r3, r7, r3
 8007408:	2278      	movs	r2, #120	; 0x78
 800740a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800740c:	2314      	movs	r3, #20
 800740e:	18fb      	adds	r3, r7, r3
 8007410:	2202      	movs	r2, #2
 8007412:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007414:	2314      	movs	r3, #20
 8007416:	18fb      	adds	r3, r7, r3
 8007418:	2200      	movs	r2, #0
 800741a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800741c:	2314      	movs	r3, #20
 800741e:	18fb      	adds	r3, r7, r3
 8007420:	2203      	movs	r2, #3
 8007422:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8007424:	2314      	movs	r3, #20
 8007426:	18fb      	adds	r3, r7, r3
 8007428:	2200      	movs	r2, #0
 800742a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800742c:	2314      	movs	r3, #20
 800742e:	18fb      	adds	r3, r7, r3
 8007430:	4a07      	ldr	r2, [pc, #28]	; (8007450 <HAL_UART_MspInit+0xdc>)
 8007432:	0019      	movs	r1, r3
 8007434:	0010      	movs	r0, r2
 8007436:	f7fa fc0d 	bl	8001c54 <HAL_GPIO_Init>
}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	46bd      	mov	sp, r7
 800743e:	b00a      	add	sp, #40	; 0x28
 8007440:	bd80      	pop	{r7, pc}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	40013800 	.word	0x40013800
 8007448:	40021000 	.word	0x40021000
 800744c:	40004400 	.word	0x40004400
 8007450:	48000c00 	.word	0x48000c00

08007454 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0); 
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	0019      	movs	r1, r3
 800746a:	2013      	movs	r0, #19
 800746c:	f7fa fb5e 	bl	8001b2c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn); 
 8007470:	2013      	movs	r0, #19
 8007472:	f7fa fb71 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8007476:	4b21      	ldr	r3, [pc, #132]	; (80074fc <HAL_InitTick+0xa8>)
 8007478:	4a20      	ldr	r2, [pc, #128]	; (80074fc <HAL_InitTick+0xa8>)
 800747a:	69d2      	ldr	r2, [r2, #28]
 800747c:	2180      	movs	r1, #128	; 0x80
 800747e:	0049      	lsls	r1, r1, #1
 8007480:	430a      	orrs	r2, r1
 8007482:	61da      	str	r2, [r3, #28]
 8007484:	4b1d      	ldr	r3, [pc, #116]	; (80074fc <HAL_InitTick+0xa8>)
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	2380      	movs	r3, #128	; 0x80
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	4013      	ands	r3, r2
 800748e:	60bb      	str	r3, [r7, #8]
 8007490:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007492:	230c      	movs	r3, #12
 8007494:	18fa      	adds	r2, r7, r3
 8007496:	2310      	movs	r3, #16
 8007498:	18fb      	adds	r3, r7, r3
 800749a:	0011      	movs	r1, r2
 800749c:	0018      	movs	r0, r3
 800749e:	f7fb fa93 	bl	80029c8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80074a2:	f7fb fa7b 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 80074a6:	0003      	movs	r3, r0
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	4914      	ldr	r1, [pc, #80]	; (8007500 <HAL_InitTick+0xac>)
 80074ae:	0018      	movs	r0, r3
 80074b0:	f7f8 fe32 	bl	8000118 <__udivsi3>
 80074b4:	0003      	movs	r3, r0
 80074b6:	3b01      	subs	r3, #1
 80074b8:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <HAL_InitTick+0xb0>)
 80074bc:	4a12      	ldr	r2, [pc, #72]	; (8007508 <HAL_InitTick+0xb4>)
 80074be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 80074c0:	4b10      	ldr	r3, [pc, #64]	; (8007504 <HAL_InitTick+0xb0>)
 80074c2:	4a12      	ldr	r2, [pc, #72]	; (800750c <HAL_InitTick+0xb8>)
 80074c4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <HAL_InitTick+0xb0>)
 80074c8:	6a3a      	ldr	r2, [r7, #32]
 80074ca:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 80074cc:	4b0d      	ldr	r3, [pc, #52]	; (8007504 <HAL_InitTick+0xb0>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <HAL_InitTick+0xb0>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <HAL_InitTick+0xb0>)
 80074da:	0018      	movs	r0, r3
 80074dc:	f7fb fb9c 	bl	8002c18 <HAL_TIM_Base_Init>
 80074e0:	1e03      	subs	r3, r0, #0
 80074e2:	d105      	bne.n	80074f0 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80074e4:	4b07      	ldr	r3, [pc, #28]	; (8007504 <HAL_InitTick+0xb0>)
 80074e6:	0018      	movs	r0, r3
 80074e8:	f7fb fbc2 	bl	8002c70 <HAL_TIM_Base_Start_IT>
 80074ec:	0003      	movs	r3, r0
 80074ee:	e000      	b.n	80074f2 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
}
 80074f2:	0018      	movs	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	b00a      	add	sp, #40	; 0x28
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	40021000 	.word	0x40021000
 8007500:	000f4240 	.word	0x000f4240
 8007504:	20001ce4 	.word	0x20001ce4
 8007508:	40002000 	.word	0x40002000
 800750c:	000003e7 	.word	0x000003e7

08007510 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8007514:	f7fd fa90 	bl	8004a38 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007518:	46c0      	nop			; (mov r8, r8)
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007524:	4b03      	ldr	r3, [pc, #12]	; (8007534 <TIM3_IRQHandler+0x14>)
 8007526:	0018      	movs	r0, r3
 8007528:	f7fb fc56 	bl	8002dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800752c:	46c0      	nop			; (mov r8, r8)
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	20001a9c 	.word	0x20001a9c

08007538 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800753c:	4b03      	ldr	r3, [pc, #12]	; (800754c <TIM14_IRQHandler+0x14>)
 800753e:	0018      	movs	r0, r3
 8007540:	f7fb fc4a 	bl	8002dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8007544:	46c0      	nop			; (mov r8, r8)
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	20001ce4 	.word	0x20001ce4

08007550 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007554:	4b03      	ldr	r3, [pc, #12]	; (8007564 <USART1_IRQHandler+0x14>)
 8007556:	0018      	movs	r0, r3
 8007558:	f7fc fd0c 	bl	8003f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800755c:	46c0      	nop			; (mov r8, r8)
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	20001adc 	.word	0x20001adc

08007568 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <USART2_IRQHandler+0x14>)
 800756e:	0018      	movs	r0, r3
 8007570:	f7fc fd00 	bl	8003f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007574:	46c0      	nop			; (mov r8, r8)
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	20001bcc 	.word	0x20001bcc

08007580 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8007584:	4b1a      	ldr	r3, [pc, #104]	; (80075f0 <SystemInit+0x70>)
 8007586:	4a1a      	ldr	r2, [pc, #104]	; (80075f0 <SystemInit+0x70>)
 8007588:	6812      	ldr	r2, [r2, #0]
 800758a:	2101      	movs	r1, #1
 800758c:	430a      	orrs	r2, r1
 800758e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8007590:	4b17      	ldr	r3, [pc, #92]	; (80075f0 <SystemInit+0x70>)
 8007592:	4a17      	ldr	r2, [pc, #92]	; (80075f0 <SystemInit+0x70>)
 8007594:	6852      	ldr	r2, [r2, #4]
 8007596:	4917      	ldr	r1, [pc, #92]	; (80075f4 <SystemInit+0x74>)
 8007598:	400a      	ands	r2, r1
 800759a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800759c:	4b14      	ldr	r3, [pc, #80]	; (80075f0 <SystemInit+0x70>)
 800759e:	4a14      	ldr	r2, [pc, #80]	; (80075f0 <SystemInit+0x70>)
 80075a0:	6812      	ldr	r2, [r2, #0]
 80075a2:	4915      	ldr	r1, [pc, #84]	; (80075f8 <SystemInit+0x78>)
 80075a4:	400a      	ands	r2, r1
 80075a6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80075a8:	4b11      	ldr	r3, [pc, #68]	; (80075f0 <SystemInit+0x70>)
 80075aa:	4a11      	ldr	r2, [pc, #68]	; (80075f0 <SystemInit+0x70>)
 80075ac:	6812      	ldr	r2, [r2, #0]
 80075ae:	4913      	ldr	r1, [pc, #76]	; (80075fc <SystemInit+0x7c>)
 80075b0:	400a      	ands	r2, r1
 80075b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80075b4:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <SystemInit+0x70>)
 80075b6:	4a0e      	ldr	r2, [pc, #56]	; (80075f0 <SystemInit+0x70>)
 80075b8:	6852      	ldr	r2, [r2, #4]
 80075ba:	4911      	ldr	r1, [pc, #68]	; (8007600 <SystemInit+0x80>)
 80075bc:	400a      	ands	r2, r1
 80075be:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80075c0:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <SystemInit+0x70>)
 80075c2:	4a0b      	ldr	r2, [pc, #44]	; (80075f0 <SystemInit+0x70>)
 80075c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075c6:	210f      	movs	r1, #15
 80075c8:	438a      	bics	r2, r1
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80075cc:	4b08      	ldr	r3, [pc, #32]	; (80075f0 <SystemInit+0x70>)
 80075ce:	4a08      	ldr	r2, [pc, #32]	; (80075f0 <SystemInit+0x70>)
 80075d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80075d2:	490c      	ldr	r1, [pc, #48]	; (8007604 <SystemInit+0x84>)
 80075d4:	400a      	ands	r2, r1
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <SystemInit+0x70>)
 80075da:	4a05      	ldr	r2, [pc, #20]	; (80075f0 <SystemInit+0x70>)
 80075dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075de:	2101      	movs	r1, #1
 80075e0:	438a      	bics	r2, r1
 80075e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80075e4:	4b02      	ldr	r3, [pc, #8]	; (80075f0 <SystemInit+0x70>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	609a      	str	r2, [r3, #8]

}
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40021000 	.word	0x40021000
 80075f4:	08ffb80c 	.word	0x08ffb80c
 80075f8:	fef6ffff 	.word	0xfef6ffff
 80075fc:	fffbffff 	.word	0xfffbffff
 8007600:	ffc0ffff 	.word	0xffc0ffff
 8007604:	fffcfe2c 	.word	0xfffcfe2c

08007608 <traces>:
}

// ***************************************************************************

void traces(char *msg)
{
 8007608:	b590      	push	{r4, r7, lr}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(trace_uart_ptr, " ", 1, 100);
 8007610:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <traces+0x48>)
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	490f      	ldr	r1, [pc, #60]	; (8007654 <traces+0x4c>)
 8007616:	2364      	movs	r3, #100	; 0x64
 8007618:	2201      	movs	r2, #1
 800761a:	f7fc fb25 	bl	8003c68 <HAL_UART_Transmit>
    HAL_UART_Transmit(trace_uart_ptr, msg, strlen(msg), 100);
 800761e:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <traces+0x48>)
 8007620:	681c      	ldr	r4, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	0018      	movs	r0, r3
 8007626:	f7f8 fd6f 	bl	8000108 <strlen>
 800762a:	0003      	movs	r3, r0
 800762c:	b29a      	uxth	r2, r3
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	2364      	movs	r3, #100	; 0x64
 8007632:	0020      	movs	r0, r4
 8007634:	f7fc fb18 	bl	8003c68 <HAL_UART_Transmit>
    HAL_UART_Transmit(trace_uart_ptr, "\n", 1, 100);
 8007638:	4b05      	ldr	r3, [pc, #20]	; (8007650 <traces+0x48>)
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	4906      	ldr	r1, [pc, #24]	; (8007658 <traces+0x50>)
 800763e:	2364      	movs	r3, #100	; 0x64
 8007640:	2201      	movs	r2, #1
 8007642:	f7fc fb11 	bl	8003c68 <HAL_UART_Transmit>
}
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	46bd      	mov	sp, r7
 800764a:	b003      	add	sp, #12
 800764c:	bd90      	pop	{r4, r7, pc}
 800764e:	46c0      	nop			; (mov r8, r8)
 8007650:	20000068 	.word	0x20000068
 8007654:	08008364 	.word	0x08008364
 8007658:	08008368 	.word	0x08008368

0800765c <tracef>:

void tracef(char *fmt, ...)
{
 800765c:	b40f      	push	{r0, r1, r2, r3}
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8007664:	2314      	movs	r3, #20
 8007666:	18fb      	adds	r3, r7, r3
 8007668:	607b      	str	r3, [r7, #4]
    vsniprintf(trace_buf, TRACE_BUFLEN, fmt, args);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4807      	ldr	r0, [pc, #28]	; (800768c <tracef+0x30>)
 8007670:	2150      	movs	r1, #80	; 0x50
 8007672:	f000 f9cb 	bl	8007a0c <vsniprintf>
    traces(trace_buf);
 8007676:	4b05      	ldr	r3, [pc, #20]	; (800768c <tracef+0x30>)
 8007678:	0018      	movs	r0, r3
 800767a:	f7ff ffc5 	bl	8007608 <traces>
    va_end(args);
}
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	46bd      	mov	sp, r7
 8007682:	b002      	add	sp, #8
 8007684:	bc80      	pop	{r7}
 8007686:	bc08      	pop	{r3}
 8007688:	b004      	add	sp, #16
 800768a:	4718      	bx	r3
 800768c:	200019b0 	.word	0x200019b0

08007690 <get_response>:
// ***************************************************************************

// TODO Die Eingabe sollte interruptgesteuert oder per DMA erfolgen!!!

static bool get_response(char *expected_answer)
{
 8007690:	b590      	push	{r4, r7, lr}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
    int len = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef receive_retval;
    do {
        // receive a response
        memset(rx_buf, 0, RX_BUF_SIZE);
 800769c:	4b2d      	ldr	r3, [pc, #180]	; (8007754 <get_response+0xc4>)
 800769e:	220a      	movs	r2, #10
 80076a0:	2100      	movs	r1, #0
 80076a2:	0018      	movs	r0, r3
 80076a4:	f000 f97f 	bl	80079a6 <memset>
        receive_retval = HAL_UART_Receive(wlan_uart_ptr, rx_buf, RX_BUF_SIZE, RX_TIMEOUT);
 80076a8:	4b2b      	ldr	r3, [pc, #172]	; (8007758 <get_response+0xc8>)
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	230b      	movs	r3, #11
 80076ae:	18fc      	adds	r4, r7, r3
 80076b0:	4928      	ldr	r1, [pc, #160]	; (8007754 <get_response+0xc4>)
 80076b2:	23fa      	movs	r3, #250	; 0xfa
 80076b4:	220a      	movs	r2, #10
 80076b6:	f7fc fb7b 	bl	8003db0 <HAL_UART_Receive>
 80076ba:	0003      	movs	r3, r0
 80076bc:	7023      	strb	r3, [r4, #0]

        // try to determine length of answer
        // TODO this cannot really work - fix it!
        len = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
        while (len < (RX_BUF_SIZE-1) && rx_buf[len] != '\0')
 80076c2:	e002      	b.n	80076ca <get_response+0x3a>
        {
            len++;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]
        while (len < (RX_BUF_SIZE-1) && rx_buf[len] != '\0')
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	dc05      	bgt.n	80076dc <get_response+0x4c>
 80076d0:	4a20      	ldr	r2, [pc, #128]	; (8007754 <get_response+0xc4>)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	18d3      	adds	r3, r2, r3
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1f3      	bne.n	80076c4 <get_response+0x34>
        }
        // make the rx buffer a c string
        rx_buf[len] = '\0';
 80076dc:	4a1d      	ldr	r2, [pc, #116]	; (8007754 <get_response+0xc4>)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	18d3      	adds	r3, r2, r3
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
    } while (len >= (RX_BUF_SIZE-1));
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	dcd7      	bgt.n	800769c <get_response+0xc>
    SERIAL_DEBUG("Received: ", rx_buf);
 80076ec:	491b      	ldr	r1, [pc, #108]	; (800775c <get_response+0xcc>)
 80076ee:	481c      	ldr	r0, [pc, #112]	; (8007760 <get_response+0xd0>)
 80076f0:	23fa      	movs	r3, #250	; 0xfa
 80076f2:	220a      	movs	r2, #10
 80076f4:	f7fc fab8 	bl	8003c68 <HAL_UART_Transmit>
 80076f8:	4b16      	ldr	r3, [pc, #88]	; (8007754 <get_response+0xc4>)
 80076fa:	0018      	movs	r0, r3
 80076fc:	f7f8 fd04 	bl	8000108 <strlen>
 8007700:	0003      	movs	r3, r0
 8007702:	b29a      	uxth	r2, r3
 8007704:	4913      	ldr	r1, [pc, #76]	; (8007754 <get_response+0xc4>)
 8007706:	4816      	ldr	r0, [pc, #88]	; (8007760 <get_response+0xd0>)
 8007708:	23fa      	movs	r3, #250	; 0xfa
 800770a:	f7fc faad 	bl	8003c68 <HAL_UART_Transmit>
 800770e:	4915      	ldr	r1, [pc, #84]	; (8007764 <get_response+0xd4>)
 8007710:	4813      	ldr	r0, [pc, #76]	; (8007760 <get_response+0xd0>)
 8007712:	23fa      	movs	r3, #250	; 0xfa
 8007714:	2202      	movs	r2, #2
 8007716:	f7fc faa7 	bl	8003c68 <HAL_UART_Transmit>
    SERIAL_DEBUG("Expected: ", expected_answer);
 800771a:	4913      	ldr	r1, [pc, #76]	; (8007768 <get_response+0xd8>)
 800771c:	4810      	ldr	r0, [pc, #64]	; (8007760 <get_response+0xd0>)
 800771e:	23fa      	movs	r3, #250	; 0xfa
 8007720:	220a      	movs	r2, #10
 8007722:	f7fc faa1 	bl	8003c68 <HAL_UART_Transmit>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	0018      	movs	r0, r3
 800772a:	f7f8 fced 	bl	8000108 <strlen>
 800772e:	0003      	movs	r3, r0
 8007730:	b29a      	uxth	r2, r3
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	480a      	ldr	r0, [pc, #40]	; (8007760 <get_response+0xd0>)
 8007736:	23fa      	movs	r3, #250	; 0xfa
 8007738:	f7fc fa96 	bl	8003c68 <HAL_UART_Transmit>
 800773c:	4909      	ldr	r1, [pc, #36]	; (8007764 <get_response+0xd4>)
 800773e:	4808      	ldr	r0, [pc, #32]	; (8007760 <get_response+0xd0>)
 8007740:	23fa      	movs	r3, #250	; 0xfa
 8007742:	2202      	movs	r2, #2
 8007744:	f7fc fa90 	bl	8003c68 <HAL_UART_Transmit>
//    itoa(receive_retval, rx_buf, 10);
//    SERIAL_DEBUG("Ret=", rx_buf);

    // check the result
    // TODO wirklichen Vergleich machen
    return true; //(strstr(rx_buf, expected_answer) != NULL);
 8007748:	2301      	movs	r3, #1
}
 800774a:	0018      	movs	r0, r3
 800774c:	46bd      	mov	sp, r7
 800774e:	b005      	add	sp, #20
 8007750:	bd90      	pop	{r4, r7, pc}
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	20001a00 	.word	0x20001a00
 8007758:	2000006c 	.word	0x2000006c
 800775c:	0800838c 	.word	0x0800838c
 8007760:	20001adc 	.word	0x20001adc
 8007764:	08008398 	.word	0x08008398
 8007768:	0800839c 	.word	0x0800839c

0800776c <send_command>:

static bool send_command(char *cmd, uint32_t delay_ms, char *expected_answer)
{
 800776c:	b590      	push	{r4, r7, lr}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(wlan_uart_ptr, cmd, strlen(cmd), TX_TIMEOUT);
 8007778:	4b18      	ldr	r3, [pc, #96]	; (80077dc <send_command+0x70>)
 800777a:	681c      	ldr	r4, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	0018      	movs	r0, r3
 8007780:	f7f8 fcc2 	bl	8000108 <strlen>
 8007784:	0003      	movs	r3, r0
 8007786:	b29a      	uxth	r2, r3
 8007788:	68f9      	ldr	r1, [r7, #12]
 800778a:	23fa      	movs	r3, #250	; 0xfa
 800778c:	0020      	movs	r0, r4
 800778e:	f7fc fa6b 	bl	8003c68 <HAL_UART_Transmit>
    SERIAL_DEBUG("Transmitted: ", cmd);
 8007792:	4913      	ldr	r1, [pc, #76]	; (80077e0 <send_command+0x74>)
 8007794:	4813      	ldr	r0, [pc, #76]	; (80077e4 <send_command+0x78>)
 8007796:	23fa      	movs	r3, #250	; 0xfa
 8007798:	220d      	movs	r2, #13
 800779a:	f7fc fa65 	bl	8003c68 <HAL_UART_Transmit>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	0018      	movs	r0, r3
 80077a2:	f7f8 fcb1 	bl	8000108 <strlen>
 80077a6:	0003      	movs	r3, r0
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	480d      	ldr	r0, [pc, #52]	; (80077e4 <send_command+0x78>)
 80077ae:	23fa      	movs	r3, #250	; 0xfa
 80077b0:	f7fc fa5a 	bl	8003c68 <HAL_UART_Transmit>
 80077b4:	490c      	ldr	r1, [pc, #48]	; (80077e8 <send_command+0x7c>)
 80077b6:	480b      	ldr	r0, [pc, #44]	; (80077e4 <send_command+0x78>)
 80077b8:	23fa      	movs	r3, #250	; 0xfa
 80077ba:	2202      	movs	r2, #2
 80077bc:	f7fc fa54 	bl	8003c68 <HAL_UART_Transmit>
    HAL_Delay(delay_ms);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	0018      	movs	r0, r3
 80077c4:	f7f9 fc44 	bl	8001050 <HAL_Delay>
    return get_response(expected_answer);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	0018      	movs	r0, r3
 80077cc:	f7ff ff60 	bl	8007690 <get_response>
 80077d0:	0003      	movs	r3, r0
}
 80077d2:	0018      	movs	r0, r3
 80077d4:	46bd      	mov	sp, r7
 80077d6:	b005      	add	sp, #20
 80077d8:	bd90      	pop	{r4, r7, pc}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	2000006c 	.word	0x2000006c
 80077e0:	080083a8 	.word	0x080083a8
 80077e4:	20001adc 	.word	0x20001adc
 80077e8:	08008398 	.word	0x08008398

080077ec <config_start>:

// TODO Sinnvolle Fehlerbehandlung einführen - z. B. Reset des WIFI-Moduls und Neustart der Prozedur
// TODO WIFI-Modul bis zum Neustart auf schnellere Kommunikationsgeschwindigkeit umschalten und HAL_UART umkonfigurieren

static bool config_start()
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
    bool ok = true;
 80077f2:	1dfb      	adds	r3, r7, #7
 80077f4:	2201      	movs	r2, #1
 80077f6:	701a      	strb	r2, [r3, #0]
    // TODO Macht es Sinn, das WIFI-Modul zurückzusetzen?
    ok = ok && send_command("$$$", 200, "CMD");
 80077f8:	1dfb      	adds	r3, r7, #7
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <config_start+0x28>
 8007800:	4a17      	ldr	r2, [pc, #92]	; (8007860 <config_start+0x74>)
 8007802:	4b18      	ldr	r3, [pc, #96]	; (8007864 <config_start+0x78>)
 8007804:	21c8      	movs	r1, #200	; 0xc8
 8007806:	0018      	movs	r0, r3
 8007808:	f7ff ffb0 	bl	800776c <send_command>
 800780c:	1e03      	subs	r3, r0, #0
 800780e:	d001      	beq.n	8007814 <config_start+0x28>
 8007810:	2201      	movs	r2, #1
 8007812:	e000      	b.n	8007816 <config_start+0x2a>
 8007814:	2200      	movs	r2, #0
 8007816:	1dfb      	adds	r3, r7, #7
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	2101      	movs	r1, #1
 800781e:	400a      	ands	r2, r1
 8007820:	701a      	strb	r2, [r3, #0]
    ok = ok && send_command("\rload config\r", 0, "AOK");
 8007822:	1dfb      	adds	r3, r7, #7
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <config_start+0x52>
 800782a:	4a0f      	ldr	r2, [pc, #60]	; (8007868 <config_start+0x7c>)
 800782c:	4b0f      	ldr	r3, [pc, #60]	; (800786c <config_start+0x80>)
 800782e:	2100      	movs	r1, #0
 8007830:	0018      	movs	r0, r3
 8007832:	f7ff ff9b 	bl	800776c <send_command>
 8007836:	1e03      	subs	r3, r0, #0
 8007838:	d001      	beq.n	800783e <config_start+0x52>
 800783a:	2201      	movs	r2, #1
 800783c:	e000      	b.n	8007840 <config_start+0x54>
 800783e:	2200      	movs	r2, #0
 8007840:	1dfb      	adds	r3, r7, #7
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	781a      	ldrb	r2, [r3, #0]
 8007846:	2101      	movs	r1, #1
 8007848:	400a      	ands	r2, r1
 800784a:	701a      	strb	r2, [r3, #0]
    HAL_Delay(250);
 800784c:	20fa      	movs	r0, #250	; 0xfa
 800784e:	f7f9 fbff 	bl	8001050 <HAL_Delay>
    return ok;
 8007852:	1dfb      	adds	r3, r7, #7
 8007854:	781b      	ldrb	r3, [r3, #0]
}
 8007856:	0018      	movs	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	b002      	add	sp, #8
 800785c:	bd80      	pop	{r7, pc}
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	080083e8 	.word	0x080083e8
 8007864:	080083ec 	.word	0x080083ec
 8007868:	080083f0 	.word	0x080083f0
 800786c:	080083f4 	.word	0x080083f4

08007870 <config_leave>:

static bool config_leave()
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
    return send_command("\rexit\r", 0, "EXIT");
 8007874:	4a04      	ldr	r2, [pc, #16]	; (8007888 <config_leave+0x18>)
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <config_leave+0x1c>)
 8007878:	2100      	movs	r1, #0
 800787a:	0018      	movs	r0, r3
 800787c:	f7ff ff76 	bl	800776c <send_command>
 8007880:	0003      	movs	r3, r0
}
 8007882:	0018      	movs	r0, r3
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	08008404 	.word	0x08008404
 800788c:	0800840c 	.word	0x0800840c

08007890 <wifi_init>:
}

// ***************************************************************************

bool wifi_init()
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
    bool ok = true;
 8007896:	1dfb      	adds	r3, r7, #7
 8007898:	2201      	movs	r2, #1
 800789a:	701a      	strb	r2, [r3, #0]
    ok = ok && config_start();
 800789c:	1dfb      	adds	r3, r7, #7
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <wifi_init+0x20>
 80078a4:	f7ff ffa2 	bl	80077ec <config_start>
 80078a8:	1e03      	subs	r3, r0, #0
 80078aa:	d001      	beq.n	80078b0 <wifi_init+0x20>
 80078ac:	2201      	movs	r2, #1
 80078ae:	e000      	b.n	80078b2 <wifi_init+0x22>
 80078b0:	2200      	movs	r2, #0
 80078b2:	1dfb      	adds	r3, r7, #7
 80078b4:	701a      	strb	r2, [r3, #0]
 80078b6:	781a      	ldrb	r2, [r3, #0]
 80078b8:	2101      	movs	r1, #1
 80078ba:	400a      	ands	r2, r1
 80078bc:	701a      	strb	r2, [r3, #0]
    ok = ok && config_leave();
 80078be:	1dfb      	adds	r3, r7, #7
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <wifi_init+0x42>
 80078c6:	f7ff ffd3 	bl	8007870 <config_leave>
 80078ca:	1e03      	subs	r3, r0, #0
 80078cc:	d001      	beq.n	80078d2 <wifi_init+0x42>
 80078ce:	2201      	movs	r2, #1
 80078d0:	e000      	b.n	80078d4 <wifi_init+0x44>
 80078d2:	2200      	movs	r2, #0
 80078d4:	1dfb      	adds	r3, r7, #7
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	781a      	ldrb	r2, [r3, #0]
 80078da:	2101      	movs	r1, #1
 80078dc:	400a      	ands	r2, r1
 80078de:	701a      	strb	r2, [r3, #0]
    return ok;
 80078e0:	1dfb      	adds	r3, r7, #7
 80078e2:	781b      	ldrb	r3, [r3, #0]
}
 80078e4:	0018      	movs	r0, r3
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b002      	add	sp, #8
 80078ea:	bd80      	pop	{r7, pc}

080078ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80078ec:	480d      	ldr	r0, [pc, #52]	; (8007924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80078ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80078f0:	480d      	ldr	r0, [pc, #52]	; (8007928 <LoopForever+0x6>)
  ldr r1, =_edata
 80078f2:	490e      	ldr	r1, [pc, #56]	; (800792c <LoopForever+0xa>)
  ldr r2, =_sidata
 80078f4:	4a0e      	ldr	r2, [pc, #56]	; (8007930 <LoopForever+0xe>)
  movs r3, #0
 80078f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80078f8:	e002      	b.n	8007900 <LoopCopyDataInit>

080078fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80078fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078fe:	3304      	adds	r3, #4

08007900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007904:	d3f9      	bcc.n	80078fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007906:	4a0b      	ldr	r2, [pc, #44]	; (8007934 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007908:	4c0b      	ldr	r4, [pc, #44]	; (8007938 <LoopForever+0x16>)
  movs r3, #0
 800790a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800790c:	e001      	b.n	8007912 <LoopFillZerobss>

0800790e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800790e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007910:	3204      	adds	r2, #4

08007912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007914:	d3fb      	bcc.n	800790e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007916:	f7ff fe33 	bl	8007580 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800791a:	f000 f817 	bl	800794c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800791e:	f7ff f909 	bl	8006b34 <main>

08007922 <LoopForever>:

LoopForever:
    b LoopForever
 8007922:	e7fe      	b.n	8007922 <LoopForever>
  ldr   r0, =_estack
 8007924:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8007928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800792c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8007930:	08008688 	.word	0x08008688
  ldr r2, =_sbss
 8007934:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8007938:	20001d28 	.word	0x20001d28

0800793c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800793c:	e7fe      	b.n	800793c <ADC1_COMP_IRQHandler>
	...

08007940 <__errno>:
 8007940:	4b01      	ldr	r3, [pc, #4]	; (8007948 <__errno+0x8>)
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	4770      	bx	lr
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	20000070 	.word	0x20000070

0800794c <__libc_init_array>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	2600      	movs	r6, #0
 8007950:	4d0c      	ldr	r5, [pc, #48]	; (8007984 <__libc_init_array+0x38>)
 8007952:	4c0d      	ldr	r4, [pc, #52]	; (8007988 <__libc_init_array+0x3c>)
 8007954:	1b64      	subs	r4, r4, r5
 8007956:	10a4      	asrs	r4, r4, #2
 8007958:	42a6      	cmp	r6, r4
 800795a:	d109      	bne.n	8007970 <__libc_init_array+0x24>
 800795c:	2600      	movs	r6, #0
 800795e:	f000 fc57 	bl	8008210 <_init>
 8007962:	4d0a      	ldr	r5, [pc, #40]	; (800798c <__libc_init_array+0x40>)
 8007964:	4c0a      	ldr	r4, [pc, #40]	; (8007990 <__libc_init_array+0x44>)
 8007966:	1b64      	subs	r4, r4, r5
 8007968:	10a4      	asrs	r4, r4, #2
 800796a:	42a6      	cmp	r6, r4
 800796c:	d105      	bne.n	800797a <__libc_init_array+0x2e>
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	00b3      	lsls	r3, r6, #2
 8007972:	58eb      	ldr	r3, [r5, r3]
 8007974:	4798      	blx	r3
 8007976:	3601      	adds	r6, #1
 8007978:	e7ee      	b.n	8007958 <__libc_init_array+0xc>
 800797a:	00b3      	lsls	r3, r6, #2
 800797c:	58eb      	ldr	r3, [r5, r3]
 800797e:	4798      	blx	r3
 8007980:	3601      	adds	r6, #1
 8007982:	e7f2      	b.n	800796a <__libc_init_array+0x1e>
 8007984:	08008680 	.word	0x08008680
 8007988:	08008680 	.word	0x08008680
 800798c:	08008680 	.word	0x08008680
 8007990:	08008684 	.word	0x08008684

08007994 <memcpy>:
 8007994:	2300      	movs	r3, #0
 8007996:	b510      	push	{r4, lr}
 8007998:	429a      	cmp	r2, r3
 800799a:	d100      	bne.n	800799e <memcpy+0xa>
 800799c:	bd10      	pop	{r4, pc}
 800799e:	5ccc      	ldrb	r4, [r1, r3]
 80079a0:	54c4      	strb	r4, [r0, r3]
 80079a2:	3301      	adds	r3, #1
 80079a4:	e7f8      	b.n	8007998 <memcpy+0x4>

080079a6 <memset>:
 80079a6:	0003      	movs	r3, r0
 80079a8:	1882      	adds	r2, r0, r2
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d100      	bne.n	80079b0 <memset+0xa>
 80079ae:	4770      	bx	lr
 80079b0:	7019      	strb	r1, [r3, #0]
 80079b2:	3301      	adds	r3, #1
 80079b4:	e7f9      	b.n	80079aa <memset+0x4>

080079b6 <_vsniprintf_r>:
 80079b6:	b530      	push	{r4, r5, lr}
 80079b8:	0014      	movs	r4, r2
 80079ba:	b09b      	sub	sp, #108	; 0x6c
 80079bc:	0005      	movs	r5, r0
 80079be:	001a      	movs	r2, r3
 80079c0:	2c00      	cmp	r4, #0
 80079c2:	da05      	bge.n	80079d0 <_vsniprintf_r+0x1a>
 80079c4:	238b      	movs	r3, #139	; 0x8b
 80079c6:	6003      	str	r3, [r0, #0]
 80079c8:	2001      	movs	r0, #1
 80079ca:	4240      	negs	r0, r0
 80079cc:	b01b      	add	sp, #108	; 0x6c
 80079ce:	bd30      	pop	{r4, r5, pc}
 80079d0:	2382      	movs	r3, #130	; 0x82
 80079d2:	4668      	mov	r0, sp
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	8183      	strh	r3, [r0, #12]
 80079d8:	2300      	movs	r3, #0
 80079da:	9100      	str	r1, [sp, #0]
 80079dc:	9104      	str	r1, [sp, #16]
 80079de:	429c      	cmp	r4, r3
 80079e0:	d000      	beq.n	80079e4 <_vsniprintf_r+0x2e>
 80079e2:	1e63      	subs	r3, r4, #1
 80079e4:	9302      	str	r3, [sp, #8]
 80079e6:	9305      	str	r3, [sp, #20]
 80079e8:	2301      	movs	r3, #1
 80079ea:	4669      	mov	r1, sp
 80079ec:	425b      	negs	r3, r3
 80079ee:	81cb      	strh	r3, [r1, #14]
 80079f0:	0028      	movs	r0, r5
 80079f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80079f4:	f000 f878 	bl	8007ae8 <_svfiprintf_r>
 80079f8:	1c43      	adds	r3, r0, #1
 80079fa:	da01      	bge.n	8007a00 <_vsniprintf_r+0x4a>
 80079fc:	238b      	movs	r3, #139	; 0x8b
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	2c00      	cmp	r4, #0
 8007a02:	d0e3      	beq.n	80079cc <_vsniprintf_r+0x16>
 8007a04:	2300      	movs	r3, #0
 8007a06:	9a00      	ldr	r2, [sp, #0]
 8007a08:	7013      	strb	r3, [r2, #0]
 8007a0a:	e7df      	b.n	80079cc <_vsniprintf_r+0x16>

08007a0c <vsniprintf>:
 8007a0c:	b507      	push	{r0, r1, r2, lr}
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	0013      	movs	r3, r2
 8007a12:	000a      	movs	r2, r1
 8007a14:	0001      	movs	r1, r0
 8007a16:	4802      	ldr	r0, [pc, #8]	; (8007a20 <vsniprintf+0x14>)
 8007a18:	6800      	ldr	r0, [r0, #0]
 8007a1a:	f7ff ffcc 	bl	80079b6 <_vsniprintf_r>
 8007a1e:	bd0e      	pop	{r1, r2, r3, pc}
 8007a20:	20000070 	.word	0x20000070

08007a24 <__ssputs_r>:
 8007a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a26:	688e      	ldr	r6, [r1, #8]
 8007a28:	b085      	sub	sp, #20
 8007a2a:	0007      	movs	r7, r0
 8007a2c:	000c      	movs	r4, r1
 8007a2e:	9203      	str	r2, [sp, #12]
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	429e      	cmp	r6, r3
 8007a34:	d839      	bhi.n	8007aaa <__ssputs_r+0x86>
 8007a36:	2390      	movs	r3, #144	; 0x90
 8007a38:	898a      	ldrh	r2, [r1, #12]
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	421a      	tst	r2, r3
 8007a3e:	d034      	beq.n	8007aaa <__ssputs_r+0x86>
 8007a40:	2503      	movs	r5, #3
 8007a42:	6909      	ldr	r1, [r1, #16]
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	1a5b      	subs	r3, r3, r1
 8007a48:	9302      	str	r3, [sp, #8]
 8007a4a:	6963      	ldr	r3, [r4, #20]
 8007a4c:	9802      	ldr	r0, [sp, #8]
 8007a4e:	435d      	muls	r5, r3
 8007a50:	0feb      	lsrs	r3, r5, #31
 8007a52:	195d      	adds	r5, r3, r5
 8007a54:	9b01      	ldr	r3, [sp, #4]
 8007a56:	106d      	asrs	r5, r5, #1
 8007a58:	3301      	adds	r3, #1
 8007a5a:	181b      	adds	r3, r3, r0
 8007a5c:	42ab      	cmp	r3, r5
 8007a5e:	d900      	bls.n	8007a62 <__ssputs_r+0x3e>
 8007a60:	001d      	movs	r5, r3
 8007a62:	0553      	lsls	r3, r2, #21
 8007a64:	d532      	bpl.n	8007acc <__ssputs_r+0xa8>
 8007a66:	0029      	movs	r1, r5
 8007a68:	0038      	movs	r0, r7
 8007a6a:	f000 fb31 	bl	80080d0 <_malloc_r>
 8007a6e:	1e06      	subs	r6, r0, #0
 8007a70:	d109      	bne.n	8007a86 <__ssputs_r+0x62>
 8007a72:	230c      	movs	r3, #12
 8007a74:	603b      	str	r3, [r7, #0]
 8007a76:	2340      	movs	r3, #64	; 0x40
 8007a78:	2001      	movs	r0, #1
 8007a7a:	89a2      	ldrh	r2, [r4, #12]
 8007a7c:	4240      	negs	r0, r0
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	b005      	add	sp, #20
 8007a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a86:	9a02      	ldr	r2, [sp, #8]
 8007a88:	6921      	ldr	r1, [r4, #16]
 8007a8a:	f7ff ff83 	bl	8007994 <memcpy>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	4a14      	ldr	r2, [pc, #80]	; (8007ae4 <__ssputs_r+0xc0>)
 8007a92:	401a      	ands	r2, r3
 8007a94:	2380      	movs	r3, #128	; 0x80
 8007a96:	4313      	orrs	r3, r2
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	9b02      	ldr	r3, [sp, #8]
 8007a9c:	6126      	str	r6, [r4, #16]
 8007a9e:	18f6      	adds	r6, r6, r3
 8007aa0:	6026      	str	r6, [r4, #0]
 8007aa2:	6165      	str	r5, [r4, #20]
 8007aa4:	9e01      	ldr	r6, [sp, #4]
 8007aa6:	1aed      	subs	r5, r5, r3
 8007aa8:	60a5      	str	r5, [r4, #8]
 8007aaa:	9b01      	ldr	r3, [sp, #4]
 8007aac:	42b3      	cmp	r3, r6
 8007aae:	d200      	bcs.n	8007ab2 <__ssputs_r+0x8e>
 8007ab0:	001e      	movs	r6, r3
 8007ab2:	0032      	movs	r2, r6
 8007ab4:	9903      	ldr	r1, [sp, #12]
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	f000 faad 	bl	8008016 <memmove>
 8007abc:	68a3      	ldr	r3, [r4, #8]
 8007abe:	2000      	movs	r0, #0
 8007ac0:	1b9b      	subs	r3, r3, r6
 8007ac2:	60a3      	str	r3, [r4, #8]
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	199e      	adds	r6, r3, r6
 8007ac8:	6026      	str	r6, [r4, #0]
 8007aca:	e7da      	b.n	8007a82 <__ssputs_r+0x5e>
 8007acc:	002a      	movs	r2, r5
 8007ace:	0038      	movs	r0, r7
 8007ad0:	f000 fb5c 	bl	800818c <_realloc_r>
 8007ad4:	1e06      	subs	r6, r0, #0
 8007ad6:	d1e0      	bne.n	8007a9a <__ssputs_r+0x76>
 8007ad8:	6921      	ldr	r1, [r4, #16]
 8007ada:	0038      	movs	r0, r7
 8007adc:	f000 faae 	bl	800803c <_free_r>
 8007ae0:	e7c7      	b.n	8007a72 <__ssputs_r+0x4e>
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	fffffb7f 	.word	0xfffffb7f

08007ae8 <_svfiprintf_r>:
 8007ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aea:	b09f      	sub	sp, #124	; 0x7c
 8007aec:	9002      	str	r0, [sp, #8]
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	898b      	ldrh	r3, [r1, #12]
 8007af2:	000f      	movs	r7, r1
 8007af4:	0016      	movs	r6, r2
 8007af6:	061b      	lsls	r3, r3, #24
 8007af8:	d511      	bpl.n	8007b1e <_svfiprintf_r+0x36>
 8007afa:	690b      	ldr	r3, [r1, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10e      	bne.n	8007b1e <_svfiprintf_r+0x36>
 8007b00:	2140      	movs	r1, #64	; 0x40
 8007b02:	f000 fae5 	bl	80080d0 <_malloc_r>
 8007b06:	6038      	str	r0, [r7, #0]
 8007b08:	6138      	str	r0, [r7, #16]
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d105      	bne.n	8007b1a <_svfiprintf_r+0x32>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	9a02      	ldr	r2, [sp, #8]
 8007b12:	3801      	subs	r0, #1
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	b01f      	add	sp, #124	; 0x7c
 8007b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b1a:	2340      	movs	r3, #64	; 0x40
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	ad06      	add	r5, sp, #24
 8007b22:	616b      	str	r3, [r5, #20]
 8007b24:	3320      	adds	r3, #32
 8007b26:	766b      	strb	r3, [r5, #25]
 8007b28:	3310      	adds	r3, #16
 8007b2a:	76ab      	strb	r3, [r5, #26]
 8007b2c:	0034      	movs	r4, r6
 8007b2e:	7823      	ldrb	r3, [r4, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d147      	bne.n	8007bc4 <_svfiprintf_r+0xdc>
 8007b34:	1ba3      	subs	r3, r4, r6
 8007b36:	9304      	str	r3, [sp, #16]
 8007b38:	d00d      	beq.n	8007b56 <_svfiprintf_r+0x6e>
 8007b3a:	1ba3      	subs	r3, r4, r6
 8007b3c:	0032      	movs	r2, r6
 8007b3e:	0039      	movs	r1, r7
 8007b40:	9802      	ldr	r0, [sp, #8]
 8007b42:	f7ff ff6f 	bl	8007a24 <__ssputs_r>
 8007b46:	1c43      	adds	r3, r0, #1
 8007b48:	d100      	bne.n	8007b4c <_svfiprintf_r+0x64>
 8007b4a:	e0b5      	b.n	8007cb8 <_svfiprintf_r+0x1d0>
 8007b4c:	696a      	ldr	r2, [r5, #20]
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	4694      	mov	ip, r2
 8007b52:	4463      	add	r3, ip
 8007b54:	616b      	str	r3, [r5, #20]
 8007b56:	7823      	ldrb	r3, [r4, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d100      	bne.n	8007b5e <_svfiprintf_r+0x76>
 8007b5c:	e0ac      	b.n	8007cb8 <_svfiprintf_r+0x1d0>
 8007b5e:	2201      	movs	r2, #1
 8007b60:	2300      	movs	r3, #0
 8007b62:	4252      	negs	r2, r2
 8007b64:	606a      	str	r2, [r5, #4]
 8007b66:	a902      	add	r1, sp, #8
 8007b68:	3254      	adds	r2, #84	; 0x54
 8007b6a:	1852      	adds	r2, r2, r1
 8007b6c:	3401      	adds	r4, #1
 8007b6e:	602b      	str	r3, [r5, #0]
 8007b70:	60eb      	str	r3, [r5, #12]
 8007b72:	60ab      	str	r3, [r5, #8]
 8007b74:	7013      	strb	r3, [r2, #0]
 8007b76:	65ab      	str	r3, [r5, #88]	; 0x58
 8007b78:	4e58      	ldr	r6, [pc, #352]	; (8007cdc <_svfiprintf_r+0x1f4>)
 8007b7a:	2205      	movs	r2, #5
 8007b7c:	7821      	ldrb	r1, [r4, #0]
 8007b7e:	0030      	movs	r0, r6
 8007b80:	f000 fa3e 	bl	8008000 <memchr>
 8007b84:	1c62      	adds	r2, r4, #1
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d120      	bne.n	8007bcc <_svfiprintf_r+0xe4>
 8007b8a:	6829      	ldr	r1, [r5, #0]
 8007b8c:	06cb      	lsls	r3, r1, #27
 8007b8e:	d504      	bpl.n	8007b9a <_svfiprintf_r+0xb2>
 8007b90:	2353      	movs	r3, #83	; 0x53
 8007b92:	ae02      	add	r6, sp, #8
 8007b94:	3020      	adds	r0, #32
 8007b96:	199b      	adds	r3, r3, r6
 8007b98:	7018      	strb	r0, [r3, #0]
 8007b9a:	070b      	lsls	r3, r1, #28
 8007b9c:	d504      	bpl.n	8007ba8 <_svfiprintf_r+0xc0>
 8007b9e:	2353      	movs	r3, #83	; 0x53
 8007ba0:	202b      	movs	r0, #43	; 0x2b
 8007ba2:	ae02      	add	r6, sp, #8
 8007ba4:	199b      	adds	r3, r3, r6
 8007ba6:	7018      	strb	r0, [r3, #0]
 8007ba8:	7823      	ldrb	r3, [r4, #0]
 8007baa:	2b2a      	cmp	r3, #42	; 0x2a
 8007bac:	d016      	beq.n	8007bdc <_svfiprintf_r+0xf4>
 8007bae:	2000      	movs	r0, #0
 8007bb0:	210a      	movs	r1, #10
 8007bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb4:	7822      	ldrb	r2, [r4, #0]
 8007bb6:	3a30      	subs	r2, #48	; 0x30
 8007bb8:	2a09      	cmp	r2, #9
 8007bba:	d955      	bls.n	8007c68 <_svfiprintf_r+0x180>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d015      	beq.n	8007bec <_svfiprintf_r+0x104>
 8007bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc2:	e013      	b.n	8007bec <_svfiprintf_r+0x104>
 8007bc4:	2b25      	cmp	r3, #37	; 0x25
 8007bc6:	d0b5      	beq.n	8007b34 <_svfiprintf_r+0x4c>
 8007bc8:	3401      	adds	r4, #1
 8007bca:	e7b0      	b.n	8007b2e <_svfiprintf_r+0x46>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	1b80      	subs	r0, r0, r6
 8007bd0:	4083      	lsls	r3, r0
 8007bd2:	6829      	ldr	r1, [r5, #0]
 8007bd4:	0014      	movs	r4, r2
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	e7cd      	b.n	8007b78 <_svfiprintf_r+0x90>
 8007bdc:	9b05      	ldr	r3, [sp, #20]
 8007bde:	1d18      	adds	r0, r3, #4
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	9005      	str	r0, [sp, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	db39      	blt.n	8007c5c <_svfiprintf_r+0x174>
 8007be8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bea:	0014      	movs	r4, r2
 8007bec:	7823      	ldrb	r3, [r4, #0]
 8007bee:	2b2e      	cmp	r3, #46	; 0x2e
 8007bf0:	d10b      	bne.n	8007c0a <_svfiprintf_r+0x122>
 8007bf2:	7863      	ldrb	r3, [r4, #1]
 8007bf4:	1c62      	adds	r2, r4, #1
 8007bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf8:	d13e      	bne.n	8007c78 <_svfiprintf_r+0x190>
 8007bfa:	9b05      	ldr	r3, [sp, #20]
 8007bfc:	3402      	adds	r4, #2
 8007bfe:	1d1a      	adds	r2, r3, #4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	9205      	str	r2, [sp, #20]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	db34      	blt.n	8007c72 <_svfiprintf_r+0x18a>
 8007c08:	9307      	str	r3, [sp, #28]
 8007c0a:	4e35      	ldr	r6, [pc, #212]	; (8007ce0 <_svfiprintf_r+0x1f8>)
 8007c0c:	7821      	ldrb	r1, [r4, #0]
 8007c0e:	2203      	movs	r2, #3
 8007c10:	0030      	movs	r0, r6
 8007c12:	f000 f9f5 	bl	8008000 <memchr>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d006      	beq.n	8007c28 <_svfiprintf_r+0x140>
 8007c1a:	2340      	movs	r3, #64	; 0x40
 8007c1c:	1b80      	subs	r0, r0, r6
 8007c1e:	4083      	lsls	r3, r0
 8007c20:	682a      	ldr	r2, [r5, #0]
 8007c22:	3401      	adds	r4, #1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	602b      	str	r3, [r5, #0]
 8007c28:	7821      	ldrb	r1, [r4, #0]
 8007c2a:	2206      	movs	r2, #6
 8007c2c:	482d      	ldr	r0, [pc, #180]	; (8007ce4 <_svfiprintf_r+0x1fc>)
 8007c2e:	1c66      	adds	r6, r4, #1
 8007c30:	7629      	strb	r1, [r5, #24]
 8007c32:	f000 f9e5 	bl	8008000 <memchr>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d046      	beq.n	8007cc8 <_svfiprintf_r+0x1e0>
 8007c3a:	4b2b      	ldr	r3, [pc, #172]	; (8007ce8 <_svfiprintf_r+0x200>)
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d12f      	bne.n	8007ca0 <_svfiprintf_r+0x1b8>
 8007c40:	6829      	ldr	r1, [r5, #0]
 8007c42:	9b05      	ldr	r3, [sp, #20]
 8007c44:	2207      	movs	r2, #7
 8007c46:	05c9      	lsls	r1, r1, #23
 8007c48:	d528      	bpl.n	8007c9c <_svfiprintf_r+0x1b4>
 8007c4a:	189b      	adds	r3, r3, r2
 8007c4c:	4393      	bics	r3, r2
 8007c4e:	3308      	adds	r3, #8
 8007c50:	9305      	str	r3, [sp, #20]
 8007c52:	696b      	ldr	r3, [r5, #20]
 8007c54:	9a03      	ldr	r2, [sp, #12]
 8007c56:	189b      	adds	r3, r3, r2
 8007c58:	616b      	str	r3, [r5, #20]
 8007c5a:	e767      	b.n	8007b2c <_svfiprintf_r+0x44>
 8007c5c:	425b      	negs	r3, r3
 8007c5e:	60eb      	str	r3, [r5, #12]
 8007c60:	2302      	movs	r3, #2
 8007c62:	430b      	orrs	r3, r1
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	e7c0      	b.n	8007bea <_svfiprintf_r+0x102>
 8007c68:	434b      	muls	r3, r1
 8007c6a:	3401      	adds	r4, #1
 8007c6c:	189b      	adds	r3, r3, r2
 8007c6e:	2001      	movs	r0, #1
 8007c70:	e7a0      	b.n	8007bb4 <_svfiprintf_r+0xcc>
 8007c72:	2301      	movs	r3, #1
 8007c74:	425b      	negs	r3, r3
 8007c76:	e7c7      	b.n	8007c08 <_svfiprintf_r+0x120>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	0014      	movs	r4, r2
 8007c7c:	200a      	movs	r0, #10
 8007c7e:	001a      	movs	r2, r3
 8007c80:	606b      	str	r3, [r5, #4]
 8007c82:	7821      	ldrb	r1, [r4, #0]
 8007c84:	3930      	subs	r1, #48	; 0x30
 8007c86:	2909      	cmp	r1, #9
 8007c88:	d903      	bls.n	8007c92 <_svfiprintf_r+0x1aa>
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0bd      	beq.n	8007c0a <_svfiprintf_r+0x122>
 8007c8e:	9207      	str	r2, [sp, #28]
 8007c90:	e7bb      	b.n	8007c0a <_svfiprintf_r+0x122>
 8007c92:	4342      	muls	r2, r0
 8007c94:	3401      	adds	r4, #1
 8007c96:	1852      	adds	r2, r2, r1
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e7f2      	b.n	8007c82 <_svfiprintf_r+0x19a>
 8007c9c:	3307      	adds	r3, #7
 8007c9e:	e7d5      	b.n	8007c4c <_svfiprintf_r+0x164>
 8007ca0:	ab05      	add	r3, sp, #20
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	003a      	movs	r2, r7
 8007ca6:	4b11      	ldr	r3, [pc, #68]	; (8007cec <_svfiprintf_r+0x204>)
 8007ca8:	0029      	movs	r1, r5
 8007caa:	9802      	ldr	r0, [sp, #8]
 8007cac:	e000      	b.n	8007cb0 <_svfiprintf_r+0x1c8>
 8007cae:	bf00      	nop
 8007cb0:	9003      	str	r0, [sp, #12]
 8007cb2:	9b03      	ldr	r3, [sp, #12]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	d1cc      	bne.n	8007c52 <_svfiprintf_r+0x16a>
 8007cb8:	89bb      	ldrh	r3, [r7, #12]
 8007cba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007cbc:	065b      	lsls	r3, r3, #25
 8007cbe:	d400      	bmi.n	8007cc2 <_svfiprintf_r+0x1da>
 8007cc0:	e729      	b.n	8007b16 <_svfiprintf_r+0x2e>
 8007cc2:	2001      	movs	r0, #1
 8007cc4:	4240      	negs	r0, r0
 8007cc6:	e726      	b.n	8007b16 <_svfiprintf_r+0x2e>
 8007cc8:	ab05      	add	r3, sp, #20
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	003a      	movs	r2, r7
 8007cce:	4b07      	ldr	r3, [pc, #28]	; (8007cec <_svfiprintf_r+0x204>)
 8007cd0:	0029      	movs	r1, r5
 8007cd2:	9802      	ldr	r0, [sp, #8]
 8007cd4:	f000 f87a 	bl	8007dcc <_printf_i>
 8007cd8:	e7ea      	b.n	8007cb0 <_svfiprintf_r+0x1c8>
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	0800864c 	.word	0x0800864c
 8007ce0:	08008652 	.word	0x08008652
 8007ce4:	08008656 	.word	0x08008656
 8007ce8:	00000000 	.word	0x00000000
 8007cec:	08007a25 	.word	0x08007a25

08007cf0 <_printf_common>:
 8007cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf2:	0015      	movs	r5, r2
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	688a      	ldr	r2, [r1, #8]
 8007cf8:	690b      	ldr	r3, [r1, #16]
 8007cfa:	9000      	str	r0, [sp, #0]
 8007cfc:	000c      	movs	r4, r1
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	da00      	bge.n	8007d04 <_printf_common+0x14>
 8007d02:	0013      	movs	r3, r2
 8007d04:	0022      	movs	r2, r4
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	3243      	adds	r2, #67	; 0x43
 8007d0a:	7812      	ldrb	r2, [r2, #0]
 8007d0c:	2a00      	cmp	r2, #0
 8007d0e:	d001      	beq.n	8007d14 <_printf_common+0x24>
 8007d10:	3301      	adds	r3, #1
 8007d12:	602b      	str	r3, [r5, #0]
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	069b      	lsls	r3, r3, #26
 8007d18:	d502      	bpl.n	8007d20 <_printf_common+0x30>
 8007d1a:	682b      	ldr	r3, [r5, #0]
 8007d1c:	3302      	adds	r3, #2
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	2706      	movs	r7, #6
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	401f      	ands	r7, r3
 8007d26:	d027      	beq.n	8007d78 <_printf_common+0x88>
 8007d28:	0023      	movs	r3, r4
 8007d2a:	3343      	adds	r3, #67	; 0x43
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	4193      	sbcs	r3, r2
 8007d32:	6822      	ldr	r2, [r4, #0]
 8007d34:	0692      	lsls	r2, r2, #26
 8007d36:	d430      	bmi.n	8007d9a <_printf_common+0xaa>
 8007d38:	0022      	movs	r2, r4
 8007d3a:	9901      	ldr	r1, [sp, #4]
 8007d3c:	3243      	adds	r2, #67	; 0x43
 8007d3e:	9800      	ldr	r0, [sp, #0]
 8007d40:	9e08      	ldr	r6, [sp, #32]
 8007d42:	47b0      	blx	r6
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d025      	beq.n	8007d94 <_printf_common+0xa4>
 8007d48:	2306      	movs	r3, #6
 8007d4a:	6820      	ldr	r0, [r4, #0]
 8007d4c:	682a      	ldr	r2, [r5, #0]
 8007d4e:	68e1      	ldr	r1, [r4, #12]
 8007d50:	4003      	ands	r3, r0
 8007d52:	2500      	movs	r5, #0
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d103      	bne.n	8007d60 <_printf_common+0x70>
 8007d58:	1a8d      	subs	r5, r1, r2
 8007d5a:	43eb      	mvns	r3, r5
 8007d5c:	17db      	asrs	r3, r3, #31
 8007d5e:	401d      	ands	r5, r3
 8007d60:	68a3      	ldr	r3, [r4, #8]
 8007d62:	6922      	ldr	r2, [r4, #16]
 8007d64:	4293      	cmp	r3, r2
 8007d66:	dd01      	ble.n	8007d6c <_printf_common+0x7c>
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	18ed      	adds	r5, r5, r3
 8007d6c:	2700      	movs	r7, #0
 8007d6e:	42bd      	cmp	r5, r7
 8007d70:	d120      	bne.n	8007db4 <_printf_common+0xc4>
 8007d72:	2000      	movs	r0, #0
 8007d74:	e010      	b.n	8007d98 <_printf_common+0xa8>
 8007d76:	3701      	adds	r7, #1
 8007d78:	68e3      	ldr	r3, [r4, #12]
 8007d7a:	682a      	ldr	r2, [r5, #0]
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	429f      	cmp	r7, r3
 8007d80:	dad2      	bge.n	8007d28 <_printf_common+0x38>
 8007d82:	0022      	movs	r2, r4
 8007d84:	2301      	movs	r3, #1
 8007d86:	3219      	adds	r2, #25
 8007d88:	9901      	ldr	r1, [sp, #4]
 8007d8a:	9800      	ldr	r0, [sp, #0]
 8007d8c:	9e08      	ldr	r6, [sp, #32]
 8007d8e:	47b0      	blx	r6
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d1f0      	bne.n	8007d76 <_printf_common+0x86>
 8007d94:	2001      	movs	r0, #1
 8007d96:	4240      	negs	r0, r0
 8007d98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d9a:	2030      	movs	r0, #48	; 0x30
 8007d9c:	18e1      	adds	r1, r4, r3
 8007d9e:	3143      	adds	r1, #67	; 0x43
 8007da0:	7008      	strb	r0, [r1, #0]
 8007da2:	0021      	movs	r1, r4
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	3145      	adds	r1, #69	; 0x45
 8007da8:	7809      	ldrb	r1, [r1, #0]
 8007daa:	18a2      	adds	r2, r4, r2
 8007dac:	3243      	adds	r2, #67	; 0x43
 8007dae:	3302      	adds	r3, #2
 8007db0:	7011      	strb	r1, [r2, #0]
 8007db2:	e7c1      	b.n	8007d38 <_printf_common+0x48>
 8007db4:	0022      	movs	r2, r4
 8007db6:	2301      	movs	r3, #1
 8007db8:	321a      	adds	r2, #26
 8007dba:	9901      	ldr	r1, [sp, #4]
 8007dbc:	9800      	ldr	r0, [sp, #0]
 8007dbe:	9e08      	ldr	r6, [sp, #32]
 8007dc0:	47b0      	blx	r6
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d0e6      	beq.n	8007d94 <_printf_common+0xa4>
 8007dc6:	3701      	adds	r7, #1
 8007dc8:	e7d1      	b.n	8007d6e <_printf_common+0x7e>
	...

08007dcc <_printf_i>:
 8007dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dce:	b08b      	sub	sp, #44	; 0x2c
 8007dd0:	9206      	str	r2, [sp, #24]
 8007dd2:	000a      	movs	r2, r1
 8007dd4:	3243      	adds	r2, #67	; 0x43
 8007dd6:	9307      	str	r3, [sp, #28]
 8007dd8:	9005      	str	r0, [sp, #20]
 8007dda:	9204      	str	r2, [sp, #16]
 8007ddc:	7e0a      	ldrb	r2, [r1, #24]
 8007dde:	000c      	movs	r4, r1
 8007de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007de2:	2a6e      	cmp	r2, #110	; 0x6e
 8007de4:	d100      	bne.n	8007de8 <_printf_i+0x1c>
 8007de6:	e08f      	b.n	8007f08 <_printf_i+0x13c>
 8007de8:	d817      	bhi.n	8007e1a <_printf_i+0x4e>
 8007dea:	2a63      	cmp	r2, #99	; 0x63
 8007dec:	d02c      	beq.n	8007e48 <_printf_i+0x7c>
 8007dee:	d808      	bhi.n	8007e02 <_printf_i+0x36>
 8007df0:	2a00      	cmp	r2, #0
 8007df2:	d100      	bne.n	8007df6 <_printf_i+0x2a>
 8007df4:	e099      	b.n	8007f2a <_printf_i+0x15e>
 8007df6:	2a58      	cmp	r2, #88	; 0x58
 8007df8:	d054      	beq.n	8007ea4 <_printf_i+0xd8>
 8007dfa:	0026      	movs	r6, r4
 8007dfc:	3642      	adds	r6, #66	; 0x42
 8007dfe:	7032      	strb	r2, [r6, #0]
 8007e00:	e029      	b.n	8007e56 <_printf_i+0x8a>
 8007e02:	2a64      	cmp	r2, #100	; 0x64
 8007e04:	d001      	beq.n	8007e0a <_printf_i+0x3e>
 8007e06:	2a69      	cmp	r2, #105	; 0x69
 8007e08:	d1f7      	bne.n	8007dfa <_printf_i+0x2e>
 8007e0a:	6821      	ldr	r1, [r4, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	0608      	lsls	r0, r1, #24
 8007e10:	d523      	bpl.n	8007e5a <_printf_i+0x8e>
 8007e12:	1d11      	adds	r1, r2, #4
 8007e14:	6019      	str	r1, [r3, #0]
 8007e16:	6815      	ldr	r5, [r2, #0]
 8007e18:	e025      	b.n	8007e66 <_printf_i+0x9a>
 8007e1a:	2a73      	cmp	r2, #115	; 0x73
 8007e1c:	d100      	bne.n	8007e20 <_printf_i+0x54>
 8007e1e:	e088      	b.n	8007f32 <_printf_i+0x166>
 8007e20:	d808      	bhi.n	8007e34 <_printf_i+0x68>
 8007e22:	2a6f      	cmp	r2, #111	; 0x6f
 8007e24:	d029      	beq.n	8007e7a <_printf_i+0xae>
 8007e26:	2a70      	cmp	r2, #112	; 0x70
 8007e28:	d1e7      	bne.n	8007dfa <_printf_i+0x2e>
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	6809      	ldr	r1, [r1, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	6022      	str	r2, [r4, #0]
 8007e32:	e003      	b.n	8007e3c <_printf_i+0x70>
 8007e34:	2a75      	cmp	r2, #117	; 0x75
 8007e36:	d020      	beq.n	8007e7a <_printf_i+0xae>
 8007e38:	2a78      	cmp	r2, #120	; 0x78
 8007e3a:	d1de      	bne.n	8007dfa <_printf_i+0x2e>
 8007e3c:	0022      	movs	r2, r4
 8007e3e:	2178      	movs	r1, #120	; 0x78
 8007e40:	3245      	adds	r2, #69	; 0x45
 8007e42:	7011      	strb	r1, [r2, #0]
 8007e44:	4a6c      	ldr	r2, [pc, #432]	; (8007ff8 <_printf_i+0x22c>)
 8007e46:	e030      	b.n	8007eaa <_printf_i+0xde>
 8007e48:	000e      	movs	r6, r1
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	3642      	adds	r6, #66	; 0x42
 8007e4e:	1d11      	adds	r1, r2, #4
 8007e50:	6019      	str	r1, [r3, #0]
 8007e52:	6813      	ldr	r3, [r2, #0]
 8007e54:	7033      	strb	r3, [r6, #0]
 8007e56:	2301      	movs	r3, #1
 8007e58:	e079      	b.n	8007f4e <_printf_i+0x182>
 8007e5a:	0649      	lsls	r1, r1, #25
 8007e5c:	d5d9      	bpl.n	8007e12 <_printf_i+0x46>
 8007e5e:	1d11      	adds	r1, r2, #4
 8007e60:	6019      	str	r1, [r3, #0]
 8007e62:	2300      	movs	r3, #0
 8007e64:	5ed5      	ldrsh	r5, [r2, r3]
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	da03      	bge.n	8007e72 <_printf_i+0xa6>
 8007e6a:	232d      	movs	r3, #45	; 0x2d
 8007e6c:	9a04      	ldr	r2, [sp, #16]
 8007e6e:	426d      	negs	r5, r5
 8007e70:	7013      	strb	r3, [r2, #0]
 8007e72:	4b62      	ldr	r3, [pc, #392]	; (8007ffc <_printf_i+0x230>)
 8007e74:	270a      	movs	r7, #10
 8007e76:	9303      	str	r3, [sp, #12]
 8007e78:	e02f      	b.n	8007eda <_printf_i+0x10e>
 8007e7a:	6820      	ldr	r0, [r4, #0]
 8007e7c:	6819      	ldr	r1, [r3, #0]
 8007e7e:	0605      	lsls	r5, r0, #24
 8007e80:	d503      	bpl.n	8007e8a <_printf_i+0xbe>
 8007e82:	1d08      	adds	r0, r1, #4
 8007e84:	6018      	str	r0, [r3, #0]
 8007e86:	680d      	ldr	r5, [r1, #0]
 8007e88:	e005      	b.n	8007e96 <_printf_i+0xca>
 8007e8a:	0640      	lsls	r0, r0, #25
 8007e8c:	d5f9      	bpl.n	8007e82 <_printf_i+0xb6>
 8007e8e:	680d      	ldr	r5, [r1, #0]
 8007e90:	1d08      	adds	r0, r1, #4
 8007e92:	6018      	str	r0, [r3, #0]
 8007e94:	b2ad      	uxth	r5, r5
 8007e96:	4b59      	ldr	r3, [pc, #356]	; (8007ffc <_printf_i+0x230>)
 8007e98:	2708      	movs	r7, #8
 8007e9a:	9303      	str	r3, [sp, #12]
 8007e9c:	2a6f      	cmp	r2, #111	; 0x6f
 8007e9e:	d018      	beq.n	8007ed2 <_printf_i+0x106>
 8007ea0:	270a      	movs	r7, #10
 8007ea2:	e016      	b.n	8007ed2 <_printf_i+0x106>
 8007ea4:	3145      	adds	r1, #69	; 0x45
 8007ea6:	700a      	strb	r2, [r1, #0]
 8007ea8:	4a54      	ldr	r2, [pc, #336]	; (8007ffc <_printf_i+0x230>)
 8007eaa:	9203      	str	r2, [sp, #12]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	6821      	ldr	r1, [r4, #0]
 8007eb0:	1d10      	adds	r0, r2, #4
 8007eb2:	6018      	str	r0, [r3, #0]
 8007eb4:	6815      	ldr	r5, [r2, #0]
 8007eb6:	0608      	lsls	r0, r1, #24
 8007eb8:	d522      	bpl.n	8007f00 <_printf_i+0x134>
 8007eba:	07cb      	lsls	r3, r1, #31
 8007ebc:	d502      	bpl.n	8007ec4 <_printf_i+0xf8>
 8007ebe:	2320      	movs	r3, #32
 8007ec0:	4319      	orrs	r1, r3
 8007ec2:	6021      	str	r1, [r4, #0]
 8007ec4:	2710      	movs	r7, #16
 8007ec6:	2d00      	cmp	r5, #0
 8007ec8:	d103      	bne.n	8007ed2 <_printf_i+0x106>
 8007eca:	2320      	movs	r3, #32
 8007ecc:	6822      	ldr	r2, [r4, #0]
 8007ece:	439a      	bics	r2, r3
 8007ed0:	6022      	str	r2, [r4, #0]
 8007ed2:	0023      	movs	r3, r4
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	3343      	adds	r3, #67	; 0x43
 8007ed8:	701a      	strb	r2, [r3, #0]
 8007eda:	6863      	ldr	r3, [r4, #4]
 8007edc:	60a3      	str	r3, [r4, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	db5c      	blt.n	8007f9c <_printf_i+0x1d0>
 8007ee2:	2204      	movs	r2, #4
 8007ee4:	6821      	ldr	r1, [r4, #0]
 8007ee6:	4391      	bics	r1, r2
 8007ee8:	6021      	str	r1, [r4, #0]
 8007eea:	2d00      	cmp	r5, #0
 8007eec:	d158      	bne.n	8007fa0 <_printf_i+0x1d4>
 8007eee:	9e04      	ldr	r6, [sp, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d064      	beq.n	8007fbe <_printf_i+0x1f2>
 8007ef4:	0026      	movs	r6, r4
 8007ef6:	9b03      	ldr	r3, [sp, #12]
 8007ef8:	3642      	adds	r6, #66	; 0x42
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	7033      	strb	r3, [r6, #0]
 8007efe:	e05e      	b.n	8007fbe <_printf_i+0x1f2>
 8007f00:	0648      	lsls	r0, r1, #25
 8007f02:	d5da      	bpl.n	8007eba <_printf_i+0xee>
 8007f04:	b2ad      	uxth	r5, r5
 8007f06:	e7d8      	b.n	8007eba <_printf_i+0xee>
 8007f08:	6809      	ldr	r1, [r1, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	0608      	lsls	r0, r1, #24
 8007f0e:	d505      	bpl.n	8007f1c <_printf_i+0x150>
 8007f10:	1d11      	adds	r1, r2, #4
 8007f12:	6019      	str	r1, [r3, #0]
 8007f14:	6813      	ldr	r3, [r2, #0]
 8007f16:	6962      	ldr	r2, [r4, #20]
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	e006      	b.n	8007f2a <_printf_i+0x15e>
 8007f1c:	0649      	lsls	r1, r1, #25
 8007f1e:	d5f7      	bpl.n	8007f10 <_printf_i+0x144>
 8007f20:	1d11      	adds	r1, r2, #4
 8007f22:	6019      	str	r1, [r3, #0]
 8007f24:	6813      	ldr	r3, [r2, #0]
 8007f26:	8aa2      	ldrh	r2, [r4, #20]
 8007f28:	801a      	strh	r2, [r3, #0]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	9e04      	ldr	r6, [sp, #16]
 8007f2e:	6123      	str	r3, [r4, #16]
 8007f30:	e054      	b.n	8007fdc <_printf_i+0x210>
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	1d11      	adds	r1, r2, #4
 8007f36:	6019      	str	r1, [r3, #0]
 8007f38:	6816      	ldr	r6, [r2, #0]
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	6862      	ldr	r2, [r4, #4]
 8007f3e:	0030      	movs	r0, r6
 8007f40:	f000 f85e 	bl	8008000 <memchr>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d001      	beq.n	8007f4c <_printf_i+0x180>
 8007f48:	1b80      	subs	r0, r0, r6
 8007f4a:	6060      	str	r0, [r4, #4]
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	6123      	str	r3, [r4, #16]
 8007f50:	2300      	movs	r3, #0
 8007f52:	9a04      	ldr	r2, [sp, #16]
 8007f54:	7013      	strb	r3, [r2, #0]
 8007f56:	e041      	b.n	8007fdc <_printf_i+0x210>
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	0032      	movs	r2, r6
 8007f5c:	9906      	ldr	r1, [sp, #24]
 8007f5e:	9805      	ldr	r0, [sp, #20]
 8007f60:	9d07      	ldr	r5, [sp, #28]
 8007f62:	47a8      	blx	r5
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d043      	beq.n	8007ff0 <_printf_i+0x224>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	2500      	movs	r5, #0
 8007f6c:	079b      	lsls	r3, r3, #30
 8007f6e:	d40f      	bmi.n	8007f90 <_printf_i+0x1c4>
 8007f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f72:	68e0      	ldr	r0, [r4, #12]
 8007f74:	4298      	cmp	r0, r3
 8007f76:	da3d      	bge.n	8007ff4 <_printf_i+0x228>
 8007f78:	0018      	movs	r0, r3
 8007f7a:	e03b      	b.n	8007ff4 <_printf_i+0x228>
 8007f7c:	0022      	movs	r2, r4
 8007f7e:	2301      	movs	r3, #1
 8007f80:	3219      	adds	r2, #25
 8007f82:	9906      	ldr	r1, [sp, #24]
 8007f84:	9805      	ldr	r0, [sp, #20]
 8007f86:	9e07      	ldr	r6, [sp, #28]
 8007f88:	47b0      	blx	r6
 8007f8a:	1c43      	adds	r3, r0, #1
 8007f8c:	d030      	beq.n	8007ff0 <_printf_i+0x224>
 8007f8e:	3501      	adds	r5, #1
 8007f90:	68e3      	ldr	r3, [r4, #12]
 8007f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f94:	1a9b      	subs	r3, r3, r2
 8007f96:	429d      	cmp	r5, r3
 8007f98:	dbf0      	blt.n	8007f7c <_printf_i+0x1b0>
 8007f9a:	e7e9      	b.n	8007f70 <_printf_i+0x1a4>
 8007f9c:	2d00      	cmp	r5, #0
 8007f9e:	d0a9      	beq.n	8007ef4 <_printf_i+0x128>
 8007fa0:	9e04      	ldr	r6, [sp, #16]
 8007fa2:	0028      	movs	r0, r5
 8007fa4:	0039      	movs	r1, r7
 8007fa6:	f7f8 f93d 	bl	8000224 <__aeabi_uidivmod>
 8007faa:	9b03      	ldr	r3, [sp, #12]
 8007fac:	3e01      	subs	r6, #1
 8007fae:	5c5b      	ldrb	r3, [r3, r1]
 8007fb0:	0028      	movs	r0, r5
 8007fb2:	7033      	strb	r3, [r6, #0]
 8007fb4:	0039      	movs	r1, r7
 8007fb6:	f7f8 f8af 	bl	8000118 <__udivsi3>
 8007fba:	1e05      	subs	r5, r0, #0
 8007fbc:	d1f1      	bne.n	8007fa2 <_printf_i+0x1d6>
 8007fbe:	2f08      	cmp	r7, #8
 8007fc0:	d109      	bne.n	8007fd6 <_printf_i+0x20a>
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	07db      	lsls	r3, r3, #31
 8007fc6:	d506      	bpl.n	8007fd6 <_printf_i+0x20a>
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	6922      	ldr	r2, [r4, #16]
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	dc02      	bgt.n	8007fd6 <_printf_i+0x20a>
 8007fd0:	2330      	movs	r3, #48	; 0x30
 8007fd2:	3e01      	subs	r6, #1
 8007fd4:	7033      	strb	r3, [r6, #0]
 8007fd6:	9b04      	ldr	r3, [sp, #16]
 8007fd8:	1b9b      	subs	r3, r3, r6
 8007fda:	6123      	str	r3, [r4, #16]
 8007fdc:	9b07      	ldr	r3, [sp, #28]
 8007fde:	aa09      	add	r2, sp, #36	; 0x24
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	0021      	movs	r1, r4
 8007fe4:	9b06      	ldr	r3, [sp, #24]
 8007fe6:	9805      	ldr	r0, [sp, #20]
 8007fe8:	f7ff fe82 	bl	8007cf0 <_printf_common>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d1b3      	bne.n	8007f58 <_printf_i+0x18c>
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	4240      	negs	r0, r0
 8007ff4:	b00b      	add	sp, #44	; 0x2c
 8007ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff8:	0800866e 	.word	0x0800866e
 8007ffc:	0800865d 	.word	0x0800865d

08008000 <memchr>:
 8008000:	b2c9      	uxtb	r1, r1
 8008002:	1882      	adds	r2, r0, r2
 8008004:	4290      	cmp	r0, r2
 8008006:	d101      	bne.n	800800c <memchr+0xc>
 8008008:	2000      	movs	r0, #0
 800800a:	4770      	bx	lr
 800800c:	7803      	ldrb	r3, [r0, #0]
 800800e:	428b      	cmp	r3, r1
 8008010:	d0fb      	beq.n	800800a <memchr+0xa>
 8008012:	3001      	adds	r0, #1
 8008014:	e7f6      	b.n	8008004 <memchr+0x4>

08008016 <memmove>:
 8008016:	b510      	push	{r4, lr}
 8008018:	4288      	cmp	r0, r1
 800801a:	d902      	bls.n	8008022 <memmove+0xc>
 800801c:	188b      	adds	r3, r1, r2
 800801e:	4298      	cmp	r0, r3
 8008020:	d308      	bcc.n	8008034 <memmove+0x1e>
 8008022:	2300      	movs	r3, #0
 8008024:	429a      	cmp	r2, r3
 8008026:	d007      	beq.n	8008038 <memmove+0x22>
 8008028:	5ccc      	ldrb	r4, [r1, r3]
 800802a:	54c4      	strb	r4, [r0, r3]
 800802c:	3301      	adds	r3, #1
 800802e:	e7f9      	b.n	8008024 <memmove+0xe>
 8008030:	5c8b      	ldrb	r3, [r1, r2]
 8008032:	5483      	strb	r3, [r0, r2]
 8008034:	3a01      	subs	r2, #1
 8008036:	d2fb      	bcs.n	8008030 <memmove+0x1a>
 8008038:	bd10      	pop	{r4, pc}
	...

0800803c <_free_r>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	0005      	movs	r5, r0
 8008040:	2900      	cmp	r1, #0
 8008042:	d010      	beq.n	8008066 <_free_r+0x2a>
 8008044:	1f0c      	subs	r4, r1, #4
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	da00      	bge.n	800804e <_free_r+0x12>
 800804c:	18e4      	adds	r4, r4, r3
 800804e:	0028      	movs	r0, r5
 8008050:	f000 f8d4 	bl	80081fc <__malloc_lock>
 8008054:	4a1d      	ldr	r2, [pc, #116]	; (80080cc <_free_r+0x90>)
 8008056:	6813      	ldr	r3, [r2, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d105      	bne.n	8008068 <_free_r+0x2c>
 800805c:	6063      	str	r3, [r4, #4]
 800805e:	6014      	str	r4, [r2, #0]
 8008060:	0028      	movs	r0, r5
 8008062:	f000 f8cc 	bl	80081fe <__malloc_unlock>
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	42a3      	cmp	r3, r4
 800806a:	d909      	bls.n	8008080 <_free_r+0x44>
 800806c:	6821      	ldr	r1, [r4, #0]
 800806e:	1860      	adds	r0, r4, r1
 8008070:	4283      	cmp	r3, r0
 8008072:	d1f3      	bne.n	800805c <_free_r+0x20>
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	1841      	adds	r1, r0, r1
 800807a:	6021      	str	r1, [r4, #0]
 800807c:	e7ee      	b.n	800805c <_free_r+0x20>
 800807e:	0013      	movs	r3, r2
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	2a00      	cmp	r2, #0
 8008084:	d001      	beq.n	800808a <_free_r+0x4e>
 8008086:	42a2      	cmp	r2, r4
 8008088:	d9f9      	bls.n	800807e <_free_r+0x42>
 800808a:	6819      	ldr	r1, [r3, #0]
 800808c:	1858      	adds	r0, r3, r1
 800808e:	42a0      	cmp	r0, r4
 8008090:	d10b      	bne.n	80080aa <_free_r+0x6e>
 8008092:	6820      	ldr	r0, [r4, #0]
 8008094:	1809      	adds	r1, r1, r0
 8008096:	1858      	adds	r0, r3, r1
 8008098:	6019      	str	r1, [r3, #0]
 800809a:	4282      	cmp	r2, r0
 800809c:	d1e0      	bne.n	8008060 <_free_r+0x24>
 800809e:	6810      	ldr	r0, [r2, #0]
 80080a0:	6852      	ldr	r2, [r2, #4]
 80080a2:	1841      	adds	r1, r0, r1
 80080a4:	6019      	str	r1, [r3, #0]
 80080a6:	605a      	str	r2, [r3, #4]
 80080a8:	e7da      	b.n	8008060 <_free_r+0x24>
 80080aa:	42a0      	cmp	r0, r4
 80080ac:	d902      	bls.n	80080b4 <_free_r+0x78>
 80080ae:	230c      	movs	r3, #12
 80080b0:	602b      	str	r3, [r5, #0]
 80080b2:	e7d5      	b.n	8008060 <_free_r+0x24>
 80080b4:	6821      	ldr	r1, [r4, #0]
 80080b6:	1860      	adds	r0, r4, r1
 80080b8:	4282      	cmp	r2, r0
 80080ba:	d103      	bne.n	80080c4 <_free_r+0x88>
 80080bc:	6810      	ldr	r0, [r2, #0]
 80080be:	6852      	ldr	r2, [r2, #4]
 80080c0:	1841      	adds	r1, r0, r1
 80080c2:	6021      	str	r1, [r4, #0]
 80080c4:	6062      	str	r2, [r4, #4]
 80080c6:	605c      	str	r4, [r3, #4]
 80080c8:	e7ca      	b.n	8008060 <_free_r+0x24>
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	20001a0c 	.word	0x20001a0c

080080d0 <_malloc_r>:
 80080d0:	2303      	movs	r3, #3
 80080d2:	b570      	push	{r4, r5, r6, lr}
 80080d4:	1ccd      	adds	r5, r1, #3
 80080d6:	439d      	bics	r5, r3
 80080d8:	3508      	adds	r5, #8
 80080da:	0006      	movs	r6, r0
 80080dc:	2d0c      	cmp	r5, #12
 80080de:	d21e      	bcs.n	800811e <_malloc_r+0x4e>
 80080e0:	250c      	movs	r5, #12
 80080e2:	42a9      	cmp	r1, r5
 80080e4:	d81d      	bhi.n	8008122 <_malloc_r+0x52>
 80080e6:	0030      	movs	r0, r6
 80080e8:	f000 f888 	bl	80081fc <__malloc_lock>
 80080ec:	4a25      	ldr	r2, [pc, #148]	; (8008184 <_malloc_r+0xb4>)
 80080ee:	6814      	ldr	r4, [r2, #0]
 80080f0:	0021      	movs	r1, r4
 80080f2:	2900      	cmp	r1, #0
 80080f4:	d119      	bne.n	800812a <_malloc_r+0x5a>
 80080f6:	4c24      	ldr	r4, [pc, #144]	; (8008188 <_malloc_r+0xb8>)
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <_malloc_r+0x36>
 80080fe:	0030      	movs	r0, r6
 8008100:	f000 f86a 	bl	80081d8 <_sbrk_r>
 8008104:	6020      	str	r0, [r4, #0]
 8008106:	0029      	movs	r1, r5
 8008108:	0030      	movs	r0, r6
 800810a:	f000 f865 	bl	80081d8 <_sbrk_r>
 800810e:	1c43      	adds	r3, r0, #1
 8008110:	d12c      	bne.n	800816c <_malloc_r+0x9c>
 8008112:	230c      	movs	r3, #12
 8008114:	0030      	movs	r0, r6
 8008116:	6033      	str	r3, [r6, #0]
 8008118:	f000 f871 	bl	80081fe <__malloc_unlock>
 800811c:	e003      	b.n	8008126 <_malloc_r+0x56>
 800811e:	2d00      	cmp	r5, #0
 8008120:	dadf      	bge.n	80080e2 <_malloc_r+0x12>
 8008122:	230c      	movs	r3, #12
 8008124:	6033      	str	r3, [r6, #0]
 8008126:	2000      	movs	r0, #0
 8008128:	bd70      	pop	{r4, r5, r6, pc}
 800812a:	680b      	ldr	r3, [r1, #0]
 800812c:	1b5b      	subs	r3, r3, r5
 800812e:	d41a      	bmi.n	8008166 <_malloc_r+0x96>
 8008130:	2b0b      	cmp	r3, #11
 8008132:	d903      	bls.n	800813c <_malloc_r+0x6c>
 8008134:	600b      	str	r3, [r1, #0]
 8008136:	18cc      	adds	r4, r1, r3
 8008138:	6025      	str	r5, [r4, #0]
 800813a:	e003      	b.n	8008144 <_malloc_r+0x74>
 800813c:	428c      	cmp	r4, r1
 800813e:	d10e      	bne.n	800815e <_malloc_r+0x8e>
 8008140:	6863      	ldr	r3, [r4, #4]
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	0030      	movs	r0, r6
 8008146:	f000 f85a 	bl	80081fe <__malloc_unlock>
 800814a:	0020      	movs	r0, r4
 800814c:	2207      	movs	r2, #7
 800814e:	300b      	adds	r0, #11
 8008150:	1d23      	adds	r3, r4, #4
 8008152:	4390      	bics	r0, r2
 8008154:	1ac3      	subs	r3, r0, r3
 8008156:	d0e7      	beq.n	8008128 <_malloc_r+0x58>
 8008158:	425a      	negs	r2, r3
 800815a:	50e2      	str	r2, [r4, r3]
 800815c:	e7e4      	b.n	8008128 <_malloc_r+0x58>
 800815e:	684b      	ldr	r3, [r1, #4]
 8008160:	6063      	str	r3, [r4, #4]
 8008162:	000c      	movs	r4, r1
 8008164:	e7ee      	b.n	8008144 <_malloc_r+0x74>
 8008166:	000c      	movs	r4, r1
 8008168:	6849      	ldr	r1, [r1, #4]
 800816a:	e7c2      	b.n	80080f2 <_malloc_r+0x22>
 800816c:	2303      	movs	r3, #3
 800816e:	1cc4      	adds	r4, r0, #3
 8008170:	439c      	bics	r4, r3
 8008172:	42a0      	cmp	r0, r4
 8008174:	d0e0      	beq.n	8008138 <_malloc_r+0x68>
 8008176:	1a21      	subs	r1, r4, r0
 8008178:	0030      	movs	r0, r6
 800817a:	f000 f82d 	bl	80081d8 <_sbrk_r>
 800817e:	1c43      	adds	r3, r0, #1
 8008180:	d1da      	bne.n	8008138 <_malloc_r+0x68>
 8008182:	e7c6      	b.n	8008112 <_malloc_r+0x42>
 8008184:	20001a0c 	.word	0x20001a0c
 8008188:	20001a10 	.word	0x20001a10

0800818c <_realloc_r>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	0007      	movs	r7, r0
 8008190:	000d      	movs	r5, r1
 8008192:	0016      	movs	r6, r2
 8008194:	2900      	cmp	r1, #0
 8008196:	d105      	bne.n	80081a4 <_realloc_r+0x18>
 8008198:	0011      	movs	r1, r2
 800819a:	f7ff ff99 	bl	80080d0 <_malloc_r>
 800819e:	0004      	movs	r4, r0
 80081a0:	0020      	movs	r0, r4
 80081a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a4:	2a00      	cmp	r2, #0
 80081a6:	d103      	bne.n	80081b0 <_realloc_r+0x24>
 80081a8:	f7ff ff48 	bl	800803c <_free_r>
 80081ac:	0034      	movs	r4, r6
 80081ae:	e7f7      	b.n	80081a0 <_realloc_r+0x14>
 80081b0:	f000 f826 	bl	8008200 <_malloc_usable_size_r>
 80081b4:	002c      	movs	r4, r5
 80081b6:	4286      	cmp	r6, r0
 80081b8:	d9f2      	bls.n	80081a0 <_realloc_r+0x14>
 80081ba:	0031      	movs	r1, r6
 80081bc:	0038      	movs	r0, r7
 80081be:	f7ff ff87 	bl	80080d0 <_malloc_r>
 80081c2:	1e04      	subs	r4, r0, #0
 80081c4:	d0ec      	beq.n	80081a0 <_realloc_r+0x14>
 80081c6:	0029      	movs	r1, r5
 80081c8:	0032      	movs	r2, r6
 80081ca:	f7ff fbe3 	bl	8007994 <memcpy>
 80081ce:	0029      	movs	r1, r5
 80081d0:	0038      	movs	r0, r7
 80081d2:	f7ff ff33 	bl	800803c <_free_r>
 80081d6:	e7e3      	b.n	80081a0 <_realloc_r+0x14>

080081d8 <_sbrk_r>:
 80081d8:	2300      	movs	r3, #0
 80081da:	b570      	push	{r4, r5, r6, lr}
 80081dc:	4c06      	ldr	r4, [pc, #24]	; (80081f8 <_sbrk_r+0x20>)
 80081de:	0005      	movs	r5, r0
 80081e0:	0008      	movs	r0, r1
 80081e2:	6023      	str	r3, [r4, #0]
 80081e4:	f7fd fe68 	bl	8005eb8 <_sbrk>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d103      	bne.n	80081f4 <_sbrk_r+0x1c>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d000      	beq.n	80081f4 <_sbrk_r+0x1c>
 80081f2:	602b      	str	r3, [r5, #0]
 80081f4:	bd70      	pop	{r4, r5, r6, pc}
 80081f6:	46c0      	nop			; (mov r8, r8)
 80081f8:	20001d24 	.word	0x20001d24

080081fc <__malloc_lock>:
 80081fc:	4770      	bx	lr

080081fe <__malloc_unlock>:
 80081fe:	4770      	bx	lr

08008200 <_malloc_usable_size_r>:
 8008200:	1f0b      	subs	r3, r1, #4
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	1f18      	subs	r0, r3, #4
 8008206:	2b00      	cmp	r3, #0
 8008208:	da01      	bge.n	800820e <_malloc_usable_size_r+0xe>
 800820a:	580b      	ldr	r3, [r1, r0]
 800820c:	18c0      	adds	r0, r0, r3
 800820e:	4770      	bx	lr

08008210 <_init>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008216:	bc08      	pop	{r3}
 8008218:	469e      	mov	lr, r3
 800821a:	4770      	bx	lr

0800821c <_fini>:
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008222:	bc08      	pop	{r3}
 8008224:	469e      	mov	lr, r3
 8008226:	4770      	bx	lr
