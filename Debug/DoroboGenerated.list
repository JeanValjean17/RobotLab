
DoroboGenerated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007688  08007688  00017688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007abc  08007abc  00017abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d8  20000000  08007ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c58  200000d8  08007b9c  000200d8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001d30  08007b9c  00021d30  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002092d  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004471  00000000  00000000  00040a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001448  00000000  00000000  00044ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001260  00000000  00000000  000462e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a483  00000000  00000000  00047548  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006006  00000000  00000000  000519cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000579d1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004908  00000000  00000000  00057a50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d8 	.word	0x200000d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007670 	.word	0x08007670

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000dc 	.word	0x200000dc
 8000104:	08007670 	.word	0x08007670

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <HAL_Init+0x24>)
 8000236:	4a07      	ldr	r2, [pc, #28]	; (8000254 <HAL_Init+0x24>)
 8000238:	6812      	ldr	r2, [r2, #0]
 800023a:	2110      	movs	r1, #16
 800023c:	430a      	orrs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000240:	2000      	movs	r0, #0
 8000242:	f006 fb37 	bl	80068b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000246:	f006 f8d3 	bl	80063f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800024a:	2300      	movs	r3, #0
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	40022000 	.word	0x40022000

08000258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  uwTick++;
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <HAL_IncTick+0x14>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	4b02      	ldr	r3, [pc, #8]	; (800026c <HAL_IncTick+0x14>)
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20001a1c 	.word	0x20001a1c

08000270 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  return uwTick;
 8000274:	4b02      	ldr	r3, [pc, #8]	; (8000280 <HAL_GetTick+0x10>)
 8000276:	681b      	ldr	r3, [r3, #0]
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	20001a1c 	.word	0x20001a1c

08000284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800028c:	f7ff fff0 	bl	8000270 <HAL_GetTick>
 8000290:	0003      	movs	r3, r0
 8000292:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	3301      	adds	r3, #1
 800029c:	d002      	beq.n	80002a4 <HAL_Delay+0x20>
  {
     wait++;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	3301      	adds	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a4:	46c0      	nop			; (mov r8, r8)
 80002a6:	f7ff ffe3 	bl	8000270 <HAL_GetTick>
 80002aa:	0002      	movs	r2, r0
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	1ad2      	subs	r2, r2, r3
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d3f7      	bcc.n	80002a6 <HAL_Delay+0x22>
  {
  }
}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b004      	add	sp, #16
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002c8:	230f      	movs	r3, #15
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d101      	bne.n	80002de <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80002da:	2301      	movs	r3, #1
 80002dc:	e124      	b.n	8000528 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d10a      	bne.n	80002fc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2240      	movs	r2, #64	; 0x40
 80002f0:	2100      	movs	r1, #0
 80002f2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	0018      	movs	r0, r3
 80002f8:	f006 f8b2 	bl	8006460 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000300:	2210      	movs	r2, #16
 8000302:	4013      	ands	r3, r2
 8000304:	d000      	beq.n	8000308 <HAL_ADC_Init+0x48>
 8000306:	e102      	b.n	800050e <HAL_ADC_Init+0x24e>
 8000308:	230f      	movs	r3, #15
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d000      	beq.n	8000314 <HAL_ADC_Init+0x54>
 8000312:	e0fc      	b.n	800050e <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	2204      	movs	r2, #4
 800031c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800031e:	d000      	beq.n	8000322 <HAL_ADC_Init+0x62>
 8000320:	e0f5      	b.n	800050e <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000326:	4a82      	ldr	r2, [pc, #520]	; (8000530 <HAL_ADC_Init+0x270>)
 8000328:	4013      	ands	r3, r2
 800032a:	2202      	movs	r2, #2
 800032c:	431a      	orrs	r2, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	2203      	movs	r2, #3
 800033a:	4013      	ands	r3, r2
 800033c:	2b01      	cmp	r3, #1
 800033e:	d112      	bne.n	8000366 <HAL_ADC_Init+0xa6>
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2201      	movs	r2, #1
 8000348:	4013      	ands	r3, r2
 800034a:	2b01      	cmp	r3, #1
 800034c:	d009      	beq.n	8000362 <HAL_ADC_Init+0xa2>
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	68da      	ldr	r2, [r3, #12]
 8000354:	2380      	movs	r3, #128	; 0x80
 8000356:	021b      	lsls	r3, r3, #8
 8000358:	401a      	ands	r2, r3
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	021b      	lsls	r3, r3, #8
 800035e:	429a      	cmp	r2, r3
 8000360:	d101      	bne.n	8000366 <HAL_ADC_Init+0xa6>
 8000362:	2301      	movs	r3, #1
 8000364:	e000      	b.n	8000368 <HAL_ADC_Init+0xa8>
 8000366:	2300      	movs	r3, #0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d116      	bne.n	800039a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	68d2      	ldr	r2, [r2, #12]
 8000376:	2118      	movs	r1, #24
 8000378:	438a      	bics	r2, r1
 800037a:	0011      	movs	r1, r2
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	6892      	ldr	r2, [r2, #8]
 8000380:	430a      	orrs	r2, r1
 8000382:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	6812      	ldr	r2, [r2, #0]
 800038c:	6912      	ldr	r2, [r2, #16]
 800038e:	0092      	lsls	r2, r2, #2
 8000390:	0891      	lsrs	r1, r2, #2
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	6852      	ldr	r2, [r2, #4]
 8000396:	430a      	orrs	r2, r1
 8000398:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	6812      	ldr	r2, [r2, #0]
 80003a2:	68d2      	ldr	r2, [r2, #12]
 80003a4:	4963      	ldr	r1, [pc, #396]	; (8000534 <HAL_ADC_Init+0x274>)
 80003a6:	400a      	ands	r2, r1
 80003a8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6a1b      	ldr	r3, [r3, #32]
 80003bc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003be:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d002      	beq.n	80003ce <HAL_ADC_Init+0x10e>
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	015b      	lsls	r3, r3, #5
 80003cc:	e000      	b.n	80003d0 <HAL_ADC_Init+0x110>
 80003ce:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003d0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003d6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	691b      	ldr	r3, [r3, #16]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d101      	bne.n	80003e4 <HAL_ADC_Init+0x124>
 80003e0:	2304      	movs	r3, #4
 80003e2:	e000      	b.n	80003e6 <HAL_ADC_Init+0x126>
 80003e4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 80003e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003ee:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003f0:	68ba      	ldr	r2, [r7, #8]
 80003f2:	4313      	orrs	r3, r2
 80003f4:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d115      	bne.n	800042a <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6a1b      	ldr	r3, [r3, #32]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d105      	bne.n	8000412 <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	0252      	lsls	r2, r2, #9
 800040c:	4313      	orrs	r3, r2
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	e00b      	b.n	800042a <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000416:	2220      	movs	r2, #32
 8000418:	431a      	orrs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000422:	2201      	movs	r2, #1
 8000424:	431a      	orrs	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800042e:	23c2      	movs	r3, #194	; 0xc2
 8000430:	33ff      	adds	r3, #255	; 0xff
 8000432:	429a      	cmp	r2, r3
 8000434:	d007      	beq.n	8000446 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800043e:	4313      	orrs	r3, r2
 8000440:	68ba      	ldr	r2, [r7, #8]
 8000442:	4313      	orrs	r3, r2
 8000444:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	6812      	ldr	r2, [r2, #0]
 800044e:	68d1      	ldr	r1, [r2, #12]
 8000450:	68ba      	ldr	r2, [r7, #8]
 8000452:	430a      	orrs	r2, r1
 8000454:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	055b      	lsls	r3, r3, #21
 800045e:	429a      	cmp	r2, r3
 8000460:	d01b      	beq.n	800049a <HAL_ADC_Init+0x1da>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000466:	2b01      	cmp	r3, #1
 8000468:	d017      	beq.n	800049a <HAL_ADC_Init+0x1da>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800046e:	2b02      	cmp	r3, #2
 8000470:	d013      	beq.n	800049a <HAL_ADC_Init+0x1da>
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000476:	2b03      	cmp	r3, #3
 8000478:	d00f      	beq.n	800049a <HAL_ADC_Init+0x1da>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800047e:	2b04      	cmp	r3, #4
 8000480:	d00b      	beq.n	800049a <HAL_ADC_Init+0x1da>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000486:	2b05      	cmp	r3, #5
 8000488:	d007      	beq.n	800049a <HAL_ADC_Init+0x1da>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800048e:	2b06      	cmp	r3, #6
 8000490:	d003      	beq.n	800049a <HAL_ADC_Init+0x1da>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000496:	2b07      	cmp	r3, #7
 8000498:	d112      	bne.n	80004c0 <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	6812      	ldr	r2, [r2, #0]
 80004a2:	6952      	ldr	r2, [r2, #20]
 80004a4:	2107      	movs	r1, #7
 80004a6:	438a      	bics	r2, r1
 80004a8:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	6812      	ldr	r2, [r2, #0]
 80004b2:	6951      	ldr	r1, [r2, #20]
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80004b8:	2007      	movs	r0, #7
 80004ba:	4002      	ands	r2, r0
 80004bc:	430a      	orrs	r2, r1
 80004be:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <HAL_ADC_Init+0x278>)
 80004c8:	401a      	ands	r2, r3
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d10b      	bne.n	80004e8 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2200      	movs	r2, #0
 80004d4:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004da:	2203      	movs	r2, #3
 80004dc:	4393      	bics	r3, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	431a      	orrs	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004e6:	e01c      	b.n	8000522 <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ec:	2212      	movs	r2, #18
 80004ee:	4393      	bics	r3, r2
 80004f0:	2210      	movs	r2, #16
 80004f2:	431a      	orrs	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004fc:	2201      	movs	r2, #1
 80004fe:	431a      	orrs	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000504:	230f      	movs	r3, #15
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800050c:	e009      	b.n	8000522 <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000512:	2210      	movs	r2, #16
 8000514:	431a      	orrs	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000522:	230f      	movs	r3, #15
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	781b      	ldrb	r3, [r3, #0]
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b004      	add	sp, #16
 800052e:	bd80      	pop	{r7, pc}
 8000530:	fffffefd 	.word	0xfffffefd
 8000534:	fffe0219 	.word	0xfffe0219
 8000538:	833fffe7 	.word	0x833fffe7

0800053c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000544:	230f      	movs	r3, #15
 8000546:	18fb      	adds	r3, r7, r3
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	2204      	movs	r2, #4
 8000554:	4013      	ands	r3, r2
 8000556:	d138      	bne.n	80005ca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2240      	movs	r2, #64	; 0x40
 800055c:	5c9b      	ldrb	r3, [r3, r2]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d101      	bne.n	8000566 <HAL_ADC_Start+0x2a>
 8000562:	2302      	movs	r3, #2
 8000564:	e038      	b.n	80005d8 <HAL_ADC_Start+0x9c>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2240      	movs	r2, #64	; 0x40
 800056a:	2101      	movs	r1, #1
 800056c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d007      	beq.n	8000586 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000576:	230f      	movs	r3, #15
 8000578:	18fc      	adds	r4, r7, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fa1d 	bl	80009bc <ADC_Enable>
 8000582:	0003      	movs	r3, r0
 8000584:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000586:	230f      	movs	r3, #15
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d120      	bne.n	80005d2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000594:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <HAL_ADC_Start+0xa4>)
 8000596:	4013      	ands	r3, r2
 8000598:	2280      	movs	r2, #128	; 0x80
 800059a:	0052      	lsls	r2, r2, #1
 800059c:	431a      	orrs	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2240      	movs	r2, #64	; 0x40
 80005ac:	2100      	movs	r1, #0
 80005ae:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	221c      	movs	r2, #28
 80005b6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	6812      	ldr	r2, [r2, #0]
 80005c0:	6892      	ldr	r2, [r2, #8]
 80005c2:	2104      	movs	r1, #4
 80005c4:	430a      	orrs	r2, r1
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	e003      	b.n	80005d2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80005ca:	230f      	movs	r3, #15
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2202      	movs	r2, #2
 80005d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80005d2:	230f      	movs	r3, #15
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	781b      	ldrb	r3, [r3, #0]
}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	b005      	add	sp, #20
 80005de:	bd90      	pop	{r4, r7, pc}
 80005e0:	fffff0fe 	.word	0xfffff0fe

080005e4 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005ec:	230f      	movs	r3, #15
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2240      	movs	r2, #64	; 0x40
 80005f8:	5c9b      	ldrb	r3, [r3, r2]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d101      	bne.n	8000602 <HAL_ADC_Stop+0x1e>
 80005fe:	2302      	movs	r3, #2
 8000600:	e02c      	b.n	800065c <HAL_ADC_Stop+0x78>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2240      	movs	r2, #64	; 0x40
 8000606:	2101      	movs	r1, #1
 8000608:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800060a:	230f      	movs	r3, #15
 800060c:	18fc      	adds	r4, r7, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fab8 	bl	8000b86 <ADC_ConversionStop>
 8000616:	0003      	movs	r3, r0
 8000618:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800061a:	230f      	movs	r3, #15
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d114      	bne.n	800064e <HAL_ADC_Stop+0x6a>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000624:	230f      	movs	r3, #15
 8000626:	18fc      	adds	r4, r7, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fa42 	bl	8000ab4 <ADC_Disable>
 8000630:	0003      	movs	r3, r0
 8000632:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000634:	230f      	movs	r3, #15
 8000636:	18fb      	adds	r3, r7, r3
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d107      	bne.n	800064e <HAL_ADC_Stop+0x6a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_ADC_Stop+0x80>)
 8000644:	4013      	ands	r3, r2
 8000646:	2201      	movs	r2, #1
 8000648:	431a      	orrs	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2240      	movs	r2, #64	; 0x40
 8000652:	2100      	movs	r1, #0
 8000654:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000656:	230f      	movs	r3, #15
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	781b      	ldrb	r3, [r3, #0]
}
 800065c:	0018      	movs	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	b005      	add	sp, #20
 8000662:	bd90      	pop	{r4, r7, pc}
 8000664:	fffffefe 	.word	0xfffffefe

08000668 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	2b08      	cmp	r3, #8
 8000678:	d102      	bne.n	8000680 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800067a:	2308      	movs	r3, #8
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e013      	b.n	80006a8 <HAL_ADC_PollForConversion+0x40>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	2201      	movs	r2, #1
 8000688:	4013      	ands	r3, r2
 800068a:	d00b      	beq.n	80006a4 <HAL_ADC_PollForConversion+0x3c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000690:	2220      	movs	r2, #32
 8000692:	431a      	orrs	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2240      	movs	r2, #64	; 0x40
 800069c:	2100      	movs	r1, #0
 800069e:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e06b      	b.n	800077c <HAL_ADC_PollForConversion+0x114>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80006a4:	230c      	movs	r3, #12
 80006a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80006a8:	f7ff fde2 	bl	8000270 <HAL_GetTick>
 80006ac:	0003      	movs	r3, r0
 80006ae:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80006b0:	e019      	b.n	80006e6 <HAL_ADC_PollForConversion+0x7e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	d016      	beq.n	80006e6 <HAL_ADC_PollForConversion+0x7e>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d007      	beq.n	80006ce <HAL_ADC_PollForConversion+0x66>
 80006be:	f7ff fdd7 	bl	8000270 <HAL_GetTick>
 80006c2:	0002      	movs	r2, r0
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1ad2      	subs	r2, r2, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d90b      	bls.n	80006e6 <HAL_ADC_PollForConversion+0x7e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	2204      	movs	r2, #4
 80006d4:	431a      	orrs	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2240      	movs	r2, #64	; 0x40
 80006de:	2100      	movs	r1, #0
 80006e0:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80006e2:	2303      	movs	r3, #3
 80006e4:	e04a      	b.n	800077c <HAL_ADC_PollForConversion+0x114>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4013      	ands	r3, r2
 80006f0:	d0df      	beq.n	80006b2 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	0092      	lsls	r2, r2, #2
 80006fa:	431a      	orrs	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68da      	ldr	r2, [r3, #12]
 8000706:	23c0      	movs	r3, #192	; 0xc0
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	4013      	ands	r3, r2
 800070c:	d12d      	bne.n	800076a <HAL_ADC_PollForConversion+0x102>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6a1b      	ldr	r3, [r3, #32]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000712:	2b00      	cmp	r3, #0
 8000714:	d129      	bne.n	800076a <HAL_ADC_PollForConversion+0x102>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2208      	movs	r2, #8
 800071e:	4013      	ands	r3, r2
 8000720:	2b08      	cmp	r3, #8
 8000722:	d122      	bne.n	800076a <HAL_ADC_PollForConversion+0x102>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	2204      	movs	r2, #4
 800072c:	4013      	ands	r3, r2
 800072e:	d110      	bne.n	8000752 <HAL_ADC_PollForConversion+0xea>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	6812      	ldr	r2, [r2, #0]
 8000738:	6852      	ldr	r2, [r2, #4]
 800073a:	210c      	movs	r1, #12
 800073c:	438a      	bics	r2, r1
 800073e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000744:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <HAL_ADC_PollForConversion+0x11c>)
 8000746:	4013      	ands	r3, r2
 8000748:	2201      	movs	r2, #1
 800074a:	431a      	orrs	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	645a      	str	r2, [r3, #68]	; 0x44
 8000750:	e00b      	b.n	800076a <HAL_ADC_PollForConversion+0x102>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	2220      	movs	r2, #32
 8000758:	431a      	orrs	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000762:	2201      	movs	r2, #1
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d103      	bne.n	800077a <HAL_ADC_PollForConversion+0x112>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	220c      	movs	r2, #12
 8000778:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	b004      	add	sp, #16
 8000782:	bd80      	pop	{r7, pc}
 8000784:	fffffefe 	.word	0xfffffefe

08000788 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000796:	0018      	movs	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007aa:	230f      	movs	r3, #15
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	055b      	lsls	r3, r3, #21
 80007be:	429a      	cmp	r2, r3
 80007c0:	d011      	beq.n	80007e6 <HAL_ADC_ConfigChannel+0x46>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d00d      	beq.n	80007e6 <HAL_ADC_ConfigChannel+0x46>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d009      	beq.n	80007e6 <HAL_ADC_ConfigChannel+0x46>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d005      	beq.n	80007e6 <HAL_ADC_ConfigChannel+0x46>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007de:	2b04      	cmp	r3, #4
 80007e0:	d001      	beq.n	80007e6 <HAL_ADC_ConfigChannel+0x46>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2240      	movs	r2, #64	; 0x40
 80007ea:	5c9b      	ldrb	r3, [r3, r2]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d101      	bne.n	80007f4 <HAL_ADC_ConfigChannel+0x54>
 80007f0:	2302      	movs	r3, #2
 80007f2:	e0d1      	b.n	8000998 <HAL_ADC_ConfigChannel+0x1f8>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2240      	movs	r2, #64	; 0x40
 80007f8:	2101      	movs	r1, #1
 80007fa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	2204      	movs	r2, #4
 8000804:	4013      	ands	r3, r2
 8000806:	d000      	beq.n	800080a <HAL_ADC_ConfigChannel+0x6a>
 8000808:	e0b5      	b.n	8000976 <HAL_ADC_ConfigChannel+0x1d6>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	4a64      	ldr	r2, [pc, #400]	; (80009a0 <HAL_ADC_ConfigChannel+0x200>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d100      	bne.n	8000816 <HAL_ADC_ConfigChannel+0x76>
 8000814:	e083      	b.n	800091e <HAL_ADC_ConfigChannel+0x17e>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	6812      	ldr	r2, [r2, #0]
 800081e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	6812      	ldr	r2, [r2, #0]
 8000824:	2001      	movs	r0, #1
 8000826:	4090      	lsls	r0, r2
 8000828:	0002      	movs	r2, r0
 800082a:	430a      	orrs	r2, r1
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	055b      	lsls	r3, r3, #21
 8000836:	429a      	cmp	r2, r3
 8000838:	d037      	beq.n	80008aa <HAL_ADC_ConfigChannel+0x10a>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800083e:	2b01      	cmp	r3, #1
 8000840:	d033      	beq.n	80008aa <HAL_ADC_ConfigChannel+0x10a>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000846:	2b02      	cmp	r3, #2
 8000848:	d02f      	beq.n	80008aa <HAL_ADC_ConfigChannel+0x10a>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800084e:	2b03      	cmp	r3, #3
 8000850:	d02b      	beq.n	80008aa <HAL_ADC_ConfigChannel+0x10a>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000856:	2b04      	cmp	r3, #4
 8000858:	d027      	beq.n	80008aa <HAL_ADC_ConfigChannel+0x10a>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800085e:	2b05      	cmp	r3, #5
 8000860:	d023      	beq.n	80008aa <HAL_ADC_ConfigChannel+0x10a>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000866:	2b06      	cmp	r3, #6
 8000868:	d01f      	beq.n	80008aa <HAL_ADC_ConfigChannel+0x10a>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800086e:	2b07      	cmp	r3, #7
 8000870:	d01b      	beq.n	80008aa <HAL_ADC_ConfigChannel+0x10a>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	689a      	ldr	r2, [r3, #8]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	2107      	movs	r1, #7
 800087e:	400b      	ands	r3, r1
 8000880:	429a      	cmp	r2, r3
 8000882:	d012      	beq.n	80008aa <HAL_ADC_ConfigChannel+0x10a>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	6952      	ldr	r2, [r2, #20]
 800088e:	2107      	movs	r1, #7
 8000890:	438a      	bics	r2, r1
 8000892:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	6951      	ldr	r1, [r2, #20]
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	6892      	ldr	r2, [r2, #8]
 80008a2:	2007      	movs	r0, #7
 80008a4:	4002      	ands	r2, r0
 80008a6:	430a      	orrs	r2, r1
 80008a8:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b10      	cmp	r3, #16
 80008b0:	d007      	beq.n	80008c2 <HAL_ADC_ConfigChannel+0x122>
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b11      	cmp	r3, #17
 80008b8:	d003      	beq.n	80008c2 <HAL_ADC_ConfigChannel+0x122>
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b12      	cmp	r3, #18
 80008c0:	d163      	bne.n	800098a <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80008c2:	4a38      	ldr	r2, [pc, #224]	; (80009a4 <HAL_ADC_ConfigChannel+0x204>)
 80008c4:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <HAL_ADC_ConfigChannel+0x204>)
 80008c6:	6819      	ldr	r1, [r3, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b10      	cmp	r3, #16
 80008ce:	d009      	beq.n	80008e4 <HAL_ADC_ConfigChannel+0x144>
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b11      	cmp	r3, #17
 80008d6:	d102      	bne.n	80008de <HAL_ADC_ConfigChannel+0x13e>
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	03db      	lsls	r3, r3, #15
 80008dc:	e004      	b.n	80008e8 <HAL_ADC_ConfigChannel+0x148>
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	045b      	lsls	r3, r3, #17
 80008e2:	e001      	b.n	80008e8 <HAL_ADC_ConfigChannel+0x148>
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	041b      	lsls	r3, r3, #16
 80008e8:	430b      	orrs	r3, r1
 80008ea:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b10      	cmp	r3, #16
 80008f2:	d14a      	bne.n	800098a <HAL_ADC_ConfigChannel+0x1ea>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <HAL_ADC_ConfigChannel+0x208>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	492c      	ldr	r1, [pc, #176]	; (80009ac <HAL_ADC_ConfigChannel+0x20c>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff fc0c 	bl	8000118 <__udivsi3>
 8000900:	0003      	movs	r3, r0
 8000902:	001a      	movs	r2, r3
 8000904:	0013      	movs	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	189b      	adds	r3, r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800090e:	e002      	b.n	8000916 <HAL_ADC_ConfigChannel+0x176>
          {
            wait_loop_index--;
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	3b01      	subs	r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1f9      	bne.n	8000910 <HAL_ADC_ConfigChannel+0x170>
 800091c:	e035      	b.n	800098a <HAL_ADC_ConfigChannel+0x1ea>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	6812      	ldr	r2, [r2, #0]
 8000926:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	2001      	movs	r0, #1
 800092e:	4090      	lsls	r0, r2
 8000930:	0002      	movs	r2, r0
 8000932:	43d2      	mvns	r2, r2
 8000934:	400a      	ands	r2, r1
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b10      	cmp	r3, #16
 800093e:	d007      	beq.n	8000950 <HAL_ADC_ConfigChannel+0x1b0>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b11      	cmp	r3, #17
 8000946:	d003      	beq.n	8000950 <HAL_ADC_ConfigChannel+0x1b0>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b12      	cmp	r3, #18
 800094e:	d11c      	bne.n	800098a <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <HAL_ADC_ConfigChannel+0x204>)
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_ADC_ConfigChannel+0x204>)
 8000954:	6819      	ldr	r1, [r3, #0]
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b10      	cmp	r3, #16
 800095c:	d007      	beq.n	800096e <HAL_ADC_ConfigChannel+0x1ce>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b11      	cmp	r3, #17
 8000964:	d101      	bne.n	800096a <HAL_ADC_ConfigChannel+0x1ca>
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_ADC_ConfigChannel+0x210>)
 8000968:	e002      	b.n	8000970 <HAL_ADC_ConfigChannel+0x1d0>
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_ADC_ConfigChannel+0x214>)
 800096c:	e000      	b.n	8000970 <HAL_ADC_ConfigChannel+0x1d0>
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_ADC_ConfigChannel+0x218>)
 8000970:	400b      	ands	r3, r1
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	e009      	b.n	800098a <HAL_ADC_ConfigChannel+0x1ea>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	2220      	movs	r2, #32
 800097c:	431a      	orrs	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000982:	230f      	movs	r3, #15
 8000984:	18fb      	adds	r3, r7, r3
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2240      	movs	r2, #64	; 0x40
 800098e:	2100      	movs	r1, #0
 8000990:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000992:	230f      	movs	r3, #15
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	781b      	ldrb	r3, [r3, #0]
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b004      	add	sp, #16
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	00001001 	.word	0x00001001
 80009a4:	40012708 	.word	0x40012708
 80009a8:	20000068 	.word	0x20000068
 80009ac:	000f4240 	.word	0x000f4240
 80009b0:	ffbfffff 	.word	0xffbfffff
 80009b4:	feffffff 	.word	0xfeffffff
 80009b8:	ff7fffff 	.word	0xff7fffff

080009bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	2203      	movs	r2, #3
 80009d4:	4013      	ands	r3, r2
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d112      	bne.n	8000a00 <ADC_Enable+0x44>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2201      	movs	r2, #1
 80009e2:	4013      	ands	r3, r2
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d009      	beq.n	80009fc <ADC_Enable+0x40>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68da      	ldr	r2, [r3, #12]
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	401a      	ands	r2, r3
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d101      	bne.n	8000a00 <ADC_Enable+0x44>
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <ADC_Enable+0x46>
 8000a00:	2300      	movs	r3, #0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d14b      	bne.n	8000a9e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <ADC_Enable+0xec>)
 8000a0e:	4013      	ands	r3, r2
 8000a10:	d00d      	beq.n	8000a2e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	2210      	movs	r2, #16
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a22:	2201      	movs	r2, #1
 8000a24:	431a      	orrs	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e038      	b.n	8000aa0 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	6892      	ldr	r2, [r2, #8]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <ADC_Enable+0xf0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	491b      	ldr	r1, [pc, #108]	; (8000ab0 <ADC_Enable+0xf4>)
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fb67 	bl	8000118 <__udivsi3>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000a4e:	e002      	b.n	8000a56 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1f9      	bne.n	8000a50 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a5c:	f7ff fc08 	bl	8000270 <HAL_GetTick>
 8000a60:	0003      	movs	r3, r0
 8000a62:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000a64:	e014      	b.n	8000a90 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000a66:	f7ff fc03 	bl	8000270 <HAL_GetTick>
 8000a6a:	0002      	movs	r2, r0
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d90d      	bls.n	8000a90 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a78:	2210      	movs	r2, #16
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a84:	2201      	movs	r2, #1
 8000a86:	431a      	orrs	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e007      	b.n	8000aa0 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2201      	movs	r2, #1
 8000a98:	4013      	ands	r3, r2
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d1e3      	bne.n	8000a66 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b004      	add	sp, #16
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	80000017 	.word	0x80000017
 8000aac:	20000068 	.word	0x20000068
 8000ab0:	000f4240 	.word	0x000f4240

08000ab4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	4013      	ands	r3, r2
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d112      	bne.n	8000af4 <ADC_Disable+0x40>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d009      	beq.n	8000af0 <ADC_Disable+0x3c>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d101      	bne.n	8000af4 <ADC_Disable+0x40>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <ADC_Disable+0x42>
 8000af4:	2300      	movs	r3, #0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d040      	beq.n	8000b7c <ADC_Disable+0xc8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2205      	movs	r2, #5
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d110      	bne.n	8000b2a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	6812      	ldr	r2, [r2, #0]
 8000b10:	6892      	ldr	r2, [r2, #8]
 8000b12:	2102      	movs	r1, #2
 8000b14:	430a      	orrs	r2, r1
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b20:	f7ff fba6 	bl	8000270 <HAL_GetTick>
 8000b24:	0003      	movs	r3, r0
 8000b26:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000b28:	e022      	b.n	8000b70 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	2210      	movs	r2, #16
 8000b30:	431a      	orrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e01b      	b.n	8000b7e <ADC_Disable+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b46:	f7ff fb93 	bl	8000270 <HAL_GetTick>
 8000b4a:	0002      	movs	r2, r0
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d90d      	bls.n	8000b70 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b58:	2210      	movs	r2, #16
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b64:	2201      	movs	r2, #1
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e006      	b.n	8000b7e <ADC_Disable+0xca>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2201      	movs	r2, #1
 8000b78:	4013      	ands	r3, r2
 8000b7a:	d1e4      	bne.n	8000b46 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	0018      	movs	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b004      	add	sp, #16
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2204      	movs	r2, #4
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d033      	beq.n	8000c06 <ADC_ConversionStop+0x80>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	d00d      	beq.n	8000bc6 <ADC_ConversionStop+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000bb4:	d107      	bne.n	8000bc6 <ADC_ConversionStop+0x40>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	6812      	ldr	r2, [r2, #0]
 8000bbe:	6892      	ldr	r2, [r2, #8]
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000bc6:	f7ff fb53 	bl	8000270 <HAL_GetTick>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000bce:	e014      	b.n	8000bfa <ADC_ConversionStop+0x74>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000bd0:	f7ff fb4e 	bl	8000270 <HAL_GetTick>
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d90d      	bls.n	8000bfa <ADC_ConversionStop+0x74>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	2210      	movs	r2, #16
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bee:	2201      	movs	r2, #1
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e006      	b.n	8000c08 <ADC_ConversionStop+0x82>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	2204      	movs	r2, #4
 8000c02:	4013      	ands	r3, r2
 8000c04:	d1e4      	bne.n	8000bd0 <ADC_ConversionStop+0x4a>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b004      	add	sp, #16
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <NVIC_EnableIRQ+0x28>)
 8000c1e:	1dfa      	adds	r2, r7, #7
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	0011      	movs	r1, r2
 8000c24:	221f      	movs	r2, #31
 8000c26:	400a      	ands	r2, r1
 8000c28:	2101      	movs	r1, #1
 8000c2a:	4091      	lsls	r1, r2
 8000c2c:	000a      	movs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	0002      	movs	r2, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c50:	d932      	bls.n	8000cb8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c52:	4c2f      	ldr	r4, [pc, #188]	; (8000d10 <NVIC_SetPriority+0xd4>)
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	001a      	movs	r2, r3
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	3b08      	subs	r3, #8
 8000c60:	0899      	lsrs	r1, r3, #2
 8000c62:	4a2b      	ldr	r2, [pc, #172]	; (8000d10 <NVIC_SetPriority+0xd4>)
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	0018      	movs	r0, r3
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	4003      	ands	r3, r0
 8000c6e:	3b08      	subs	r3, #8
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	3306      	adds	r3, #6
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	18d3      	adds	r3, r2, r3
 8000c78:	3304      	adds	r3, #4
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	1dfa      	adds	r2, r7, #7
 8000c7e:	7812      	ldrb	r2, [r2, #0]
 8000c80:	0010      	movs	r0, r2
 8000c82:	2203      	movs	r2, #3
 8000c84:	4002      	ands	r2, r0
 8000c86:	00d2      	lsls	r2, r2, #3
 8000c88:	20ff      	movs	r0, #255	; 0xff
 8000c8a:	4090      	lsls	r0, r2
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	43d2      	mvns	r2, r2
 8000c90:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	019b      	lsls	r3, r3, #6
 8000c96:	20ff      	movs	r0, #255	; 0xff
 8000c98:	4018      	ands	r0, r3
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	001d      	movs	r5, r3
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	402b      	ands	r3, r5
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	4098      	lsls	r0, r3
 8000ca8:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000caa:	431a      	orrs	r2, r3
 8000cac:	1d8b      	adds	r3, r1, #6
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	18e3      	adds	r3, r4, r3
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cb6:	e027      	b.n	8000d08 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	4c16      	ldr	r4, [pc, #88]	; (8000d14 <NVIC_SetPriority+0xd8>)
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	4914      	ldr	r1, [pc, #80]	; (8000d14 <NVIC_SetPriority+0xd8>)
 8000cc4:	1dfa      	adds	r2, r7, #7
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	b252      	sxtb	r2, r2
 8000cca:	0892      	lsrs	r2, r2, #2
 8000ccc:	32c0      	adds	r2, #192	; 0xc0
 8000cce:	0092      	lsls	r2, r2, #2
 8000cd0:	5852      	ldr	r2, [r2, r1]
 8000cd2:	1df9      	adds	r1, r7, #7
 8000cd4:	7809      	ldrb	r1, [r1, #0]
 8000cd6:	0008      	movs	r0, r1
 8000cd8:	2103      	movs	r1, #3
 8000cda:	4001      	ands	r1, r0
 8000cdc:	00c9      	lsls	r1, r1, #3
 8000cde:	20ff      	movs	r0, #255	; 0xff
 8000ce0:	4088      	lsls	r0, r1
 8000ce2:	0001      	movs	r1, r0
 8000ce4:	43c9      	mvns	r1, r1
 8000ce6:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	0192      	lsls	r2, r2, #6
 8000cec:	20ff      	movs	r0, #255	; 0xff
 8000cee:	4010      	ands	r0, r2
 8000cf0:	1dfa      	adds	r2, r7, #7
 8000cf2:	7812      	ldrb	r2, [r2, #0]
 8000cf4:	0015      	movs	r5, r2
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	402a      	ands	r2, r5
 8000cfa:	00d2      	lsls	r2, r2, #3
 8000cfc:	4090      	lsls	r0, r2
 8000cfe:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d00:	430a      	orrs	r2, r1
 8000d02:	33c0      	adds	r3, #192	; 0xc0
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	511a      	str	r2, [r3, r4]
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d10:	e000ed00 	.word	0xe000ed00
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <SysTick_Config+0x40>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d901      	bls.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e010      	b.n	8000d50 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <SysTick_Config+0x44>)
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	2301      	movs	r3, #1
 8000d38:	425b      	negs	r3, r3
 8000d3a:	2103      	movs	r1, #3
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ff7d 	bl	8000c3c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SysTick_Config+0x44>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x44>)
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	00ffffff 	.word	0x00ffffff
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	1c02      	adds	r2, r0, #0
 8000d70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	0011      	movs	r1, r2
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff ff5c 	bl	8000c3c <NVIC_SetPriority>
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b004      	add	sp, #16
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	0002      	movs	r2, r0
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff ff36 	bl	8000c10 <NVIC_EnableIRQ>
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff ffae 	bl	8000d18 <SysTick_Config>
 8000dbc:	0003      	movs	r3, r0
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d106      	bne.n	8000de4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	2104      	movs	r1, #4
 8000dde:	430a      	orrs	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000de2:	e005      	b.n	8000df0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	2104      	movs	r1, #4
 8000dec:	438a      	bics	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b002      	add	sp, #8
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e04:	230f      	movs	r3, #15
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2221      	movs	r2, #33	; 0x21
 8000e10:	5c9b      	ldrb	r3, [r3, r2]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d007      	beq.n	8000e28 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e1e:	230f      	movs	r3, #15
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e028      	b.n	8000e7a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	210e      	movs	r1, #14
 8000e34:	438a      	bics	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	6812      	ldr	r2, [r2, #0]
 8000e42:	2101      	movs	r1, #1
 8000e44:	438a      	bics	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e50:	2101      	movs	r1, #1
 8000e52:	4091      	lsls	r1, r2
 8000e54:	000a      	movs	r2, r1
 8000e56:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2221      	movs	r2, #33	; 0x21
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2220      	movs	r2, #32
 8000e64:	2100      	movs	r1, #0
 8000e66:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d004      	beq.n	8000e7a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	0010      	movs	r0, r2
 8000e78:	4798      	blx	r3
    } 
  }
  return status;
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	781b      	ldrb	r3, [r3, #0]
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b004      	add	sp, #16
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e9e:	e155      	b.n	800114c <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4091      	lsls	r1, r2
 8000eaa:	000a      	movs	r2, r1
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d100      	bne.n	8000eb8 <HAL_GPIO_Init+0x30>
 8000eb6:	e146      	b.n	8001146 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x40>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b12      	cmp	r3, #18
 8000ec6:	d123      	bne.n	8000f10 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	58d3      	ldr	r3, [r2, r3]
 8000ed4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2207      	movs	r2, #7
 8000eda:	4013      	ands	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	43da      	mvns	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2107      	movs	r1, #7
 8000ef4:	400b      	ands	r3, r1
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	0013      	movs	r3, r2
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	6939      	ldr	r1, [r7, #16]
 8000f0e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d00b      	beq.n	8000f64 <HAL_GPIO_Init+0xdc>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d007      	beq.n	8000f64 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f58:	2b11      	cmp	r3, #17
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b12      	cmp	r3, #18
 8000f62:	d130      	bne.n	8000fc6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	409a      	lsls	r2, r3
 8000f72:	0013      	movs	r3, r2
 8000f74:	43da      	mvns	r2, r3
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	055b      	lsls	r3, r3, #21
 8000ffe:	4013      	ands	r3, r2
 8001000:	d100      	bne.n	8001004 <HAL_GPIO_Init+0x17c>
 8001002:	e0a0      	b.n	8001146 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	4b57      	ldr	r3, [pc, #348]	; (8001164 <HAL_GPIO_Init+0x2dc>)
 8001006:	4a57      	ldr	r2, [pc, #348]	; (8001164 <HAL_GPIO_Init+0x2dc>)
 8001008:	6992      	ldr	r2, [r2, #24]
 800100a:	2101      	movs	r1, #1
 800100c:	430a      	orrs	r2, r1
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	4b54      	ldr	r3, [pc, #336]	; (8001164 <HAL_GPIO_Init+0x2dc>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	2201      	movs	r2, #1
 8001016:	4013      	ands	r3, r2
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800101c:	4a52      	ldr	r2, [pc, #328]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	589b      	ldr	r3, [r3, r2]
 8001028:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2203      	movs	r2, #3
 800102e:	4013      	ands	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	409a      	lsls	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	43da      	mvns	r2, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	2390      	movs	r3, #144	; 0x90
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	429a      	cmp	r2, r3
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x1f6>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a47      	ldr	r2, [pc, #284]	; (800116c <HAL_GPIO_Init+0x2e4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x1f2>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a46      	ldr	r2, [pc, #280]	; (8001170 <HAL_GPIO_Init+0x2e8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x1ee>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a45      	ldr	r2, [pc, #276]	; (8001174 <HAL_GPIO_Init+0x2ec>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x1ea>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a44      	ldr	r2, [pc, #272]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x1e6>
 800106a:	2304      	movs	r3, #4
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x1f8>
 800106e:	2305      	movs	r3, #5
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x1f8>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x1f8>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x1f8>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x1f8>
 800107e:	2300      	movs	r3, #0
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	2103      	movs	r1, #3
 8001084:	400a      	ands	r2, r1
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001090:	4935      	ldr	r1, [pc, #212]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109e:	4b37      	ldr	r3, [pc, #220]	; (800117c <HAL_GPIO_Init+0x2f4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43da      	mvns	r2, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	025b      	lsls	r3, r3, #9
 80010b6:	4013      	ands	r3, r2
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_GPIO_Init+0x2f4>)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010c8:	4b2c      	ldr	r3, [pc, #176]	; (800117c <HAL_GPIO_Init+0x2f4>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43da      	mvns	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <HAL_GPIO_Init+0x2f4>)
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <HAL_GPIO_Init+0x2f4>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	035b      	lsls	r3, r3, #13
 800110a:	4013      	ands	r3, r2
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_GPIO_Init+0x2f4>)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_GPIO_Init+0x2f4>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43da      	mvns	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	039b      	lsls	r3, r3, #14
 8001134:	4013      	ands	r3, r2
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_GPIO_Init+0x2f4>)
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	40da      	lsrs	r2, r3
 8001154:	1e13      	subs	r3, r2, #0
 8001156:	d000      	beq.n	800115a <HAL_GPIO_Init+0x2d2>
 8001158:	e6a2      	b.n	8000ea0 <HAL_GPIO_Init+0x18>
  } 
}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b006      	add	sp, #24
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	48000400 	.word	0x48000400
 8001170:	48000800 	.word	0x48000800
 8001174:	48000c00 	.word	0x48000c00
 8001178:	48001000 	.word	0x48001000
 800117c:	40010400 	.word	0x40010400

08001180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	000a      	movs	r2, r1
 800118a:	1cbb      	adds	r3, r7, #2
 800118c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	1cba      	adds	r2, r7, #2
 8001194:	8812      	ldrh	r2, [r2, #0]
 8001196:	4013      	ands	r3, r2
 8001198:	d004      	beq.n	80011a4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800119a:	230f      	movs	r3, #15
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	e003      	b.n	80011ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a4:	230f      	movs	r3, #15
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	781b      	ldrb	r3, [r3, #0]
  }
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b004      	add	sp, #16
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	0008      	movs	r0, r1
 80011c4:	0011      	movs	r1, r2
 80011c6:	1cbb      	adds	r3, r7, #2
 80011c8:	1c02      	adds	r2, r0, #0
 80011ca:	801a      	strh	r2, [r3, #0]
 80011cc:	1c7b      	adds	r3, r7, #1
 80011ce:	1c0a      	adds	r2, r1, #0
 80011d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d2:	1c7b      	adds	r3, r7, #1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d004      	beq.n	80011e4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011da:	1cbb      	adds	r3, r7, #2
 80011dc:	881a      	ldrh	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e2:	e003      	b.n	80011ec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e4:	1cbb      	adds	r3, r7, #2
 80011e6:	881a      	ldrh	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2201      	movs	r2, #1
 8001206:	4013      	ands	r3, r2
 8001208:	d100      	bne.n	800120c <HAL_RCC_OscConfig+0x18>
 800120a:	e08d      	b.n	8001328 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800120c:	4bc5      	ldr	r3, [pc, #788]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	220c      	movs	r2, #12
 8001212:	4013      	ands	r3, r2
 8001214:	2b04      	cmp	r3, #4
 8001216:	d00e      	beq.n	8001236 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001218:	4bc2      	ldr	r3, [pc, #776]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	220c      	movs	r2, #12
 800121e:	4013      	ands	r3, r2
 8001220:	2b08      	cmp	r3, #8
 8001222:	d116      	bne.n	8001252 <HAL_RCC_OscConfig+0x5e>
 8001224:	4bbf      	ldr	r3, [pc, #764]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	23c0      	movs	r3, #192	; 0xc0
 800122a:	025b      	lsls	r3, r3, #9
 800122c:	401a      	ands	r2, r3
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	025b      	lsls	r3, r3, #9
 8001232:	429a      	cmp	r2, r3
 8001234:	d10d      	bne.n	8001252 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001236:	4bbb      	ldr	r3, [pc, #748]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	029b      	lsls	r3, r3, #10
 800123e:	4013      	ands	r3, r2
 8001240:	d100      	bne.n	8001244 <HAL_RCC_OscConfig+0x50>
 8001242:	e070      	b.n	8001326 <HAL_RCC_OscConfig+0x132>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d000      	beq.n	800124e <HAL_RCC_OscConfig+0x5a>
 800124c:	e06b      	b.n	8001326 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e327      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d107      	bne.n	800126a <HAL_RCC_OscConfig+0x76>
 800125a:	4bb2      	ldr	r3, [pc, #712]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 800125c:	4ab1      	ldr	r2, [pc, #708]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	0249      	lsls	r1, r1, #9
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e02f      	b.n	80012ca <HAL_RCC_OscConfig+0xd6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x98>
 8001272:	4bac      	ldr	r3, [pc, #688]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001274:	4aab      	ldr	r2, [pc, #684]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	49ab      	ldr	r1, [pc, #684]	; (8001528 <HAL_RCC_OscConfig+0x334>)
 800127a:	400a      	ands	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	4ba9      	ldr	r3, [pc, #676]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001280:	4aa8      	ldr	r2, [pc, #672]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	49a9      	ldr	r1, [pc, #676]	; (800152c <HAL_RCC_OscConfig+0x338>)
 8001286:	400a      	ands	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e01e      	b.n	80012ca <HAL_RCC_OscConfig+0xd6>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b05      	cmp	r3, #5
 8001292:	d10e      	bne.n	80012b2 <HAL_RCC_OscConfig+0xbe>
 8001294:	4ba3      	ldr	r3, [pc, #652]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001296:	4aa3      	ldr	r2, [pc, #652]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	02c9      	lsls	r1, r1, #11
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	4ba0      	ldr	r3, [pc, #640]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80012a4:	4a9f      	ldr	r2, [pc, #636]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	0249      	lsls	r1, r1, #9
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e00b      	b.n	80012ca <HAL_RCC_OscConfig+0xd6>
 80012b2:	4b9c      	ldr	r3, [pc, #624]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80012b4:	4a9b      	ldr	r2, [pc, #620]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	499b      	ldr	r1, [pc, #620]	; (8001528 <HAL_RCC_OscConfig+0x334>)
 80012ba:	400a      	ands	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	4b99      	ldr	r3, [pc, #612]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80012c0:	4a98      	ldr	r2, [pc, #608]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	4999      	ldr	r1, [pc, #612]	; (800152c <HAL_RCC_OscConfig+0x338>)
 80012c6:	400a      	ands	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d014      	beq.n	80012fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7fe ffcd 	bl	8000270 <HAL_GetTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012dc:	f7fe ffc8 	bl	8000270 <HAL_GetTick>
 80012e0:	0002      	movs	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e2d9      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b8d      	ldr	r3, [pc, #564]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	029b      	lsls	r3, r3, #10
 80012f6:	4013      	ands	r3, r2
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xe8>
 80012fa:	e015      	b.n	8001328 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7fe ffb8 	bl	8000270 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001306:	f7fe ffb3 	bl	8000270 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b64      	cmp	r3, #100	; 0x64
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e2c4      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001318:	4b82      	ldr	r3, [pc, #520]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x112>
 8001324:	e000      	b.n	8001328 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2202      	movs	r2, #2
 800132e:	4013      	ands	r3, r2
 8001330:	d100      	bne.n	8001334 <HAL_RCC_OscConfig+0x140>
 8001332:	e06c      	b.n	800140e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001334:	4b7b      	ldr	r3, [pc, #492]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	220c      	movs	r2, #12
 800133a:	4013      	ands	r3, r2
 800133c:	d00e      	beq.n	800135c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800133e:	4b79      	ldr	r3, [pc, #484]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	220c      	movs	r2, #12
 8001344:	4013      	ands	r3, r2
 8001346:	2b08      	cmp	r3, #8
 8001348:	d11f      	bne.n	800138a <HAL_RCC_OscConfig+0x196>
 800134a:	4b76      	ldr	r3, [pc, #472]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	23c0      	movs	r3, #192	; 0xc0
 8001350:	025b      	lsls	r3, r3, #9
 8001352:	401a      	ands	r2, r3
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	429a      	cmp	r2, r3
 800135a:	d116      	bne.n	800138a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135c:	4b71      	ldr	r3, [pc, #452]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2202      	movs	r2, #2
 8001362:	4013      	ands	r3, r2
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x17e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e297      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4a6c      	ldr	r2, [pc, #432]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001374:	4b6b      	ldr	r3, [pc, #428]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	21f8      	movs	r1, #248	; 0xf8
 800137a:	438b      	bics	r3, r1
 800137c:	0019      	movs	r1, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	430b      	orrs	r3, r1
 8001386:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001388:	e041      	b.n	800140e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d024      	beq.n	80013dc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001392:	4b64      	ldr	r3, [pc, #400]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001394:	4a63      	ldr	r2, [pc, #396]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7fe ff67 	bl	8000270 <HAL_GetTick>
 80013a2:	0003      	movs	r3, r0
 80013a4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a8:	f7fe ff62 	bl	8000270 <HAL_GetTick>
 80013ac:	0002      	movs	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e273      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ba:	4b5a      	ldr	r3, [pc, #360]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d0f1      	beq.n	80013a8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4a57      	ldr	r2, [pc, #348]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80013c6:	4b57      	ldr	r3, [pc, #348]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	21f8      	movs	r1, #248	; 0xf8
 80013cc:	438b      	bics	r3, r1
 80013ce:	0019      	movs	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	430b      	orrs	r3, r1
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e018      	b.n	800140e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013dc:	4b51      	ldr	r3, [pc, #324]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80013de:	4a51      	ldr	r2, [pc, #324]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	2101      	movs	r1, #1
 80013e4:	438a      	bics	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7fe ff42 	bl	8000270 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7fe ff3d 	bl	8000270 <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e24e      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001404:	4b47      	ldr	r3, [pc, #284]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2202      	movs	r2, #2
 800140a:	4013      	ands	r3, r2
 800140c:	d1f1      	bne.n	80013f2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2208      	movs	r2, #8
 8001414:	4013      	ands	r3, r2
 8001416:	d036      	beq.n	8001486 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d019      	beq.n	8001454 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001420:	4b40      	ldr	r3, [pc, #256]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001422:	4a40      	ldr	r2, [pc, #256]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001426:	2101      	movs	r1, #1
 8001428:	430a      	orrs	r2, r1
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142c:	f7fe ff20 	bl	8000270 <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001436:	f7fe ff1b 	bl	8000270 <HAL_GetTick>
 800143a:	0002      	movs	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e22c      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001448:	4b36      	ldr	r3, [pc, #216]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	2202      	movs	r2, #2
 800144e:	4013      	ands	r3, r2
 8001450:	d0f1      	beq.n	8001436 <HAL_RCC_OscConfig+0x242>
 8001452:	e018      	b.n	8001486 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001456:	4a33      	ldr	r2, [pc, #204]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001458:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800145a:	2101      	movs	r1, #1
 800145c:	438a      	bics	r2, r1
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001460:	f7fe ff06 	bl	8000270 <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
 8001466:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146a:	f7fe ff01 	bl	8000270 <HAL_GetTick>
 800146e:	0002      	movs	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e212      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	2202      	movs	r2, #2
 8001482:	4013      	ands	r3, r2
 8001484:	d1f1      	bne.n	800146a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2204      	movs	r2, #4
 800148c:	4013      	ands	r3, r2
 800148e:	d100      	bne.n	8001492 <HAL_RCC_OscConfig+0x29e>
 8001490:	e0b6      	b.n	8001600 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001492:	2317      	movs	r3, #23
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 800149c:	69da      	ldr	r2, [r3, #28]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	055b      	lsls	r3, r3, #21
 80014a2:	4013      	ands	r3, r2
 80014a4:	d111      	bne.n	80014ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80014a8:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80014aa:	69d2      	ldr	r2, [r2, #28]
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	0549      	lsls	r1, r1, #21
 80014b0:	430a      	orrs	r2, r1
 80014b2:	61da      	str	r2, [r3, #28]
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 80014b6:	69da      	ldr	r2, [r3, #28]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	055b      	lsls	r3, r3, #21
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014c2:	2317      	movs	r3, #23
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_RCC_OscConfig+0x33c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4013      	ands	r3, r2
 80014d4:	d11a      	bne.n	800150c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_RCC_OscConfig+0x33c>)
 80014d8:	4a15      	ldr	r2, [pc, #84]	; (8001530 <HAL_RCC_OscConfig+0x33c>)
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	0049      	lsls	r1, r1, #1
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e4:	f7fe fec4 	bl	8000270 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7fe febf 	bl	8000270 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b64      	cmp	r3, #100	; 0x64
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e1d0      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_RCC_OscConfig+0x33c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4013      	ands	r3, r2
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d10f      	bne.n	8001534 <HAL_RCC_OscConfig+0x340>
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001516:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001518:	6a12      	ldr	r2, [r2, #32]
 800151a:	2101      	movs	r1, #1
 800151c:	430a      	orrs	r2, r1
 800151e:	621a      	str	r2, [r3, #32]
 8001520:	e036      	b.n	8001590 <HAL_RCC_OscConfig+0x39c>
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	40021000 	.word	0x40021000
 8001528:	fffeffff 	.word	0xfffeffff
 800152c:	fffbffff 	.word	0xfffbffff
 8001530:	40007000 	.word	0x40007000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10c      	bne.n	8001556 <HAL_RCC_OscConfig+0x362>
 800153c:	4bc9      	ldr	r3, [pc, #804]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 800153e:	4ac9      	ldr	r2, [pc, #804]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001540:	6a12      	ldr	r2, [r2, #32]
 8001542:	2101      	movs	r1, #1
 8001544:	438a      	bics	r2, r1
 8001546:	621a      	str	r2, [r3, #32]
 8001548:	4bc6      	ldr	r3, [pc, #792]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 800154a:	4ac6      	ldr	r2, [pc, #792]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 800154c:	6a12      	ldr	r2, [r2, #32]
 800154e:	2104      	movs	r1, #4
 8001550:	438a      	bics	r2, r1
 8001552:	621a      	str	r2, [r3, #32]
 8001554:	e01c      	b.n	8001590 <HAL_RCC_OscConfig+0x39c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b05      	cmp	r3, #5
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0x384>
 800155e:	4bc1      	ldr	r3, [pc, #772]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001560:	4ac0      	ldr	r2, [pc, #768]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001562:	6a12      	ldr	r2, [r2, #32]
 8001564:	2104      	movs	r1, #4
 8001566:	430a      	orrs	r2, r1
 8001568:	621a      	str	r2, [r3, #32]
 800156a:	4bbe      	ldr	r3, [pc, #760]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 800156c:	4abd      	ldr	r2, [pc, #756]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 800156e:	6a12      	ldr	r2, [r2, #32]
 8001570:	2101      	movs	r1, #1
 8001572:	430a      	orrs	r2, r1
 8001574:	621a      	str	r2, [r3, #32]
 8001576:	e00b      	b.n	8001590 <HAL_RCC_OscConfig+0x39c>
 8001578:	4bba      	ldr	r3, [pc, #744]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 800157a:	4aba      	ldr	r2, [pc, #744]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 800157c:	6a12      	ldr	r2, [r2, #32]
 800157e:	2101      	movs	r1, #1
 8001580:	438a      	bics	r2, r1
 8001582:	621a      	str	r2, [r3, #32]
 8001584:	4bb7      	ldr	r3, [pc, #732]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001586:	4ab7      	ldr	r2, [pc, #732]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001588:	6a12      	ldr	r2, [r2, #32]
 800158a:	2104      	movs	r1, #4
 800158c:	438a      	bics	r2, r1
 800158e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d014      	beq.n	80015c2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7fe fe6a 	bl	8000270 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	e009      	b.n	80015b6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7fe fe65 	bl	8000270 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	4aae      	ldr	r2, [pc, #696]	; (8001868 <HAL_RCC_OscConfig+0x674>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e175      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b6:	4bab      	ldr	r3, [pc, #684]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3ae>
 80015c0:	e013      	b.n	80015ea <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7fe fe55 	bl	8000270 <HAL_GetTick>
 80015c6:	0003      	movs	r3, r0
 80015c8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ca:	e009      	b.n	80015e0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f7fe fe50 	bl	8000270 <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	4aa4      	ldr	r2, [pc, #656]	; (8001868 <HAL_RCC_OscConfig+0x674>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e160      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e0:	4ba0      	ldr	r3, [pc, #640]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	2202      	movs	r2, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ea:	2317      	movs	r3, #23
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d105      	bne.n	8001600 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f4:	4b9b      	ldr	r3, [pc, #620]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80015f6:	4a9b      	ldr	r2, [pc, #620]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80015f8:	69d2      	ldr	r2, [r2, #28]
 80015fa:	499c      	ldr	r1, [pc, #624]	; (800186c <HAL_RCC_OscConfig+0x678>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2210      	movs	r2, #16
 8001606:	4013      	ands	r3, r2
 8001608:	d063      	beq.n	80016d2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d12a      	bne.n	8001668 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001612:	4b94      	ldr	r3, [pc, #592]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001614:	4a93      	ldr	r2, [pc, #588]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001616:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001618:	2104      	movs	r1, #4
 800161a:	430a      	orrs	r2, r1
 800161c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800161e:	4b91      	ldr	r3, [pc, #580]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001620:	4a90      	ldr	r2, [pc, #576]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001622:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001624:	2101      	movs	r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7fe fe21 	bl	8000270 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001634:	f7fe fe1c 	bl	8000270 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e12d      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001646:	4b87      	ldr	r3, [pc, #540]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d0f1      	beq.n	8001634 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001650:	4a84      	ldr	r2, [pc, #528]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001652:	4b84      	ldr	r3, [pc, #528]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001656:	21f8      	movs	r1, #248	; 0xf8
 8001658:	438b      	bics	r3, r1
 800165a:	0019      	movs	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	430b      	orrs	r3, r1
 8001664:	6353      	str	r3, [r2, #52]	; 0x34
 8001666:	e034      	b.n	80016d2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	3305      	adds	r3, #5
 800166e:	d111      	bne.n	8001694 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001670:	4b7c      	ldr	r3, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001672:	4a7c      	ldr	r2, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001674:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001676:	2104      	movs	r1, #4
 8001678:	438a      	bics	r2, r1
 800167a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800167c:	4a79      	ldr	r2, [pc, #484]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 800167e:	4b79      	ldr	r3, [pc, #484]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001682:	21f8      	movs	r1, #248	; 0xf8
 8001684:	438b      	bics	r3, r1
 8001686:	0019      	movs	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	430b      	orrs	r3, r1
 8001690:	6353      	str	r3, [r2, #52]	; 0x34
 8001692:	e01e      	b.n	80016d2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001694:	4b73      	ldr	r3, [pc, #460]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001696:	4a73      	ldr	r2, [pc, #460]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001698:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800169a:	2104      	movs	r1, #4
 800169c:	430a      	orrs	r2, r1
 800169e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016a0:	4b70      	ldr	r3, [pc, #448]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80016a2:	4a70      	ldr	r2, [pc, #448]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80016a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016a6:	2101      	movs	r1, #1
 80016a8:	438a      	bics	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7fe fde0 	bl	8000270 <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016b6:	f7fe fddb 	bl	8000270 <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0ec      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016c8:	4b66      	ldr	r3, [pc, #408]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80016ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016cc:	2202      	movs	r2, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f1      	bne.n	80016b6 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2220      	movs	r2, #32
 80016d8:	4013      	ands	r3, r2
 80016da:	d05c      	beq.n	8001796 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016dc:	4b61      	ldr	r3, [pc, #388]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	220c      	movs	r2, #12
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	d00e      	beq.n	8001706 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016e8:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	220c      	movs	r2, #12
 80016ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d114      	bne.n	800171e <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016f4:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	23c0      	movs	r3, #192	; 0xc0
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	401a      	ands	r2, r3
 80016fe:	23c0      	movs	r3, #192	; 0xc0
 8001700:	025b      	lsls	r3, r3, #9
 8001702:	429a      	cmp	r2, r3
 8001704:	d10b      	bne.n	800171e <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001706:	4b57      	ldr	r3, [pc, #348]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	025b      	lsls	r3, r3, #9
 800170e:	4013      	ands	r3, r2
 8001710:	d040      	beq.n	8001794 <HAL_RCC_OscConfig+0x5a0>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d03c      	beq.n	8001794 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0c1      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d01b      	beq.n	800175e <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001726:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001728:	4a4e      	ldr	r2, [pc, #312]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 800172a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0249      	lsls	r1, r1, #9
 8001730:	430a      	orrs	r2, r1
 8001732:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7fe fd9c 	bl	8000270 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800173e:	f7fe fd97 	bl	8000270 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0a8      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001750:	4b44      	ldr	r3, [pc, #272]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	4013      	ands	r3, r2
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x54a>
 800175c:	e01b      	b.n	8001796 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001760:	4a40      	ldr	r2, [pc, #256]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001762:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001764:	4942      	ldr	r1, [pc, #264]	; (8001870 <HAL_RCC_OscConfig+0x67c>)
 8001766:	400a      	ands	r2, r1
 8001768:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7fe fd81 	bl	8000270 <HAL_GetTick>
 800176e:	0003      	movs	r3, r0
 8001770:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001774:	f7fe fd7c 	bl	8000270 <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e08d      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001786:	4b37      	ldr	r3, [pc, #220]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	025b      	lsls	r3, r3, #9
 800178e:	4013      	ands	r3, r2
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x580>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001794:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5ac>
 800179e:	e07f      	b.n	80018a0 <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a0:	4b30      	ldr	r3, [pc, #192]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	220c      	movs	r2, #12
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d100      	bne.n	80017ae <HAL_RCC_OscConfig+0x5ba>
 80017ac:	e076      	b.n	800189c <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d14b      	bne.n	800184e <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80017b8:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	492d      	ldr	r1, [pc, #180]	; (8001874 <HAL_RCC_OscConfig+0x680>)
 80017be:	400a      	ands	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7fe fd55 	bl	8000270 <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7fe fd50 	bl	8000270 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e061      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	049b      	lsls	r3, r3, #18
 80017e6:	4013      	ands	r3, r2
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ea:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	210f      	movs	r1, #15
 80017f2:	438b      	bics	r3, r1
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	430b      	orrs	r3, r1
 80017fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017fe:	4a19      	ldr	r2, [pc, #100]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	491c      	ldr	r1, [pc, #112]	; (8001878 <HAL_RCC_OscConfig+0x684>)
 8001806:	4019      	ands	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	4303      	orrs	r3, r0
 8001812:	430b      	orrs	r3, r1
 8001814:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001818:	4a12      	ldr	r2, [pc, #72]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0449      	lsls	r1, r1, #17
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7fe fd24 	bl	8000270 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182e:	f7fe fd1f 	bl	8000270 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e030      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	049b      	lsls	r3, r3, #18
 8001848:	4013      	ands	r3, r2
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x63a>
 800184c:	e028      	b.n	80018a0 <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	4907      	ldr	r1, [pc, #28]	; (8001874 <HAL_RCC_OscConfig+0x680>)
 8001856:	400a      	ands	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7fe fd09 	bl	8000270 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001862:	e014      	b.n	800188e <HAL_RCC_OscConfig+0x69a>
 8001864:	40021000 	.word	0x40021000
 8001868:	00001388 	.word	0x00001388
 800186c:	efffffff 	.word	0xefffffff
 8001870:	fffeffff 	.word	0xfffeffff
 8001874:	feffffff 	.word	0xfeffffff
 8001878:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7fe fcf8 	bl	8000270 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e009      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <HAL_RCC_OscConfig+0x6b8>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	049b      	lsls	r3, r3, #18
 8001896:	4013      	ands	r3, r2
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x688>
 800189a:	e001      	b.n	80018a0 <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	0018      	movs	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b006      	add	sp, #24
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018be:	4b7a      	ldr	r3, [pc, #488]	; (8001aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2201      	movs	r2, #1
 80018c4:	401a      	ands	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d211      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018cc:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80018ce:	4a76      	ldr	r2, [pc, #472]	; (8001aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	2101      	movs	r1, #1
 80018d4:	438a      	bics	r2, r1
 80018d6:	0011      	movs	r1, r2
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018de:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2201      	movs	r2, #1
 80018e4:	401a      	ands	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0d7      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2202      	movs	r2, #2
 80018f6:	4013      	ands	r3, r2
 80018f8:	d009      	beq.n	800190e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018fa:	4a6c      	ldr	r2, [pc, #432]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 80018fc:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	21f0      	movs	r1, #240	; 0xf0
 8001902:	438b      	bics	r3, r1
 8001904:	0019      	movs	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	430b      	orrs	r3, r1
 800190c:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2201      	movs	r2, #1
 8001914:	4013      	ands	r3, r2
 8001916:	d100      	bne.n	800191a <HAL_RCC_ClockConfig+0x6a>
 8001918:	e089      	b.n	8001a2e <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b62      	ldr	r3, [pc, #392]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	029b      	lsls	r3, r3, #10
 800192a:	4013      	ands	r3, r2
 800192c:	d120      	bne.n	8001970 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0b6      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193a:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	049b      	lsls	r3, r3, #18
 8001942:	4013      	ands	r3, r2
 8001944:	d114      	bne.n	8001970 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0aa      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001952:	4b56      	ldr	r3, [pc, #344]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 8001954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	025b      	lsls	r3, r3, #9
 800195a:	4013      	ands	r3, r2
 800195c:	d108      	bne.n	8001970 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e09e      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	4b52      	ldr	r3, [pc, #328]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e097      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001970:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 8001972:	4b4e      	ldr	r3, [pc, #312]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2103      	movs	r1, #3
 8001978:	438b      	bics	r3, r1
 800197a:	0019      	movs	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	430b      	orrs	r3, r1
 8001982:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001984:	f7fe fc74 	bl	8000270 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d111      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001994:	e009      	b.n	80019aa <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001996:	f7fe fc6b 	bl	8000270 <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	4a43      	ldr	r2, [pc, #268]	; (8001ab0 <HAL_RCC_ClockConfig+0x200>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e07a      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019aa:	4b40      	ldr	r3, [pc, #256]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	220c      	movs	r2, #12
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d1ef      	bne.n	8001996 <HAL_RCC_ClockConfig+0xe6>
 80019b6:	e03a      	b.n	8001a2e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d111      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c0:	e009      	b.n	80019d6 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c2:	f7fe fc55 	bl	8000270 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	4a38      	ldr	r2, [pc, #224]	; (8001ab0 <HAL_RCC_ClockConfig+0x200>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e064      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d6:	4b35      	ldr	r3, [pc, #212]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	220c      	movs	r2, #12
 80019dc:	4013      	ands	r3, r2
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d1ef      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x112>
 80019e2:	e024      	b.n	8001a2e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d11b      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80019ec:	e009      	b.n	8001a02 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ee:	f7fe fc3f 	bl	8000270 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	4a2d      	ldr	r2, [pc, #180]	; (8001ab0 <HAL_RCC_ClockConfig+0x200>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e04e      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001a02:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	220c      	movs	r2, #12
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d1ef      	bne.n	80019ee <HAL_RCC_ClockConfig+0x13e>
 8001a0e:	e00e      	b.n	8001a2e <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7fe fc2e 	bl	8000270 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <HAL_RCC_ClockConfig+0x200>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e03d      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	220c      	movs	r2, #12
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2201      	movs	r2, #1
 8001a34:	401a      	ands	r2, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d911      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3e:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	2101      	movs	r1, #1
 8001a44:	438a      	bics	r2, r1
 8001a46:	0011      	movs	r1, r2
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2201      	movs	r2, #1
 8001a54:	401a      	ands	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e01f      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2204      	movs	r2, #4
 8001a66:	4013      	ands	r3, r2
 8001a68:	d008      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4910      	ldr	r1, [pc, #64]	; (8001ab4 <HAL_RCC_ClockConfig+0x204>)
 8001a72:	4019      	ands	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a7c:	f000 f820 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001a80:	0001      	movs	r1, r0
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_RCC_ClockConfig+0x1fc>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	220f      	movs	r2, #15
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_RCC_ClockConfig+0x208>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	000a      	movs	r2, r1
 8001a92:	40da      	lsrs	r2, r3
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_RCC_ClockConfig+0x20c>)
 8001a96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f004 ff0b 	bl	80068b4 <HAL_InitTick>
  
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b004      	add	sp, #16
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	00001388 	.word	0x00001388
 8001ab4:	fffff8ff 	.word	0xfffff8ff
 8001ab8:	08007a70 	.word	0x08007a70
 8001abc:	20000068 	.word	0x20000068

08001ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b08f      	sub	sp, #60	; 0x3c
 8001ac4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ac6:	2314      	movs	r3, #20
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	4a37      	ldr	r2, [pc, #220]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001acc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ace:	c313      	stmia	r3!, {r0, r1, r4}
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	4a35      	ldr	r2, [pc, #212]	; (8001bac <HAL_RCC_GetSysClockFreq+0xec>)
 8001ad8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ada:	c313      	stmia	r3!, {r0, r1, r4}
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	220c      	movs	r2, #12
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d006      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x52>
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d043      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0xd0>
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d144      	bne.n	8001b96 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b10:	e044      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	0c9b      	lsrs	r3, r3, #18
 8001b16:	220f      	movs	r2, #15
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2214      	movs	r2, #20
 8001b1c:	18ba      	adds	r2, r7, r2
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	220f      	movs	r2, #15
 8001b28:	4013      	ands	r3, r2
 8001b2a:	1d3a      	adds	r2, r7, #4
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b32:	23c0      	movs	r3, #192	; 0xc0
 8001b34:	025b      	lsls	r3, r3, #9
 8001b36:	401a      	ands	r2, r3
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	025b      	lsls	r3, r3, #9
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d109      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b42:	481c      	ldr	r0, [pc, #112]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b44:	f7fe fae8 	bl	8000118 <__udivsi3>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	4353      	muls	r3, r2
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
 8001b52:	e01a      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b56:	23c0      	movs	r3, #192	; 0xc0
 8001b58:	025b      	lsls	r3, r3, #9
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d109      	bne.n	8001b78 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b68:	f7fe fad6 	bl	8000118 <__udivsi3>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	001a      	movs	r2, r3
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	4353      	muls	r3, r2
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b7a:	480e      	ldr	r0, [pc, #56]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b7c:	f7fe facc 	bl	8000118 <__udivsi3>
 8001b80:	0003      	movs	r3, r0
 8001b82:	001a      	movs	r2, r3
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	4353      	muls	r3, r2
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b8e:	e005      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b94:	e002      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b00f      	add	sp, #60	; 0x3c
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	08007688 	.word	0x08007688
 8001bac:	08007698 	.word	0x08007698
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	007a1200 	.word	0x007a1200
 8001bb8:	02dc6c00 	.word	0x02dc6c00

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	20000068 	.word	0x20000068

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bd4:	f7ff fff2 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bd8:	0001      	movs	r1, r0
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	2207      	movs	r2, #7
 8001be2:	4013      	ands	r3, r2
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	40d9      	lsrs	r1, r3
 8001bea:	000b      	movs	r3, r1
}    
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08007a80 	.word	0x08007a80

08001bfc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2207      	movs	r2, #7
 8001c0a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_RCC_GetClockConfig+0x4c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2203      	movs	r2, #3
 8001c12:	401a      	ands	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_GetClockConfig+0x4c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	22f0      	movs	r2, #240	; 0xf0
 8001c1e:	401a      	ands	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_RCC_GetClockConfig+0x4c>)
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	23e0      	movs	r3, #224	; 0xe0
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_GetClockConfig+0x50>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2201      	movs	r2, #1
 8001c38:	401a      	ands	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	601a      	str	r2, [r3, #0]
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40022000 	.word	0x40022000

08001c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	025b      	lsls	r3, r3, #9
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c6c:	e08e      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c6e:	2317      	movs	r3, #23
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b6e      	ldr	r3, [pc, #440]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	055b      	lsls	r3, r3, #21
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d111      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b6b      	ldr	r3, [pc, #428]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c84:	4a6a      	ldr	r2, [pc, #424]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c86:	69d2      	ldr	r2, [r2, #28]
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	0549      	lsls	r1, r1, #21
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	61da      	str	r2, [r3, #28]
 8001c90:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c92:	69da      	ldr	r2, [r3, #28]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	055b      	lsls	r3, r3, #21
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9e:	2317      	movs	r3, #23
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b63      	ldr	r3, [pc, #396]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d11a      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb2:	4b60      	ldr	r3, [pc, #384]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cb4:	4a5f      	ldr	r2, [pc, #380]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	0049      	lsls	r1, r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc0:	f7fe fad6 	bl	8000270 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	e008      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7fe fad1 	bl	8000270 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b64      	cmp	r3, #100	; 0x64
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0a4      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	4b55      	ldr	r3, [pc, #340]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ce8:	4b51      	ldr	r3, [pc, #324]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cea:	6a1a      	ldr	r2, [r3, #32]
 8001cec:	23c0      	movs	r3, #192	; 0xc0
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d034      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	23c0      	movs	r3, #192	; 0xc0
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	401a      	ands	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d02c      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a4a      	ldr	r2, [pc, #296]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d14:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d16:	4a46      	ldr	r2, [pc, #280]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d18:	6a12      	ldr	r2, [r2, #32]
 8001d1a:	2180      	movs	r1, #128	; 0x80
 8001d1c:	0249      	lsls	r1, r1, #9
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d22:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d24:	4a42      	ldr	r2, [pc, #264]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d26:	6a12      	ldr	r2, [r2, #32]
 8001d28:	4944      	ldr	r1, [pc, #272]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d2e:	4b40      	ldr	r3, [pc, #256]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d013      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7fe fa98 	bl	8000270 <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	e009      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7fe fa93 	bl	8000270 <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	4a3b      	ldr	r2, [pc, #236]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e065      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d64:	4a32      	ldr	r2, [pc, #200]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d66:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4933      	ldr	r1, [pc, #204]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d6c:	4019      	ands	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	430b      	orrs	r3, r1
 8001d74:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d76:	2317      	movs	r3, #23
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d80:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d82:	4a2b      	ldr	r2, [pc, #172]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d84:	69d2      	ldr	r2, [r2, #28]
 8001d86:	492f      	ldr	r1, [pc, #188]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001d88:	400a      	ands	r2, r1
 8001d8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	d009      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d96:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	2103      	movs	r1, #3
 8001d9e:	438b      	bics	r3, r1
 8001da0:	0019      	movs	r1, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	430b      	orrs	r3, r1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2202      	movs	r2, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001db4:	4a1e      	ldr	r2, [pc, #120]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4923      	ldr	r1, [pc, #140]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dbc:	4019      	ands	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d009      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dd0:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	2110      	movs	r1, #16
 8001dd8:	438b      	bics	r3, r1
 8001dda:	0019      	movs	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	029b      	lsls	r3, r3, #10
 8001dec:	4013      	ands	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001df0:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	2180      	movs	r1, #128	; 0x80
 8001df8:	438b      	bics	r3, r1
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d009      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	2140      	movs	r1, #64	; 0x40
 8001e18:	438b      	bics	r3, r1
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	430b      	orrs	r3, r1
 8001e22:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b006      	add	sp, #24
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40007000 	.word	0x40007000
 8001e38:	fffffcff 	.word	0xfffffcff
 8001e3c:	fffeffff 	.word	0xfffeffff
 8001e40:	00001388 	.word	0x00001388
 8001e44:	efffffff 	.word	0xefffffff
 8001e48:	fffcffff 	.word	0xfffcffff

08001e4c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e01e      	b.n	8001e9c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	223d      	movs	r2, #61	; 0x3d
 8001e62:	5c9b      	ldrb	r3, [r3, r2]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d107      	bne.n	8001e7a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	223c      	movs	r2, #60	; 0x3c
 8001e6e:	2100      	movs	r1, #0
 8001e70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f004 fb6d 	bl	8006554 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	223d      	movs	r2, #61	; 0x3d
 8001e7e:	2102      	movs	r1, #2
 8001e80:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	0010      	movs	r0, r2
 8001e8e:	f000 fb8b 	bl	80025a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	223d      	movs	r2, #61	; 0x3d
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	68d2      	ldr	r2, [r2, #12]
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	68d2      	ldr	r2, [r2, #12]
 8001eea:	2101      	movs	r1, #1
 8001eec:	438a      	bics	r2, r1
 8001eee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <HAL_TIM_Base_Stop_IT+0x4c>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d10d      	bne.n	8001f18 <HAL_TIM_Base_Stop_IT+0x40>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_TIM_Base_Stop_IT+0x50>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	d107      	bne.n	8001f18 <HAL_TIM_Base_Stop_IT+0x40>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	2101      	movs	r1, #1
 8001f14:	438a      	bics	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b002      	add	sp, #8
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	00001111 	.word	0x00001111
 8001f28:	00000444 	.word	0x00000444

08001f2c <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e01e      	b.n	8001f7c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	223d      	movs	r2, #61	; 0x3d
 8001f42:	5c9b      	ldrb	r3, [r3, r2]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223c      	movs	r2, #60	; 0x3c
 8001f4e:	2100      	movs	r1, #0
 8001f50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f004 facb 	bl	80064f0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	223d      	movs	r2, #61	; 0x3d
 8001f5e:	2102      	movs	r1, #2
 8001f60:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	0010      	movs	r0, r2
 8001f6e:	f000 fb1b 	bl	80025a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	223d      	movs	r2, #61	; 0x3d
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 fe46 	bl	8002c28 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <HAL_TIM_PWM_Start+0x78>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_TIM_PWM_Start+0x40>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <HAL_TIM_PWM_Start+0x7c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_TIM_PWM_Start+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a13      	ldr	r2, [pc, #76]	; (8002004 <HAL_TIM_PWM_Start+0x80>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_TIM_PWM_Start+0x40>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <HAL_TIM_PWM_Start+0x84>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_TIM_PWM_Start+0x44>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_TIM_PWM_Start+0x46>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d008      	beq.n	8001fe0 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fd8:	2180      	movs	r1, #128	; 0x80
 8001fda:	0209      	lsls	r1, r1, #8
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	2101      	movs	r1, #1
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40012c00 	.word	0x40012c00
 8002000:	40014000 	.word	0x40014000
 8002004:	40014400 	.word	0x40014400
 8002008:	40014800 	.word	0x40014800

0800200c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	2b02      	cmp	r3, #2
 8002020:	d124      	bne.n	800206c <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2202      	movs	r2, #2
 800202a:	4013      	ands	r3, r2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d11d      	bne.n	800206c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2203      	movs	r2, #3
 8002036:	4252      	negs	r2, r2
 8002038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2203      	movs	r2, #3
 8002048:	4013      	ands	r3, r2
 800204a:	d004      	beq.n	8002056 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0018      	movs	r0, r3
 8002050:	f000 fa92 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 8002054:	e007      	b.n	8002066 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	0018      	movs	r0, r3
 800205a:	f000 fa85 	bl	8002568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0018      	movs	r0, r3
 8002062:	f000 fa91 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2204      	movs	r2, #4
 8002074:	4013      	ands	r3, r2
 8002076:	2b04      	cmp	r3, #4
 8002078:	d125      	bne.n	80020c6 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2204      	movs	r2, #4
 8002082:	4013      	ands	r3, r2
 8002084:	2b04      	cmp	r3, #4
 8002086:	d11e      	bne.n	80020c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2205      	movs	r2, #5
 800208e:	4252      	negs	r2, r2
 8002090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	23c0      	movs	r3, #192	; 0xc0
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d004      	beq.n	80020b0 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 fa65 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 80020ae:	e007      	b.n	80020c0 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 fa58 	bl	8002568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 fa64 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2208      	movs	r2, #8
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d124      	bne.n	800211e <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2208      	movs	r2, #8
 80020dc:	4013      	ands	r3, r2
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d11d      	bne.n	800211e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2209      	movs	r2, #9
 80020e8:	4252      	negs	r2, r2
 80020ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2204      	movs	r2, #4
 80020f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	2203      	movs	r2, #3
 80020fa:	4013      	ands	r3, r2
 80020fc:	d004      	beq.n	8002108 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0018      	movs	r0, r3
 8002102:	f000 fa39 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 8002106:	e007      	b.n	8002118 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	0018      	movs	r0, r3
 800210c:	f000 fa2c 	bl	8002568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	0018      	movs	r0, r3
 8002114:	f000 fa38 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2210      	movs	r2, #16
 8002126:	4013      	ands	r3, r2
 8002128:	2b10      	cmp	r3, #16
 800212a:	d125      	bne.n	8002178 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2210      	movs	r2, #16
 8002134:	4013      	ands	r3, r2
 8002136:	2b10      	cmp	r3, #16
 8002138:	d11e      	bne.n	8002178 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2211      	movs	r2, #17
 8002140:	4252      	negs	r2, r2
 8002142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2208      	movs	r2, #8
 8002148:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	23c0      	movs	r3, #192	; 0xc0
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d004      	beq.n	8002162 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0018      	movs	r0, r3
 800215c:	f000 fa0c 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 8002160:	e007      	b.n	8002172 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0018      	movs	r0, r3
 8002166:	f000 f9ff 	bl	8002568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 fa0b 	bl	8002588 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2201      	movs	r2, #1
 8002180:	4013      	ands	r3, r2
 8002182:	2b01      	cmp	r3, #1
 8002184:	d10f      	bne.n	80021a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	4013      	ands	r3, r2
 8002190:	2b01      	cmp	r3, #1
 8002192:	d108      	bne.n	80021a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2202      	movs	r2, #2
 800219a:	4252      	negs	r2, r2
 800219c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f004 f865 	bl	8006270 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b80      	cmp	r3, #128	; 0x80
 80021b2:	d10f      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	4013      	ands	r3, r2
 80021be:	2b80      	cmp	r3, #128	; 0x80
 80021c0:	d108      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2281      	movs	r2, #129	; 0x81
 80021c8:	4252      	negs	r2, r2
 80021ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 fe04 	bl	8002ddc <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	4013      	ands	r3, r2
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d10f      	bne.n	8002202 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2240      	movs	r2, #64	; 0x40
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	d108      	bne.n	8002202 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2241      	movs	r2, #65	; 0x41
 80021f6:	4252      	negs	r2, r2
 80021f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 f9cb 	bl	8002598 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2220      	movs	r2, #32
 800220a:	4013      	ands	r3, r2
 800220c:	2b20      	cmp	r3, #32
 800220e:	d10f      	bne.n	8002230 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	4013      	ands	r3, r2
 800221a:	2b20      	cmp	r3, #32
 800221c:	d108      	bne.n	8002230 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2221      	movs	r2, #33	; 0x21
 8002224:	4252      	negs	r2, r2
 8002226:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	0018      	movs	r0, r3
 800222c:	f000 fdce 	bl	8002dcc <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	223c      	movs	r2, #60	; 0x3c
 8002248:	5c9b      	ldrb	r3, [r3, r2]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800224e:	2302      	movs	r3, #2
 8002250:	e0a4      	b.n	800239c <HAL_TIM_PWM_ConfigChannel+0x164>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	223c      	movs	r2, #60	; 0x3c
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	223d      	movs	r2, #61	; 0x3d
 800225e:	2102      	movs	r1, #2
 8002260:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b04      	cmp	r3, #4
 8002266:	d029      	beq.n	80022bc <HAL_TIM_PWM_ConfigChannel+0x84>
 8002268:	d802      	bhi.n	8002270 <HAL_TIM_PWM_ConfigChannel+0x38>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 800226e:	e08c      	b.n	800238a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002270:	2b08      	cmp	r3, #8
 8002272:	d046      	beq.n	8002302 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002274:	2b0c      	cmp	r3, #12
 8002276:	d065      	beq.n	8002344 <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8002278:	e087      	b.n	800238a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	0011      	movs	r1, r2
 8002282:	0018      	movs	r0, r3
 8002284:	f000 fa12 	bl	80026ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	6992      	ldr	r2, [r2, #24]
 8002292:	2108      	movs	r1, #8
 8002294:	430a      	orrs	r2, r1
 8002296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	6992      	ldr	r2, [r2, #24]
 80022a2:	2104      	movs	r1, #4
 80022a4:	438a      	bics	r2, r1
 80022a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	6991      	ldr	r1, [r2, #24]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	6912      	ldr	r2, [r2, #16]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	619a      	str	r2, [r3, #24]
    break;
 80022ba:	e066      	b.n	800238a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	0011      	movs	r1, r2
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 fa7f 	bl	80027c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	6992      	ldr	r2, [r2, #24]
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0109      	lsls	r1, r1, #4
 80022d8:	430a      	orrs	r2, r1
 80022da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	6992      	ldr	r2, [r2, #24]
 80022e6:	492f      	ldr	r1, [pc, #188]	; (80023a4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	6991      	ldr	r1, [r2, #24]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	6912      	ldr	r2, [r2, #16]
 80022fa:	0212      	lsls	r2, r2, #8
 80022fc:	430a      	orrs	r2, r1
 80022fe:	619a      	str	r2, [r3, #24]
    break;
 8002300:	e043      	b.n	800238a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	0011      	movs	r1, r2
 800230a:	0018      	movs	r0, r3
 800230c:	f000 fae6 	bl	80028dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	69d2      	ldr	r2, [r2, #28]
 800231a:	2108      	movs	r1, #8
 800231c:	430a      	orrs	r2, r1
 800231e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	69d2      	ldr	r2, [r2, #28]
 800232a:	2104      	movs	r1, #4
 800232c:	438a      	bics	r2, r1
 800232e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	69d1      	ldr	r1, [r2, #28]
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	6912      	ldr	r2, [r2, #16]
 800233e:	430a      	orrs	r2, r1
 8002340:	61da      	str	r2, [r3, #28]
    break;
 8002342:	e022      	b.n	800238a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	0011      	movs	r1, r2
 800234c:	0018      	movs	r0, r3
 800234e:	f000 fb51 	bl	80029f4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	69d2      	ldr	r2, [r2, #28]
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0109      	lsls	r1, r1, #4
 8002360:	430a      	orrs	r2, r1
 8002362:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	69d2      	ldr	r2, [r2, #28]
 800236e:	490d      	ldr	r1, [pc, #52]	; (80023a4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002370:	400a      	ands	r2, r1
 8002372:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	69d1      	ldr	r1, [r2, #28]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	6912      	ldr	r2, [r2, #16]
 8002382:	0212      	lsls	r2, r2, #8
 8002384:	430a      	orrs	r2, r1
 8002386:	61da      	str	r2, [r3, #28]
    break;
 8002388:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	223d      	movs	r2, #61	; 0x3d
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	223c      	movs	r2, #60	; 0x3c
 8002396:	2100      	movs	r1, #0
 8002398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b004      	add	sp, #16
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	fffffbff 	.word	0xfffffbff

080023a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	223c      	movs	r2, #60	; 0x3c
 80023ba:	5c9b      	ldrb	r3, [r3, r2]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_TIM_ConfigClockSource+0x1c>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e0ca      	b.n	800255a <HAL_TIM_ConfigClockSource+0x1b2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	223c      	movs	r2, #60	; 0x3c
 80023c8:	2101      	movs	r1, #1
 80023ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	223d      	movs	r2, #61	; 0x3d
 80023d0:	2102      	movs	r1, #2
 80023d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2277      	movs	r2, #119	; 0x77
 80023e0:	4393      	bics	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a5f      	ldr	r2, [pc, #380]	; (8002564 <HAL_TIM_ConfigClockSource+0x1bc>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	d100      	bne.n	80023fe <HAL_TIM_ConfigClockSource+0x56>
 80023fc:	e078      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x148>
 80023fe:	d80e      	bhi.n	800241e <HAL_TIM_ConfigClockSource+0x76>
 8002400:	2b10      	cmp	r3, #16
 8002402:	d100      	bne.n	8002406 <HAL_TIM_ConfigClockSource+0x5e>
 8002404:	e08b      	b.n	800251e <HAL_TIM_ConfigClockSource+0x176>
 8002406:	d803      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x68>
 8002408:	2b00      	cmp	r3, #0
 800240a:	d100      	bne.n	800240e <HAL_TIM_ConfigClockSource+0x66>
 800240c:	e080      	b.n	8002510 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800240e:	e09b      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8002410:	2b20      	cmp	r3, #32
 8002412:	d100      	bne.n	8002416 <HAL_TIM_ConfigClockSource+0x6e>
 8002414:	e08a      	b.n	800252c <HAL_TIM_ConfigClockSource+0x184>
 8002416:	2b30      	cmp	r3, #48	; 0x30
 8002418:	d100      	bne.n	800241c <HAL_TIM_ConfigClockSource+0x74>
 800241a:	e08e      	b.n	800253a <HAL_TIM_ConfigClockSource+0x192>
    break;
 800241c:	e094      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 800241e:	2b70      	cmp	r3, #112	; 0x70
 8002420:	d017      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0xaa>
 8002422:	d804      	bhi.n	800242e <HAL_TIM_ConfigClockSource+0x86>
 8002424:	2b50      	cmp	r3, #80	; 0x50
 8002426:	d043      	beq.n	80024b0 <HAL_TIM_ConfigClockSource+0x108>
 8002428:	2b60      	cmp	r3, #96	; 0x60
 800242a:	d051      	beq.n	80024d0 <HAL_TIM_ConfigClockSource+0x128>
    break;
 800242c:	e08c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	0152      	lsls	r2, r2, #5
 8002432:	4293      	cmp	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_TIM_ConfigClockSource+0x98>
 8002436:	2280      	movs	r2, #128	; 0x80
 8002438:	0192      	lsls	r2, r2, #6
 800243a:	4293      	cmp	r3, r2
 800243c:	d024      	beq.n	8002488 <HAL_TIM_ConfigClockSource+0xe0>
    break;
 800243e:	e083      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	6892      	ldr	r2, [r2, #8]
 800244a:	2107      	movs	r1, #7
 800244c:	438a      	bics	r2, r1
 800244e:	609a      	str	r2, [r3, #8]
    break;
 8002450:	e07a      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f000 fbbf 	bl	8002be4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2277      	movs	r2, #119	; 0x77
 8002472:	4393      	bics	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2277      	movs	r2, #119	; 0x77
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	609a      	str	r2, [r3, #8]
    break;
 8002486:	e05f      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	6899      	ldr	r1, [r3, #8]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f000 fba4 	bl	8002be4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	6892      	ldr	r2, [r2, #8]
 80024a6:	2180      	movs	r1, #128	; 0x80
 80024a8:	01c9      	lsls	r1, r1, #7
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
    break;
 80024ae:	e04b      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	001a      	movs	r2, r3
 80024be:	f000 fb09 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2150      	movs	r1, #80	; 0x50
 80024c8:	0018      	movs	r0, r3
 80024ca:	f000 fb6b 	bl	8002ba4 <TIM_ITRx_SetConfig>
    break;
 80024ce:	e03b      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	001a      	movs	r2, r3
 80024de:	f000 fb2b 	bl	8002b38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2160      	movs	r1, #96	; 0x60
 80024e8:	0018      	movs	r0, r3
 80024ea:	f000 fb5b 	bl	8002ba4 <TIM_ITRx_SetConfig>
    break;
 80024ee:	e02b      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	001a      	movs	r2, r3
 80024fe:	f000 fae9 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2140      	movs	r1, #64	; 0x40
 8002508:	0018      	movs	r0, r3
 800250a:	f000 fb4b 	bl	8002ba4 <TIM_ITRx_SetConfig>
    break;
 800250e:	e01b      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2100      	movs	r1, #0
 8002516:	0018      	movs	r0, r3
 8002518:	f000 fb44 	bl	8002ba4 <TIM_ITRx_SetConfig>
    break;
 800251c:	e014      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2110      	movs	r1, #16
 8002524:	0018      	movs	r0, r3
 8002526:	f000 fb3d 	bl	8002ba4 <TIM_ITRx_SetConfig>
    break;
 800252a:	e00d      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2120      	movs	r1, #32
 8002532:	0018      	movs	r0, r3
 8002534:	f000 fb36 	bl	8002ba4 <TIM_ITRx_SetConfig>
    break;
 8002538:	e006      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2130      	movs	r1, #48	; 0x30
 8002540:	0018      	movs	r0, r3
 8002542:	f000 fb2f 	bl	8002ba4 <TIM_ITRx_SetConfig>
    break;
 8002546:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	223d      	movs	r2, #61	; 0x3d
 800254c:	2101      	movs	r1, #1
 800254e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	223c      	movs	r2, #60	; 0x3c
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b004      	add	sp, #16
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	ffff00ff 	.word	0xffff00ff

08002568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b002      	add	sp, #8
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b002      	add	sp, #8
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a34      	ldr	r2, [pc, #208]	; (8002690 <TIM_Base_SetConfig+0xe8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d008      	beq.n	80025d6 <TIM_Base_SetConfig+0x2e>
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	05db      	lsls	r3, r3, #23
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d003      	beq.n	80025d6 <TIM_Base_SetConfig+0x2e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a30      	ldr	r2, [pc, #192]	; (8002694 <TIM_Base_SetConfig+0xec>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d108      	bne.n	80025e8 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2270      	movs	r2, #112	; 0x70
 80025da:	4393      	bics	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a29      	ldr	r2, [pc, #164]	; (8002690 <TIM_Base_SetConfig+0xe8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d018      	beq.n	8002622 <TIM_Base_SetConfig+0x7a>
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	05db      	lsls	r3, r3, #23
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d013      	beq.n	8002622 <TIM_Base_SetConfig+0x7a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a25      	ldr	r2, [pc, #148]	; (8002694 <TIM_Base_SetConfig+0xec>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00f      	beq.n	8002622 <TIM_Base_SetConfig+0x7a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a24      	ldr	r2, [pc, #144]	; (8002698 <TIM_Base_SetConfig+0xf0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00b      	beq.n	8002622 <TIM_Base_SetConfig+0x7a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a23      	ldr	r2, [pc, #140]	; (800269c <TIM_Base_SetConfig+0xf4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <TIM_Base_SetConfig+0x7a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <TIM_Base_SetConfig+0xf8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d003      	beq.n	8002622 <TIM_Base_SetConfig+0x7a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a21      	ldr	r2, [pc, #132]	; (80026a4 <TIM_Base_SetConfig+0xfc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d108      	bne.n	8002634 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a20      	ldr	r2, [pc, #128]	; (80026a8 <TIM_Base_SetConfig+0x100>)
 8002626:	4013      	ands	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	4393      	bics	r3, r2
 800263a:	001a      	movs	r2, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <TIM_Base_SetConfig+0xe8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00b      	beq.n	800267a <TIM_Base_SetConfig+0xd2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <TIM_Base_SetConfig+0xf4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <TIM_Base_SetConfig+0xd2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <TIM_Base_SetConfig+0xf8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d003      	beq.n	800267a <TIM_Base_SetConfig+0xd2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <TIM_Base_SetConfig+0xfc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d103      	bne.n	8002682 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	615a      	str	r2, [r3, #20]
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b004      	add	sp, #16
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40012c00 	.word	0x40012c00
 8002694:	40000400 	.word	0x40000400
 8002698:	40002000 	.word	0x40002000
 800269c:	40014000 	.word	0x40014000
 80026a0:	40014400 	.word	0x40014400
 80026a4:	40014800 	.word	0x40014800
 80026a8:	fffffcff 	.word	0xfffffcff

080026ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	2201      	movs	r2, #1
 80026c8:	4393      	bics	r3, r2
 80026ca:	001a      	movs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2270      	movs	r2, #112	; 0x70
 80026e6:	4393      	bics	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2203      	movs	r2, #3
 80026ee:	4393      	bics	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2202      	movs	r2, #2
 8002700:	4393      	bics	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a27      	ldr	r2, [pc, #156]	; (80027b0 <TIM_OC1_SetConfig+0x104>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00b      	beq.n	800272e <TIM_OC1_SetConfig+0x82>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <TIM_OC1_SetConfig+0x108>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <TIM_OC1_SetConfig+0x82>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <TIM_OC1_SetConfig+0x10c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d003      	beq.n	800272e <TIM_OC1_SetConfig+0x82>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a24      	ldr	r2, [pc, #144]	; (80027bc <TIM_OC1_SetConfig+0x110>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10c      	bne.n	8002748 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2208      	movs	r2, #8
 8002732:	4393      	bics	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2204      	movs	r2, #4
 8002744:	4393      	bics	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <TIM_OC1_SetConfig+0x104>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00b      	beq.n	8002768 <TIM_OC1_SetConfig+0xbc>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <TIM_OC1_SetConfig+0x108>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d007      	beq.n	8002768 <TIM_OC1_SetConfig+0xbc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <TIM_OC1_SetConfig+0x10c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <TIM_OC1_SetConfig+0xbc>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <TIM_OC1_SetConfig+0x110>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d111      	bne.n	800278c <TIM_OC1_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <TIM_OC1_SetConfig+0x114>)
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <TIM_OC1_SetConfig+0x118>)
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b006      	add	sp, #24
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40014000 	.word	0x40014000
 80027b8:	40014400 	.word	0x40014400
 80027bc:	40014800 	.word	0x40014800
 80027c0:	fffffeff 	.word	0xfffffeff
 80027c4:	fffffdff 	.word	0xfffffdff

080027c8 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	2210      	movs	r2, #16
 80027e4:	4393      	bics	r3, r2
 80027e6:	001a      	movs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a2e      	ldr	r2, [pc, #184]	; (80028bc <TIM_OC2_SetConfig+0xf4>)
 8002802:	4013      	ands	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4a2d      	ldr	r2, [pc, #180]	; (80028c0 <TIM_OC2_SetConfig+0xf8>)
 800280a:	4013      	ands	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2220      	movs	r2, #32
 800281e:	4393      	bics	r3, r2
 8002820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <TIM_OC2_SetConfig+0xfc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10d      	bne.n	8002852 <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	4393      	bics	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2240      	movs	r2, #64	; 0x40
 800284e:	4393      	bics	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <TIM_OC2_SetConfig+0xfc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00b      	beq.n	8002872 <TIM_OC2_SetConfig+0xaa>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <TIM_OC2_SetConfig+0x100>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <TIM_OC2_SetConfig+0xaa>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <TIM_OC2_SetConfig+0x104>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d003      	beq.n	8002872 <TIM_OC2_SetConfig+0xaa>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <TIM_OC2_SetConfig+0x108>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d113      	bne.n	800289a <TIM_OC2_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <TIM_OC2_SetConfig+0x10c>)
 8002876:	4013      	ands	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <TIM_OC2_SetConfig+0x110>)
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	621a      	str	r2, [r3, #32]
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b006      	add	sp, #24
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	ffff8fff 	.word	0xffff8fff
 80028c0:	fffffcff 	.word	0xfffffcff
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40014000 	.word	0x40014000
 80028cc:	40014400 	.word	0x40014400
 80028d0:	40014800 	.word	0x40014800
 80028d4:	fffffbff 	.word	0xfffffbff
 80028d8:	fffff7ff 	.word	0xfffff7ff

080028dc <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a35      	ldr	r2, [pc, #212]	; (80029cc <TIM_OC3_SetConfig+0xf0>)
 80028f8:	401a      	ands	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2270      	movs	r2, #112	; 0x70
 8002914:	4393      	bics	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2203      	movs	r2, #3
 800291c:	4393      	bics	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	4a28      	ldr	r2, [pc, #160]	; (80029d0 <TIM_OC3_SetConfig+0xf4>)
 800292e:	4013      	ands	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <TIM_OC3_SetConfig+0xf8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10d      	bne.n	8002962 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <TIM_OC3_SetConfig+0xfc>)
 800294a:	4013      	ands	r3, r2
 800294c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	4a1f      	ldr	r2, [pc, #124]	; (80029dc <TIM_OC3_SetConfig+0x100>)
 800295e:	4013      	ands	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <TIM_OC3_SetConfig+0xf8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00b      	beq.n	8002982 <TIM_OC3_SetConfig+0xa6>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <TIM_OC3_SetConfig+0x104>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <TIM_OC3_SetConfig+0xa6>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <TIM_OC3_SetConfig+0x108>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d003      	beq.n	8002982 <TIM_OC3_SetConfig+0xa6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1a      	ldr	r2, [pc, #104]	; (80029e8 <TIM_OC3_SetConfig+0x10c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d113      	bne.n	80029aa <TIM_OC3_SetConfig+0xce>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4a19      	ldr	r2, [pc, #100]	; (80029ec <TIM_OC3_SetConfig+0x110>)
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4a18      	ldr	r2, [pc, #96]	; (80029f0 <TIM_OC3_SetConfig+0x114>)
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	621a      	str	r2, [r3, #32]
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b006      	add	sp, #24
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	fffffeff 	.word	0xfffffeff
 80029d0:	fffffdff 	.word	0xfffffdff
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	fffff7ff 	.word	0xfffff7ff
 80029dc:	fffffbff 	.word	0xfffffbff
 80029e0:	40014000 	.word	0x40014000
 80029e4:	40014400 	.word	0x40014400
 80029e8:	40014800 	.word	0x40014800
 80029ec:	ffffefff 	.word	0xffffefff
 80029f0:	ffffdfff 	.word	0xffffdfff

080029f4 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4a28      	ldr	r2, [pc, #160]	; (8002ab0 <TIM_OC4_SetConfig+0xbc>)
 8002a10:	401a      	ands	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <TIM_OC4_SetConfig+0xc0>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <TIM_OC4_SetConfig+0xc4>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <TIM_OC4_SetConfig+0xc8>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	031b      	lsls	r3, r3, #12
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <TIM_OC4_SetConfig+0xcc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00b      	beq.n	8002a78 <TIM_OC4_SetConfig+0x84>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <TIM_OC4_SetConfig+0xd0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <TIM_OC4_SetConfig+0x84>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <TIM_OC4_SetConfig+0xd4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d003      	beq.n	8002a78 <TIM_OC4_SetConfig+0x84>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a16      	ldr	r2, [pc, #88]	; (8002acc <TIM_OC4_SetConfig+0xd8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d109      	bne.n	8002a8c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <TIM_OC4_SetConfig+0xdc>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	019b      	lsls	r3, r3, #6
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b006      	add	sp, #24
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	ffffefff 	.word	0xffffefff
 8002ab4:	ffff8fff 	.word	0xffff8fff
 8002ab8:	fffffcff 	.word	0xfffffcff
 8002abc:	ffffdfff 	.word	0xffffdfff
 8002ac0:	40012c00 	.word	0x40012c00
 8002ac4:	40014000 	.word	0x40014000
 8002ac8:	40014400 	.word	0x40014400
 8002acc:	40014800 	.word	0x40014800
 8002ad0:	ffffbfff 	.word	0xffffbfff

08002ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	2201      	movs	r2, #1
 8002af4:	4393      	bics	r3, r2
 8002af6:	001a      	movs	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	22f0      	movs	r2, #240	; 0xf0
 8002b06:	4393      	bics	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	220a      	movs	r2, #10
 8002b18:	4393      	bics	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	621a      	str	r2, [r3, #32]
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b006      	add	sp, #24
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	2210      	movs	r2, #16
 8002b52:	4393      	bics	r3, r2
 8002b54:	001a      	movs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <TIM_TI2_ConfigInputStage+0x68>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	031b      	lsls	r3, r3, #12
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	22a0      	movs	r2, #160	; 0xa0
 8002b7c:	4393      	bics	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b006      	add	sp, #24
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	ffff0fff 	.word	0xffff0fff

08002ba4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	000a      	movs	r2, r1
 8002bae:	1cbb      	adds	r3, r7, #2
 8002bb0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2270      	movs	r2, #112	; 0x70
 8002bc0:	4393      	bics	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002bc4:	1cbb      	adds	r3, r7, #2
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	2207      	movs	r2, #7
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	001a      	movs	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	609a      	str	r2, [r3, #8]
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <TIM_ETR_SetConfig+0x40>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	021a      	lsls	r2, r3, #8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	609a      	str	r2, [r3, #8]
}
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b006      	add	sp, #24
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	ffff00ff 	.word	0xffff00ff

08002c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	0013      	movs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	43d2      	mvns	r2, r2
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a1a      	ldr	r2, [r3, #32]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4099      	lsls	r1, r3
 8002c5a:	000b      	movs	r3, r1
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b006      	add	sp, #24
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	223c      	movs	r2, #60	; 0x3c
 8002c78:	5c9b      	ldrb	r3, [r3, r2]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e032      	b.n	8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	223c      	movs	r2, #60	; 0x3c
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	223d      	movs	r2, #61	; 0x3d
 8002c8e:	2102      	movs	r1, #2
 8002c90:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	6852      	ldr	r2, [r2, #4]
 8002c9c:	2170      	movs	r1, #112	; 0x70
 8002c9e:	438a      	bics	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	6851      	ldr	r1, [r2, #4]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	6892      	ldr	r2, [r2, #8]
 8002cbe:	2180      	movs	r1, #128	; 0x80
 8002cc0:	438a      	bics	r2, r1
 8002cc2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	6891      	ldr	r1, [r2, #8]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	6852      	ldr	r2, [r2, #4]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	223d      	movs	r2, #61	; 0x3d
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	223c      	movs	r2, #60	; 0x3c
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b002      	add	sp, #8
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	223c      	movs	r2, #60	; 0x3c
 8002d02:	5c9b      	ldrb	r3, [r3, r2]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e04d      	b.n	8002da8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	223c      	movs	r2, #60	; 0x3c
 8002d10:	2101      	movs	r1, #1
 8002d12:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	223d      	movs	r2, #61	; 0x3d
 8002d18:	2102      	movs	r1, #2
 8002d1a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	22ff      	movs	r2, #255	; 0xff
 8002d20:	4393      	bics	r3, r2
 8002d22:	001a      	movs	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8002d30:	401a      	ands	r2, r3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8002d3e:	401a      	ands	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a1b      	ldr	r2, [pc, #108]	; (8002db8 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>)
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8002d68:	401a      	ands	r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>)
 8002d76:	401a      	ands	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <HAL_TIMEx_ConfigBreakDeadTime+0xd8>)
 8002d84:	401a      	ands	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	223d      	movs	r2, #61	; 0x3d
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	223c      	movs	r2, #60	; 0x3c
 8002da2:	2100      	movs	r1, #0
 8002da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b004      	add	sp, #16
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	fffffcff 	.word	0xfffffcff
 8002db4:	fffffbff 	.word	0xfffffbff
 8002db8:	fffff7ff 	.word	0xfffff7ff
 8002dbc:	ffffefff 	.word	0xffffefff
 8002dc0:	ffffdfff 	.word	0xffffdfff
 8002dc4:	ffffbfff 	.word	0xffffbfff
 8002dc8:	ffff7fff 	.word	0xffff7fff

08002dcc <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e047      	b.n	8002e8e <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2269      	movs	r2, #105	; 0x69
 8002e02:	5c9b      	ldrb	r3, [r3, r2]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d107      	bne.n	8002e1a <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2268      	movs	r2, #104	; 0x68
 8002e0e:	2100      	movs	r1, #0
 8002e10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f003 fcdd 	bl	80067d4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2269      	movs	r2, #105	; 0x69
 8002e1e:	2124      	movs	r1, #36	; 0x24
 8002e20:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	438a      	bics	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 fae5 	bl	8003404 <UART_SetConfig>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e024      	b.n	8002e8e <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 fc94 	bl	800377c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	6852      	ldr	r2, [r2, #4]
 8002e5e:	490e      	ldr	r1, [pc, #56]	; (8002e98 <HAL_UART_Init+0xac>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	6892      	ldr	r2, [r2, #8]
 8002e6e:	212a      	movs	r1, #42	; 0x2a
 8002e70:	438a      	bics	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	2101      	movs	r1, #1
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 fd24 	bl	80038d4 <UART_CheckIdleState>
 8002e8c:	0003      	movs	r3, r0
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b002      	add	sp, #8
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	ffffb7ff 	.word	0xffffb7ff

08002e9c <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	1dbb      	adds	r3, r7, #6
 8002eaa:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2269      	movs	r2, #105	; 0x69
 8002eb4:	5c9b      	ldrb	r3, [r3, r2]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d000      	beq.n	8002ebe <HAL_UART_Transmit+0x22>
 8002ebc:	e08c      	b.n	8002fd8 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_UART_Transmit+0x30>
 8002ec4:	1dbb      	adds	r3, r7, #6
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e084      	b.n	8002fda <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	015b      	lsls	r3, r3, #5
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d109      	bne.n	8002ef0 <HAL_UART_Transmit+0x54>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d001      	beq.n	8002ef0 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e074      	b.n	8002fda <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2268      	movs	r2, #104	; 0x68
 8002ef4:	5c9b      	ldrb	r3, [r3, r2]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Transmit+0x62>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e06d      	b.n	8002fda <HAL_UART_Transmit+0x13e>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2268      	movs	r2, #104	; 0x68
 8002f02:	2101      	movs	r1, #1
 8002f04:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2269      	movs	r2, #105	; 0x69
 8002f10:	2121      	movs	r1, #33	; 0x21
 8002f12:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002f14:	f7fd f9ac 	bl	8000270 <HAL_GetTick>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1dba      	adds	r2, r7, #6
 8002f20:	2150      	movs	r1, #80	; 0x50
 8002f22:	8812      	ldrh	r2, [r2, #0]
 8002f24:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1dba      	adds	r2, r7, #6
 8002f2a:	2152      	movs	r1, #82	; 0x52
 8002f2c:	8812      	ldrh	r2, [r2, #0]
 8002f2e:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8002f30:	e035      	b.n	8002f9e <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2252      	movs	r2, #82	; 0x52
 8002f36:	5a9b      	ldrh	r3, [r3, r2]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b299      	uxth	r1, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2252      	movs	r2, #82	; 0x52
 8002f42:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	0013      	movs	r3, r2
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	f000 fd17 	bl	8003984 <UART_WaitOnFlagUntilTimeout>
 8002f56:	1e03      	subs	r3, r0, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e03d      	b.n	8002fda <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	015b      	lsls	r3, r3, #5
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d111      	bne.n	8002f8e <HAL_UART_Transmit+0xf2>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	8812      	ldrh	r2, [r2, #0]
 8002f7e:	05d2      	lsls	r2, r2, #23
 8002f80:	0dd2      	lsrs	r2, r2, #23
 8002f82:	b292      	uxth	r2, r2
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3302      	adds	r3, #2
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	e007      	b.n	8002f9e <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1c59      	adds	r1, r3, #1
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2252      	movs	r2, #82	; 0x52
 8002fa2:	5a9b      	ldrh	r3, [r3, r2]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1c3      	bne.n	8002f32 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	0013      	movs	r3, r2
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2140      	movs	r1, #64	; 0x40
 8002fb8:	f000 fce4 	bl	8003984 <UART_WaitOnFlagUntilTimeout>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e00a      	b.n	8002fda <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2269      	movs	r2, #105	; 0x69
 8002fc8:	2120      	movs	r1, #32
 8002fca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2268      	movs	r2, #104	; 0x68
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b006      	add	sp, #24
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	; 0x28
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	1dbb      	adds	r3, r7, #6
 8002ff2:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	226a      	movs	r2, #106	; 0x6a
 8002ffc:	5c9b      	ldrb	r3, [r3, r2]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b20      	cmp	r3, #32
 8003002:	d000      	beq.n	8003006 <HAL_UART_Receive+0x22>
 8003004:	e0c8      	b.n	8003198 <HAL_UART_Receive+0x1b4>
  {
    if((pData == NULL ) || (Size == 0U))
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_UART_Receive+0x30>
 800300c:	1dbb      	adds	r3, r7, #6
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0c0      	b.n	800319a <HAL_UART_Receive+0x1b6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	015b      	lsls	r3, r3, #5
 8003020:	429a      	cmp	r2, r3
 8003022:	d109      	bne.n	8003038 <HAL_UART_Receive+0x54>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_UART_Receive+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	d001      	beq.n	8003038 <HAL_UART_Receive+0x54>
      {
        return  HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0b0      	b.n	800319a <HAL_UART_Receive+0x1b6>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2268      	movs	r2, #104	; 0x68
 800303c:	5c9b      	ldrb	r3, [r3, r2]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_UART_Receive+0x62>
 8003042:	2302      	movs	r3, #2
 8003044:	e0a9      	b.n	800319a <HAL_UART_Receive+0x1b6>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2268      	movs	r2, #104	; 0x68
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	226a      	movs	r2, #106	; 0x6a
 8003058:	2122      	movs	r1, #34	; 0x22
 800305a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800305c:	f7fd f908 	bl	8000270 <HAL_GetTick>
 8003060:	0003      	movs	r3, r0
 8003062:	61fb      	str	r3, [r7, #28]

    huart->RxXferSize = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1dba      	adds	r2, r7, #6
 8003068:	2158      	movs	r1, #88	; 0x58
 800306a:	8812      	ldrh	r2, [r2, #0]
 800306c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1dba      	adds	r2, r7, #6
 8003072:	215a      	movs	r1, #90	; 0x5a
 8003074:	8812      	ldrh	r2, [r2, #0]
 8003076:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	015b      	lsls	r3, r3, #5
 8003080:	429a      	cmp	r2, r3
 8003082:	d10d      	bne.n	80030a0 <HAL_UART_Receive+0xbc>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d104      	bne.n	8003096 <HAL_UART_Receive+0xb2>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	225c      	movs	r2, #92	; 0x5c
 8003090:	4944      	ldr	r1, [pc, #272]	; (80031a4 <HAL_UART_Receive+0x1c0>)
 8003092:	5299      	strh	r1, [r3, r2]
 8003094:	e029      	b.n	80030ea <HAL_UART_Receive+0x106>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	225c      	movs	r2, #92	; 0x5c
 800309a:	21ff      	movs	r1, #255	; 0xff
 800309c:	5299      	strh	r1, [r3, r2]
 800309e:	e024      	b.n	80030ea <HAL_UART_Receive+0x106>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10d      	bne.n	80030c4 <HAL_UART_Receive+0xe0>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d104      	bne.n	80030ba <HAL_UART_Receive+0xd6>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	225c      	movs	r2, #92	; 0x5c
 80030b4:	21ff      	movs	r1, #255	; 0xff
 80030b6:	5299      	strh	r1, [r3, r2]
 80030b8:	e017      	b.n	80030ea <HAL_UART_Receive+0x106>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	225c      	movs	r2, #92	; 0x5c
 80030be:	217f      	movs	r1, #127	; 0x7f
 80030c0:	5299      	strh	r1, [r3, r2]
 80030c2:	e012      	b.n	80030ea <HAL_UART_Receive+0x106>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	055b      	lsls	r3, r3, #21
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d10c      	bne.n	80030ea <HAL_UART_Receive+0x106>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <HAL_UART_Receive+0xfe>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	225c      	movs	r2, #92	; 0x5c
 80030dc:	217f      	movs	r1, #127	; 0x7f
 80030de:	5299      	strh	r1, [r3, r2]
 80030e0:	e003      	b.n	80030ea <HAL_UART_Receive+0x106>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	225c      	movs	r2, #92	; 0x5c
 80030e6:	213f      	movs	r1, #63	; 0x3f
 80030e8:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80030ea:	231a      	movs	r3, #26
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	215c      	movs	r1, #92	; 0x5c
 80030f2:	5a52      	ldrh	r2, [r2, r1]
 80030f4:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80030f6:	e03f      	b.n	8003178 <HAL_UART_Receive+0x194>
    {
      huart->RxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	225a      	movs	r2, #90	; 0x5a
 80030fc:	5a9b      	ldrh	r3, [r3, r2]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b299      	uxth	r1, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	225a      	movs	r2, #90	; 0x5a
 8003108:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	0013      	movs	r3, r2
 8003114:	2200      	movs	r2, #0
 8003116:	2120      	movs	r1, #32
 8003118:	f000 fc34 	bl	8003984 <UART_WaitOnFlagUntilTimeout>
 800311c:	1e03      	subs	r3, r0, #0
 800311e:	d001      	beq.n	8003124 <HAL_UART_Receive+0x140>
      {
        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e03a      	b.n	800319a <HAL_UART_Receive+0x1b6>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	015b      	lsls	r3, r3, #5
 800312c:	429a      	cmp	r2, r3
 800312e:	d114      	bne.n	800315a <HAL_UART_Receive+0x176>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d110      	bne.n	800315a <HAL_UART_Receive+0x176>
      {
        tmp = (uint16_t*) pData ;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003142:	b29b      	uxth	r3, r3
 8003144:	221a      	movs	r2, #26
 8003146:	18ba      	adds	r2, r7, r2
 8003148:	8812      	ldrh	r2, [r2, #0]
 800314a:	4013      	ands	r3, r2
 800314c:	b29a      	uxth	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3302      	adds	r3, #2
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	e00e      	b.n	8003178 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	60ba      	str	r2, [r7, #8]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003166:	b292      	uxth	r2, r2
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	211a      	movs	r1, #26
 800316c:	1879      	adds	r1, r7, r1
 800316e:	8809      	ldrh	r1, [r1, #0]
 8003170:	b2c9      	uxtb	r1, r1
 8003172:	400a      	ands	r2, r1
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	225a      	movs	r2, #90	; 0x5a
 800317c:	5a9b      	ldrh	r3, [r3, r2]
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1b9      	bne.n	80030f8 <HAL_UART_Receive+0x114>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	226a      	movs	r2, #106	; 0x6a
 8003188:	2120      	movs	r1, #32
 800318a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2268      	movs	r2, #104	; 0x68
 8003190:	2100      	movs	r1, #0
 8003192:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <HAL_UART_Receive+0x1b6>
  }
  else
  {
    return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
  }
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b008      	add	sp, #32
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	000001ff 	.word	0x000001ff

080031a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	220f      	movs	r2, #15
 80031c4:	4013      	ands	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10c      	bne.n	80031e8 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2220      	movs	r2, #32
 80031d2:	4013      	ands	r3, r2
 80031d4:	d008      	beq.n	80031e8 <HAL_UART_IRQHandler+0x40>
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2220      	movs	r2, #32
 80031da:	4013      	ands	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	0018      	movs	r0, r3
 80031e2:	f000 fcc1 	bl	8003b68 <UART_Receive_IT>
      return;
 80031e6:	e0ef      	b.n	80033c8 <HAL_UART_IRQHandler+0x220>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d100      	bne.n	80031f8 <HAL_UART_IRQHandler+0x50>
 80031f6:	e0af      	b.n	8003358 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2201      	movs	r2, #1
 80031fc:	4013      	ands	r3, r2
 80031fe:	d105      	bne.n	800320c <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	2390      	movs	r3, #144	; 0x90
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4013      	ands	r3, r2
 8003208:	d100      	bne.n	800320c <HAL_UART_IRQHandler+0x64>
 800320a:	e0a5      	b.n	8003358 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2201      	movs	r2, #1
 8003210:	4013      	ands	r3, r2
 8003212:	d00e      	beq.n	8003232 <HAL_UART_IRQHandler+0x8a>
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4013      	ands	r3, r2
 800321c:	d009      	beq.n	8003232 <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322a:	2201      	movs	r2, #1
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2202      	movs	r2, #2
 8003236:	4013      	ands	r3, r2
 8003238:	d00d      	beq.n	8003256 <HAL_UART_IRQHandler+0xae>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2201      	movs	r2, #1
 800323e:	4013      	ands	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2202      	movs	r2, #2
 8003248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324e:	2204      	movs	r2, #4
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2204      	movs	r2, #4
 800325a:	4013      	ands	r3, r2
 800325c:	d00d      	beq.n	800327a <HAL_UART_IRQHandler+0xd2>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2201      	movs	r2, #1
 8003262:	4013      	ands	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2204      	movs	r2, #4
 800326c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003272:	2202      	movs	r2, #2
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2208      	movs	r2, #8
 800327e:	4013      	ands	r3, r2
 8003280:	d011      	beq.n	80032a6 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2220      	movs	r2, #32
 8003286:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003288:	d103      	bne.n	8003292 <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2201      	movs	r2, #1
 800328e:	4013      	ands	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2208      	movs	r2, #8
 8003298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329e:	2208      	movs	r2, #8
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d100      	bne.n	80032b0 <HAL_UART_IRQHandler+0x108>
 80032ae:	e08a      	b.n	80033c6 <HAL_UART_IRQHandler+0x21e>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2220      	movs	r2, #32
 80032b4:	4013      	ands	r3, r2
 80032b6:	d007      	beq.n	80032c8 <HAL_UART_IRQHandler+0x120>
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2220      	movs	r2, #32
 80032bc:	4013      	ands	r3, r2
 80032be:	d003      	beq.n	80032c8 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 fc50 	bl	8003b68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032cc:	2208      	movs	r2, #8
 80032ce:	4013      	ands	r3, r2
 80032d0:	d105      	bne.n	80032de <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80032dc:	d032      	beq.n	8003344 <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 fb9b 	bl	8003a1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2240      	movs	r2, #64	; 0x40
 80032ee:	4013      	ands	r3, r2
 80032f0:	d023      	beq.n	800333a <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	6892      	ldr	r2, [r2, #8]
 80032fc:	2140      	movs	r1, #64	; 0x40
 80032fe:	438a      	bics	r2, r1
 8003300:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800330e:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <HAL_UART_IRQHandler+0x228>)
 8003310:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003316:	0018      	movs	r0, r3
 8003318:	f7fd fd70 	bl	8000dfc <HAL_DMA_Abort_IT>
 800331c:	1e03      	subs	r3, r0, #0
 800331e:	d019      	beq.n	8003354 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800332a:	0018      	movs	r0, r3
 800332c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332e:	e011      	b.n	8003354 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 f85e 	bl	80033f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003338:	e00c      	b.n	8003354 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0018      	movs	r0, r3
 800333e:	f000 f859 	bl	80033f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003342:	e007      	b.n	8003354 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	0018      	movs	r0, r3
 8003348:	f000 f854 	bl	80033f4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8003352:	e038      	b.n	80033c6 <HAL_UART_IRQHandler+0x21e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003354:	46c0      	nop			; (mov r8, r8)
    return;
 8003356:	e036      	b.n	80033c6 <HAL_UART_IRQHandler+0x21e>

  } /* End if some error occurs */

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	035b      	lsls	r3, r3, #13
 800335e:	4013      	ands	r3, r2
 8003360:	d016      	beq.n	8003390 <HAL_UART_IRQHandler+0x1e8>
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	03db      	lsls	r3, r3, #15
 8003368:	4013      	ands	r3, r2
 800336a:	d011      	beq.n	8003390 <HAL_UART_IRQHandler+0x1e8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	0352      	lsls	r2, r2, #13
 8003374:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2269      	movs	r2, #105	; 0x69
 800337a:	2120      	movs	r1, #32
 800337c:	5499      	strb	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	226a      	movs	r2, #106	; 0x6a
 8003382:	2120      	movs	r1, #32
 8003384:	5499      	strb	r1, [r3, r2]
    HAL_UARTEx_WakeupCallback(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	0018      	movs	r0, r3
 800338a:	f000 fc67 	bl	8003c5c <HAL_UARTEx_WakeupCallback>
    return;
 800338e:	e01b      	b.n	80033c8 <HAL_UART_IRQHandler+0x220>
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2280      	movs	r2, #128	; 0x80
 8003394:	4013      	ands	r3, r2
 8003396:	d008      	beq.n	80033aa <HAL_UART_IRQHandler+0x202>
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2280      	movs	r2, #128	; 0x80
 800339c:	4013      	ands	r3, r2
 800339e:	d004      	beq.n	80033aa <HAL_UART_IRQHandler+0x202>
  {
    UART_Transmit_IT(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f000 fb6f 	bl	8003a86 <UART_Transmit_IT>
    return;
 80033a8:	e00e      	b.n	80033c8 <HAL_UART_IRQHandler+0x220>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2240      	movs	r2, #64	; 0x40
 80033ae:	4013      	ands	r3, r2
 80033b0:	d00a      	beq.n	80033c8 <HAL_UART_IRQHandler+0x220>
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2240      	movs	r2, #64	; 0x40
 80033b6:	4013      	ands	r3, r2
 80033b8:	d006      	beq.n	80033c8 <HAL_UART_IRQHandler+0x220>
  {
    UART_EndTransmit_IT(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	0018      	movs	r0, r3
 80033be:	f000 fbb9 	bl	8003b34 <UART_EndTransmit_IT>
    return;
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	e000      	b.n	80033c8 <HAL_UART_IRQHandler+0x220>
    return;
 80033c6:	46c0      	nop			; (mov r8, r8)
  }

}
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b006      	add	sp, #24
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	08003a59 	.word	0x08003a59

080033d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b002      	add	sp, #8
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}

08003404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003410:	2317      	movs	r3, #23
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	2210      	movs	r2, #16
 8003416:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8003418:	230a      	movs	r3, #10
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	2200      	movs	r2, #0
 800341e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8003420:	2314      	movs	r3, #20
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	2200      	movs	r2, #0
 8003426:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003428:	2313      	movs	r3, #19
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	49c0      	ldr	r1, [pc, #768]	; (8003754 <UART_SetConfig+0x350>)
 8003454:	4011      	ands	r1, r2
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	430a      	orrs	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	6852      	ldr	r2, [r2, #4]
 8003466:	49bc      	ldr	r1, [pc, #752]	; (8003758 <UART_SetConfig+0x354>)
 8003468:	4011      	ands	r1, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68d2      	ldr	r2, [r2, #12]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	49b4      	ldr	r1, [pc, #720]	; (800375c <UART_SetConfig+0x358>)
 800348a:	4011      	ands	r1, r2
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4ab2      	ldr	r2, [pc, #712]	; (8003760 <UART_SetConfig+0x35c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d125      	bne.n	80034e8 <UART_SetConfig+0xe4>
 800349c:	4bb1      	ldr	r3, [pc, #708]	; (8003764 <UART_SetConfig+0x360>)
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	2203      	movs	r2, #3
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d00f      	beq.n	80034c8 <UART_SetConfig+0xc4>
 80034a8:	d304      	bcc.n	80034b4 <UART_SetConfig+0xb0>
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d011      	beq.n	80034d2 <UART_SetConfig+0xce>
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d005      	beq.n	80034be <UART_SetConfig+0xba>
 80034b2:	e013      	b.n	80034dc <UART_SetConfig+0xd8>
 80034b4:	2317      	movs	r3, #23
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e064      	b.n	8003588 <UART_SetConfig+0x184>
 80034be:	2317      	movs	r3, #23
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	2202      	movs	r2, #2
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e05f      	b.n	8003588 <UART_SetConfig+0x184>
 80034c8:	2317      	movs	r3, #23
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	2204      	movs	r2, #4
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	e05a      	b.n	8003588 <UART_SetConfig+0x184>
 80034d2:	2317      	movs	r3, #23
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	2208      	movs	r2, #8
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	e055      	b.n	8003588 <UART_SetConfig+0x184>
 80034dc:	2317      	movs	r3, #23
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	2210      	movs	r2, #16
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	e04f      	b.n	8003588 <UART_SetConfig+0x184>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a9e      	ldr	r2, [pc, #632]	; (8003768 <UART_SetConfig+0x364>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d132      	bne.n	8003558 <UART_SetConfig+0x154>
 80034f2:	4b9c      	ldr	r3, [pc, #624]	; (8003764 <UART_SetConfig+0x360>)
 80034f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f6:	23c0      	movs	r3, #192	; 0xc0
 80034f8:	029b      	lsls	r3, r3, #10
 80034fa:	4013      	ands	r3, r2
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	0252      	lsls	r2, r2, #9
 8003500:	4293      	cmp	r3, r2
 8003502:	d019      	beq.n	8003538 <UART_SetConfig+0x134>
 8003504:	2280      	movs	r2, #128	; 0x80
 8003506:	0252      	lsls	r2, r2, #9
 8003508:	4293      	cmp	r3, r2
 800350a:	d802      	bhi.n	8003512 <UART_SetConfig+0x10e>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <UART_SetConfig+0x120>
 8003510:	e01c      	b.n	800354c <UART_SetConfig+0x148>
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	0292      	lsls	r2, r2, #10
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <UART_SetConfig+0x13e>
 800351a:	22c0      	movs	r2, #192	; 0xc0
 800351c:	0292      	lsls	r2, r2, #10
 800351e:	4293      	cmp	r3, r2
 8003520:	d005      	beq.n	800352e <UART_SetConfig+0x12a>
 8003522:	e013      	b.n	800354c <UART_SetConfig+0x148>
 8003524:	2317      	movs	r3, #23
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e02c      	b.n	8003588 <UART_SetConfig+0x184>
 800352e:	2317      	movs	r3, #23
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e027      	b.n	8003588 <UART_SetConfig+0x184>
 8003538:	2317      	movs	r3, #23
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	2204      	movs	r2, #4
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e022      	b.n	8003588 <UART_SetConfig+0x184>
 8003542:	2317      	movs	r3, #23
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	2208      	movs	r2, #8
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	e01d      	b.n	8003588 <UART_SetConfig+0x184>
 800354c:	2317      	movs	r3, #23
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	2210      	movs	r2, #16
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	e017      	b.n	8003588 <UART_SetConfig+0x184>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a83      	ldr	r2, [pc, #524]	; (800376c <UART_SetConfig+0x368>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d104      	bne.n	800356c <UART_SetConfig+0x168>
 8003562:	2317      	movs	r3, #23
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e00d      	b.n	8003588 <UART_SetConfig+0x184>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a7f      	ldr	r2, [pc, #508]	; (8003770 <UART_SetConfig+0x36c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d104      	bne.n	8003580 <UART_SetConfig+0x17c>
 8003576:	2317      	movs	r3, #23
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	e003      	b.n	8003588 <UART_SetConfig+0x184>
 8003580:	2317      	movs	r3, #23
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	2210      	movs	r2, #16
 8003586:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	429a      	cmp	r2, r3
 8003592:	d000      	beq.n	8003596 <UART_SetConfig+0x192>
 8003594:	e07b      	b.n	800368e <UART_SetConfig+0x28a>
  {
    switch (clocksource)
 8003596:	2317      	movs	r3, #23
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d01c      	beq.n	80035da <UART_SetConfig+0x1d6>
 80035a0:	dc02      	bgt.n	80035a8 <UART_SetConfig+0x1a4>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <UART_SetConfig+0x1ae>
 80035a6:	e04f      	b.n	8003648 <UART_SetConfig+0x244>
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d027      	beq.n	80035fc <UART_SetConfig+0x1f8>
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d039      	beq.n	8003624 <UART_SetConfig+0x220>
 80035b0:	e04a      	b.n	8003648 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80035b2:	f7fe fb0d 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 80035b6:	0003      	movs	r3, r0
 80035b8:	005a      	lsls	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	18d2      	adds	r2, r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	0019      	movs	r1, r3
 80035c8:	0010      	movs	r0, r2
 80035ca:	f7fc fda5 	bl	8000118 <__udivsi3>
 80035ce:	0003      	movs	r3, r0
 80035d0:	001a      	movs	r2, r3
 80035d2:	2314      	movs	r3, #20
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	801a      	strh	r2, [r3, #0]
        break;
 80035d8:	e03b      	b.n	8003652 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	4a64      	ldr	r2, [pc, #400]	; (8003774 <UART_SetConfig+0x370>)
 80035e2:	189a      	adds	r2, r3, r2
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	0019      	movs	r1, r3
 80035ea:	0010      	movs	r0, r2
 80035ec:	f7fc fd94 	bl	8000118 <__udivsi3>
 80035f0:	0003      	movs	r3, r0
 80035f2:	001a      	movs	r2, r3
 80035f4:	2314      	movs	r3, #20
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	801a      	strh	r2, [r3, #0]
        break;
 80035fa:	e02a      	b.n	8003652 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035fc:	f7fe fa60 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8003600:	0003      	movs	r3, r0
 8003602:	005a      	lsls	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	18d2      	adds	r2, r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	0019      	movs	r1, r3
 8003612:	0010      	movs	r0, r2
 8003614:	f7fc fd80 	bl	8000118 <__udivsi3>
 8003618:	0003      	movs	r3, r0
 800361a:	001a      	movs	r2, r3
 800361c:	2314      	movs	r3, #20
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	801a      	strh	r2, [r3, #0]
        break;
 8003622:	e016      	b.n	8003652 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	2280      	movs	r2, #128	; 0x80
 800362c:	0252      	lsls	r2, r2, #9
 800362e:	189a      	adds	r2, r3, r2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	0019      	movs	r1, r3
 8003636:	0010      	movs	r0, r2
 8003638:	f7fc fd6e 	bl	8000118 <__udivsi3>
 800363c:	0003      	movs	r3, r0
 800363e:	001a      	movs	r2, r3
 8003640:	2314      	movs	r3, #20
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	801a      	strh	r2, [r3, #0]
        break;
 8003646:	e004      	b.n	8003652 <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003648:	2313      	movs	r3, #19
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
        break;
 8003650:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003652:	230a      	movs	r3, #10
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	2214      	movs	r2, #20
 8003658:	18ba      	adds	r2, r7, r2
 800365a:	8812      	ldrh	r2, [r2, #0]
 800365c:	210f      	movs	r1, #15
 800365e:	438a      	bics	r2, r1
 8003660:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003662:	2314      	movs	r3, #20
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	105b      	asrs	r3, r3, #1
 800366a:	b29b      	uxth	r3, r3
 800366c:	2207      	movs	r2, #7
 800366e:	4013      	ands	r3, r2
 8003670:	b299      	uxth	r1, r3
 8003672:	230a      	movs	r3, #10
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	220a      	movs	r2, #10
 8003678:	18ba      	adds	r2, r7, r2
 800367a:	8812      	ldrh	r2, [r2, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	220a      	movs	r2, #10
 8003686:	18ba      	adds	r2, r7, r2
 8003688:	8812      	ldrh	r2, [r2, #0]
 800368a:	60da      	str	r2, [r3, #12]
 800368c:	e05b      	b.n	8003746 <UART_SetConfig+0x342>
  }
  else
  {
    switch (clocksource)
 800368e:	2317      	movs	r3, #23
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d01b      	beq.n	80036d0 <UART_SetConfig+0x2cc>
 8003698:	dc02      	bgt.n	80036a0 <UART_SetConfig+0x29c>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <UART_SetConfig+0x2a6>
 800369e:	e04d      	b.n	800373c <UART_SetConfig+0x338>
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d026      	beq.n	80036f2 <UART_SetConfig+0x2ee>
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d037      	beq.n	8003718 <UART_SetConfig+0x314>
 80036a8:	e048      	b.n	800373c <UART_SetConfig+0x338>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681c      	ldr	r4, [r3, #0]
 80036ae:	f7fe fa8f 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 80036b2:	0002      	movs	r2, r0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	18d2      	adds	r2, r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	0019      	movs	r1, r3
 80036c2:	0010      	movs	r0, r2
 80036c4:	f7fc fd28 	bl	8000118 <__udivsi3>
 80036c8:	0003      	movs	r3, r0
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	60e3      	str	r3, [r4, #12]
        break;
 80036ce:	e03a      	b.n	8003746 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681c      	ldr	r4, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	4a27      	ldr	r2, [pc, #156]	; (8003778 <UART_SetConfig+0x374>)
 80036dc:	189a      	adds	r2, r3, r2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	0019      	movs	r1, r3
 80036e4:	0010      	movs	r0, r2
 80036e6:	f7fc fd17 	bl	8000118 <__udivsi3>
 80036ea:	0003      	movs	r3, r0
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	60e3      	str	r3, [r4, #12]
        break;
 80036f0:	e029      	b.n	8003746 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681c      	ldr	r4, [r3, #0]
 80036f6:	f7fe f9e3 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 80036fa:	0002      	movs	r2, r0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	18d2      	adds	r2, r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	0019      	movs	r1, r3
 800370a:	0010      	movs	r0, r2
 800370c:	f7fc fd04 	bl	8000118 <__udivsi3>
 8003710:	0003      	movs	r3, r0
 8003712:	b29b      	uxth	r3, r3
 8003714:	60e3      	str	r3, [r4, #12]
        break;
 8003716:	e016      	b.n	8003746 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681c      	ldr	r4, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	0212      	lsls	r2, r2, #8
 8003726:	189a      	adds	r2, r3, r2
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	0019      	movs	r1, r3
 800372e:	0010      	movs	r0, r2
 8003730:	f7fc fcf2 	bl	8000118 <__udivsi3>
 8003734:	0003      	movs	r3, r0
 8003736:	b29b      	uxth	r3, r3
 8003738:	60e3      	str	r3, [r4, #12]
        break;
 800373a:	e004      	b.n	8003746 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800373c:	2313      	movs	r3, #19
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
        break;
 8003744:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8003746:	2313      	movs	r3, #19
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	781b      	ldrb	r3, [r3, #0]

}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b007      	add	sp, #28
 8003752:	bd90      	pop	{r4, r7, pc}
 8003754:	efff69f3 	.word	0xefff69f3
 8003758:	ffffcfff 	.word	0xffffcfff
 800375c:	fffff4ff 	.word	0xfffff4ff
 8003760:	40013800 	.word	0x40013800
 8003764:	40021000 	.word	0x40021000
 8003768:	40004400 	.word	0x40004400
 800376c:	40004800 	.word	0x40004800
 8003770:	40004c00 	.word	0x40004c00
 8003774:	00f42400 	.word	0x00f42400
 8003778:	007a1200 	.word	0x007a1200

0800377c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2201      	movs	r2, #1
 800378a:	4013      	ands	r3, r2
 800378c:	d00a      	beq.n	80037a4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	6852      	ldr	r2, [r2, #4]
 8003798:	4945      	ldr	r1, [pc, #276]	; (80038b0 <UART_AdvFeatureConfig+0x134>)
 800379a:	4011      	ands	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037a0:	430a      	orrs	r2, r1
 80037a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	2202      	movs	r2, #2
 80037aa:	4013      	ands	r3, r2
 80037ac:	d00a      	beq.n	80037c4 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	6852      	ldr	r2, [r2, #4]
 80037b8:	493e      	ldr	r1, [pc, #248]	; (80038b4 <UART_AdvFeatureConfig+0x138>)
 80037ba:	4011      	ands	r1, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037c0:	430a      	orrs	r2, r1
 80037c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	2204      	movs	r2, #4
 80037ca:	4013      	ands	r3, r2
 80037cc:	d00a      	beq.n	80037e4 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	6852      	ldr	r2, [r2, #4]
 80037d8:	4937      	ldr	r1, [pc, #220]	; (80038b8 <UART_AdvFeatureConfig+0x13c>)
 80037da:	4011      	ands	r1, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	2208      	movs	r2, #8
 80037ea:	4013      	ands	r3, r2
 80037ec:	d00a      	beq.n	8003804 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	6852      	ldr	r2, [r2, #4]
 80037f8:	4930      	ldr	r1, [pc, #192]	; (80038bc <UART_AdvFeatureConfig+0x140>)
 80037fa:	4011      	ands	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	2210      	movs	r2, #16
 800380a:	4013      	ands	r3, r2
 800380c:	d00a      	beq.n	8003824 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	6892      	ldr	r2, [r2, #8]
 8003818:	4929      	ldr	r1, [pc, #164]	; (80038c0 <UART_AdvFeatureConfig+0x144>)
 800381a:	4011      	ands	r1, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003820:	430a      	orrs	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	2220      	movs	r2, #32
 800382a:	4013      	ands	r3, r2
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	6892      	ldr	r2, [r2, #8]
 8003838:	4922      	ldr	r1, [pc, #136]	; (80038c4 <UART_AdvFeatureConfig+0x148>)
 800383a:	4011      	ands	r1, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2240      	movs	r2, #64	; 0x40
 800384a:	4013      	ands	r3, r2
 800384c:	d01b      	beq.n	8003886 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	6852      	ldr	r2, [r2, #4]
 8003858:	491b      	ldr	r1, [pc, #108]	; (80038c8 <UART_AdvFeatureConfig+0x14c>)
 800385a:	4011      	ands	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003860:	430a      	orrs	r2, r1
 8003862:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	035b      	lsls	r3, r3, #13
 800386c:	429a      	cmp	r2, r3
 800386e:	d10a      	bne.n	8003886 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	6852      	ldr	r2, [r2, #4]
 800387a:	4914      	ldr	r1, [pc, #80]	; (80038cc <UART_AdvFeatureConfig+0x150>)
 800387c:	4011      	ands	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	2280      	movs	r2, #128	; 0x80
 800388c:	4013      	ands	r3, r2
 800388e:	d00a      	beq.n	80038a6 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	6852      	ldr	r2, [r2, #4]
 800389a:	490d      	ldr	r1, [pc, #52]	; (80038d0 <UART_AdvFeatureConfig+0x154>)
 800389c:	4011      	ands	r1, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
  }
}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b002      	add	sp, #8
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	fffdffff 	.word	0xfffdffff
 80038b4:	fffeffff 	.word	0xfffeffff
 80038b8:	fffbffff 	.word	0xfffbffff
 80038bc:	ffff7fff 	.word	0xffff7fff
 80038c0:	ffffefff 	.word	0xffffefff
 80038c4:	ffffdfff 	.word	0xffffdfff
 80038c8:	ffefffff 	.word	0xffefffff
 80038cc:	ff9fffff 	.word	0xff9fffff
 80038d0:	fff7ffff 	.word	0xfff7ffff

080038d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af02      	add	r7, sp, #8
 80038da:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80038e6:	f7fc fcc3 	bl	8000270 <HAL_GetTick>
 80038ea:	0003      	movs	r3, r0
 80038ec:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a21      	ldr	r2, [pc, #132]	; (8003978 <UART_CheckIdleState+0xa4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d004      	beq.n	8003902 <UART_CheckIdleState+0x2e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1f      	ldr	r2, [pc, #124]	; (800397c <UART_CheckIdleState+0xa8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d129      	bne.n	8003956 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2208      	movs	r2, #8
 800390a:	4013      	ands	r3, r2
 800390c:	2b08      	cmp	r3, #8
 800390e:	d10d      	bne.n	800392c <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	0399      	lsls	r1, r3, #14
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <UART_CheckIdleState+0xac>)
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	0013      	movs	r3, r2
 800391e:	2200      	movs	r2, #0
 8003920:	f000 f830 	bl	8003984 <UART_WaitOnFlagUntilTimeout>
 8003924:	1e03      	subs	r3, r0, #0
 8003926:	d001      	beq.n	800392c <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e021      	b.n	8003970 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2204      	movs	r2, #4
 8003934:	4013      	ands	r3, r2
 8003936:	2b04      	cmp	r3, #4
 8003938:	d10d      	bne.n	8003956 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	03d9      	lsls	r1, r3, #15
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <UART_CheckIdleState+0xac>)
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	0013      	movs	r3, r2
 8003948:	2200      	movs	r2, #0
 800394a:	f000 f81b 	bl	8003984 <UART_WaitOnFlagUntilTimeout>
 800394e:	1e03      	subs	r3, r0, #0
 8003950:	d001      	beq.n	8003956 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e00c      	b.n	8003970 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2269      	movs	r2, #105	; 0x69
 800395a:	2120      	movs	r1, #32
 800395c:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	226a      	movs	r2, #106	; 0x6a
 8003962:	2120      	movs	r1, #32
 8003964:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2268      	movs	r2, #104	; 0x68
 800396a:	2100      	movs	r1, #0
 800396c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b004      	add	sp, #16
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40013800 	.word	0x40013800
 800397c:	40004400 	.word	0x40004400
 8003980:	01ffffff 	.word	0x01ffffff

08003984 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	1dfb      	adds	r3, r7, #7
 8003992:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003994:	e02b      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	3301      	adds	r3, #1
 800399a:	d028      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80039a2:	f7fc fc65 	bl	8000270 <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	1ad2      	subs	r2, r2, r3
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d91d      	bls.n	80039ee <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	4916      	ldr	r1, [pc, #88]	; (8003a18 <UART_WaitOnFlagUntilTimeout+0x94>)
 80039be:	400a      	ands	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	6892      	ldr	r2, [r2, #8]
 80039cc:	2101      	movs	r1, #1
 80039ce:	438a      	bics	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2269      	movs	r2, #105	; 0x69
 80039d6:	2120      	movs	r1, #32
 80039d8:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	226a      	movs	r2, #106	; 0x6a
 80039de:	2120      	movs	r1, #32
 80039e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2268      	movs	r2, #104	; 0x68
 80039e6:	2100      	movs	r1, #0
 80039e8:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e00f      	b.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	401a      	ands	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	425a      	negs	r2, r3
 80039fe:	4153      	adcs	r3, r2
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	001a      	movs	r2, r3
 8003a04:	1dfb      	adds	r3, r7, #7
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d0c4      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	0018      	movs	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	fffffe5f 	.word	0xfffffe5f

08003a1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	4909      	ldr	r1, [pc, #36]	; (8003a54 <UART_EndRxTransfer+0x38>)
 8003a30:	400a      	ands	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	6892      	ldr	r2, [r2, #8]
 8003a3e:	2101      	movs	r1, #1
 8003a40:	438a      	bics	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	226a      	movs	r2, #106	; 0x6a
 8003a48:	2120      	movs	r1, #32
 8003a4a:	5499      	strb	r1, [r3, r2]
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b002      	add	sp, #8
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	fffffedf 	.word	0xfffffedf

08003a58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	225a      	movs	r2, #90	; 0x5a
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2252      	movs	r2, #82	; 0x52
 8003a72:	2100      	movs	r1, #0
 8003a74:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7ff fcbb 	bl	80033f4 <HAL_UART_ErrorCallback>
}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b004      	add	sp, #16
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2269      	movs	r2, #105	; 0x69
 8003a92:	5c9b      	ldrb	r3, [r3, r2]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b21      	cmp	r3, #33	; 0x21
 8003a98:	d147      	bne.n	8003b2a <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2252      	movs	r2, #82	; 0x52
 8003a9e:	5a9b      	ldrh	r3, [r3, r2]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d111      	bne.n	8003aca <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	438a      	bics	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	2140      	movs	r1, #64	; 0x40
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e030      	b.n	8003b2c <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	015b      	lsls	r3, r3, #5
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d114      	bne.n	8003b00 <UART_Transmit_IT+0x7a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d110      	bne.n	8003b00 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae2:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	8812      	ldrh	r2, [r2, #0]
 8003aec:	05d2      	lsls	r2, r2, #23
 8003aee:	0dd2      	lsrs	r2, r2, #23
 8003af0:	b292      	uxth	r2, r2
 8003af2:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	64da      	str	r2, [r3, #76]	; 0x4c
 8003afe:	e009      	b.n	8003b14 <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6819      	ldr	r1, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b08:	1c58      	adds	r0, r3, #1
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	64d0      	str	r0, [r2, #76]	; 0x4c
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	850b      	strh	r3, [r1, #40]	; 0x28
      }
      huart->TxXferCount--;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2252      	movs	r2, #82	; 0x52
 8003b18:	5a9b      	ldrh	r3, [r3, r2]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b299      	uxth	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2252      	movs	r2, #82	; 0x52
 8003b24:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b004      	add	sp, #16
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	2140      	movs	r1, #64	; 0x40
 8003b48:	438a      	bics	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2269      	movs	r2, #105	; 0x69
 8003b50:	2120      	movs	r1, #32
 8003b52:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f7ff fc3c 	bl	80033d4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003b70:	230e      	movs	r3, #14
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	215c      	movs	r1, #92	; 0x5c
 8003b78:	5a52      	ldrh	r2, [r2, r1]
 8003b7a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	226a      	movs	r2, #106	; 0x6a
 8003b80:	5c9b      	ldrb	r3, [r3, r2]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b22      	cmp	r3, #34	; 0x22
 8003b86:	d15a      	bne.n	8003c3e <UART_Receive_IT+0xd6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003b92:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	015b      	lsls	r3, r3, #5
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d116      	bne.n	8003bce <UART_Receive_IT+0x66>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d112      	bne.n	8003bce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003bae:	230c      	movs	r3, #12
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	220e      	movs	r2, #14
 8003bb4:	18ba      	adds	r2, r7, r2
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	8812      	ldrh	r2, [r2, #0]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	1c9a      	adds	r2, r3, #2
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54
 8003bcc:	e00f      	b.n	8003bee <UART_Receive_IT+0x86>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	1c59      	adds	r1, r3, #1
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6551      	str	r1, [r2, #84]	; 0x54
 8003bd8:	220c      	movs	r2, #12
 8003bda:	18ba      	adds	r2, r7, r2
 8003bdc:	8812      	ldrh	r2, [r2, #0]
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	210e      	movs	r1, #14
 8003be2:	1879      	adds	r1, r7, r1
 8003be4:	8809      	ldrh	r1, [r1, #0]
 8003be6:	b2c9      	uxtb	r1, r1
 8003be8:	400a      	ands	r2, r1
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	225a      	movs	r2, #90	; 0x5a
 8003bf2:	5a9b      	ldrh	r3, [r3, r2]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	215a      	movs	r1, #90	; 0x5a
 8003bfe:	1c18      	adds	r0, r3, #0
 8003c00:	5250      	strh	r0, [r2, r1]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d119      	bne.n	8003c3a <UART_Receive_IT+0xd2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	4911      	ldr	r1, [pc, #68]	; (8003c58 <UART_Receive_IT+0xf0>)
 8003c12:	400a      	ands	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	6892      	ldr	r2, [r2, #8]
 8003c20:	2101      	movs	r1, #1
 8003c22:	438a      	bics	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	226a      	movs	r2, #106	; 0x6a
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7ff fbd7 	bl	80033e4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e00a      	b.n	8003c50 <UART_Receive_IT+0xe8>
    }

    return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e008      	b.n	8003c50 <UART_Receive_IT+0xe8>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	6992      	ldr	r2, [r2, #24]
 8003c48:	2108      	movs	r1, #8
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
  }
}
 8003c50:	0018      	movs	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b004      	add	sp, #16
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	fffffedf 	.word	0xfffffedf

08003c5c <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2105      	movs	r1, #5
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7fc fa4d 	bl	8000118 <__udivsi3>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <osDelay+0x20>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	e000      	b.n	8003c8e <osDelay+0x22>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 fca6 	bl	80045e0 <vTaskDelay>
  
  return osOK;
 8003c94:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b004      	add	sp, #16
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003ca2:	f000 ff5b 	bl	8004b5c <xTaskGetSchedulerState>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d001      	beq.n	8003cb0 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8003cac:	f000 f994 	bl	8003fd8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4252      	negs	r2, r2
 8003cce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	001a      	movs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3308      	adds	r3, #8
 8003cde:	001a      	movs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b002      	add	sp, #8
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	601a      	str	r2, [r3, #0]
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b004      	add	sp, #16
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	d103      	bne.n	8003d6a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e00c      	b.n	8003d84 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e002      	b.n	8003d78 <vListInsert+0x2c>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d9f6      	bls.n	8003d72 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	601a      	str	r2, [r3, #0]
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b004      	add	sp, #16
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6892      	ldr	r2, [r2, #8]
 8003dce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6852      	ldr	r2, [r2, #4]
 8003dd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d103      	bne.n	8003dec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1e5a      	subs	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b004      	add	sp, #16
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3b04      	subs	r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2280      	movs	r2, #128	; 0x80
 8003e1e:	0452      	lsls	r2, r2, #17
 8003e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3b04      	subs	r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3b04      	subs	r3, #4
 8003e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e34:	4a08      	ldr	r2, [pc, #32]	; (8003e58 <pxPortInitialiseStack+0x50>)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3b14      	subs	r3, #20
 8003e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3b20      	subs	r3, #32
 8003e4a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	08003e5d 	.word	0x08003e5d

08003e5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <prvTaskExitError+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3301      	adds	r3, #1
 8003e66:	d001      	beq.n	8003e6c <prvTaskExitError+0x10>
 8003e68:	b672      	cpsid	i
 8003e6a:	e7fe      	b.n	8003e6a <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8003e6c:	b672      	cpsid	i
	for( ;; );
 8003e6e:	e7fe      	b.n	8003e6e <prvTaskExitError+0x12>
 8003e70:	20000000 	.word	0x20000000

08003e74 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003e80:	4a0b      	ldr	r2, [pc, #44]	; (8003eb0 <pxCurrentTCBConst2>)
 8003e82:	6813      	ldr	r3, [r2, #0]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	3020      	adds	r0, #32
 8003e88:	f380 8809 	msr	PSP, r0
 8003e8c:	2002      	movs	r0, #2
 8003e8e:	f380 8814 	msr	CONTROL, r0
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003e98:	46ae      	mov	lr, r5
 8003e9a:	bc08      	pop	{r3}
 8003e9c:	bc04      	pop	{r2}
 8003e9e:	b662      	cpsie	i
 8003ea0:	4718      	bx	r3
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	46c0      	nop			; (mov r8, r8)
 8003eae:	46c0      	nop			; (mov r8, r8)

08003eb0 <pxCurrentTCBConst2>:
 8003eb0:	2000187c 	.word	0x2000187c
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46c0      	nop			; (mov r8, r8)

08003eb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <xPortStartScheduler+0x3c>)
 8003ebe:	4a0d      	ldr	r2, [pc, #52]	; (8003ef4 <xPortStartScheduler+0x3c>)
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	21ff      	movs	r1, #255	; 0xff
 8003ec4:	0409      	lsls	r1, r1, #16
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <xPortStartScheduler+0x3c>)
 8003ecc:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <xPortStartScheduler+0x3c>)
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	21ff      	movs	r1, #255	; 0xff
 8003ed2:	0609      	lsls	r1, r1, #24
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ed8:	f000 f898 	bl	800400c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <xPortStartScheduler+0x40>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003ee2:	f7ff ffcd 	bl	8003e80 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003ee6:	f7ff ffb9 	bl	8003e5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	e000ed20 	.word	0xe000ed20
 8003ef8:	20000000 	.word	0x20000000

08003efc <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <vPortYield+0x1c>)
 8003f02:	2280      	movs	r2, #128	; 0x80
 8003f04:	0552      	lsls	r2, r2, #21
 8003f06:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8003f08:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003f0c:	f3bf 8f6f 	isb	sy
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003f20:	b672      	cpsid	i
    uxCriticalNesting++;
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <vPortEnterCritical+0x20>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <vPortEnterCritical+0x20>)
 8003f2a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8003f2c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003f30:	f3bf 8f6f 	isb	sy
}
 8003f34:	46c0      	nop			; (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	20000000 	.word	0x20000000

08003f40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f44:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <vPortExitCritical+0x2c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <vPortExitCritical+0x10>
 8003f4c:	b672      	cpsid	i
 8003f4e:	e7fe      	b.n	8003f4e <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <vPortExitCritical+0x2c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	1e5a      	subs	r2, r3, #1
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <vPortExitCritical+0x2c>)
 8003f58:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003f5a:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <vPortExitCritical+0x2c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d100      	bne.n	8003f64 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003f62:	b662      	cpsie	i
    }
}
 8003f64:	46c0      	nop			; (mov r8, r8)
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	20000000 	.word	0x20000000

08003f70 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003f70:	f3ef 8010 	mrs	r0, PRIMASK
 8003f74:	b672      	cpsid	i
 8003f76:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	0018      	movs	r0, r3

08003f7c <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 8003f7c:	f380 8810 	msr	PRIMASK, r0
 8003f80:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
 8003f82:	46c0      	nop			; (mov r8, r8)
	...

08003f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f90:	f3ef 8009 	mrs	r0, PSP
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <pxCurrentTCBConst>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	3820      	subs	r0, #32
 8003f9a:	6010      	str	r0, [r2, #0]
 8003f9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003f9e:	4644      	mov	r4, r8
 8003fa0:	464d      	mov	r5, r9
 8003fa2:	4656      	mov	r6, sl
 8003fa4:	465f      	mov	r7, fp
 8003fa6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003fa8:	b508      	push	{r3, lr}
 8003faa:	b672      	cpsid	i
 8003fac:	f000 fcc0 	bl	8004930 <vTaskSwitchContext>
 8003fb0:	b662      	cpsie	i
 8003fb2:	bc0c      	pop	{r2, r3}
 8003fb4:	6811      	ldr	r1, [r2, #0]
 8003fb6:	6808      	ldr	r0, [r1, #0]
 8003fb8:	3010      	adds	r0, #16
 8003fba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003fbc:	46a0      	mov	r8, r4
 8003fbe:	46a9      	mov	r9, r5
 8003fc0:	46b2      	mov	sl, r6
 8003fc2:	46bb      	mov	fp, r7
 8003fc4:	f380 8809 	msr	PSP, r0
 8003fc8:	3820      	subs	r0, #32
 8003fca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003fcc:	4718      	bx	r3
 8003fce:	46c0      	nop			; (mov r8, r8)

08003fd0 <pxCurrentTCBConst>:
 8003fd0:	2000187c 	.word	0x2000187c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	46c0      	nop			; (mov r8, r8)

08003fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fde:	f7ff ffc7 	bl	8003f70 <ulSetInterruptMaskFromISR>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fe6:	f000 fbef 	bl	80047c8 <xTaskIncrementTick>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d003      	beq.n	8003ff6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <xPortSysTickHandler+0x30>)
 8003ff0:	2280      	movs	r2, #128	; 0x80
 8003ff2:	0552      	lsls	r2, r2, #21
 8003ff4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7ff ffbf 	bl	8003f7c <vClearInterruptMaskFromISR>
}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	46bd      	mov	sp, r7
 8004002:	b002      	add	sp, #8
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800400c:	b5b0      	push	{r4, r5, r7, lr}
 800400e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004010:	4c07      	ldr	r4, [pc, #28]	; (8004030 <vPortSetupTimerInterrupt+0x24>)
 8004012:	4b08      	ldr	r3, [pc, #32]	; (8004034 <vPortSetupTimerInterrupt+0x28>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	21c8      	movs	r1, #200	; 0xc8
 8004018:	0018      	movs	r0, r3
 800401a:	f7fc f87d 	bl	8000118 <__udivsi3>
 800401e:	0003      	movs	r3, r0
 8004020:	3b01      	subs	r3, #1
 8004022:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004024:	4b04      	ldr	r3, [pc, #16]	; (8004038 <vPortSetupTimerInterrupt+0x2c>)
 8004026:	2207      	movs	r2, #7
 8004028:	601a      	str	r2, [r3, #0]
}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	46bd      	mov	sp, r7
 800402e:	bdb0      	pop	{r4, r5, r7, pc}
 8004030:	e000e014 	.word	0xe000e014
 8004034:	20000068 	.word	0x20000068
 8004038:	e000e010 	.word	0xe000e010

0800403c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004048:	f000 fb26 	bl	8004698 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800404c:	4b49      	ldr	r3, [pc, #292]	; (8004174 <pvPortMalloc+0x138>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004054:	f000 f8e0 	bl	8004218 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004058:	4b47      	ldr	r3, [pc, #284]	; (8004178 <pvPortMalloc+0x13c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	4013      	ands	r3, r2
 8004060:	d000      	beq.n	8004064 <pvPortMalloc+0x28>
 8004062:	e079      	b.n	8004158 <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d012      	beq.n	8004090 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800406a:	2208      	movs	r2, #8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	189b      	adds	r3, r3, r2
 8004070:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2207      	movs	r2, #7
 8004076:	4013      	ands	r3, r2
 8004078:	d00a      	beq.n	8004090 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2207      	movs	r2, #7
 800407e:	4393      	bics	r3, r2
 8004080:	3308      	adds	r3, #8
 8004082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2207      	movs	r2, #7
 8004088:	4013      	ands	r3, r2
 800408a:	d001      	beq.n	8004090 <pvPortMalloc+0x54>
 800408c:	b672      	cpsid	i
 800408e:	e7fe      	b.n	800408e <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d060      	beq.n	8004158 <pvPortMalloc+0x11c>
 8004096:	4b39      	ldr	r3, [pc, #228]	; (800417c <pvPortMalloc+0x140>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	429a      	cmp	r2, r3
 800409e:	d85b      	bhi.n	8004158 <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040a0:	4b37      	ldr	r3, [pc, #220]	; (8004180 <pvPortMalloc+0x144>)
 80040a2:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80040a4:	4b36      	ldr	r3, [pc, #216]	; (8004180 <pvPortMalloc+0x144>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040aa:	e004      	b.n	80040b6 <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d203      	bcs.n	80040c8 <pvPortMalloc+0x8c>
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f1      	bne.n	80040ac <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040c8:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <pvPortMalloc+0x138>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d042      	beq.n	8004158 <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2208      	movs	r2, #8
 80040d8:	189b      	adds	r3, r3, r2
 80040da:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	1ad2      	subs	r2, r2, r3
 80040ec:	2308      	movs	r3, #8
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d916      	bls.n	8004122 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	18d3      	adds	r3, r2, r3
 80040fa:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2207      	movs	r2, #7
 8004100:	4013      	ands	r3, r2
 8004102:	d001      	beq.n	8004108 <pvPortMalloc+0xcc>
 8004104:	b672      	cpsid	i
 8004106:	e7fe      	b.n	8004106 <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	1ad2      	subs	r2, r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	0018      	movs	r0, r3
 800411e:	f000 f8db 	bl	80042d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004122:	4b16      	ldr	r3, [pc, #88]	; (800417c <pvPortMalloc+0x140>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	1ad2      	subs	r2, r2, r3
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <pvPortMalloc+0x140>)
 800412e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004130:	4b12      	ldr	r3, [pc, #72]	; (800417c <pvPortMalloc+0x140>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b13      	ldr	r3, [pc, #76]	; (8004184 <pvPortMalloc+0x148>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d203      	bcs.n	8004144 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <pvPortMalloc+0x140>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b10      	ldr	r3, [pc, #64]	; (8004184 <pvPortMalloc+0x148>)
 8004142:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <pvPortMalloc+0x13c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	431a      	orrs	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004158:	f000 faaa 	bl	80046b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2207      	movs	r2, #7
 8004160:	4013      	ands	r3, r2
 8004162:	d001      	beq.n	8004168 <pvPortMalloc+0x12c>
 8004164:	b672      	cpsid	i
 8004166:	e7fe      	b.n	8004166 <pvPortMalloc+0x12a>
	return pvReturn;
 8004168:	68fb      	ldr	r3, [r7, #12]
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b006      	add	sp, #24
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	2000186c 	.word	0x2000186c
 8004178:	20001878 	.word	0x20001878
 800417c:	20001870 	.word	0x20001870
 8004180:	20001864 	.word	0x20001864
 8004184:	20001874 	.word	0x20001874

08004188 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d035      	beq.n	8004206 <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800419a:	2308      	movs	r3, #8
 800419c:	425b      	negs	r3, r3
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	18d3      	adds	r3, r2, r3
 80041a2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	4b18      	ldr	r3, [pc, #96]	; (8004210 <vPortFree+0x88>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4013      	ands	r3, r2
 80041b2:	d101      	bne.n	80041b8 <vPortFree+0x30>
 80041b4:	b672      	cpsid	i
 80041b6:	e7fe      	b.n	80041b6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <vPortFree+0x3c>
 80041c0:	b672      	cpsid	i
 80041c2:	e7fe      	b.n	80041c2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <vPortFree+0x88>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4013      	ands	r3, r2
 80041ce:	d01a      	beq.n	8004206 <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d116      	bne.n	8004206 <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <vPortFree+0x88>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	43db      	mvns	r3, r3
 80041e2:	401a      	ands	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80041e8:	f000 fa56 	bl	8004698 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <vPortFree+0x8c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	18d2      	adds	r2, r2, r3
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <vPortFree+0x8c>)
 80041f8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 f86b 	bl	80042d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004202:	f000 fa55 	bl	80046b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	b004      	add	sp, #16
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	20001878 	.word	0x20001878
 8004214:	20001870 	.word	0x20001870

08004218 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800421e:	4b27      	ldr	r3, [pc, #156]	; (80042bc <prvHeapInit+0xa4>)
 8004220:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004222:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <prvHeapInit+0xa8>)
 8004224:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2207      	movs	r2, #7
 800422a:	4013      	ands	r3, r2
 800422c:	d00c      	beq.n	8004248 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3307      	adds	r3, #7
 8004232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2207      	movs	r2, #7
 8004238:	4393      	bics	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad2      	subs	r2, r2, r3
 8004242:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <prvHeapInit+0xa8>)
 8004244:	18d3      	adds	r3, r2, r3
 8004246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <prvHeapInit+0xac>)
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004252:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <prvHeapInit+0xac>)
 8004254:	2200      	movs	r2, #0
 8004256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	18d3      	adds	r3, r2, r3
 800425e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004260:	2208      	movs	r2, #8
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2207      	movs	r2, #7
 800426c:	4393      	bics	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <prvHeapInit+0xb0>)
 8004274:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <prvHeapInit+0xb0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2200      	movs	r2, #0
 800427c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <prvHeapInit+0xb0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <prvHeapInit+0xb0>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <prvHeapInit+0xb4>)
 80042a2:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <prvHeapInit+0xb8>)
 80042aa:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <prvHeapInit+0xbc>)
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	0612      	lsls	r2, r2, #24
 80042b2:	601a      	str	r2, [r3, #0]
}
 80042b4:	46c0      	nop			; (mov r8, r8)
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b004      	add	sp, #16
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	00001770 	.word	0x00001770
 80042c0:	200000f4 	.word	0x200000f4
 80042c4:	20001864 	.word	0x20001864
 80042c8:	2000186c 	.word	0x2000186c
 80042cc:	20001874 	.word	0x20001874
 80042d0:	20001870 	.word	0x20001870
 80042d4:	20001878 	.word	0x20001878

080042d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80042e0:	4b27      	ldr	r3, [pc, #156]	; (8004380 <prvInsertBlockIntoFreeList+0xa8>)
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e002      	b.n	80042ec <prvInsertBlockIntoFreeList+0x14>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d3f7      	bcc.n	80042e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	18d2      	adds	r2, r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d108      	bne.n	800431a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	18d2      	adds	r2, r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	18d2      	adds	r2, r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d118      	bne.n	8004360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <prvInsertBlockIntoFreeList+0xac>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d00d      	beq.n	8004356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	18d2      	adds	r2, r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	e008      	b.n	8004368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <prvInsertBlockIntoFreeList+0xac>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e003      	b.n	8004368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	429a      	cmp	r2, r3
 800436e:	d002      	beq.n	8004376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	46bd      	mov	sp, r7
 800437a:	b004      	add	sp, #16
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	20001864 	.word	0x20001864
 8004384:	2000186c 	.word	0x2000186c

08004388 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b08d      	sub	sp, #52	; 0x34
 800438c:	af04      	add	r7, sp, #16
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	1dbb      	adds	r3, r7, #6
 8004396:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004398:	1dbb      	adds	r3, r7, #6
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	0018      	movs	r0, r3
 80043a0:	f7ff fe4c 	bl	800403c <pvPortMalloc>
 80043a4:	0003      	movs	r3, r0
 80043a6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80043ae:	2054      	movs	r0, #84	; 0x54
 80043b0:	f7ff fe44 	bl	800403c <pvPortMalloc>
 80043b4:	0003      	movs	r3, r0
 80043b6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
 80043c4:	e006      	b.n	80043d4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7ff fedd 	bl	8004188 <vPortFree>
 80043ce:	e001      	b.n	80043d4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043da:	1dbb      	adds	r3, r7, #6
 80043dc:	881a      	ldrh	r2, [r3, #0]
 80043de:	683c      	ldr	r4, [r7, #0]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9303      	str	r3, [sp, #12]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	9302      	str	r3, [sp, #8]
 80043ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	0023      	movs	r3, r4
 80043f6:	f000 f80f 	bl	8004418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f000 f887 	bl	8004510 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004402:	2301      	movs	r3, #1
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	e002      	b.n	800440e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004408:	2301      	movs	r3, #1
 800440a:	425b      	negs	r3, r3
 800440c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800440e:	69bb      	ldr	r3, [r7, #24]
	}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b009      	add	sp, #36	; 0x24
 8004416:	bd90      	pop	{r4, r7, pc}

08004418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	001a      	movs	r2, r3
 8004430:	21a5      	movs	r1, #165	; 0xa5
 8004432:	f002 fce8 	bl	8006e06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4933      	ldr	r1, [pc, #204]	; (800450c <prvInitialiseNewTask+0xf4>)
 800443e:	468c      	mov	ip, r1
 8004440:	4463      	add	r3, ip
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	18d3      	adds	r3, r2, r3
 8004446:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2207      	movs	r2, #7
 800444c:	4393      	bics	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2207      	movs	r2, #7
 8004454:	4013      	ands	r3, r2
 8004456:	d001      	beq.n	800445c <prvInitialiseNewTask+0x44>
 8004458:	b672      	cpsid	i
 800445a:	e7fe      	b.n	800445a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e013      	b.n	800448a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	18d3      	adds	r3, r2, r3
 8004468:	7818      	ldrb	r0, [r3, #0]
 800446a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800446c:	2134      	movs	r1, #52	; 0x34
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	18d3      	adds	r3, r2, r3
 8004472:	185b      	adds	r3, r3, r1
 8004474:	1c02      	adds	r2, r0, #0
 8004476:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	18d3      	adds	r3, r2, r3
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d006      	beq.n	8004492 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	3301      	adds	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b0f      	cmp	r3, #15
 800448e:	d9e8      	bls.n	8004462 <prvInitialiseNewTask+0x4a>
 8004490:	e000      	b.n	8004494 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004492:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	2243      	movs	r2, #67	; 0x43
 8004498:	2100      	movs	r1, #0
 800449a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d901      	bls.n	80044a6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044a2:	2304      	movs	r3, #4
 80044a4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	3304      	adds	r3, #4
 80044b0:	0018      	movs	r0, r3
 80044b2:	f7ff fc1e 	bl	8003cf2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	3318      	adds	r3, #24
 80044ba:	0018      	movs	r0, r3
 80044bc:	f7ff fc19 	bl	8003cf2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	2205      	movs	r2, #5
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	2200      	movs	r2, #0
 80044da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	2250      	movs	r2, #80	; 0x50
 80044e0:	2100      	movs	r1, #0
 80044e2:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	0018      	movs	r0, r3
 80044ec:	f7ff fc8c 	bl	8003e08 <pxPortInitialiseStack>
 80044f0:	0002      	movs	r2, r0
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <prvInitialiseNewTask+0xea>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	b006      	add	sp, #24
 8004508:	bd80      	pop	{r7, pc}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	3fffffff 	.word	0x3fffffff

08004510 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004518:	f7ff fd00 	bl	8003f1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800451c:	4b2a      	ldr	r3, [pc, #168]	; (80045c8 <prvAddNewTaskToReadyList+0xb8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <prvAddNewTaskToReadyList+0xb8>)
 8004524:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004526:	4b29      	ldr	r3, [pc, #164]	; (80045cc <prvAddNewTaskToReadyList+0xbc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800452e:	4b27      	ldr	r3, [pc, #156]	; (80045cc <prvAddNewTaskToReadyList+0xbc>)
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004534:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <prvAddNewTaskToReadyList+0xb8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d110      	bne.n	800455e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800453c:	f000 fa5a 	bl	80049f4 <prvInitialiseTaskLists>
 8004540:	e00d      	b.n	800455e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004542:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <prvAddNewTaskToReadyList+0xc0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <prvAddNewTaskToReadyList+0xbc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	429a      	cmp	r2, r3
 8004556:	d802      	bhi.n	800455e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004558:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <prvAddNewTaskToReadyList+0xbc>)
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800455e:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <prvAddNewTaskToReadyList+0xc4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <prvAddNewTaskToReadyList+0xc4>)
 8004566:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004568:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <prvAddNewTaskToReadyList+0xc4>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <prvAddNewTaskToReadyList+0xc8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d903      	bls.n	8004584 <prvAddNewTaskToReadyList+0x74>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004580:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <prvAddNewTaskToReadyList+0xc8>)
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	0013      	movs	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	189b      	adds	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4a12      	ldr	r2, [pc, #72]	; (80045dc <prvAddNewTaskToReadyList+0xcc>)
 8004592:	189a      	adds	r2, r3, r2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	0019      	movs	r1, r3
 800459a:	0010      	movs	r0, r2
 800459c:	f7ff fbb4 	bl	8003d08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045a0:	f7ff fcce 	bl	8003f40 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045a4:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <prvAddNewTaskToReadyList+0xc0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ac:	4b07      	ldr	r3, [pc, #28]	; (80045cc <prvAddNewTaskToReadyList+0xbc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d201      	bcs.n	80045be <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045ba:	f7ff fc9f 	bl	8003efc <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b002      	add	sp, #8
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	20001954 	.word	0x20001954
 80045cc:	2000187c 	.word	0x2000187c
 80045d0:	20001960 	.word	0x20001960
 80045d4:	20001970 	.word	0x20001970
 80045d8:	2000195c 	.word	0x2000195c
 80045dc:	20001880 	.word	0x20001880

080045e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d010      	beq.n	8004614 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <vTaskDelay+0x48>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <vTaskDelay+0x1e>
 80045fa:	b672      	cpsid	i
 80045fc:	e7fe      	b.n	80045fc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80045fe:	f000 f84b 	bl	8004698 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2100      	movs	r1, #0
 8004606:	0018      	movs	r0, r3
 8004608:	f000 fac4 	bl	8004b94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800460c:	f000 f850 	bl	80046b0 <xTaskResumeAll>
 8004610:	0003      	movs	r3, r0
 8004612:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800461a:	f7ff fc6f 	bl	8003efc <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	b004      	add	sp, #16
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	2000197c 	.word	0x2000197c

0800462c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004632:	4913      	ldr	r1, [pc, #76]	; (8004680 <vTaskStartScheduler+0x54>)
 8004634:	4813      	ldr	r0, [pc, #76]	; (8004684 <vTaskStartScheduler+0x58>)
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <vTaskStartScheduler+0x5c>)
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	2300      	movs	r3, #0
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	2300      	movs	r3, #0
 8004640:	2240      	movs	r2, #64	; 0x40
 8004642:	f7ff fea1 	bl	8004388 <xTaskCreate>
 8004646:	0003      	movs	r3, r0
 8004648:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10d      	bne.n	800466c <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004650:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <vTaskStartScheduler+0x60>)
 8004654:	2201      	movs	r2, #1
 8004656:	4252      	negs	r2, r2
 8004658:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800465a:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <vTaskStartScheduler+0x64>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <vTaskStartScheduler+0x68>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004666:	f7ff fc27 	bl	8003eb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800466a:	e004      	b.n	8004676 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3301      	adds	r3, #1
 8004670:	d101      	bne.n	8004676 <vTaskStartScheduler+0x4a>
 8004672:	b672      	cpsid	i
 8004674:	e7fe      	b.n	8004674 <vTaskStartScheduler+0x48>
}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	46bd      	mov	sp, r7
 800467a:	b002      	add	sp, #8
 800467c:	bd80      	pop	{r7, pc}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	080076a8 	.word	0x080076a8
 8004684:	080049d5 	.word	0x080049d5
 8004688:	20001978 	.word	0x20001978
 800468c:	20001974 	.word	0x20001974
 8004690:	20001960 	.word	0x20001960
 8004694:	20001958 	.word	0x20001958

08004698 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <vTaskSuspendAll+0x14>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	4b02      	ldr	r3, [pc, #8]	; (80046ac <vTaskSuspendAll+0x14>)
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	2000197c 	.word	0x2000197c

080046b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046be:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <xTaskResumeAll+0xf8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <xTaskResumeAll+0x1a>
 80046c6:	b672      	cpsid	i
 80046c8:	e7fe      	b.n	80046c8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046ca:	f7ff fc27 	bl	8003f1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046ce:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <xTaskResumeAll+0xf8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	1e5a      	subs	r2, r3, #1
 80046d4:	4b34      	ldr	r3, [pc, #208]	; (80047a8 <xTaskResumeAll+0xf8>)
 80046d6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d8:	4b33      	ldr	r3, [pc, #204]	; (80047a8 <xTaskResumeAll+0xf8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d15b      	bne.n	8004798 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046e0:	4b32      	ldr	r3, [pc, #200]	; (80047ac <xTaskResumeAll+0xfc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d057      	beq.n	8004798 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046e8:	e02f      	b.n	800474a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80046ea:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <xTaskResumeAll+0x100>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3318      	adds	r3, #24
 80046f6:	0018      	movs	r0, r3
 80046f8:	f7ff fb5e 	bl	8003db8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3304      	adds	r3, #4
 8004700:	0018      	movs	r0, r3
 8004702:	f7ff fb59 	bl	8003db8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470a:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <xTaskResumeAll+0x104>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d903      	bls.n	800471a <xTaskResumeAll+0x6a>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004716:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <xTaskResumeAll+0x104>)
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	0013      	movs	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	189b      	adds	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a24      	ldr	r2, [pc, #144]	; (80047b8 <xTaskResumeAll+0x108>)
 8004728:	189a      	adds	r2, r3, r2
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3304      	adds	r3, #4
 800472e:	0019      	movs	r1, r3
 8004730:	0010      	movs	r0, r2
 8004732:	f7ff fae9 	bl	8003d08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <xTaskResumeAll+0x10c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	429a      	cmp	r2, r3
 8004742:	d302      	bcc.n	800474a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004744:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <xTaskResumeAll+0x110>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800474a:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <xTaskResumeAll+0x100>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1cb      	bne.n	80046ea <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004758:	f000 f9dc 	bl	8004b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800475c:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <xTaskResumeAll+0x114>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00f      	beq.n	8004788 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004768:	f000 f82e 	bl	80047c8 <xTaskIncrementTick>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d002      	beq.n	8004776 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <xTaskResumeAll+0x110>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3b01      	subs	r3, #1
 800477a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f2      	bne.n	8004768 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <xTaskResumeAll+0x114>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <xTaskResumeAll+0x110>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004790:	2301      	movs	r3, #1
 8004792:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004794:	f7ff fbb2 	bl	8003efc <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004798:	f7ff fbd2 	bl	8003f40 <vPortExitCritical>

	return xAlreadyYielded;
 800479c:	68bb      	ldr	r3, [r7, #8]
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b004      	add	sp, #16
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	2000197c 	.word	0x2000197c
 80047ac:	20001954 	.word	0x20001954
 80047b0:	20001914 	.word	0x20001914
 80047b4:	2000195c 	.word	0x2000195c
 80047b8:	20001880 	.word	0x20001880
 80047bc:	2000187c 	.word	0x2000187c
 80047c0:	20001968 	.word	0x20001968
 80047c4:	20001964 	.word	0x20001964

080047c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d2:	4b4c      	ldr	r3, [pc, #304]	; (8004904 <xTaskIncrementTick+0x13c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d000      	beq.n	80047dc <xTaskIncrementTick+0x14>
 80047da:	e083      	b.n	80048e4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80047dc:	4b4a      	ldr	r3, [pc, #296]	; (8004908 <xTaskIncrementTick+0x140>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3301      	adds	r3, #1
 80047e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047e4:	4b48      	ldr	r3, [pc, #288]	; (8004908 <xTaskIncrementTick+0x140>)
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d117      	bne.n	8004820 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80047f0:	4b46      	ldr	r3, [pc, #280]	; (800490c <xTaskIncrementTick+0x144>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <xTaskIncrementTick+0x36>
 80047fa:	b672      	cpsid	i
 80047fc:	e7fe      	b.n	80047fc <xTaskIncrementTick+0x34>
 80047fe:	4b43      	ldr	r3, [pc, #268]	; (800490c <xTaskIncrementTick+0x144>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	4b42      	ldr	r3, [pc, #264]	; (8004910 <xTaskIncrementTick+0x148>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4b40      	ldr	r3, [pc, #256]	; (800490c <xTaskIncrementTick+0x144>)
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	4b40      	ldr	r3, [pc, #256]	; (8004910 <xTaskIncrementTick+0x148>)
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	4b40      	ldr	r3, [pc, #256]	; (8004914 <xTaskIncrementTick+0x14c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	4b3e      	ldr	r3, [pc, #248]	; (8004914 <xTaskIncrementTick+0x14c>)
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f000 f97a 	bl	8004b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004820:	4b3d      	ldr	r3, [pc, #244]	; (8004918 <xTaskIncrementTick+0x150>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	429a      	cmp	r2, r3
 8004828:	d34e      	bcc.n	80048c8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800482a:	4b38      	ldr	r3, [pc, #224]	; (800490c <xTaskIncrementTick+0x144>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <xTaskIncrementTick+0x70>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <xTaskIncrementTick+0x72>
 8004838:	2300      	movs	r3, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d004      	beq.n	8004848 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800483e:	4b36      	ldr	r3, [pc, #216]	; (8004918 <xTaskIncrementTick+0x150>)
 8004840:	2201      	movs	r2, #1
 8004842:	4252      	negs	r2, r2
 8004844:	601a      	str	r2, [r3, #0]
					break;
 8004846:	e03f      	b.n	80048c8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004848:	4b30      	ldr	r3, [pc, #192]	; (800490c <xTaskIncrementTick+0x144>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d203      	bcs.n	8004868 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004860:	4b2d      	ldr	r3, [pc, #180]	; (8004918 <xTaskIncrementTick+0x150>)
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]
						break;
 8004866:	e02f      	b.n	80048c8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	3304      	adds	r3, #4
 800486c:	0018      	movs	r0, r3
 800486e:	f7ff faa3 	bl	8003db8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d004      	beq.n	8004884 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	3318      	adds	r3, #24
 800487e:	0018      	movs	r0, r3
 8004880:	f7ff fa9a 	bl	8003db8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004888:	4b24      	ldr	r3, [pc, #144]	; (800491c <xTaskIncrementTick+0x154>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d903      	bls.n	8004898 <xTaskIncrementTick+0xd0>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004894:	4b21      	ldr	r3, [pc, #132]	; (800491c <xTaskIncrementTick+0x154>)
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489c:	0013      	movs	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	189b      	adds	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <xTaskIncrementTick+0x158>)
 80048a6:	189a      	adds	r2, r3, r2
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	3304      	adds	r3, #4
 80048ac:	0019      	movs	r1, r3
 80048ae:	0010      	movs	r0, r2
 80048b0:	f7ff fa2a 	bl	8003d08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b8:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <xTaskIncrementTick+0x15c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	429a      	cmp	r2, r3
 80048c0:	d3b3      	bcc.n	800482a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048c6:	e7b0      	b.n	800482a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048c8:	4b16      	ldr	r3, [pc, #88]	; (8004924 <xTaskIncrementTick+0x15c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ce:	4914      	ldr	r1, [pc, #80]	; (8004920 <xTaskIncrementTick+0x158>)
 80048d0:	0013      	movs	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	189b      	adds	r3, r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	585b      	ldr	r3, [r3, r1]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d907      	bls.n	80048ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80048de:	2301      	movs	r3, #1
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	e004      	b.n	80048ee <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80048e4:	4b10      	ldr	r3, [pc, #64]	; (8004928 <xTaskIncrementTick+0x160>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <xTaskIncrementTick+0x160>)
 80048ec:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <xTaskIncrementTick+0x164>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80048f6:	2301      	movs	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80048fa:	697b      	ldr	r3, [r7, #20]
}
 80048fc:	0018      	movs	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	b006      	add	sp, #24
 8004902:	bd80      	pop	{r7, pc}
 8004904:	2000197c 	.word	0x2000197c
 8004908:	20001958 	.word	0x20001958
 800490c:	2000190c 	.word	0x2000190c
 8004910:	20001910 	.word	0x20001910
 8004914:	2000196c 	.word	0x2000196c
 8004918:	20001974 	.word	0x20001974
 800491c:	2000195c 	.word	0x2000195c
 8004920:	20001880 	.word	0x20001880
 8004924:	2000187c 	.word	0x2000187c
 8004928:	20001964 	.word	0x20001964
 800492c:	20001968 	.word	0x20001968

08004930 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004936:	4b22      	ldr	r3, [pc, #136]	; (80049c0 <vTaskSwitchContext+0x90>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800493e:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <vTaskSwitchContext+0x94>)
 8004940:	2201      	movs	r2, #1
 8004942:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004944:	e037      	b.n	80049b6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004946:	4b1f      	ldr	r3, [pc, #124]	; (80049c4 <vTaskSwitchContext+0x94>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800494c:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <vTaskSwitchContext+0x98>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	e007      	b.n	8004964 <vTaskSwitchContext+0x34>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <vTaskSwitchContext+0x2e>
 800495a:	b672      	cpsid	i
 800495c:	e7fe      	b.n	800495c <vTaskSwitchContext+0x2c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3b01      	subs	r3, #1
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	4919      	ldr	r1, [pc, #100]	; (80049cc <vTaskSwitchContext+0x9c>)
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	0013      	movs	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	189b      	adds	r3, r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	585b      	ldr	r3, [r3, r1]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0ee      	beq.n	8004954 <vTaskSwitchContext+0x24>
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	0013      	movs	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	189b      	adds	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4a12      	ldr	r2, [pc, #72]	; (80049cc <vTaskSwitchContext+0x9c>)
 8004982:	189b      	adds	r3, r3, r2
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	605a      	str	r2, [r3, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	429a      	cmp	r2, r3
 800499a:	d104      	bne.n	80049a6 <vTaskSwitchContext+0x76>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	605a      	str	r2, [r3, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <vTaskSwitchContext+0xa0>)
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <vTaskSwitchContext+0x98>)
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b002      	add	sp, #8
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	2000197c 	.word	0x2000197c
 80049c4:	20001968 	.word	0x20001968
 80049c8:	2000195c 	.word	0x2000195c
 80049cc:	20001880 	.word	0x20001880
 80049d0:	2000187c 	.word	0x2000187c

080049d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049dc:	f000 f84e 	bl	8004a7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049e0:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <prvIdleTask+0x1c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d9f9      	bls.n	80049dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80049e8:	f7ff fa88 	bl	8003efc <vPortYield>
		prvCheckTasksWaitingTermination();
 80049ec:	e7f6      	b.n	80049dc <prvIdleTask+0x8>
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	20001880 	.word	0x20001880

080049f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049fa:	2300      	movs	r3, #0
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	e00c      	b.n	8004a1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	0013      	movs	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <prvInitialiseTaskLists+0x68>)
 8004a0c:	189b      	adds	r3, r3, r2
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f7ff f951 	bl	8003cb6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3301      	adds	r3, #1
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d9ef      	bls.n	8004a00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a20:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <prvInitialiseTaskLists+0x6c>)
 8004a22:	0018      	movs	r0, r3
 8004a24:	f7ff f947 	bl	8003cb6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <prvInitialiseTaskLists+0x70>)
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f7ff f943 	bl	8003cb6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a30:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <prvInitialiseTaskLists+0x74>)
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7ff f93f 	bl	8003cb6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <prvInitialiseTaskLists+0x78>)
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f7ff f93b 	bl	8003cb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <prvInitialiseTaskLists+0x7c>)
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7ff f937 	bl	8003cb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <prvInitialiseTaskLists+0x80>)
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <prvInitialiseTaskLists+0x6c>)
 8004a4c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <prvInitialiseTaskLists+0x84>)
 8004a50:	4a04      	ldr	r2, [pc, #16]	; (8004a64 <prvInitialiseTaskLists+0x70>)
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20001880 	.word	0x20001880
 8004a60:	200018e4 	.word	0x200018e4
 8004a64:	200018f8 	.word	0x200018f8
 8004a68:	20001914 	.word	0x20001914
 8004a6c:	20001928 	.word	0x20001928
 8004a70:	20001940 	.word	0x20001940
 8004a74:	2000190c 	.word	0x2000190c
 8004a78:	20001910 	.word	0x20001910

08004a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a82:	e027      	b.n	8004ad4 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 8004a84:	f7ff fe08 	bl	8004698 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004a88:	4b16      	ldr	r3, [pc, #88]	; (8004ae4 <prvCheckTasksWaitingTermination+0x68>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	425a      	negs	r2, r3
 8004a8e:	4153      	adcs	r3, r2
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8004a94:	f7ff fe0c 	bl	80046b0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d11a      	bne.n	8004ad4 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8004a9e:	f7ff fa3d 	bl	8003f1c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <prvCheckTasksWaitingTermination+0x68>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	3304      	adds	r3, #4
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f7ff f982 	bl	8003db8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <prvCheckTasksWaitingTermination+0x6c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	1e5a      	subs	r2, r3, #1
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <prvCheckTasksWaitingTermination+0x6c>)
 8004abc:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <prvCheckTasksWaitingTermination+0x70>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	1e5a      	subs	r2, r3, #1
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <prvCheckTasksWaitingTermination+0x70>)
 8004ac6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8004ac8:	f7ff fa3a 	bl	8003f40 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f000 f80e 	bl	8004af0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <prvCheckTasksWaitingTermination+0x70>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1d3      	bne.n	8004a84 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20001928 	.word	0x20001928
 8004ae8:	20001954 	.word	0x20001954
 8004aec:	2000193c 	.word	0x2000193c

08004af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7ff fb43 	bl	8004188 <vPortFree>
			vPortFree( pxTCB );
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7ff fb3f 	bl	8004188 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b002      	add	sp, #8
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <prvResetNextTaskUnblockTime+0x40>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <prvResetNextTaskUnblockTime+0x14>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <prvResetNextTaskUnblockTime+0x16>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d004      	beq.n	8004b38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <prvResetNextTaskUnblockTime+0x44>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	4252      	negs	r2, r2
 8004b34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b36:	e008      	b.n	8004b4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <prvResetNextTaskUnblockTime+0x40>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <prvResetNextTaskUnblockTime+0x44>)
 8004b48:	601a      	str	r2, [r3, #0]
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b002      	add	sp, #8
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	2000190c 	.word	0x2000190c
 8004b58:	20001974 	.word	0x20001974

08004b5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b62:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <xTaskGetSchedulerState+0x30>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d102      	bne.n	8004b70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	e008      	b.n	8004b82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <xTaskGetSchedulerState+0x34>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	e001      	b.n	8004b82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b82:	687b      	ldr	r3, [r7, #4]
	}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b002      	add	sp, #8
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20001960 	.word	0x20001960
 8004b90:	2000197c 	.word	0x2000197c

08004b94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b9e:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ba4:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	0018      	movs	r0, r3
 8004bac:	f7ff f904 	bl	8003db8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	d10b      	bne.n	8004bce <prvAddCurrentTaskToDelayedList+0x3a>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	1d1a      	adds	r2, r3, #4
 8004bc2:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <prvAddCurrentTaskToDelayedList+0x98>)
 8004bc4:	0011      	movs	r1, r2
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f7ff f89e 	bl	8003d08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bcc:	e026      	b.n	8004c1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	18d3      	adds	r3, r2, r3
 8004bd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bd6:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d209      	bcs.n	8004bfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004be6:	4b12      	ldr	r3, [pc, #72]	; (8004c30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	0010      	movs	r0, r2
 8004bf4:	f7ff f8aa 	bl	8003d4c <vListInsert>
}
 8004bf8:	e010      	b.n	8004c1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3304      	adds	r3, #4
 8004c04:	0019      	movs	r1, r3
 8004c06:	0010      	movs	r0, r2
 8004c08:	f7ff f8a0 	bl	8003d4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d202      	bcs.n	8004c1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	601a      	str	r2, [r3, #0]
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b004      	add	sp, #16
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20001958 	.word	0x20001958
 8004c28:	2000187c 	.word	0x2000187c
 8004c2c:	20001940 	.word	0x20001940
 8004c30:	20001910 	.word	0x20001910
 8004c34:	2000190c 	.word	0x2000190c
 8004c38:	20001974 	.word	0x20001974

08004c3c <MoveStraight>:
            break;
    }
}

int8_t MoveStraight(int8_t vel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	0002      	movs	r2, r0
 8004c44:	1dfb      	adds	r3, r7, #7
 8004c46:	701a      	strb	r2, [r3, #0]
    motor_set(DM_MOTOR0, vel * -1);
 8004c48:	1dfb      	adds	r3, r7, #7
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	425b      	negs	r3, r3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	b25b      	sxtb	r3, r3
 8004c52:	0019      	movs	r1, r3
 8004c54:	2000      	movs	r0, #0
 8004c56:	f001 fb22 	bl	800629e <motor_set>
    motor_set(DM_MOTOR1, vel);
 8004c5a:	1dfb      	adds	r3, r7, #7
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	b25b      	sxtb	r3, r3
 8004c60:	0019      	movs	r1, r3
 8004c62:	2001      	movs	r0, #1
 8004c64:	f001 fb1b 	bl	800629e <motor_set>
    motor_set(DM_MOTOR2, 0);
 8004c68:	2100      	movs	r1, #0
 8004c6a:	2002      	movs	r0, #2
 8004c6c:	f001 fb17 	bl	800629e <motor_set>

    if (vel >= MAX_VEL)
 8004c70:	1dfb      	adds	r3, r7, #7
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	2b4f      	cmp	r3, #79	; 0x4f
 8004c78:	dd03      	ble.n	8004c82 <MoveStraight+0x46>
        vel = MAX_VEL;
 8004c7a:	1dfb      	adds	r3, r7, #7
 8004c7c:	2250      	movs	r2, #80	; 0x50
 8004c7e:	701a      	strb	r2, [r3, #0]
 8004c80:	e005      	b.n	8004c8e <MoveStraight+0x52>
    else
        vel += 20;
 8004c82:	1dfb      	adds	r3, r7, #7
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	3314      	adds	r3, #20
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	1dfb      	adds	r3, r7, #7
 8004c8c:	701a      	strb	r2, [r3, #0]

    return vel;
 8004c8e:	1dfb      	adds	r3, r7, #7
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b25b      	sxtb	r3, r3
}
 8004c94:	0018      	movs	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <MoveBack>:

int8_t MoveBack(int8_t vel)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	1dfb      	adds	r3, r7, #7
 8004ca6:	701a      	strb	r2, [r3, #0]
    motor_set(DM_MOTOR0, vel);
 8004ca8:	1dfb      	adds	r3, r7, #7
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b25b      	sxtb	r3, r3
 8004cae:	0019      	movs	r1, r3
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	f001 faf4 	bl	800629e <motor_set>
    motor_set(DM_MOTOR1, vel * -1);
 8004cb6:	1dfb      	adds	r3, r7, #7
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	425b      	negs	r3, r3
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	b25b      	sxtb	r3, r3
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f001 faeb 	bl	800629e <motor_set>
    motor_set(DM_MOTOR2, 0);
 8004cc8:	2100      	movs	r1, #0
 8004cca:	2002      	movs	r0, #2
 8004ccc:	f001 fae7 	bl	800629e <motor_set>

    if (vel >= MAX_VEL)
 8004cd0:	1dfb      	adds	r3, r7, #7
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	b25b      	sxtb	r3, r3
 8004cd6:	2b4f      	cmp	r3, #79	; 0x4f
 8004cd8:	dd03      	ble.n	8004ce2 <MoveBack+0x46>
        vel = MAX_VEL;
 8004cda:	1dfb      	adds	r3, r7, #7
 8004cdc:	2250      	movs	r2, #80	; 0x50
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	e005      	b.n	8004cee <MoveBack+0x52>
    else
        vel += 20;
 8004ce2:	1dfb      	adds	r3, r7, #7
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	3314      	adds	r3, #20
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	1dfb      	adds	r3, r7, #7
 8004cec:	701a      	strb	r2, [r3, #0]

    return vel;
 8004cee:	1dfb      	adds	r3, r7, #7
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	b25b      	sxtb	r3, r3
}
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b002      	add	sp, #8
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <RotateLeft>:

int8_t RotateLeft(int8_t vel)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	0002      	movs	r2, r0
 8004d04:	1dfb      	adds	r3, r7, #7
 8004d06:	701a      	strb	r2, [r3, #0]
    motor_set(DM_MOTOR0, vel);
 8004d08:	1dfb      	adds	r3, r7, #7
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	b25b      	sxtb	r3, r3
 8004d0e:	0019      	movs	r1, r3
 8004d10:	2000      	movs	r0, #0
 8004d12:	f001 fac4 	bl	800629e <motor_set>
    motor_set(DM_MOTOR1, vel);
 8004d16:	1dfb      	adds	r3, r7, #7
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	b25b      	sxtb	r3, r3
 8004d1c:	0019      	movs	r1, r3
 8004d1e:	2001      	movs	r0, #1
 8004d20:	f001 fabd 	bl	800629e <motor_set>
    motor_set(DM_MOTOR3, -vel);
 8004d24:	1dfb      	adds	r3, r7, #7
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	425b      	negs	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	b25b      	sxtb	r3, r3
 8004d2e:	0019      	movs	r1, r3
 8004d30:	2003      	movs	r0, #3
 8004d32:	f001 fab4 	bl	800629e <motor_set>

    if (vel >= MAX_ROT_VEL)
 8004d36:	1dfb      	adds	r3, r7, #7
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	b25b      	sxtb	r3, r3
 8004d3c:	2b3b      	cmp	r3, #59	; 0x3b
 8004d3e:	dd03      	ble.n	8004d48 <RotateLeft+0x4c>
        vel = MAX_ROT_VEL;
 8004d40:	1dfb      	adds	r3, r7, #7
 8004d42:	223c      	movs	r2, #60	; 0x3c
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e005      	b.n	8004d54 <RotateLeft+0x58>
    else
        vel += 20;
 8004d48:	1dfb      	adds	r3, r7, #7
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	1dfb      	adds	r3, r7, #7
 8004d52:	701a      	strb	r2, [r3, #0]

    return vel;
 8004d54:	1dfb      	adds	r3, r7, #7
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	b25b      	sxtb	r3, r3
}
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b002      	add	sp, #8
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <RotateRight>:

int8_t RotateRight(int8_t vel)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	0002      	movs	r2, r0
 8004d6a:	1dfb      	adds	r3, r7, #7
 8004d6c:	701a      	strb	r2, [r3, #0]
    motor_set(DM_MOTOR0, -vel);
 8004d6e:	1dfb      	adds	r3, r7, #7
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	425b      	negs	r3, r3
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	0019      	movs	r1, r3
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f001 fa8f 	bl	800629e <motor_set>
    motor_set(DM_MOTOR1, -vel);
 8004d80:	1dfb      	adds	r3, r7, #7
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	425b      	negs	r3, r3
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	b25b      	sxtb	r3, r3
 8004d8a:	0019      	movs	r1, r3
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f001 fa86 	bl	800629e <motor_set>
    motor_set(DM_MOTOR3, vel);
 8004d92:	1dfb      	adds	r3, r7, #7
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	b25b      	sxtb	r3, r3
 8004d98:	0019      	movs	r1, r3
 8004d9a:	2003      	movs	r0, #3
 8004d9c:	f001 fa7f 	bl	800629e <motor_set>

    if (vel >= MAX_ROT_VEL)
 8004da0:	1dfb      	adds	r3, r7, #7
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	b25b      	sxtb	r3, r3
 8004da6:	2b3b      	cmp	r3, #59	; 0x3b
 8004da8:	dd03      	ble.n	8004db2 <RotateRight+0x50>
        vel = MAX_ROT_VEL;
 8004daa:	1dfb      	adds	r3, r7, #7
 8004dac:	223c      	movs	r2, #60	; 0x3c
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	e005      	b.n	8004dbe <RotateRight+0x5c>
    else
        vel += 20;
 8004db2:	1dfb      	adds	r3, r7, #7
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	3314      	adds	r3, #20
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	1dfb      	adds	r3, r7, #7
 8004dbc:	701a      	strb	r2, [r3, #0]

    return vel;
 8004dbe:	1dfb      	adds	r3, r7, #7
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	b25b      	sxtb	r3, r3
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <select_adc_channel>:

extern ADC_HandleTypeDef hadc;


static uint32_t select_adc_channel(enum DA_ADC_CHANNEL_E adc_channels)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	0002      	movs	r2, r0
 8004dd4:	1dfb      	adds	r3, r7, #7
 8004dd6:	701a      	strb	r2, [r3, #0]
    switch (adc_channels)
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	d818      	bhi.n	8004e12 <select_adc_channel+0x46>
 8004de0:	009a      	lsls	r2, r3, #2
 8004de2:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <select_adc_channel+0x50>)
 8004de4:	18d3      	adds	r3, r2, r3
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	469f      	mov	pc, r3
    {
    case DA_ADC_CHANNEL0:
        return ADC_CHANNEL_0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e012      	b.n	8004e14 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL1:
        return ADC_CHANNEL_1;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e010      	b.n	8004e14 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL2:
        return ADC_CHANNEL_2;
 8004df2:	2302      	movs	r3, #2
 8004df4:	e00e      	b.n	8004e14 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL3:
        return ADC_CHANNEL_3;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e00c      	b.n	8004e14 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL4:
        return ADC_CHANNEL_4;
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	e00a      	b.n	8004e14 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL5:
        return ADC_CHANNEL_5;
 8004dfe:	2305      	movs	r3, #5
 8004e00:	e008      	b.n	8004e14 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL6:
        return ADC_CHANNEL_6;
 8004e02:	2306      	movs	r3, #6
 8004e04:	e006      	b.n	8004e14 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL7:
        return ADC_CHANNEL_7;
 8004e06:	2307      	movs	r3, #7
 8004e08:	e004      	b.n	8004e14 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL8:
        return ADC_CHANNEL_14;
 8004e0a:	230e      	movs	r3, #14
 8004e0c:	e002      	b.n	8004e14 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL9:
        return ADC_CHANNEL_15;
 8004e0e:	230f      	movs	r3, #15
 8004e10:	e000      	b.n	8004e14 <select_adc_channel+0x48>
        break;
    default:
        return ADC_CHANNEL_0;
 8004e12:	2300      	movs	r3, #0
    }
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	08007960 	.word	0x08007960

08004e20 <activate_channel>:

static void activate_channel(uint32_t adc_channel)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig;
    sConfig.Channel = adc_channel;
 8004e28:	230c      	movs	r3, #12
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004e30:	230c      	movs	r3, #12
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	2280      	movs	r2, #128	; 0x80
 8004e36:	0152      	lsls	r2, r2, #5
 8004e38:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5; //ADC_SAMPLETIME_71CYCLES_5;
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	2202      	movs	r2, #2
 8004e40:	609a      	str	r2, [r3, #8]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8004e42:	230c      	movs	r3, #12
 8004e44:	18fa      	adds	r2, r7, r3
 8004e46:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <activate_channel+0x38>)
 8004e48:	0011      	movs	r1, r2
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f7fb fca8 	bl	80007a0 <HAL_ADC_ConfigChannel>
}
 8004e50:	46c0      	nop			; (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b006      	add	sp, #24
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20001c44 	.word	0x20001c44

08004e5c <deactivate_channel>:

static void deactivate_channel(uint32_t adc_channel)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig;
    sConfig.Channel = adc_channel;
 8004e64:	230c      	movs	r3, #12
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_RANK_NONE;
 8004e6c:	230c      	movs	r3, #12
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <deactivate_channel+0x38>)
 8004e72:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5; //ADC_SAMPLETIME_71CYCLES_5;
 8004e74:	230c      	movs	r3, #12
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	2202      	movs	r2, #2
 8004e7a:	609a      	str	r2, [r3, #8]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8004e7c:	230c      	movs	r3, #12
 8004e7e:	18fa      	adds	r2, r7, r3
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <deactivate_channel+0x3c>)
 8004e82:	0011      	movs	r1, r2
 8004e84:	0018      	movs	r0, r3
 8004e86:	f7fb fc8b 	bl	80007a0 <HAL_ADC_ConfigChannel>
}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b006      	add	sp, #24
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	00001001 	.word	0x00001001
 8004e98:	20001c44 	.word	0x20001c44

08004e9c <adc_init>:
// **************************************************************************
// Public interface
// **************************************************************************

void adc_init()
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
    // no initialization
}
 8004ea0:	46c0      	nop			; (mov r8, r8)
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <adc_get_value>:


uint32_t adc_get_value(enum DA_ADC_CHANNEL_E adc_channel_no)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	0002      	movs	r2, r0
 8004eb0:	1dfb      	adds	r3, r7, #7
 8004eb2:	701a      	strb	r2, [r3, #0]
    uint32_t adc_channel = select_adc_channel(adc_channel_no);
 8004eb4:	1dfb      	adds	r3, r7, #7
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f7ff ff87 	bl	8004dcc <select_adc_channel>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	617b      	str	r3, [r7, #20]
    uint32_t adc_value = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	613b      	str	r3, [r7, #16]
    uint32_t timeout = 10;
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	60fb      	str	r3, [r7, #12]
    activate_channel(adc_channel);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f7ff ffa7 	bl	8004e20 <activate_channel>
    HAL_ADC_Start(&hadc);
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <adc_get_value+0x64>)
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7fb fb31 	bl	800053c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, timeout);
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <adc_get_value+0x64>)
 8004ede:	0011      	movs	r1, r2
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7fb fbc1 	bl	8000668 <HAL_ADC_PollForConversion>
    adc_value = HAL_ADC_GetValue(&hadc);
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <adc_get_value+0x64>)
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f7fb fc4d 	bl	8000788 <HAL_ADC_GetValue>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	613b      	str	r3, [r7, #16]
    HAL_ADC_Stop(&hadc);
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <adc_get_value+0x64>)
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f7fb fb75 	bl	80005e4 <HAL_ADC_Stop>
    deactivate_channel(adc_channel);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f7ff ffad 	bl	8004e5c <deactivate_channel>
    return adc_value;
 8004f02:	693b      	ldr	r3, [r7, #16]
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b006      	add	sp, #24
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20001c44 	.word	0x20001c44

08004f10 <digital_init>:

static void select_pin(enum DD_PINS_E pin_no, pin_t* currentPin);


void digital_init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	2200      	movs	r2, #0
 8004f1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f1c:	1d3b      	adds	r3, r7, #4
 8004f1e:	2201      	movs	r2, #1
 8004f20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = DIP1_Pin;
 8004f22:	1d3b      	adds	r3, r7, #4
 8004f24:	2280      	movs	r2, #128	; 0x80
 8004f26:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP1_GPIO_Port, &GPIO_InitStruct);
 8004f28:	1d3b      	adds	r3, r7, #4
 8004f2a:	4a12      	ldr	r2, [pc, #72]	; (8004f74 <digital_init+0x64>)
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	0010      	movs	r0, r2
 8004f30:	f7fb ffaa 	bl	8000e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIP2_Pin;
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	2240      	movs	r2, #64	; 0x40
 8004f38:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP2_GPIO_Port, &GPIO_InitStruct);
 8004f3a:	1d3b      	adds	r3, r7, #4
 8004f3c:	4a0d      	ldr	r2, [pc, #52]	; (8004f74 <digital_init+0x64>)
 8004f3e:	0019      	movs	r1, r3
 8004f40:	0010      	movs	r0, r2
 8004f42:	f7fb ffa1 	bl	8000e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIP3_Pin;
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	2220      	movs	r2, #32
 8004f4a:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP3_GPIO_Port, &GPIO_InitStruct);
 8004f4c:	1d3b      	adds	r3, r7, #4
 8004f4e:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <digital_init+0x64>)
 8004f50:	0019      	movs	r1, r3
 8004f52:	0010      	movs	r0, r2
 8004f54:	f7fb ff98 	bl	8000e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIP4_Pin;
 8004f58:	1d3b      	adds	r3, r7, #4
 8004f5a:	2280      	movs	r2, #128	; 0x80
 8004f5c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP4_GPIO_Port, &GPIO_InitStruct);
 8004f5e:	1d3b      	adds	r3, r7, #4
 8004f60:	4a05      	ldr	r2, [pc, #20]	; (8004f78 <digital_init+0x68>)
 8004f62:	0019      	movs	r1, r3
 8004f64:	0010      	movs	r0, r2
 8004f66:	f7fb ff8f 	bl	8000e88 <HAL_GPIO_Init>
}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b006      	add	sp, #24
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	48000400 	.word	0x48000400
 8004f78:	48000c00 	.word	0x48000c00

08004f7c <digital_configure_pin>:

void digital_configure_pin(enum DD_PINS_E pin_no, enum DD_PINCONFIG_E direction)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	; 0x28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	0002      	movs	r2, r0
 8004f84:	1dfb      	adds	r3, r7, #7
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	1dbb      	adds	r3, r7, #6
 8004f8a:	1c0a      	adds	r2, r1, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef GPIO_InitStruct;
    pin_t pin;
    select_pin(pin_no, &pin);
 8004f8e:	230c      	movs	r3, #12
 8004f90:	18fa      	adds	r2, r7, r3
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	0011      	movs	r1, r2
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f000 f87d 	bl	8005098 <select_pin>
    GPIO_InitStruct.Pin = pin.pin;
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	889b      	ldrh	r3, [r3, #4]
 8004fa4:	001a      	movs	r2, r3
 8004fa6:	2314      	movs	r3, #20
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	601a      	str	r2, [r3, #0]
    switch(direction)
 8004fac:	1dbb      	adds	r3, r7, #6
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d01a      	beq.n	8004fea <digital_configure_pin+0x6e>
 8004fb4:	dc02      	bgt.n	8004fbc <digital_configure_pin+0x40>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <digital_configure_pin+0x4a>
            GPIO_InitStruct.Pull = GPIO_NOPULL;
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
            break;
        }
    }
}
 8004fba:	e04c      	b.n	8005056 <digital_configure_pin+0xda>
    switch(direction)
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d026      	beq.n	800500e <digital_configure_pin+0x92>
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d036      	beq.n	8005032 <digital_configure_pin+0xb6>
}
 8004fc4:	e047      	b.n	8005056 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fc6:	2314      	movs	r3, #20
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	2201      	movs	r2, #1
 8004fcc:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fce:	2314      	movs	r3, #20
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8004fd6:	230c      	movs	r3, #12
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2214      	movs	r2, #20
 8004fde:	18ba      	adds	r2, r7, r2
 8004fe0:	0011      	movs	r1, r2
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f7fb ff50 	bl	8000e88 <HAL_GPIO_Init>
            break;
 8004fe8:	e035      	b.n	8005056 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fea:	2314      	movs	r3, #20
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	2200      	movs	r2, #0
 8004ff0:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ff2:	2314      	movs	r3, #20
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2214      	movs	r2, #20
 8005002:	18ba      	adds	r2, r7, r2
 8005004:	0011      	movs	r1, r2
 8005006:	0018      	movs	r0, r3
 8005008:	f7fb ff3e 	bl	8000e88 <HAL_GPIO_Init>
            break;
 800500c:	e023      	b.n	8005056 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800500e:	2314      	movs	r3, #20
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	2200      	movs	r2, #0
 8005014:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005016:	2314      	movs	r3, #20
 8005018:	18fb      	adds	r3, r7, r3
 800501a:	2202      	movs	r2, #2
 800501c:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800501e:	230c      	movs	r3, #12
 8005020:	18fb      	adds	r3, r7, r3
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2214      	movs	r2, #20
 8005026:	18ba      	adds	r2, r7, r2
 8005028:	0011      	movs	r1, r2
 800502a:	0018      	movs	r0, r3
 800502c:	f7fb ff2c 	bl	8000e88 <HAL_GPIO_Init>
            break;
 8005030:	e011      	b.n	8005056 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005032:	2314      	movs	r3, #20
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	2200      	movs	r2, #0
 8005038:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503a:	2314      	movs	r3, #20
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	2200      	movs	r2, #0
 8005040:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8005042:	230c      	movs	r3, #12
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2214      	movs	r2, #20
 800504a:	18ba      	adds	r2, r7, r2
 800504c:	0011      	movs	r1, r2
 800504e:	0018      	movs	r0, r3
 8005050:	f7fb ff1a 	bl	8000e88 <HAL_GPIO_Init>
            break;
 8005054:	46c0      	nop			; (mov r8, r8)
}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	46bd      	mov	sp, r7
 800505a:	b00a      	add	sp, #40	; 0x28
 800505c:	bd80      	pop	{r7, pc}

0800505e <digital_get_pin>:
    select_pin(pin_no, &selectedPin);
    HAL_GPIO_WritePin(selectedPin.port, selectedPin.pin, level);
}

enum DD_PINLEVEL_E digital_get_pin(enum DD_PINS_E pin_no)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	0002      	movs	r2, r0
 8005066:	1dfb      	adds	r3, r7, #7
 8005068:	701a      	strb	r2, [r3, #0]
    pin_t selectedPin;
    select_pin(pin_no, &selectedPin);
 800506a:	2308      	movs	r3, #8
 800506c:	18fa      	adds	r2, r7, r3
 800506e:	1dfb      	adds	r3, r7, #7
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	0011      	movs	r1, r2
 8005074:	0018      	movs	r0, r3
 8005076:	f000 f80f 	bl	8005098 <select_pin>
    return HAL_GPIO_ReadPin(selectedPin.port, selectedPin.pin);
 800507a:	2308      	movs	r3, #8
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	2308      	movs	r3, #8
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	889b      	ldrh	r3, [r3, #4]
 8005086:	0019      	movs	r1, r3
 8005088:	0010      	movs	r0, r2
 800508a:	f7fc f879 	bl	8001180 <HAL_GPIO_ReadPin>
 800508e:	0003      	movs	r3, r0
}
 8005090:	0018      	movs	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	b004      	add	sp, #16
 8005096:	bd80      	pop	{r7, pc}

08005098 <select_pin>:
    return ( level == DD_LEVEL_HIGH ? DD_DIP_OFF : DD_DIP_ON );
}


static void select_pin(enum DD_PINS_E pin_no, pin_t* currentPin)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	0002      	movs	r2, r0
 80050a0:	6039      	str	r1, [r7, #0]
 80050a2:	1dfb      	adds	r3, r7, #7
 80050a4:	701a      	strb	r2, [r3, #0]
    switch (pin_no)
 80050a6:	1dfb      	adds	r3, r7, #7
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b11      	cmp	r3, #17
 80050ac:	d900      	bls.n	80050b0 <select_pin+0x18>
 80050ae:	e090      	b.n	80051d2 <select_pin+0x13a>
 80050b0:	009a      	lsls	r2, r3, #2
 80050b2:	4b4d      	ldr	r3, [pc, #308]	; (80051e8 <select_pin+0x150>)
 80050b4:	18d3      	adds	r3, r2, r3
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	469f      	mov	pc, r3
    {
    case DD_PIN_PD14:
    {
        currentPin->port = DIGITAL0_GPIO_Port;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	4a4b      	ldr	r2, [pc, #300]	; (80051ec <select_pin+0x154>)
 80050be:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL0_Pin;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2280      	movs	r2, #128	; 0x80
 80050c4:	01d2      	lsls	r2, r2, #7
 80050c6:	809a      	strh	r2, [r3, #4]
        break;
 80050c8:	e08a      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PD15:
    {
        currentPin->port = DIGITAL1_GPIO_Port;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	4a47      	ldr	r2, [pc, #284]	; (80051ec <select_pin+0x154>)
 80050ce:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL1_Pin;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	4a47      	ldr	r2, [pc, #284]	; (80051f0 <select_pin+0x158>)
 80050d4:	809a      	strh	r2, [r3, #4]
        break;
 80050d6:	e083      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PC8:
    {
        currentPin->port = DIGITAL2_GPIO_Port;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	4a46      	ldr	r2, [pc, #280]	; (80051f4 <select_pin+0x15c>)
 80050dc:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL2_Pin;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2280      	movs	r2, #128	; 0x80
 80050e2:	0052      	lsls	r2, r2, #1
 80050e4:	809a      	strh	r2, [r3, #4]
        break;
 80050e6:	e07b      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PC9:
    {
        currentPin->port = DIGITAL3_GPIO_Port;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4a42      	ldr	r2, [pc, #264]	; (80051f4 <select_pin+0x15c>)
 80050ec:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL3_Pin;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2280      	movs	r2, #128	; 0x80
 80050f2:	0092      	lsls	r2, r2, #2
 80050f4:	809a      	strh	r2, [r3, #4]
        break;
 80050f6:	e073      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PA8:
    {
        currentPin->port = DIGITAL4_GPIO_Port;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2290      	movs	r2, #144	; 0x90
 80050fc:	05d2      	lsls	r2, r2, #23
 80050fe:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL4_Pin;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2280      	movs	r2, #128	; 0x80
 8005104:	0052      	lsls	r2, r2, #1
 8005106:	809a      	strh	r2, [r3, #4]
        break;
 8005108:	e06a      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PC13:
    {
        currentPin->port = DIGITAL5_GPIO_Port;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	4a39      	ldr	r2, [pc, #228]	; (80051f4 <select_pin+0x15c>)
 800510e:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL5_Pin;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2280      	movs	r2, #128	; 0x80
 8005114:	0192      	lsls	r2, r2, #6
 8005116:	809a      	strh	r2, [r3, #4]
        break;
 8005118:	e062      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PB11:
    {
        currentPin->port = SERVO0_GPIO_Port;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	4a36      	ldr	r2, [pc, #216]	; (80051f8 <select_pin+0x160>)
 800511e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO0_Pin;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2280      	movs	r2, #128	; 0x80
 8005124:	0112      	lsls	r2, r2, #4
 8005126:	809a      	strh	r2, [r3, #4]
        break;
 8005128:	e05a      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PB10:
    {
        currentPin->port = SERVO1_GPIO_Port;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	4a32      	ldr	r2, [pc, #200]	; (80051f8 <select_pin+0x160>)
 800512e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO1_Pin;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2280      	movs	r2, #128	; 0x80
 8005134:	00d2      	lsls	r2, r2, #3
 8005136:	809a      	strh	r2, [r3, #4]
        break;
 8005138:	e052      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PE14:
    {
        currentPin->port = SERVO2_GPIO_Port;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	4a2f      	ldr	r2, [pc, #188]	; (80051fc <select_pin+0x164>)
 800513e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO2_Pin;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2280      	movs	r2, #128	; 0x80
 8005144:	01d2      	lsls	r2, r2, #7
 8005146:	809a      	strh	r2, [r3, #4]
        break;
 8005148:	e04a      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PE11:
    {
        currentPin->port = SERVO3_GPIO_Port;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	4a2b      	ldr	r2, [pc, #172]	; (80051fc <select_pin+0x164>)
 800514e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO3_Pin;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2280      	movs	r2, #128	; 0x80
 8005154:	0112      	lsls	r2, r2, #4
 8005156:	809a      	strh	r2, [r3, #4]
        break;
 8005158:	e042      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PE9:
    {
        currentPin->port = SERVO4_GPIO_Port;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	4a27      	ldr	r2, [pc, #156]	; (80051fc <select_pin+0x164>)
 800515e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO4_Pin;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2280      	movs	r2, #128	; 0x80
 8005164:	0092      	lsls	r2, r2, #2
 8005166:	809a      	strh	r2, [r3, #4]
        break;
 8005168:	e03a      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PB1:
    {
        currentPin->port = SERVO5_GPIO_Port;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	4a22      	ldr	r2, [pc, #136]	; (80051f8 <select_pin+0x160>)
 800516e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO5_Pin;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2202      	movs	r2, #2
 8005174:	809a      	strh	r2, [r3, #4]
        break;
 8005176:	e033      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PF10:
    {
        currentPin->port = PWM5_GPIO_Port;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	4a21      	ldr	r2, [pc, #132]	; (8005200 <select_pin+0x168>)
 800517c:	601a      	str	r2, [r3, #0]
        currentPin->pin = PWM5_Pin;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2280      	movs	r2, #128	; 0x80
 8005182:	00d2      	lsls	r2, r2, #3
 8005184:	809a      	strh	r2, [r3, #4]
        break;
 8005186:	e02b      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PF9:
	{
		currentPin->port = PWM4_GPIO_Port;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4a1d      	ldr	r2, [pc, #116]	; (8005200 <select_pin+0x168>)
 800518c:	601a      	str	r2, [r3, #0]
		currentPin->pin = PWM4_Pin;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2280      	movs	r2, #128	; 0x80
 8005192:	0092      	lsls	r2, r2, #2
 8005194:	809a      	strh	r2, [r3, #4]
		break;
 8005196:	e023      	b.n	80051e0 <select_pin+0x148>
	}
    case DD_PIN_PE1:
    {
    	currentPin->port = PWM3_GPIO_Port;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	4a18      	ldr	r2, [pc, #96]	; (80051fc <select_pin+0x164>)
 800519c:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM3_Pin;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2202      	movs	r2, #2
 80051a2:	809a      	strh	r2, [r3, #4]
    	break;
 80051a4:	e01c      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PE0:
    {
    	currentPin->port = PWM2_GPIO_Port;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	4a14      	ldr	r2, [pc, #80]	; (80051fc <select_pin+0x164>)
 80051aa:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM2_Pin;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2201      	movs	r2, #1
 80051b0:	809a      	strh	r2, [r3, #4]
    	break;
 80051b2:	e015      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PB3:
    {
    	currentPin->port = PWM1_GPIO_Port;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	4a10      	ldr	r2, [pc, #64]	; (80051f8 <select_pin+0x160>)
 80051b8:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM1_Pin;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2208      	movs	r2, #8
 80051be:	809a      	strh	r2, [r3, #4]
    	break;
 80051c0:	e00e      	b.n	80051e0 <select_pin+0x148>
    }
    case DD_PIN_PA15:
    {
    	currentPin->port = PWM0_GPIO_Port;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2290      	movs	r2, #144	; 0x90
 80051c6:	05d2      	lsls	r2, r2, #23
 80051c8:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM0_Pin;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <select_pin+0x158>)
 80051ce:	809a      	strh	r2, [r3, #4]
    	break;
 80051d0:	e006      	b.n	80051e0 <select_pin+0x148>
    }
    default:
    {
        currentPin->port = LED_GREEN_GPIO_Port;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	4a07      	ldr	r2, [pc, #28]	; (80051f4 <select_pin+0x15c>)
 80051d6:	601a      	str	r2, [r3, #0]
        currentPin->pin = LED_GREEN_Pin;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2204      	movs	r2, #4
 80051dc:	809a      	strh	r2, [r3, #4]
        break;
 80051de:	46c0      	nop			; (mov r8, r8)
    }
        ;
    }
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b002      	add	sp, #8
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	08007988 	.word	0x08007988
 80051ec:	48000c00 	.word	0x48000c00
 80051f0:	ffff8000 	.word	0xffff8000
 80051f4:	48000800 	.word	0x48000800
 80051f8:	48000400 	.word	0x48000400
 80051fc:	48001000 	.word	0x48001000
 8005200:	48001400 	.word	0x48001400

08005204 <dorobo_init>:
// Die main()-Funktion aus der CubeMX-generierten main() muss in
// init() abgespeichert und hinzugelinkt werden.
extern void init();

void dorobo_init(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
    init();
 8005208:	f000 f952 	bl	80054b0 <init>
    digital_init();
 800520c:	f7ff fe80 	bl	8004f10 <digital_init>
}
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <led_green>:
}

// ***************************************************************************

void led_green(enum DD_PINLEVEL_E level)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	0002      	movs	r2, r0
 8005220:	1dfb      	adds	r3, r7, #7
 8005222:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, level);
 8005224:	1dfb      	adds	r3, r7, #7
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	4804      	ldr	r0, [pc, #16]	; (800523c <led_green+0x24>)
 800522a:	001a      	movs	r2, r3
 800522c:	2104      	movs	r1, #4
 800522e:	f7fb ffc4 	bl	80011ba <HAL_GPIO_WritePin>
}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	46bd      	mov	sp, r7
 8005236:	b002      	add	sp, #8
 8005238:	bd80      	pop	{r7, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	48000800 	.word	0x48000800

08005240 <led_red>:
{
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}

void led_red(enum DD_PINLEVEL_E level)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	0002      	movs	r2, r0
 8005248:	1dfb      	adds	r3, r7, #7
 800524a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, level);
 800524c:	1dfb      	adds	r3, r7, #7
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	4804      	ldr	r0, [pc, #16]	; (8005264 <led_red+0x24>)
 8005252:	001a      	movs	r2, r3
 8005254:	2102      	movs	r1, #2
 8005256:	f7fb ffb0 	bl	80011ba <HAL_GPIO_WritePin>
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	46bd      	mov	sp, r7
 800525e:	b002      	add	sp, #8
 8005260:	bd80      	pop	{r7, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	48000800 	.word	0x48000800

08005268 <_sbrk>:
}

// ***************************************************************************

caddr_t _sbrk(int incr)
{
 8005268:	b590      	push	{r4, r7, lr}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
    extern char _ebss;   ///< symbol defined by the linker
    extern char _estack; ///< symbol defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <_sbrk+0x70>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <_sbrk+0x16>
    {
        heap_end = &_ebss;
 8005278:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <_sbrk+0x70>)
 800527a:	4a18      	ldr	r2, [pc, #96]	; (80052dc <_sbrk+0x74>)
 800527c:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 800527e:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <_sbrk+0x70>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8005284:	f3ef 8308 	mrs	r3, MSP
 8005288:	001c      	movs	r4, r3
  return(result);
 800528a:	0023      	movs	r3, r4
    // determine the maximum address available for the Heap
    // (1) Start with the current stack pointer
    //     This heap end address becomes a problem if
    //     the stack grows further - therefore we allow for
    //     some additional room.
    char *heapMax = (char *) __get_MSP() - 128;
 800528c:	3b80      	subs	r3, #128	; 0x80
 800528e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8005290:	f3ef 8308 	mrs	r3, MSP
 8005294:	001c      	movs	r4, r3
  return(result);
 8005296:	0023      	movs	r3, r4
    if ( (char *) __get_MSP() < prev_heap_end )
 8005298:	001a      	movs	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	429a      	cmp	r2, r3
 800529e:	d201      	bcs.n	80052a4 <_sbrk+0x3c>
    {
        // FreeRTOS multitasking has been started, because
        // the Stack usually lies in an BSS area managed
        // by FreeRTOS. Therefore the maximum heap end is
        // the end of RAM (symbol defined by the linker).
    	heapMax = &_estack; // this symbol is defined at the end of RAM
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <_sbrk+0x78>)
 80052a2:	60fb      	str	r3, [r7, #12]
    }

    if (heap_end + incr > heapMax)
 80052a4:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <_sbrk+0x70>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	18d2      	adds	r2, r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d907      	bls.n	80052c2 <_sbrk+0x5a>
    {
        //_write (STDERR_FILENO, "Heap and heapMax collision\n", 25);
        errno = ENOMEM;
 80052b2:	f001 fd75 	bl	8006da0 <__errno>
 80052b6:	0003      	movs	r3, r0
 80052b8:	220c      	movs	r2, #12
 80052ba:	601a      	str	r2, [r3, #0]
        return (caddr_t) -1;
 80052bc:	2301      	movs	r3, #1
 80052be:	425b      	negs	r3, r3
 80052c0:	e006      	b.n	80052d0 <_sbrk+0x68>
        // Alternative implementation: exit(-1) to stop the system
    }

    heap_end += incr;
 80052c2:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <_sbrk+0x70>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	18d2      	adds	r2, r2, r3
 80052ca:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <_sbrk+0x70>)
 80052cc:	601a      	str	r2, [r3, #0]
    return (caddr_t) prev_heap_end;
 80052ce:	68bb      	ldr	r3, [r7, #8]
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b005      	add	sp, #20
 80052d6:	bd90      	pop	{r4, r7, pc}
 80052d8:	20001980 	.word	0x20001980
 80052dc:	20001d30 	.word	0x20001d30
 80052e0:	20004000 	.word	0x20004000

080052e4 <ft_start_sampling>:
	// nothing to initialize
}


void ft_start_sampling(enum DD_PINS_E leftSensor)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	0002      	movs	r2, r0
 80052ec:	1dfb      	adds	r3, r7, #7
 80052ee:	701a      	strb	r2, [r3, #0]
    leftIRSensor = leftSensor;
 80052f0:	4b07      	ldr	r3, [pc, #28]	; (8005310 <ft_start_sampling+0x2c>)
 80052f2:	1dfa      	adds	r2, r7, #7
 80052f4:	7812      	ldrb	r2, [r2, #0]
 80052f6:	701a      	strb	r2, [r3, #0]
    ft_samples_ready = false;
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <ft_start_sampling+0x30>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6);
 80052fe:	4b06      	ldr	r3, [pc, #24]	; (8005318 <ft_start_sampling+0x34>)
 8005300:	0018      	movs	r0, r3
 8005302:	f7fc fdcf 	bl	8001ea4 <HAL_TIM_Base_Start_IT>
}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b002      	add	sp, #8
 800530c:	bd80      	pop	{r7, pc}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	20001986 	.word	0x20001986
 8005314:	20001985 	.word	0x20001985
 8005318:	20001b54 	.word	0x20001b54

0800531c <ft_is_sampling_finished>:
{
    HAL_TIM_Base_Stop_IT(&htim6);
}

bool ft_is_sampling_finished(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
    return ft_samples_ready;
 8005320:	4b02      	ldr	r3, [pc, #8]	; (800532c <ft_is_sampling_finished+0x10>)
 8005322:	781b      	ldrb	r3, [r3, #0]
}
 8005324:	0018      	movs	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	20001985 	.word	0x20001985

08005330 <ft_get_transform>:


uint16_t ft_get_transform(DFT_FREQ_T frequency)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	0002      	movs	r2, r0
 8005338:	1dfb      	adds	r3, r7, #7
 800533a:	701a      	strb	r2, [r3, #0]
    int16_t real = 0;
 800533c:	2316      	movs	r3, #22
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	2200      	movs	r2, #0
 8005342:	801a      	strh	r2, [r3, #0]
    int16_t imag = 0;
 8005344:	2314      	movs	r3, #20
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	2200      	movs	r2, #0
 800534a:	801a      	strh	r2, [r3, #0]
    const int8_t *steuervektor_re;
    const int8_t *steuervektor_im;

    // Steuervektor abhängig von der gewünschten Frequenzkomponente auswählen
    switch (frequency)
 800534c:	1dfb      	adds	r3, r7, #7
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <ft_get_transform+0x2a>
 8005354:	2b01      	cmp	r3, #1
 8005356:	d005      	beq.n	8005364 <ft_get_transform+0x34>
 8005358:	e009      	b.n	800536e <ft_get_transform+0x3e>
    {
    case DFT_FREQ100:
        steuervektor_re = STEUERVEKTOR_RE10_;
 800535a:	4b25      	ldr	r3, [pc, #148]	; (80053f0 <ft_get_transform+0xc0>)
 800535c:	613b      	str	r3, [r7, #16]
        steuervektor_im = STEUERVEKTOR_IM10_;
 800535e:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <ft_get_transform+0xc4>)
 8005360:	60fb      	str	r3, [r7, #12]
        break;
 8005362:	e004      	b.n	800536e <ft_get_transform+0x3e>
    case DFT_FREQ125:
        steuervektor_re = STEUERVEKTOR_RE8_;
 8005364:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <ft_get_transform+0xc8>)
 8005366:	613b      	str	r3, [r7, #16]
        steuervektor_im = STEUERVEKTOR_IM8_;
 8005368:	4b24      	ldr	r3, [pc, #144]	; (80053fc <ft_get_transform+0xcc>)
 800536a:	60fb      	str	r3, [r7, #12]
        break;
 800536c:	46c0      	nop			; (mov r8, r8)
    }



    // Fouriertransformierte für die gewünschte Frequenzkomponente bestimmen
    for (int i = 0; i < SAMPLES; i++)
 800536e:	2300      	movs	r3, #0
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	e024      	b.n	80053be <ft_get_transform+0x8e>
    {
        if (signal1_[i])
 8005374:	4a22      	ldr	r2, [pc, #136]	; (8005400 <ft_get_transform+0xd0>)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	18d3      	adds	r3, r2, r3
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01b      	beq.n	80053b8 <ft_get_transform+0x88>
        {
            real += steuervektor_re[i];
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	18d3      	adds	r3, r2, r3
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	b25b      	sxtb	r3, r3
 800538a:	b29a      	uxth	r2, r3
 800538c:	2316      	movs	r3, #22
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	18d3      	adds	r3, r2, r3
 8005394:	b29a      	uxth	r2, r3
 8005396:	2316      	movs	r3, #22
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	801a      	strh	r2, [r3, #0]
            imag += steuervektor_im[i];
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	18d3      	adds	r3, r2, r3
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	b25b      	sxtb	r3, r3
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	2314      	movs	r3, #20
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	18d3      	adds	r3, r2, r3
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	2314      	movs	r3, #20
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < SAMPLES; i++)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	3301      	adds	r3, #1
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b27      	cmp	r3, #39	; 0x27
 80053c2:	ddd7      	ble.n	8005374 <ft_get_transform+0x44>
        }
    }

    // TODO stimmt das?
    return abs(real) + abs(imag);
 80053c4:	2316      	movs	r3, #22
 80053c6:	18fb      	adds	r3, r7, r3
 80053c8:	2200      	movs	r2, #0
 80053ca:	5e9b      	ldrsh	r3, [r3, r2]
 80053cc:	17da      	asrs	r2, r3, #31
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	4053      	eors	r3, r2
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	2314      	movs	r3, #20
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2100      	movs	r1, #0
 80053da:	5e5b      	ldrsh	r3, [r3, r1]
 80053dc:	17d9      	asrs	r1, r3, #31
 80053de:	185b      	adds	r3, r3, r1
 80053e0:	404b      	eors	r3, r1
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	18d3      	adds	r3, r2, r3
 80053e6:	b29b      	uxth	r3, r3
}
 80053e8:	0018      	movs	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b006      	add	sp, #24
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	08007a20 	.word	0x08007a20
 80053f4:	08007a48 	.word	0x08007a48
 80053f8:	080079d0 	.word	0x080079d0
 80053fc:	080079f8 	.word	0x080079f8
 8005400:	20001988 	.word	0x20001988

08005404 <ft_get_samples>:
}

// ***************************************************************************

void ft_get_samples()
{
 8005404:	b5b0      	push	{r4, r5, r7, lr}
 8005406:	af00      	add	r7, sp, #0
    if (ft_sample_index == SAMPLES)
 8005408:	4b15      	ldr	r3, [pc, #84]	; (8005460 <ft_get_samples+0x5c>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b28      	cmp	r3, #40	; 0x28
 800540e:	d111      	bne.n	8005434 <ft_get_samples+0x30>
    {
        HAL_TIM_Base_Stop_IT(&htim6);
 8005410:	4b14      	ldr	r3, [pc, #80]	; (8005464 <ft_get_samples+0x60>)
 8005412:	0018      	movs	r0, r3
 8005414:	f7fc fd60 	bl	8001ed8 <HAL_TIM_Base_Stop_IT>
        ft_sample_index = 0;
 8005418:	4b11      	ldr	r3, [pc, #68]	; (8005460 <ft_get_samples+0x5c>)
 800541a:	2200      	movs	r2, #0
 800541c:	701a      	strb	r2, [r3, #0]
        ft_samples_ready = true;
 800541e:	4b12      	ldr	r3, [pc, #72]	; (8005468 <ft_get_samples+0x64>)
 8005420:	2201      	movs	r2, #1
 8005422:	701a      	strb	r2, [r3, #0]
        if (sampling_finished != NULL)
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <ft_get_samples+0x68>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d015      	beq.n	8005458 <ft_get_samples+0x54>
            sampling_finished();
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <ft_get_samples+0x68>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4798      	blx	r3
    else
    {
        signal1_[ft_sample_index] = digital_get_pin(leftIRSensor);
        ft_sample_index++;
    }
}
 8005432:	e011      	b.n	8005458 <ft_get_samples+0x54>
        signal1_[ft_sample_index] = digital_get_pin(leftIRSensor);
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <ft_get_samples+0x5c>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	001c      	movs	r4, r3
 800543a:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <ft_get_samples+0x6c>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	0018      	movs	r0, r3
 8005440:	f7ff fe0d 	bl	800505e <digital_get_pin>
 8005444:	0003      	movs	r3, r0
 8005446:	001a      	movs	r2, r3
 8005448:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <ft_get_samples+0x70>)
 800544a:	551a      	strb	r2, [r3, r4]
        ft_sample_index++;
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <ft_get_samples+0x5c>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	b2da      	uxtb	r2, r3
 8005454:	4b02      	ldr	r3, [pc, #8]	; (8005460 <ft_get_samples+0x5c>)
 8005456:	701a      	strb	r2, [r3, #0]
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	46bd      	mov	sp, r7
 800545c:	bdb0      	pop	{r4, r5, r7, pc}
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	20001984 	.word	0x20001984
 8005464:	20001b54 	.word	0x20001b54
 8005468:	20001985 	.word	0x20001985
 800546c:	200019b0 	.word	0x200019b0
 8005470:	20001986 	.word	0x20001986
 8005474:	20001988 	.word	0x20001988

08005478 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
    /* TIM Update event */
    if (__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET)
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <TIM6_DAC_IRQHandler+0x34>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2201      	movs	r2, #1
 8005484:	4013      	ands	r3, r2
 8005486:	2b01      	cmp	r3, #1
 8005488:	d10d      	bne.n	80054a6 <TIM6_DAC_IRQHandler+0x2e>
    {
        if (__HAL_TIM_GET_IT_SOURCE(&htim6, TIM_IT_UPDATE) != RESET)
 800548a:	4b08      	ldr	r3, [pc, #32]	; (80054ac <TIM6_DAC_IRQHandler+0x34>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	4013      	ands	r3, r2
 8005494:	2b01      	cmp	r3, #1
 8005496:	d106      	bne.n	80054a6 <TIM6_DAC_IRQHandler+0x2e>
        {
            __HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8005498:	4b04      	ldr	r3, [pc, #16]	; (80054ac <TIM6_DAC_IRQHandler+0x34>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2202      	movs	r2, #2
 800549e:	4252      	negs	r2, r2
 80054a0:	611a      	str	r2, [r3, #16]

            ft_get_samples();
 80054a2:	f7ff ffaf 	bl	8005404 <ft_get_samples>
        }
    }
}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20001b54 	.word	0x20001b54

080054b0 <init>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void init(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054b4:	f7fa febc 	bl	8000230 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80054b8:	f000 f819 	bl	80054ee <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80054bc:	f000 fbae 	bl	8005c1c <MX_GPIO_Init>
  MX_TIM3_Init();
 80054c0:	f000 f97a 	bl	80057b8 <MX_TIM3_Init>
  MX_ADC_Init();
 80054c4:	f000 f898 	bl	80055f8 <MX_ADC_Init>
  MX_USART1_UART_Init();
 80054c8:	f000 fb50 	bl	8005b6c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80054cc:	f000 fb7a 	bl	8005bc4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80054d0:	f000 f92a 	bl	8005728 <MX_TIM2_Init>
  MX_TIM15_Init();
 80054d4:	f000 fa00 	bl	80058d8 <MX_TIM15_Init>
  MX_TIM16_Init();
 80054d8:	f000 fa78 	bl	80059cc <MX_TIM16_Init>
  MX_TIM17_Init();
 80054dc:	f000 fade 	bl	8005a9c <MX_TIM17_Init>
  MX_TIM6_Init();
 80054e0:	f000 f9d0 	bl	8005884 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80054e4:	f000 f86a 	bl	80055bc <MX_NVIC_Init>
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b098      	sub	sp, #96	; 0x60
 80054f2:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80054f4:	232c      	movs	r3, #44	; 0x2c
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	2211      	movs	r2, #17
 80054fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054fc:	232c      	movs	r3, #44	; 0x2c
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	2201      	movs	r2, #1
 8005502:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8005504:	232c      	movs	r3, #44	; 0x2c
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	2201      	movs	r2, #1
 800550a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800550c:	232c      	movs	r3, #44	; 0x2c
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	2210      	movs	r2, #16
 8005512:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005514:	232c      	movs	r3, #44	; 0x2c
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	2202      	movs	r2, #2
 800551a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800551c:	232c      	movs	r3, #44	; 0x2c
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	0252      	lsls	r2, r2, #9
 8005524:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8005526:	232c      	movs	r3, #44	; 0x2c
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	2280      	movs	r2, #128	; 0x80
 800552c:	0352      	lsls	r2, r2, #13
 800552e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8005530:	232c      	movs	r3, #44	; 0x2c
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005538:	232c      	movs	r3, #44	; 0x2c
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	0018      	movs	r0, r3
 800553e:	f7fb fe59 	bl	80011f4 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005542:	231c      	movs	r3, #28
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	2207      	movs	r2, #7
 8005548:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800554a:	231c      	movs	r3, #28
 800554c:	18fb      	adds	r3, r7, r3
 800554e:	2202      	movs	r2, #2
 8005550:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005552:	231c      	movs	r3, #28
 8005554:	18fb      	adds	r3, r7, r3
 8005556:	2200      	movs	r2, #0
 8005558:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800555a:	231c      	movs	r3, #28
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	2200      	movs	r2, #0
 8005560:	60da      	str	r2, [r3, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8005562:	231c      	movs	r3, #28
 8005564:	18fb      	adds	r3, r7, r3
 8005566:	2101      	movs	r1, #1
 8005568:	0018      	movs	r0, r3
 800556a:	f7fc f9a1 	bl	80018b0 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800556e:	003b      	movs	r3, r7
 8005570:	2203      	movs	r2, #3
 8005572:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005574:	003b      	movs	r3, r7
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800557a:	003b      	movs	r3, r7
 800557c:	2200      	movs	r2, #0
 800557e:	60da      	str	r2, [r3, #12]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8005580:	003b      	movs	r3, r7
 8005582:	0018      	movs	r0, r3
 8005584:	f7fc fb64 	bl	8001c50 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005588:	f7fc fb18 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 800558c:	0002      	movs	r2, r0
 800558e:	23fa      	movs	r3, #250	; 0xfa
 8005590:	0099      	lsls	r1, r3, #2
 8005592:	0010      	movs	r0, r2
 8005594:	f7fa fdc0 	bl	8000118 <__udivsi3>
 8005598:	0003      	movs	r3, r0
 800559a:	0018      	movs	r0, r3
 800559c:	f7fb fc06 	bl	8000dac <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80055a0:	2004      	movs	r0, #4
 80055a2:	f7fb fc11 	bl	8000dc8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 80055a6:	2301      	movs	r3, #1
 80055a8:	425b      	negs	r3, r3
 80055aa:	2200      	movs	r2, #0
 80055ac:	2103      	movs	r1, #3
 80055ae:	0018      	movs	r0, r3
 80055b0:	f7fb fbd6 	bl	8000d60 <HAL_NVIC_SetPriority>
}
 80055b4:	46c0      	nop			; (mov r8, r8)
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b018      	add	sp, #96	; 0x60
 80055ba:	bd80      	pop	{r7, pc}

080055bc <MX_NVIC_Init>:

/** NVIC Configuration
*/
void MX_NVIC_Init(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80055c0:	2200      	movs	r2, #0
 80055c2:	2103      	movs	r1, #3
 80055c4:	2011      	movs	r0, #17
 80055c6:	f7fb fbcb 	bl	8000d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80055ca:	2011      	movs	r0, #17
 80055cc:	f7fb fbde 	bl	8000d8c <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80055d0:	2200      	movs	r2, #0
 80055d2:	2103      	movs	r1, #3
 80055d4:	201b      	movs	r0, #27
 80055d6:	f7fb fbc3 	bl	8000d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80055da:	201b      	movs	r0, #27
 80055dc:	f7fb fbd6 	bl	8000d8c <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80055e0:	2200      	movs	r2, #0
 80055e2:	2103      	movs	r1, #3
 80055e4:	201c      	movs	r0, #28
 80055e6:	f7fb fbbb 	bl	8000d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80055ea:	201c      	movs	r0, #28
 80055ec:	f7fb fbce 	bl	8000d8c <HAL_NVIC_EnableIRQ>
}
 80055f0:	46c0      	nop			; (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <MX_ADC_Init>:

/* ADC init function */
void MX_ADC_Init(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc.Instance = ADC1;
 80055fe:	4b47      	ldr	r3, [pc, #284]	; (800571c <MX_ADC_Init+0x124>)
 8005600:	4a47      	ldr	r2, [pc, #284]	; (8005720 <MX_ADC_Init+0x128>)
 8005602:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005604:	4b45      	ldr	r3, [pc, #276]	; (800571c <MX_ADC_Init+0x124>)
 8005606:	2200      	movs	r2, #0
 8005608:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800560a:	4b44      	ldr	r3, [pc, #272]	; (800571c <MX_ADC_Init+0x124>)
 800560c:	2200      	movs	r2, #0
 800560e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005610:	4b42      	ldr	r3, [pc, #264]	; (800571c <MX_ADC_Init+0x124>)
 8005612:	2200      	movs	r2, #0
 8005614:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005616:	4b41      	ldr	r3, [pc, #260]	; (800571c <MX_ADC_Init+0x124>)
 8005618:	2201      	movs	r2, #1
 800561a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800561c:	4b3f      	ldr	r3, [pc, #252]	; (800571c <MX_ADC_Init+0x124>)
 800561e:	2204      	movs	r2, #4
 8005620:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8005622:	4b3e      	ldr	r3, [pc, #248]	; (800571c <MX_ADC_Init+0x124>)
 8005624:	2200      	movs	r2, #0
 8005626:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8005628:	4b3c      	ldr	r3, [pc, #240]	; (800571c <MX_ADC_Init+0x124>)
 800562a:	2200      	movs	r2, #0
 800562c:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 800562e:	4b3b      	ldr	r3, [pc, #236]	; (800571c <MX_ADC_Init+0x124>)
 8005630:	2200      	movs	r2, #0
 8005632:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8005634:	4b39      	ldr	r3, [pc, #228]	; (800571c <MX_ADC_Init+0x124>)
 8005636:	2201      	movs	r2, #1
 8005638:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800563a:	4b38      	ldr	r3, [pc, #224]	; (800571c <MX_ADC_Init+0x124>)
 800563c:	2200      	movs	r2, #0
 800563e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8005640:	4b36      	ldr	r3, [pc, #216]	; (800571c <MX_ADC_Init+0x124>)
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005646:	4b35      	ldr	r3, [pc, #212]	; (800571c <MX_ADC_Init+0x124>)
 8005648:	2201      	movs	r2, #1
 800564a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_ADC_Init(&hadc);
 800564c:	4b33      	ldr	r3, [pc, #204]	; (800571c <MX_ADC_Init+0x124>)
 800564e:	0018      	movs	r0, r3
 8005650:	f7fa fe36 	bl	80002c0 <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8005654:	1d3b      	adds	r3, r7, #4
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE; //ADC_RANK_CHANNEL_NUMBER;
 800565a:	1d3b      	adds	r3, r7, #4
 800565c:	4a31      	ldr	r2, [pc, #196]	; (8005724 <MX_ADC_Init+0x12c>)
 800565e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5; //ADC_SAMPLETIME_71CYCLES_5;
 8005660:	1d3b      	adds	r3, r7, #4
 8005662:	2202      	movs	r2, #2
 8005664:	609a      	str	r2, [r3, #8]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8005666:	1d3a      	adds	r2, r7, #4
 8005668:	4b2c      	ldr	r3, [pc, #176]	; (800571c <MX_ADC_Init+0x124>)
 800566a:	0011      	movs	r1, r2
 800566c:	0018      	movs	r0, r3
 800566e:	f7fb f897 	bl	80007a0 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8005672:	1d3b      	adds	r3, r7, #4
 8005674:	2201      	movs	r2, #1
 8005676:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8005678:	1d3a      	adds	r2, r7, #4
 800567a:	4b28      	ldr	r3, [pc, #160]	; (800571c <MX_ADC_Init+0x124>)
 800567c:	0011      	movs	r1, r2
 800567e:	0018      	movs	r0, r3
 8005680:	f7fb f88e 	bl	80007a0 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8005684:	1d3b      	adds	r3, r7, #4
 8005686:	2202      	movs	r2, #2
 8005688:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800568a:	1d3a      	adds	r2, r7, #4
 800568c:	4b23      	ldr	r3, [pc, #140]	; (800571c <MX_ADC_Init+0x124>)
 800568e:	0011      	movs	r1, r2
 8005690:	0018      	movs	r0, r3
 8005692:	f7fb f885 	bl	80007a0 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 8005696:	1d3b      	adds	r3, r7, #4
 8005698:	2203      	movs	r2, #3
 800569a:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800569c:	1d3a      	adds	r2, r7, #4
 800569e:	4b1f      	ldr	r3, [pc, #124]	; (800571c <MX_ADC_Init+0x124>)
 80056a0:	0011      	movs	r1, r2
 80056a2:	0018      	movs	r0, r3
 80056a4:	f7fb f87c 	bl	80007a0 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 80056a8:	1d3b      	adds	r3, r7, #4
 80056aa:	2204      	movs	r2, #4
 80056ac:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80056ae:	1d3a      	adds	r2, r7, #4
 80056b0:	4b1a      	ldr	r3, [pc, #104]	; (800571c <MX_ADC_Init+0x124>)
 80056b2:	0011      	movs	r1, r2
 80056b4:	0018      	movs	r0, r3
 80056b6:	f7fb f873 	bl	80007a0 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	2205      	movs	r2, #5
 80056be:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80056c0:	1d3a      	adds	r2, r7, #4
 80056c2:	4b16      	ldr	r3, [pc, #88]	; (800571c <MX_ADC_Init+0x124>)
 80056c4:	0011      	movs	r1, r2
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7fb f86a 	bl	80007a0 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 80056cc:	1d3b      	adds	r3, r7, #4
 80056ce:	2206      	movs	r2, #6
 80056d0:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80056d2:	1d3a      	adds	r2, r7, #4
 80056d4:	4b11      	ldr	r3, [pc, #68]	; (800571c <MX_ADC_Init+0x124>)
 80056d6:	0011      	movs	r1, r2
 80056d8:	0018      	movs	r0, r3
 80056da:	f7fb f861 	bl	80007a0 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_7;
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80056e4:	1d3a      	adds	r2, r7, #4
 80056e6:	4b0d      	ldr	r3, [pc, #52]	; (800571c <MX_ADC_Init+0x124>)
 80056e8:	0011      	movs	r1, r2
 80056ea:	0018      	movs	r0, r3
 80056ec:	f7fb f858 	bl	80007a0 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_14;
 80056f0:	1d3b      	adds	r3, r7, #4
 80056f2:	220e      	movs	r2, #14
 80056f4:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80056f6:	1d3a      	adds	r2, r7, #4
 80056f8:	4b08      	ldr	r3, [pc, #32]	; (800571c <MX_ADC_Init+0x124>)
 80056fa:	0011      	movs	r1, r2
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7fb f84f 	bl	80007a0 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_15;
 8005702:	1d3b      	adds	r3, r7, #4
 8005704:	220f      	movs	r2, #15
 8005706:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8005708:	1d3a      	adds	r2, r7, #4
 800570a:	4b04      	ldr	r3, [pc, #16]	; (800571c <MX_ADC_Init+0x124>)
 800570c:	0011      	movs	r1, r2
 800570e:	0018      	movs	r0, r3
 8005710:	f7fb f846 	bl	80007a0 <HAL_ADC_ConfigChannel>
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	46bd      	mov	sp, r7
 8005718:	b004      	add	sp, #16
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20001c44 	.word	0x20001c44
 8005720:	40012400 	.word	0x40012400
 8005724:	00001001 	.word	0x00001001

08005728 <MX_TIM2_Init>:

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800572e:	4b21      	ldr	r3, [pc, #132]	; (80057b4 <MX_TIM2_Init+0x8c>)
 8005730:	2280      	movs	r2, #128	; 0x80
 8005732:	05d2      	lsls	r2, r2, #23
 8005734:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005736:	4b1f      	ldr	r3, [pc, #124]	; (80057b4 <MX_TIM2_Init+0x8c>)
 8005738:	2200      	movs	r2, #0
 800573a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800573c:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <MX_TIM2_Init+0x8c>)
 800573e:	2200      	movs	r2, #0
 8005740:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8005742:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <MX_TIM2_Init+0x8c>)
 8005744:	2200      	movs	r2, #0
 8005746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005748:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <MX_TIM2_Init+0x8c>)
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&htim2);
 800574e:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <MX_TIM2_Init+0x8c>)
 8005750:	0018      	movs	r0, r3
 8005752:	f7fc fbeb 	bl	8001f2c <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005756:	2320      	movs	r3, #32
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800575e:	2320      	movs	r3, #32
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	2200      	movs	r2, #0
 8005764:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8005766:	2320      	movs	r3, #32
 8005768:	18fa      	adds	r2, r7, r3
 800576a:	4b12      	ldr	r3, [pc, #72]	; (80057b4 <MX_TIM2_Init+0x8c>)
 800576c:	0011      	movs	r1, r2
 800576e:	0018      	movs	r0, r3
 8005770:	f7fd fa7b 	bl	8002c6a <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005774:	1d3b      	adds	r3, r7, #4
 8005776:	2260      	movs	r2, #96	; 0x60
 8005778:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	2200      	movs	r2, #0
 800577e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005780:	1d3b      	adds	r3, r7, #4
 8005782:	2200      	movs	r2, #0
 8005784:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005786:	1d3b      	adds	r3, r7, #4
 8005788:	2200      	movs	r2, #0
 800578a:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 800578c:	1d39      	adds	r1, r7, #4
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <MX_TIM2_Init+0x8c>)
 8005790:	2200      	movs	r2, #0
 8005792:	0018      	movs	r0, r3
 8005794:	f7fc fd50 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8005798:	1d39      	adds	r1, r7, #4
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <MX_TIM2_Init+0x8c>)
 800579c:	2204      	movs	r2, #4
 800579e:	0018      	movs	r0, r3
 80057a0:	f7fc fd4a 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim2);
 80057a4:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <MX_TIM2_Init+0x8c>)
 80057a6:	0018      	movs	r0, r3
 80057a8:	f000 ff3a 	bl	8006620 <HAL_TIM_MspPostInit>

}
 80057ac:	46c0      	nop			; (mov r8, r8)
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b00a      	add	sp, #40	; 0x28
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20001b94 	.word	0x20001b94

080057b8 <MX_TIM3_Init>:

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08e      	sub	sp, #56	; 0x38
 80057bc:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 80057be:	4b2f      	ldr	r3, [pc, #188]	; (800587c <MX_TIM3_Init+0xc4>)
 80057c0:	4a2f      	ldr	r2, [pc, #188]	; (8005880 <MX_TIM3_Init+0xc8>)
 80057c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 80057c4:	4b2d      	ldr	r3, [pc, #180]	; (800587c <MX_TIM3_Init+0xc4>)
 80057c6:	2214      	movs	r2, #20
 80057c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ca:	4b2c      	ldr	r3, [pc, #176]	; (800587c <MX_TIM3_Init+0xc4>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80057d0:	4b2a      	ldr	r3, [pc, #168]	; (800587c <MX_TIM3_Init+0xc4>)
 80057d2:	2264      	movs	r2, #100	; 0x64
 80057d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057d6:	4b29      	ldr	r3, [pc, #164]	; (800587c <MX_TIM3_Init+0xc4>)
 80057d8:	2200      	movs	r2, #0
 80057da:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Init(&htim3);
 80057dc:	4b27      	ldr	r3, [pc, #156]	; (800587c <MX_TIM3_Init+0xc4>)
 80057de:	0018      	movs	r0, r3
 80057e0:	f7fc fb34 	bl	8001e4c <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057e4:	2328      	movs	r3, #40	; 0x28
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	0152      	lsls	r2, r2, #5
 80057ec:	601a      	str	r2, [r3, #0]
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 80057ee:	2328      	movs	r3, #40	; 0x28
 80057f0:	18fa      	adds	r2, r7, r3
 80057f2:	4b22      	ldr	r3, [pc, #136]	; (800587c <MX_TIM3_Init+0xc4>)
 80057f4:	0011      	movs	r1, r2
 80057f6:	0018      	movs	r0, r3
 80057f8:	f7fc fdd6 	bl	80023a8 <HAL_TIM_ConfigClockSource>

  HAL_TIM_PWM_Init(&htim3);
 80057fc:	4b1f      	ldr	r3, [pc, #124]	; (800587c <MX_TIM3_Init+0xc4>)
 80057fe:	0018      	movs	r0, r3
 8005800:	f7fc fb94 	bl	8001f2c <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005804:	2320      	movs	r3, #32
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800580c:	2320      	movs	r3, #32
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	2200      	movs	r2, #0
 8005812:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8005814:	2320      	movs	r3, #32
 8005816:	18fa      	adds	r2, r7, r3
 8005818:	4b18      	ldr	r3, [pc, #96]	; (800587c <MX_TIM3_Init+0xc4>)
 800581a:	0011      	movs	r1, r2
 800581c:	0018      	movs	r0, r3
 800581e:	f7fd fa24 	bl	8002c6a <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005822:	1d3b      	adds	r3, r7, #4
 8005824:	2260      	movs	r2, #96	; 0x60
 8005826:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005828:	1d3b      	adds	r3, r7, #4
 800582a:	2200      	movs	r2, #0
 800582c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	2200      	movs	r2, #0
 8005832:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	2200      	movs	r2, #0
 8005838:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800583a:	1d39      	adds	r1, r7, #4
 800583c:	4b0f      	ldr	r3, [pc, #60]	; (800587c <MX_TIM3_Init+0xc4>)
 800583e:	2200      	movs	r2, #0
 8005840:	0018      	movs	r0, r3
 8005842:	f7fc fcf9 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8005846:	1d39      	adds	r1, r7, #4
 8005848:	4b0c      	ldr	r3, [pc, #48]	; (800587c <MX_TIM3_Init+0xc4>)
 800584a:	2204      	movs	r2, #4
 800584c:	0018      	movs	r0, r3
 800584e:	f7fc fcf3 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 8005852:	1d39      	adds	r1, r7, #4
 8005854:	4b09      	ldr	r3, [pc, #36]	; (800587c <MX_TIM3_Init+0xc4>)
 8005856:	2208      	movs	r2, #8
 8005858:	0018      	movs	r0, r3
 800585a:	f7fc fced 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
 800585e:	1d39      	adds	r1, r7, #4
 8005860:	4b06      	ldr	r3, [pc, #24]	; (800587c <MX_TIM3_Init+0xc4>)
 8005862:	220c      	movs	r2, #12
 8005864:	0018      	movs	r0, r3
 8005866:	f7fc fce7 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim3);
 800586a:	4b04      	ldr	r3, [pc, #16]	; (800587c <MX_TIM3_Init+0xc4>)
 800586c:	0018      	movs	r0, r3
 800586e:	f000 fed7 	bl	8006620 <HAL_TIM_MspPostInit>

}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	46bd      	mov	sp, r7
 8005876:	b00e      	add	sp, #56	; 0x38
 8005878:	bd80      	pop	{r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	20001aa4 	.word	0x20001aa4
 8005880:	40000400 	.word	0x40000400

08005884 <MX_TIM6_Init>:

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 800588a:	4b10      	ldr	r3, [pc, #64]	; (80058cc <MX_TIM6_Init+0x48>)
 800588c:	4a10      	ldr	r2, [pc, #64]	; (80058d0 <MX_TIM6_Init+0x4c>)
 800588e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48;
 8005890:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <MX_TIM6_Init+0x48>)
 8005892:	2230      	movs	r2, #48	; 0x30
 8005894:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <MX_TIM6_Init+0x48>)
 8005898:	2200      	movs	r2, #0
 800589a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800589c:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <MX_TIM6_Init+0x48>)
 800589e:	4a0d      	ldr	r2, [pc, #52]	; (80058d4 <MX_TIM6_Init+0x50>)
 80058a0:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Init(&htim6);
 80058a2:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <MX_TIM6_Init+0x48>)
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7fc fad1 	bl	8001e4c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80058aa:	003b      	movs	r3, r7
 80058ac:	2220      	movs	r2, #32
 80058ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058b0:	003b      	movs	r3, r7
 80058b2:	2200      	movs	r2, #0
 80058b4:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 80058b6:	003a      	movs	r2, r7
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <MX_TIM6_Init+0x48>)
 80058ba:	0011      	movs	r1, r2
 80058bc:	0018      	movs	r0, r3
 80058be:	f7fd f9d4 	bl	8002c6a <HAL_TIMEx_MasterConfigSynchronization>

}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b002      	add	sp, #8
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	20001b54 	.word	0x20001b54
 80058d0:	40001000 	.word	0x40001000
 80058d4:	000003e7 	.word	0x000003e7

080058d8 <MX_TIM15_Init>:

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b090      	sub	sp, #64	; 0x40
 80058dc:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim15.Instance = TIM15;
 80058de:	4b39      	ldr	r3, [pc, #228]	; (80059c4 <MX_TIM15_Init+0xec>)
 80058e0:	4a39      	ldr	r2, [pc, #228]	; (80059c8 <MX_TIM15_Init+0xf0>)
 80058e2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80058e4:	4b37      	ldr	r3, [pc, #220]	; (80059c4 <MX_TIM15_Init+0xec>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058ea:	4b36      	ldr	r3, [pc, #216]	; (80059c4 <MX_TIM15_Init+0xec>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0;
 80058f0:	4b34      	ldr	r3, [pc, #208]	; (80059c4 <MX_TIM15_Init+0xec>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058f6:	4b33      	ldr	r3, [pc, #204]	; (80059c4 <MX_TIM15_Init+0xec>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80058fc:	4b31      	ldr	r3, [pc, #196]	; (80059c4 <MX_TIM15_Init+0xec>)
 80058fe:	2200      	movs	r2, #0
 8005900:	615a      	str	r2, [r3, #20]
  HAL_TIM_PWM_Init(&htim15);
 8005902:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <MX_TIM15_Init+0xec>)
 8005904:	0018      	movs	r0, r3
 8005906:	f7fc fb11 	bl	8001f2c <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800590a:	2338      	movs	r3, #56	; 0x38
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005912:	2338      	movs	r3, #56	; 0x38
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	2200      	movs	r2, #0
 8005918:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800591a:	2338      	movs	r3, #56	; 0x38
 800591c:	18fa      	adds	r2, r7, r3
 800591e:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <MX_TIM15_Init+0xec>)
 8005920:	0011      	movs	r1, r2
 8005922:	0018      	movs	r0, r3
 8005924:	f7fd f9a1 	bl	8002c6a <HAL_TIMEx_MasterConfigSynchronization>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005928:	231c      	movs	r3, #28
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005930:	231c      	movs	r3, #28
 8005932:	18fb      	adds	r3, r7, r3
 8005934:	2200      	movs	r2, #0
 8005936:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005938:	231c      	movs	r3, #28
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	2200      	movs	r2, #0
 800593e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005940:	231c      	movs	r3, #28
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	2200      	movs	r2, #0
 8005946:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005948:	231c      	movs	r3, #28
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	2200      	movs	r2, #0
 800594e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005950:	231c      	movs	r3, #28
 8005952:	18fb      	adds	r3, r7, r3
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	0192      	lsls	r2, r2, #6
 8005958:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800595a:	231c      	movs	r3, #28
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	2200      	movs	r2, #0
 8005960:	619a      	str	r2, [r3, #24]
  HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig);
 8005962:	231c      	movs	r3, #28
 8005964:	18fa      	adds	r2, r7, r3
 8005966:	4b17      	ldr	r3, [pc, #92]	; (80059c4 <MX_TIM15_Init+0xec>)
 8005968:	0011      	movs	r1, r2
 800596a:	0018      	movs	r0, r3
 800596c:	f7fd f9c0 	bl	8002cf0 <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005970:	003b      	movs	r3, r7
 8005972:	2260      	movs	r2, #96	; 0x60
 8005974:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005976:	003b      	movs	r3, r7
 8005978:	2200      	movs	r2, #0
 800597a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800597c:	003b      	movs	r3, r7
 800597e:	2200      	movs	r2, #0
 8005980:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005982:	003b      	movs	r3, r7
 8005984:	2200      	movs	r2, #0
 8005986:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005988:	003b      	movs	r3, r7
 800598a:	2200      	movs	r2, #0
 800598c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800598e:	003b      	movs	r3, r7
 8005990:	2200      	movs	r2, #0
 8005992:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005994:	003b      	movs	r3, r7
 8005996:	2200      	movs	r2, #0
 8005998:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1);
 800599a:	0039      	movs	r1, r7
 800599c:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <MX_TIM15_Init+0xec>)
 800599e:	2200      	movs	r2, #0
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7fc fc49 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2);
 80059a6:	0039      	movs	r1, r7
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <MX_TIM15_Init+0xec>)
 80059aa:	2204      	movs	r2, #4
 80059ac:	0018      	movs	r0, r3
 80059ae:	f7fc fc43 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim15);
 80059b2:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <MX_TIM15_Init+0xec>)
 80059b4:	0018      	movs	r0, r3
 80059b6:	f000 fe33 	bl	8006620 <HAL_TIM_MspPostInit>

}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	46bd      	mov	sp, r7
 80059be:	b010      	add	sp, #64	; 0x40
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	20001a24 	.word	0x20001a24
 80059c8:	40014000 	.word	0x40014000

080059cc <MX_TIM16_Init>:

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08e      	sub	sp, #56	; 0x38
 80059d0:	af00      	add	r7, sp, #0

  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim16.Instance = TIM16;
 80059d2:	4b30      	ldr	r3, [pc, #192]	; (8005a94 <MX_TIM16_Init+0xc8>)
 80059d4:	4a30      	ldr	r2, [pc, #192]	; (8005a98 <MX_TIM16_Init+0xcc>)
 80059d6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80059d8:	4b2e      	ldr	r3, [pc, #184]	; (8005a94 <MX_TIM16_Init+0xc8>)
 80059da:	2200      	movs	r2, #0
 80059dc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059de:	4b2d      	ldr	r3, [pc, #180]	; (8005a94 <MX_TIM16_Init+0xc8>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 80059e4:	4b2b      	ldr	r3, [pc, #172]	; (8005a94 <MX_TIM16_Init+0xc8>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059ea:	4b2a      	ldr	r3, [pc, #168]	; (8005a94 <MX_TIM16_Init+0xc8>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80059f0:	4b28      	ldr	r3, [pc, #160]	; (8005a94 <MX_TIM16_Init+0xc8>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	615a      	str	r2, [r3, #20]
  HAL_TIM_Base_Init(&htim16);
 80059f6:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <MX_TIM16_Init+0xc8>)
 80059f8:	0018      	movs	r0, r3
 80059fa:	f7fc fa27 	bl	8001e4c <HAL_TIM_Base_Init>

  HAL_TIM_PWM_Init(&htim16);
 80059fe:	4b25      	ldr	r3, [pc, #148]	; (8005a94 <MX_TIM16_Init+0xc8>)
 8005a00:	0018      	movs	r0, r3
 8005a02:	f7fc fa93 	bl	8001f2c <HAL_TIM_PWM_Init>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005a06:	231c      	movs	r3, #28
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005a0e:	231c      	movs	r3, #28
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	2200      	movs	r2, #0
 8005a14:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005a16:	231c      	movs	r3, #28
 8005a18:	18fb      	adds	r3, r7, r3
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005a1e:	231c      	movs	r3, #28
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	2200      	movs	r2, #0
 8005a24:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005a26:	231c      	movs	r3, #28
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005a2e:	231c      	movs	r3, #28
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	0192      	lsls	r2, r2, #6
 8005a36:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005a38:	231c      	movs	r3, #28
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	619a      	str	r2, [r3, #24]
  HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig);
 8005a40:	231c      	movs	r3, #28
 8005a42:	18fa      	adds	r2, r7, r3
 8005a44:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <MX_TIM16_Init+0xc8>)
 8005a46:	0011      	movs	r1, r2
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f7fd f951 	bl	8002cf0 <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a4e:	003b      	movs	r3, r7
 8005a50:	2260      	movs	r2, #96	; 0x60
 8005a52:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005a54:	003b      	movs	r3, r7
 8005a56:	2200      	movs	r2, #0
 8005a58:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a5a:	003b      	movs	r3, r7
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a60:	003b      	movs	r3, r7
 8005a62:	2200      	movs	r2, #0
 8005a64:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a66:	003b      	movs	r3, r7
 8005a68:	2200      	movs	r2, #0
 8005a6a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a6c:	003b      	movs	r3, r7
 8005a6e:	2200      	movs	r2, #0
 8005a70:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005a72:	003b      	movs	r3, r7
 8005a74:	2200      	movs	r2, #0
 8005a76:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1);
 8005a78:	0039      	movs	r1, r7
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <MX_TIM16_Init+0xc8>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f7fc fbda 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim16);
 8005a84:	4b03      	ldr	r3, [pc, #12]	; (8005a94 <MX_TIM16_Init+0xc8>)
 8005a86:	0018      	movs	r0, r3
 8005a88:	f000 fdca 	bl	8006620 <HAL_TIM_MspPostInit>

}
 8005a8c:	46c0      	nop			; (mov r8, r8)
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b00e      	add	sp, #56	; 0x38
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20001c90 	.word	0x20001c90
 8005a98:	40014400 	.word	0x40014400

08005a9c <MX_TIM17_Init>:

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08e      	sub	sp, #56	; 0x38
 8005aa0:	af00      	add	r7, sp, #0

  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim17.Instance = TIM17;
 8005aa2:	4b30      	ldr	r3, [pc, #192]	; (8005b64 <MX_TIM17_Init+0xc8>)
 8005aa4:	4a30      	ldr	r2, [pc, #192]	; (8005b68 <MX_TIM17_Init+0xcc>)
 8005aa6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8005aa8:	4b2e      	ldr	r3, [pc, #184]	; (8005b64 <MX_TIM17_Init+0xc8>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005aae:	4b2d      	ldr	r3, [pc, #180]	; (8005b64 <MX_TIM17_Init+0xc8>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8005ab4:	4b2b      	ldr	r3, [pc, #172]	; (8005b64 <MX_TIM17_Init+0xc8>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aba:	4b2a      	ldr	r3, [pc, #168]	; (8005b64 <MX_TIM17_Init+0xc8>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005ac0:	4b28      	ldr	r3, [pc, #160]	; (8005b64 <MX_TIM17_Init+0xc8>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	615a      	str	r2, [r3, #20]
  HAL_TIM_Base_Init(&htim17);
 8005ac6:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <MX_TIM17_Init+0xc8>)
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f7fc f9bf 	bl	8001e4c <HAL_TIM_Base_Init>

  HAL_TIM_PWM_Init(&htim17);
 8005ace:	4b25      	ldr	r3, [pc, #148]	; (8005b64 <MX_TIM17_Init+0xc8>)
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7fc fa2b 	bl	8001f2c <HAL_TIM_PWM_Init>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005ad6:	231c      	movs	r3, #28
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005ade:	231c      	movs	r3, #28
 8005ae0:	18fb      	adds	r3, r7, r3
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005ae6:	231c      	movs	r3, #28
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	2200      	movs	r2, #0
 8005aec:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005aee:	231c      	movs	r3, #28
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	2200      	movs	r2, #0
 8005af4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005af6:	231c      	movs	r3, #28
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	2200      	movs	r2, #0
 8005afc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005afe:	231c      	movs	r3, #28
 8005b00:	18fb      	adds	r3, r7, r3
 8005b02:	2280      	movs	r2, #128	; 0x80
 8005b04:	0192      	lsls	r2, r2, #6
 8005b06:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b08:	231c      	movs	r3, #28
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	619a      	str	r2, [r3, #24]
  HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig);
 8005b10:	231c      	movs	r3, #28
 8005b12:	18fa      	adds	r2, r7, r3
 8005b14:	4b13      	ldr	r3, [pc, #76]	; (8005b64 <MX_TIM17_Init+0xc8>)
 8005b16:	0011      	movs	r1, r2
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f7fd f8e9 	bl	8002cf0 <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b1e:	003b      	movs	r3, r7
 8005b20:	2260      	movs	r2, #96	; 0x60
 8005b22:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005b24:	003b      	movs	r3, r7
 8005b26:	2200      	movs	r2, #0
 8005b28:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b2a:	003b      	movs	r3, r7
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005b30:	003b      	movs	r3, r7
 8005b32:	2200      	movs	r2, #0
 8005b34:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b36:	003b      	movs	r3, r7
 8005b38:	2200      	movs	r2, #0
 8005b3a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b3c:	003b      	movs	r3, r7
 8005b3e:	2200      	movs	r2, #0
 8005b40:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b42:	003b      	movs	r3, r7
 8005b44:	2200      	movs	r2, #0
 8005b46:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1);
 8005b48:	0039      	movs	r1, r7
 8005b4a:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <MX_TIM17_Init+0xc8>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f7fc fb72 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim17);
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <MX_TIM17_Init+0xc8>)
 8005b56:	0018      	movs	r0, r3
 8005b58:	f000 fd62 	bl	8006620 <HAL_TIM_MspPostInit>

}
 8005b5c:	46c0      	nop			; (mov r8, r8)
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b00e      	add	sp, #56	; 0x38
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20001a64 	.word	0x20001a64
 8005b68:	40014800 	.word	0x40014800

08005b6c <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005b70:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <MX_USART1_UART_Init+0x50>)
 8005b72:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <MX_USART1_UART_Init+0x54>)
 8005b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <MX_USART1_UART_Init+0x50>)
 8005b78:	22e1      	movs	r2, #225	; 0xe1
 8005b7a:	0252      	lsls	r2, r2, #9
 8005b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <MX_USART1_UART_Init+0x50>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b84:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <MX_USART1_UART_Init+0x50>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <MX_USART1_UART_Init+0x50>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <MX_USART1_UART_Init+0x50>)
 8005b92:	220c      	movs	r2, #12
 8005b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b96:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <MX_USART1_UART_Init+0x50>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b9c:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <MX_USART1_UART_Init+0x50>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ba2:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <MX_USART1_UART_Init+0x50>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <MX_USART1_UART_Init+0x50>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart1);
 8005bae:	4b03      	ldr	r3, [pc, #12]	; (8005bbc <MX_USART1_UART_Init+0x50>)
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f7fd f91b 	bl	8002dec <HAL_UART_Init>

}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20001ae4 	.word	0x20001ae4
 8005bc0:	40013800 	.word	0x40013800

08005bc4 <MX_USART2_UART_Init>:

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005bc8:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <MX_USART2_UART_Init+0x50>)
 8005bca:	4a13      	ldr	r2, [pc, #76]	; (8005c18 <MX_USART2_UART_Init+0x54>)
 8005bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <MX_USART2_UART_Init+0x50>)
 8005bd0:	22e1      	movs	r2, #225	; 0xe1
 8005bd2:	0252      	lsls	r2, r2, #9
 8005bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <MX_USART2_UART_Init+0x50>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <MX_USART2_UART_Init+0x50>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005be2:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <MX_USART2_UART_Init+0x50>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <MX_USART2_UART_Init+0x50>)
 8005bea:	220c      	movs	r2, #12
 8005bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bee:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <MX_USART2_UART_Init+0x50>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bf4:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <MX_USART2_UART_Init+0x50>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <MX_USART2_UART_Init+0x50>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c00:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <MX_USART2_UART_Init+0x50>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart2);
 8005c06:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <MX_USART2_UART_Init+0x50>)
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f7fd f8ef 	bl	8002dec <HAL_UART_Init>
}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20001bd4 	.word	0x20001bd4
 8005c18:	40004400 	.word	0x40004400

08005c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08c      	sub	sp, #48	; 0x30
 8005c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c22:	4ba7      	ldr	r3, [pc, #668]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c24:	4aa6      	ldr	r2, [pc, #664]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c26:	6952      	ldr	r2, [r2, #20]
 8005c28:	2180      	movs	r1, #128	; 0x80
 8005c2a:	0389      	lsls	r1, r1, #14
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	615a      	str	r2, [r3, #20]
 8005c30:	4ba3      	ldr	r3, [pc, #652]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c32:	695a      	ldr	r2, [r3, #20]
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	039b      	lsls	r3, r3, #14
 8005c38:	4013      	ands	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
 8005c3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c3e:	4ba0      	ldr	r3, [pc, #640]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c40:	4a9f      	ldr	r2, [pc, #636]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c42:	6952      	ldr	r2, [r2, #20]
 8005c44:	2180      	movs	r1, #128	; 0x80
 8005c46:	0309      	lsls	r1, r1, #12
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	615a      	str	r2, [r3, #20]
 8005c4c:	4b9c      	ldr	r3, [pc, #624]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c4e:	695a      	ldr	r2, [r3, #20]
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	031b      	lsls	r3, r3, #12
 8005c54:	4013      	ands	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c5a:	4b99      	ldr	r3, [pc, #612]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c5c:	4a98      	ldr	r2, [pc, #608]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c5e:	6952      	ldr	r2, [r2, #20]
 8005c60:	2180      	movs	r1, #128	; 0x80
 8005c62:	03c9      	lsls	r1, r1, #15
 8005c64:	430a      	orrs	r2, r1
 8005c66:	615a      	str	r2, [r3, #20]
 8005c68:	4b95      	ldr	r3, [pc, #596]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c6a:	695a      	ldr	r2, [r3, #20]
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	03db      	lsls	r3, r3, #15
 8005c70:	4013      	ands	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c76:	4b92      	ldr	r3, [pc, #584]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c78:	4a91      	ldr	r2, [pc, #580]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c7a:	6952      	ldr	r2, [r2, #20]
 8005c7c:	2180      	movs	r1, #128	; 0x80
 8005c7e:	0289      	lsls	r1, r1, #10
 8005c80:	430a      	orrs	r2, r1
 8005c82:	615a      	str	r2, [r3, #20]
 8005c84:	4b8e      	ldr	r3, [pc, #568]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	029b      	lsls	r3, r3, #10
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c92:	4b8b      	ldr	r3, [pc, #556]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c94:	4a8a      	ldr	r2, [pc, #552]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005c96:	6952      	ldr	r2, [r2, #20]
 8005c98:	2180      	movs	r1, #128	; 0x80
 8005c9a:	02c9      	lsls	r1, r1, #11
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	615a      	str	r2, [r3, #20]
 8005ca0:	4b87      	ldr	r3, [pc, #540]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005ca2:	695a      	ldr	r2, [r3, #20]
 8005ca4:	2380      	movs	r3, #128	; 0x80
 8005ca6:	02db      	lsls	r3, r3, #11
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60bb      	str	r3, [r7, #8]
 8005cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cae:	4b84      	ldr	r3, [pc, #528]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005cb0:	4a83      	ldr	r2, [pc, #524]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005cb2:	6952      	ldr	r2, [r2, #20]
 8005cb4:	2180      	movs	r1, #128	; 0x80
 8005cb6:	0349      	lsls	r1, r1, #13
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	615a      	str	r2, [r3, #20]
 8005cbc:	4b80      	ldr	r3, [pc, #512]	; (8005ec0 <MX_GPIO_Init+0x2a4>)
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	2380      	movs	r3, #128	; 0x80
 8005cc2:	035b      	lsls	r3, r3, #13
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	607b      	str	r3, [r7, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M0A1_Pin|M2A1_Pin|M2A2_Pin|SERVO4_Pin 
 8005cca:	497e      	ldr	r1, [pc, #504]	; (8005ec4 <MX_GPIO_Init+0x2a8>)
 8005ccc:	4b7e      	ldr	r3, [pc, #504]	; (8005ec8 <MX_GPIO_Init+0x2ac>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f7fb fa72 	bl	80011ba <HAL_GPIO_WritePin>
                          |M3B1_Pin|SERVO3_Pin|SERVO2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GREEN_Pin|M3B2_Pin, GPIO_PIN_RESET);
 8005cd6:	497d      	ldr	r1, [pc, #500]	; (8005ecc <MX_GPIO_Init+0x2b0>)
 8005cd8:	4b7d      	ldr	r3, [pc, #500]	; (8005ed0 <MX_GPIO_Init+0x2b4>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f7fb fa6c 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO5_Pin|M1B2_Pin|SERVO1_Pin|SERVO0_Pin, GPIO_PIN_RESET);
 8005ce2:	497c      	ldr	r1, [pc, #496]	; (8005ed4 <MX_GPIO_Init+0x2b8>)
 8005ce4:	4b7c      	ldr	r3, [pc, #496]	; (8005ed8 <MX_GPIO_Init+0x2bc>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f7fb fa66 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1B1_GPIO_Port, M1B1_Pin, GPIO_PIN_RESET);
 8005cee:	2380      	movs	r3, #128	; 0x80
 8005cf0:	019b      	lsls	r3, r3, #6
 8005cf2:	487a      	ldr	r0, [pc, #488]	; (8005edc <MX_GPIO_Init+0x2c0>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	0019      	movs	r1, r3
 8005cf8:	f7fb fa5f 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M0A2_GPIO_Port, M0A2_Pin, GPIO_PIN_RESET);
 8005cfc:	4b78      	ldr	r3, [pc, #480]	; (8005ee0 <MX_GPIO_Init+0x2c4>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2140      	movs	r1, #64	; 0x40
 8005d02:	0018      	movs	r0, r3
 8005d04:	f7fb fa59 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M0A1_Pin M2A1_Pin M2A2_Pin SERVO4_Pin 
                           M3B1_Pin SERVO3_Pin SERVO2_Pin */
  GPIO_InitStruct.Pin = M0A1_Pin|M2A1_Pin|M2A2_Pin|SERVO4_Pin 
 8005d08:	231c      	movs	r3, #28
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	4a6d      	ldr	r2, [pc, #436]	; (8005ec4 <MX_GPIO_Init+0x2a8>)
 8005d0e:	601a      	str	r2, [r3, #0]
                          |M3B1_Pin|SERVO3_Pin|SERVO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d10:	231c      	movs	r3, #28
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	2201      	movs	r2, #1
 8005d16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005d18:	231c      	movs	r3, #28
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d20:	231c      	movs	r3, #28
 8005d22:	18fb      	adds	r3, r7, r3
 8005d24:	2200      	movs	r2, #0
 8005d26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d28:	231c      	movs	r3, #28
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	4a66      	ldr	r2, [pc, #408]	; (8005ec8 <MX_GPIO_Init+0x2ac>)
 8005d2e:	0019      	movs	r1, r3
 8005d30:	0010      	movs	r0, r2
 8005d32:	f7fb f8a9 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGITAL5_Pin DIGITAL2_Pin DIGITAL3_Pin */
  GPIO_InitStruct.Pin = DIGITAL5_Pin|DIGITAL2_Pin|DIGITAL3_Pin;
 8005d36:	231c      	movs	r3, #28
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	228c      	movs	r2, #140	; 0x8c
 8005d3c:	0192      	lsls	r2, r2, #6
 8005d3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d40:	231c      	movs	r3, #28
 8005d42:	18fb      	adds	r3, r7, r3
 8005d44:	2200      	movs	r2, #0
 8005d46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d48:	231c      	movs	r3, #28
 8005d4a:	18fb      	adds	r3, r7, r3
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d50:	231c      	movs	r3, #28
 8005d52:	18fb      	adds	r3, r7, r3
 8005d54:	4a5e      	ldr	r2, [pc, #376]	; (8005ed0 <MX_GPIO_Init+0x2b4>)
 8005d56:	0019      	movs	r1, r3
 8005d58:	0010      	movs	r0, r2
 8005d5a:	f7fb f895 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin M3B2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|M3B2_Pin;
 8005d5e:	231c      	movs	r3, #28
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	4a5a      	ldr	r2, [pc, #360]	; (8005ecc <MX_GPIO_Init+0x2b0>)
 8005d64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d66:	231c      	movs	r3, #28
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005d6e:	231c      	movs	r3, #28
 8005d70:	18fb      	adds	r3, r7, r3
 8005d72:	2202      	movs	r2, #2
 8005d74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d76:	231c      	movs	r3, #28
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d7e:	231c      	movs	r3, #28
 8005d80:	18fb      	adds	r3, r7, r3
 8005d82:	4a53      	ldr	r2, [pc, #332]	; (8005ed0 <MX_GPIO_Init+0x2b4>)
 8005d84:	0019      	movs	r1, r3
 8005d86:	0010      	movs	r0, r2
 8005d88:	f7fb f87e 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO5_Pin M1B2_Pin SERVO1_Pin SERVO0_Pin */
  GPIO_InitStruct.Pin = SERVO5_Pin|M1B2_Pin|SERVO1_Pin|SERVO0_Pin;
 8005d8c:	231c      	movs	r3, #28
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	4a50      	ldr	r2, [pc, #320]	; (8005ed4 <MX_GPIO_Init+0x2b8>)
 8005d92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d94:	231c      	movs	r3, #28
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	2201      	movs	r2, #1
 8005d9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005d9c:	231c      	movs	r3, #28
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	2202      	movs	r2, #2
 8005da2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005da4:	231c      	movs	r3, #28
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	2200      	movs	r2, #0
 8005daa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dac:	231c      	movs	r3, #28
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	4a49      	ldr	r2, [pc, #292]	; (8005ed8 <MX_GPIO_Init+0x2bc>)
 8005db2:	0019      	movs	r1, r3
 8005db4:	0010      	movs	r0, r2
 8005db6:	f7fb f867 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1B1_Pin */
  GPIO_InitStruct.Pin = M1B1_Pin;
 8005dba:	231c      	movs	r3, #28
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	2280      	movs	r2, #128	; 0x80
 8005dc0:	0192      	lsls	r2, r2, #6
 8005dc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dc4:	231c      	movs	r3, #28
 8005dc6:	18fb      	adds	r3, r7, r3
 8005dc8:	2201      	movs	r2, #1
 8005dca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005dcc:	231c      	movs	r3, #28
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dd4:	231c      	movs	r3, #28
 8005dd6:	18fb      	adds	r3, r7, r3
 8005dd8:	2200      	movs	r2, #0
 8005dda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(M1B1_GPIO_Port, &GPIO_InitStruct);
 8005ddc:	231c      	movs	r3, #28
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	4a3e      	ldr	r2, [pc, #248]	; (8005edc <MX_GPIO_Init+0x2c0>)
 8005de2:	0019      	movs	r1, r3
 8005de4:	0010      	movs	r0, r2
 8005de6:	f7fb f84f 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGITAL0_Pin DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL0_Pin|DIGITAL1_Pin;
 8005dea:	231c      	movs	r3, #28
 8005dec:	18fb      	adds	r3, r7, r3
 8005dee:	22c0      	movs	r2, #192	; 0xc0
 8005df0:	0212      	lsls	r2, r2, #8
 8005df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005df4:	231c      	movs	r3, #28
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	2200      	movs	r2, #0
 8005dfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005dfc:	231c      	movs	r3, #28
 8005dfe:	18fb      	adds	r3, r7, r3
 8005e00:	2201      	movs	r2, #1
 8005e02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e04:	231c      	movs	r3, #28
 8005e06:	18fb      	adds	r3, r7, r3
 8005e08:	4a34      	ldr	r2, [pc, #208]	; (8005edc <MX_GPIO_Init+0x2c0>)
 8005e0a:	0019      	movs	r1, r3
 8005e0c:	0010      	movs	r0, r2
 8005e0e:	f7fb f83b 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL4_Pin */
  GPIO_InitStruct.Pin = DIGITAL4_Pin;
 8005e12:	231c      	movs	r3, #28
 8005e14:	18fb      	adds	r3, r7, r3
 8005e16:	2280      	movs	r2, #128	; 0x80
 8005e18:	0052      	lsls	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e1c:	231c      	movs	r3, #28
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	2200      	movs	r2, #0
 8005e22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e24:	231c      	movs	r3, #28
 8005e26:	18fb      	adds	r3, r7, r3
 8005e28:	2201      	movs	r2, #1
 8005e2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIGITAL4_GPIO_Port, &GPIO_InitStruct);
 8005e2c:	231c      	movs	r3, #28
 8005e2e:	18fa      	adds	r2, r7, r3
 8005e30:	2390      	movs	r3, #144	; 0x90
 8005e32:	05db      	lsls	r3, r3, #23
 8005e34:	0011      	movs	r1, r2
 8005e36:	0018      	movs	r0, r3
 8005e38:	f7fb f826 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : M0A2_Pin */
  GPIO_InitStruct.Pin = M0A2_Pin;
 8005e3c:	231c      	movs	r3, #28
 8005e3e:	18fb      	adds	r3, r7, r3
 8005e40:	2240      	movs	r2, #64	; 0x40
 8005e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e44:	231c      	movs	r3, #28
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	2201      	movs	r2, #1
 8005e4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005e4c:	231c      	movs	r3, #28
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	2202      	movs	r2, #2
 8005e52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e54:	231c      	movs	r3, #28
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	2200      	movs	r2, #0
 8005e5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(M0A2_GPIO_Port, &GPIO_InitStruct);
 8005e5c:	231c      	movs	r3, #28
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <MX_GPIO_Init+0x2c4>)
 8005e62:	0019      	movs	r1, r3
 8005e64:	0010      	movs	r0, r2
 8005e66:	f7fb f80f 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP4_Pin */
  GPIO_InitStruct.Pin = DIP4_Pin;
 8005e6a:	231c      	movs	r3, #28
 8005e6c:	18fb      	adds	r3, r7, r3
 8005e6e:	2280      	movs	r2, #128	; 0x80
 8005e70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e72:	231c      	movs	r3, #28
 8005e74:	18fb      	adds	r3, r7, r3
 8005e76:	2200      	movs	r2, #0
 8005e78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005e7a:	231c      	movs	r3, #28
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	2202      	movs	r2, #2
 8005e80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIP4_GPIO_Port, &GPIO_InitStruct);
 8005e82:	231c      	movs	r3, #28
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	4a15      	ldr	r2, [pc, #84]	; (8005edc <MX_GPIO_Init+0x2c0>)
 8005e88:	0019      	movs	r1, r3
 8005e8a:	0010      	movs	r0, r2
 8005e8c:	f7fa fffc 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP3_Pin DIP2_Pin DIP1_Pin */
  GPIO_InitStruct.Pin = DIP3_Pin|DIP2_Pin|DIP1_Pin;
 8005e90:	231c      	movs	r3, #28
 8005e92:	18fb      	adds	r3, r7, r3
 8005e94:	22e0      	movs	r2, #224	; 0xe0
 8005e96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e98:	231c      	movs	r3, #28
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005ea0:	231c      	movs	r3, #28
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ea8:	231c      	movs	r3, #28
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	4a0a      	ldr	r2, [pc, #40]	; (8005ed8 <MX_GPIO_Init+0x2bc>)
 8005eae:	0019      	movs	r1, r3
 8005eb0:	0010      	movs	r0, r2
 8005eb2:	f7fa ffe9 	bl	8000e88 <HAL_GPIO_Init>

}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	b00c      	add	sp, #48	; 0x30
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	00004f84 	.word	0x00004f84
 8005ec8:	48001000 	.word	0x48001000
 8005ecc:	00001006 	.word	0x00001006
 8005ed0:	48000800 	.word	0x48000800
 8005ed4:	00000c06 	.word	0x00000c06
 8005ed8:	48000400 	.word	0x48000400
 8005edc:	48000c00 	.word	0x48000c00
 8005ee0:	48001400 	.word	0x48001400

08005ee4 <main>:
/**
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void) {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af02      	add	r7, sp, #8

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	dorobo_init();
 8005eea:	f7ff f98b 	bl	8005204 <dorobo_init>
	wifi_init();
 8005eee:	f000 feff 	bl	8006cf0 <wifi_init>
	adc_init();
 8005ef2:	f7fe ffd3 	bl	8004e9c <adc_init>

	motor_init();
 8005ef6:	f000 f9cd 	bl	8006294 <motor_init>

	digital_configure_pin(DD_PIN_PD14, DD_CFG_INPUT_NOPULL);
 8005efa:	2103      	movs	r1, #3
 8005efc:	2000      	movs	r0, #0
 8005efe:	f7ff f83d 	bl	8004f7c <digital_configure_pin>
	digital_configure_pin(DD_PIN_PC8, DD_CFG_INPUT_NOPULL);
 8005f02:	2103      	movs	r1, #3
 8005f04:	2002      	movs	r0, #2
 8005f06:	f7ff f839 	bl	8004f7c <digital_configure_pin>

	digital_configure_pin(DD_PIN_PC13, DD_CFG_INPUT_PULLUP);
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	2005      	movs	r0, #5
 8005f0e:	f7ff f835 	bl	8004f7c <digital_configure_pin>
	digital_configure_pin(DD_PIN_PA8, DD_CFG_INPUT_PULLUP);
 8005f12:	2101      	movs	r1, #1
 8005f14:	2004      	movs	r0, #4
 8005f16:	f7ff f831 	bl	8004f7c <digital_configure_pin>

	ft_start_sampling(DD_PIN_PD14);
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	f7ff f9e2 	bl	80052e4 <ft_start_sampling>

	//Here HIGH actually means low...
	led_red(DD_LEVEL_HIGH);
 8005f20:	2001      	movs	r0, #1
 8005f22:	f7ff f98d 	bl	8005240 <led_red>
	led_green(DD_LEVEL_HIGH);
 8005f26:	2001      	movs	r0, #1
 8005f28:	f7ff f976 	bl	8005218 <led_green>
	/* USER CODE END RTOS_TIMERS */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */

	xTaskCreate((TaskFunction_t) Behaviour, "Behaviour", 128, NULL, 1, NULL);
 8005f2c:	4916      	ldr	r1, [pc, #88]	; (8005f88 <main+0xa4>)
 8005f2e:	4817      	ldr	r0, [pc, #92]	; (8005f8c <main+0xa8>)
 8005f30:	2300      	movs	r3, #0
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	2301      	movs	r3, #1
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2280      	movs	r2, #128	; 0x80
 8005f3c:	f7fe fa24 	bl	8004388 <xTaskCreate>
	xTaskCreate((TaskFunction_t) ObstacleAvoidanceSensors, "SensorReading", 128,
 8005f40:	4913      	ldr	r1, [pc, #76]	; (8005f90 <main+0xac>)
 8005f42:	4814      	ldr	r0, [pc, #80]	; (8005f94 <main+0xb0>)
 8005f44:	2300      	movs	r3, #0
 8005f46:	9301      	str	r3, [sp, #4]
 8005f48:	2302      	movs	r3, #2
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	2280      	movs	r2, #128	; 0x80
 8005f50:	f7fe fa1a 	bl	8004388 <xTaskCreate>
	NULL, 2, NULL);
	xTaskCreate((TaskFunction_t) IRSensorTest, "IRSensorReadings", 128, NULL, 1,
 8005f54:	4910      	ldr	r1, [pc, #64]	; (8005f98 <main+0xb4>)
 8005f56:	4811      	ldr	r0, [pc, #68]	; (8005f9c <main+0xb8>)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	2280      	movs	r2, #128	; 0x80
 8005f64:	f7fe fa10 	bl	8004388 <xTaskCreate>
	 NULL);
	xTaskCreate((TaskFunction_t) MotorControl, "MotorControl", 128, NULL, 4,
 8005f68:	490d      	ldr	r1, [pc, #52]	; (8005fa0 <main+0xbc>)
 8005f6a:	480e      	ldr	r0, [pc, #56]	; (8005fa4 <main+0xc0>)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	2304      	movs	r3, #4
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2300      	movs	r3, #0
 8005f76:	2280      	movs	r2, #128	; 0x80
 8005f78:	f7fe fa06 	bl	8004388 <xTaskCreate>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Start scheduler */
	//osKernelStart();
	vTaskStartScheduler();
 8005f7c:	f7fe fb56 	bl	800462c <vTaskStartScheduler>
 8005f80:	2300      	movs	r3, #0
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	/* USER CODE END 3 */

}
 8005f82:	0018      	movs	r0, r3
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	080076b0 	.word	0x080076b0
 8005f8c:	08005fa9 	.word	0x08005fa9
 8005f90:	080076bc 	.word	0x080076bc
 8005f94:	08006189 	.word	0x08006189
 8005f98:	080076cc 	.word	0x080076cc
 8005f9c:	0800605d 	.word	0x0800605d
 8005fa0:	080076e0 	.word	0x080076e0
 8005fa4:	08005fc5 	.word	0x08005fc5

08005fa8 <Behaviour>:

/* StartDefaultTask function */
static void Behaviour(void const * argument) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	for (;;) {
		//sensorValue = adc_get_value(DA_ADC_CHANNEL0);
		//led_green_toggle();
		//traces("toogle led\r\n");   //print debug message
		//sensorValue = adc_get_value(DA_ADC_CHANNEL0);
		tracef("Behaviour \r\n");
 8005fb0:	4b03      	ldr	r3, [pc, #12]	; (8005fc0 <Behaviour+0x18>)
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 fd82 	bl	8006abc <tracef>
		vTaskDelay(20);       //delay the task for 20 ticks (1 ticks = 50 ms)
 8005fb8:	2014      	movs	r0, #20
 8005fba:	f7fe fb11 	bl	80045e0 <vTaskDelay>
		tracef("Behaviour \r\n");
 8005fbe:	e7f7      	b.n	8005fb0 <Behaviour+0x8>
 8005fc0:	080076f0 	.word	0x080076f0

08005fc4 <MotorControl>:

/// -30,30,0 goes in straight line but third wheel lags. When third wheel is
/// not zero it'll just take a turn.
///
/// @param argument
static void MotorControl(void const * argument) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	while (1) {

		switch (robotMovDirection) {
 8005fcc:	4b20      	ldr	r3, [pc, #128]	; (8006050 <MotorControl+0x8c>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d013      	beq.n	8005ffc <MotorControl+0x38>
 8005fd4:	dc02      	bgt.n	8005fdc <MotorControl+0x18>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <MotorControl+0x22>
 8005fda:	e030      	b.n	800603e <MotorControl+0x7a>
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d018      	beq.n	8006012 <MotorControl+0x4e>
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d021      	beq.n	8006028 <MotorControl+0x64>
 8005fe4:	e02b      	b.n	800603e <MotorControl+0x7a>
		case Mov_Straight:
			mov_velocity = MoveStraight(mov_velocity);
 8005fe6:	4b1b      	ldr	r3, [pc, #108]	; (8006054 <MotorControl+0x90>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	0018      	movs	r0, r3
 8005fee:	f7fe fe25 	bl	8004c3c <MoveStraight>
 8005ff2:	0003      	movs	r3, r0
 8005ff4:	001a      	movs	r2, r3
 8005ff6:	4b17      	ldr	r3, [pc, #92]	; (8006054 <MotorControl+0x90>)
 8005ff8:	701a      	strb	r2, [r3, #0]
			break;
 8005ffa:	e020      	b.n	800603e <MotorControl+0x7a>
		case Mov_Back:
			mov_velocity = MoveBack(mov_velocity);
 8005ffc:	4b15      	ldr	r3, [pc, #84]	; (8006054 <MotorControl+0x90>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	b25b      	sxtb	r3, r3
 8006002:	0018      	movs	r0, r3
 8006004:	f7fe fe4a 	bl	8004c9c <MoveBack>
 8006008:	0003      	movs	r3, r0
 800600a:	001a      	movs	r2, r3
 800600c:	4b11      	ldr	r3, [pc, #68]	; (8006054 <MotorControl+0x90>)
 800600e:	701a      	strb	r2, [r3, #0]
			break;
 8006010:	e015      	b.n	800603e <MotorControl+0x7a>
		case Mov_Rot_Left:
			mov_velocity = RotateLeft(mov_velocity);
 8006012:	4b10      	ldr	r3, [pc, #64]	; (8006054 <MotorControl+0x90>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	b25b      	sxtb	r3, r3
 8006018:	0018      	movs	r0, r3
 800601a:	f7fe fe6f 	bl	8004cfc <RotateLeft>
 800601e:	0003      	movs	r3, r0
 8006020:	001a      	movs	r2, r3
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <MotorControl+0x90>)
 8006024:	701a      	strb	r2, [r3, #0]
			break;
 8006026:	e00a      	b.n	800603e <MotorControl+0x7a>
		case Mov_Rot_Right:
			mov_velocity = RotateRight(mov_velocity);
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <MotorControl+0x90>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b25b      	sxtb	r3, r3
 800602e:	0018      	movs	r0, r3
 8006030:	f7fe fe97 	bl	8004d62 <RotateRight>
 8006034:	0003      	movs	r3, r0
 8006036:	001a      	movs	r2, r3
 8006038:	4b06      	ldr	r3, [pc, #24]	; (8006054 <MotorControl+0x90>)
 800603a:	701a      	strb	r2, [r3, #0]
			break;
 800603c:	46c0      	nop			; (mov r8, r8)
		}

		tracef("MotorControl \r\n");
 800603e:	4b06      	ldr	r3, [pc, #24]	; (8006058 <MotorControl+0x94>)
 8006040:	0018      	movs	r0, r3
 8006042:	f000 fd3b 	bl	8006abc <tracef>
		osDelay(250);
 8006046:	20fa      	movs	r0, #250	; 0xfa
 8006048:	f7fd fe10 	bl	8003c6c <osDelay>
		switch (robotMovDirection) {
 800604c:	e7be      	b.n	8005fcc <MotorControl+0x8>
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	20000004 	.word	0x20000004
 8006054:	200019b4 	.word	0x200019b4
 8006058:	08007700 	.word	0x08007700

0800605c <IRSensorTest>:
	}
}

static void IRSensorTest(void const * argument) {
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	uint32_t sensorValue = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	613b      	str	r3, [r7, #16]
	float voltageRead = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]

	while (1)
	{
		uint8_t levelPin = 0;
 800606c:	2317      	movs	r3, #23
 800606e:	18fb      	adds	r3, r7, r3
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
		uint8_t levelPin2 = 0;
 8006074:	2316      	movs	r3, #22
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]

		/* tracef(" [Target Sensor] Pin Level : %d,  PIN 2   %d\r\n", levelPin,
		 levelPin2);*/

		if (ft_is_sampling_finished()) {
 800607c:	f7ff f94e 	bl	800531c <ft_is_sampling_finished>
 8006080:	1e03      	subs	r3, r0, #0
 8006082:	d061      	beq.n	8006148 <IRSensorTest+0xec>
			uint16_t freq = ft_get_transform(DFT_FREQ100);
 8006084:	2308      	movs	r3, #8
 8006086:	18fc      	adds	r4, r7, r3
 8006088:	2000      	movs	r0, #0
 800608a:	f7ff f951 	bl	8005330 <ft_get_transform>
 800608e:	0003      	movs	r3, r0
 8006090:	8023      	strh	r3, [r4, #0]
			for (uint8_t i = 0; i < 100; i++) {
 8006092:	2315      	movs	r3, #21
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e01e      	b.n	80060da <IRSensorTest+0x7e>
				levelPin += digital_get_pin(DD_PIN_PD14);
 800609c:	2000      	movs	r0, #0
 800609e:	f7fe ffde 	bl	800505e <digital_get_pin>
 80060a2:	0003      	movs	r3, r0
 80060a4:	0019      	movs	r1, r3
 80060a6:	2317      	movs	r3, #23
 80060a8:	18fb      	adds	r3, r7, r3
 80060aa:	2217      	movs	r2, #23
 80060ac:	18ba      	adds	r2, r7, r2
 80060ae:	7812      	ldrb	r2, [r2, #0]
 80060b0:	188a      	adds	r2, r1, r2
 80060b2:	701a      	strb	r2, [r3, #0]
				levelPin2 += digital_get_pin(DD_PIN_PC8);
 80060b4:	2002      	movs	r0, #2
 80060b6:	f7fe ffd2 	bl	800505e <digital_get_pin>
 80060ba:	0003      	movs	r3, r0
 80060bc:	0019      	movs	r1, r3
 80060be:	2316      	movs	r3, #22
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	2216      	movs	r2, #22
 80060c4:	18ba      	adds	r2, r7, r2
 80060c6:	7812      	ldrb	r2, [r2, #0]
 80060c8:	188a      	adds	r2, r1, r2
 80060ca:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 100; i++) {
 80060cc:	2315      	movs	r3, #21
 80060ce:	18fb      	adds	r3, r7, r3
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	2315      	movs	r3, #21
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	3201      	adds	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	2315      	movs	r3, #21
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b63      	cmp	r3, #99	; 0x63
 80060e2:	d9db      	bls.n	800609c <IRSensorTest+0x40>
			}

			levelPin /= 100;
 80060e4:	2317      	movs	r3, #23
 80060e6:	18fc      	adds	r4, r7, r3
 80060e8:	2317      	movs	r3, #23
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2164      	movs	r1, #100	; 0x64
 80060f0:	0018      	movs	r0, r3
 80060f2:	f7fa f811 	bl	8000118 <__udivsi3>
 80060f6:	0003      	movs	r3, r0
 80060f8:	7023      	strb	r3, [r4, #0]
			levelPin2 /= 100;
 80060fa:	2316      	movs	r3, #22
 80060fc:	18fc      	adds	r4, r7, r3
 80060fe:	2316      	movs	r3, #22
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2164      	movs	r1, #100	; 0x64
 8006106:	0018      	movs	r0, r3
 8006108:	f7fa f806 	bl	8000118 <__udivsi3>
 800610c:	0003      	movs	r3, r0
 800610e:	7023      	strb	r3, [r4, #0]

			tracef(
 8006110:	2317      	movs	r3, #23
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	7819      	ldrb	r1, [r3, #0]
 8006116:	2308      	movs	r3, #8
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	881a      	ldrh	r2, [r3, #0]
 800611c:	2316      	movs	r3, #22
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	4815      	ldr	r0, [pc, #84]	; (8006178 <IRSensorTest+0x11c>)
 8006124:	f000 fcca 	bl	8006abc <tracef>
					" [Target Sensor] Pin Level : %d,  Freq Read: %d PIN 2   %d\r\n",
					levelPin, freq, levelPin2);

			//TODO Filter maybe?
			freq > 1500 ? led_red(DD_LEVEL_LOW) : led_red(DD_LEVEL_HIGH);
 8006128:	2308      	movs	r3, #8
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	4a13      	ldr	r2, [pc, #76]	; (800617c <IRSensorTest+0x120>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d903      	bls.n	800613c <IRSensorTest+0xe0>
 8006134:	2000      	movs	r0, #0
 8006136:	f7ff f883 	bl	8005240 <led_red>
 800613a:	e002      	b.n	8006142 <IRSensorTest+0xe6>
 800613c:	2001      	movs	r0, #1
 800613e:	f7ff f87f 	bl	8005240 <led_red>

			//led_red_toggle();
			ft_start_sampling(DD_PIN_PD14);
 8006142:	2000      	movs	r0, #0
 8006144:	f7ff f8ce 	bl	80052e4 <ft_start_sampling>

		}
		uint8_t switchLevel = digital_get_pin(DD_PIN_PD15);
 8006148:	230b      	movs	r3, #11
 800614a:	18fc      	adds	r4, r7, r3
 800614c:	2001      	movs	r0, #1
 800614e:	f7fe ff86 	bl	800505e <digital_get_pin>
 8006152:	0003      	movs	r3, r0
 8006154:	7023      	strb	r3, [r4, #0]

		tracef(" [Switch] Switch Level : %d \r\n", switchLevel);
 8006156:	230b      	movs	r3, #11
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	781a      	ldrb	r2, [r3, #0]
 800615c:	4b08      	ldr	r3, [pc, #32]	; (8006180 <IRSensorTest+0x124>)
 800615e:	0011      	movs	r1, r2
 8006160:	0018      	movs	r0, r3
 8006162:	f000 fcab 	bl	8006abc <tracef>
		tracef("IRSensorTest \r\n");
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <IRSensorTest+0x128>)
 8006168:	0018      	movs	r0, r3
 800616a:	f000 fca7 	bl	8006abc <tracef>

		vTaskDelay(50);
 800616e:	2032      	movs	r0, #50	; 0x32
 8006170:	f7fe fa36 	bl	80045e0 <vTaskDelay>
	{
 8006174:	e77a      	b.n	800606c <IRSensorTest+0x10>
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	08007710 	.word	0x08007710
 800617c:	000005dc 	.word	0x000005dc
 8006180:	08007750 	.word	0x08007750
 8006184:	08007770 	.word	0x08007770

08006188 <ObstacleAvoidanceSensors>:
	}
}

static void ObstacleAvoidanceSensors(void const * argument) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]

	uint32_t sensorValue = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
	uint32_t sensorValue2 = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	61bb      	str	r3, [r7, #24]

	float voltageRead = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	613b      	str	r3, [r7, #16]

	while (1) {

		sensorValue = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	61fb      	str	r3, [r7, #28]
		sensorValue2 = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61bb      	str	r3, [r7, #24]


		leftBumper = digital_get_pin(DD_PIN_PA8);
 80061a4:	2004      	movs	r0, #4
 80061a6:	f7fe ff5a 	bl	800505e <digital_get_pin>
 80061aa:	0003      	movs	r3, r0
 80061ac:	001a      	movs	r2, r3
 80061ae:	4b2a      	ldr	r3, [pc, #168]	; (8006258 <ObstacleAvoidanceSensors+0xd0>)
 80061b0:	701a      	strb	r2, [r3, #0]

		rightBumper = digital_get_pin(DD_PIN_PC13);
 80061b2:	2005      	movs	r0, #5
 80061b4:	f7fe ff53 	bl	800505e <digital_get_pin>
 80061b8:	0003      	movs	r3, r0
 80061ba:	001a      	movs	r2, r3
 80061bc:	4b27      	ldr	r3, [pc, #156]	; (800625c <ObstacleAvoidanceSensors+0xd4>)
 80061be:	701a      	strb	r2, [r3, #0]

		for (uint8_t i = 0; i < 10; i++) {
 80061c0:	2317      	movs	r3, #23
 80061c2:	18fb      	adds	r3, r7, r3
 80061c4:	2200      	movs	r2, #0
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e014      	b.n	80061f4 <ObstacleAvoidanceSensors+0x6c>
			sensorValue += adc_get_value(DA_ADC_CHANNEL0);
 80061ca:	2000      	movs	r0, #0
 80061cc:	f7fe fe6c 	bl	8004ea8 <adc_get_value>
 80061d0:	0002      	movs	r2, r0
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	189b      	adds	r3, r3, r2
 80061d6:	61fb      	str	r3, [r7, #28]
			sensorValue2 += adc_get_value(DA_ADC_CHANNEL2);
 80061d8:	2002      	movs	r0, #2
 80061da:	f7fe fe65 	bl	8004ea8 <adc_get_value>
 80061de:	0002      	movs	r2, r0
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	189b      	adds	r3, r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
		for (uint8_t i = 0; i < 10; i++) {
 80061e6:	2317      	movs	r3, #23
 80061e8:	18fb      	adds	r3, r7, r3
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	2317      	movs	r3, #23
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	3201      	adds	r2, #1
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	2317      	movs	r3, #23
 80061f6:	18fb      	adds	r3, r7, r3
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b09      	cmp	r3, #9
 80061fc:	d9e5      	bls.n	80061ca <ObstacleAvoidanceSensors+0x42>
		}

		uint8_t distance = 1 / ((sensorValue - 472) / 19680);
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	3bd9      	subs	r3, #217	; 0xd9
 8006202:	3bff      	subs	r3, #255	; 0xff
 8006204:	4916      	ldr	r1, [pc, #88]	; (8006260 <ObstacleAvoidanceSensors+0xd8>)
 8006206:	0018      	movs	r0, r3
 8006208:	f7f9 ff86 	bl	8000118 <__udivsi3>
 800620c:	0003      	movs	r3, r0
 800620e:	0019      	movs	r1, r3
 8006210:	2001      	movs	r0, #1
 8006212:	f7f9 ff81 	bl	8000118 <__udivsi3>
 8006216:	0003      	movs	r3, r0
 8006218:	001a      	movs	r2, r3
 800621a:	230f      	movs	r3, #15
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	701a      	strb	r2, [r3, #0]

		tracef("[Bumpers] left Bumper:  %d, right Bumper:  %d", leftBumper,
 8006220:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <ObstacleAvoidanceSensors+0xd0>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	0019      	movs	r1, r3
 8006226:	4b0d      	ldr	r3, [pc, #52]	; (800625c <ObstacleAvoidanceSensors+0xd4>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	001a      	movs	r2, r3
 800622c:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <ObstacleAvoidanceSensors+0xdc>)
 800622e:	0018      	movs	r0, r3
 8006230:	f000 fc44 	bl	8006abc <tracef>
				rightBumper);

		tracef(
 8006234:	230f      	movs	r3, #15
 8006236:	18fb      	adds	r3, r7, r3
 8006238:	7819      	ldrb	r1, [r3, #0]
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <ObstacleAvoidanceSensors+0xe0>)
 800623e:	0018      	movs	r0, r3
 8006240:	f000 fc3c 	bl	8006abc <tracef>
				"[DistanceSensorReading] Sensor 1 Reading:  %d Sensor Value : %d \r\n",
				distance, sensorValue);

		tracef("Sensor Value 2:  %d /r/n", sensorValue2);
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	4b09      	ldr	r3, [pc, #36]	; (800626c <ObstacleAvoidanceSensors+0xe4>)
 8006248:	0011      	movs	r1, r2
 800624a:	0018      	movs	r0, r3
 800624c:	f000 fc36 	bl	8006abc <tracef>

		vTaskDelay(150);       //delay the task for 20 ticks (1 ticks = 50 ms)
 8006250:	2096      	movs	r0, #150	; 0x96
 8006252:	f7fe f9c5 	bl	80045e0 <vTaskDelay>
	while (1) {
 8006256:	e7a1      	b.n	800619c <ObstacleAvoidanceSensors+0x14>
 8006258:	200019b5 	.word	0x200019b5
 800625c:	200019b6 	.word	0x200019b6
 8006260:	00004ce0 	.word	0x00004ce0
 8006264:	08007780 	.word	0x08007780
 8006268:	080077b0 	.word	0x080077b0
 800626c:	080077f4 	.word	0x080077f4

08006270 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a04      	ldr	r2, [pc, #16]	; (8006290 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d101      	bne.n	8006286 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8006282:	f7f9 ffe9 	bl	8000258 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	46bd      	mov	sp, r7
 800628a:	b002      	add	sp, #8
 800628c:	bd80      	pop	{r7, pc}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	40002000 	.word	0x40002000

08006294 <motor_init>:

static void set_speed(motor_t *, int8_t);
static motor_t* select_motor(enum DM_MOTORS_E);

void motor_init(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
	// nothing to initialize
}
 8006298:	46c0      	nop			; (mov r8, r8)
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <motor_set>:

void motor_set(enum DM_MOTORS_E motoren, int8_t speed)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	0002      	movs	r2, r0
 80062a6:	1dfb      	adds	r3, r7, #7
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	1dbb      	adds	r3, r7, #6
 80062ac:	1c0a      	adds	r2, r1, #0
 80062ae:	701a      	strb	r2, [r3, #0]
    motor_t *motorptr = select_motor(motoren);
 80062b0:	1dfb      	adds	r3, r7, #7
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	0018      	movs	r0, r3
 80062b6:	f000 f86d 	bl	8006394 <select_motor>
 80062ba:	0003      	movs	r3, r0
 80062bc:	60fb      	str	r3, [r7, #12]
    set_speed(motorptr, speed);
 80062be:	1dbb      	adds	r3, r7, #6
 80062c0:	2200      	movs	r2, #0
 80062c2:	569a      	ldrsb	r2, [r3, r2]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	0011      	movs	r1, r2
 80062c8:	0018      	movs	r0, r3
 80062ca:	f000 f805 	bl	80062d8 <set_speed>
}
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	46bd      	mov	sp, r7
 80062d2:	b004      	add	sp, #16
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <set_speed>:
   return motorptr->speed;
}


static void set_speed(motor_t *motorptr, int8_t new_speed)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	000a      	movs	r2, r1
 80062e2:	1cfb      	adds	r3, r7, #3
 80062e4:	701a      	strb	r2, [r3, #0]
    if (new_speed < -100)
 80062e6:	1cfb      	adds	r3, r7, #3
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	b25b      	sxtb	r3, r3
 80062ec:	3364      	adds	r3, #100	; 0x64
 80062ee:	da03      	bge.n	80062f8 <set_speed+0x20>
    {
        new_speed = -100;
 80062f0:	1cfb      	adds	r3, r7, #3
 80062f2:	229c      	movs	r2, #156	; 0x9c
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	e007      	b.n	8006308 <set_speed+0x30>
    }
    else if (new_speed > 100)
 80062f8:	1cfb      	adds	r3, r7, #3
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b25b      	sxtb	r3, r3
 80062fe:	2b64      	cmp	r3, #100	; 0x64
 8006300:	dd02      	ble.n	8006308 <set_speed+0x30>
    {
        new_speed = 100;
 8006302:	1cfb      	adds	r3, r7, #3
 8006304:	2264      	movs	r2, #100	; 0x64
 8006306:	701a      	strb	r2, [r3, #0]
    }

    if (new_speed < 0)
 8006308:	1cfb      	adds	r3, r7, #3
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b7f      	cmp	r3, #127	; 0x7f
 800630e:	d90a      	bls.n	8006326 <set_speed+0x4e>
    {
        motorptr->controlPORT1->BRR = motorptr->controlPIN1;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	8892      	ldrh	r2, [r2, #4]
 8006318:	629a      	str	r2, [r3, #40]	; 0x28
        motorptr->controlPORT2->BSRR = motorptr->controlPIN2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	8992      	ldrh	r2, [r2, #12]
 8006322:	619a      	str	r2, [r3, #24]
 8006324:	e009      	b.n	800633a <set_speed+0x62>
    }
    else
    {
        motorptr->controlPORT1->BSRR = motorptr->controlPIN1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	8892      	ldrh	r2, [r2, #4]
 800632e:	619a      	str	r2, [r3, #24]
        motorptr->controlPORT2->BRR = motorptr->controlPIN2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	8992      	ldrh	r2, [r2, #12]
 8006338:	629a      	str	r2, [r3, #40]	; 0x28
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800633a:	4b14      	ldr	r3, [pc, #80]	; (800638c <set_speed+0xb4>)
 800633c:	2260      	movs	r2, #96	; 0x60
 800633e:	601a      	str	r2, [r3, #0]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006340:	4b12      	ldr	r3, [pc, #72]	; (800638c <set_speed+0xb4>)
 8006342:	2200      	movs	r2, #0
 8006344:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006346:	4b11      	ldr	r3, [pc, #68]	; (800638c <set_speed+0xb4>)
 8006348:	2200      	movs	r2, #0
 800634a:	611a      	str	r2, [r3, #16]
    sConfigOC.Pulse = abs(new_speed);
 800634c:	1cfb      	adds	r3, r7, #3
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	b25b      	sxtb	r3, r3
 8006352:	17da      	asrs	r2, r3, #31
 8006354:	189b      	adds	r3, r3, r2
 8006356:	4053      	eors	r3, r2
 8006358:	001a      	movs	r2, r3
 800635a:	4b0c      	ldr	r3, [pc, #48]	; (800638c <set_speed+0xb4>)
 800635c:	605a      	str	r2, [r3, #4]
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, motorptr->timerChannel);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	490a      	ldr	r1, [pc, #40]	; (800638c <set_speed+0xb4>)
 8006364:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <set_speed+0xb8>)
 8006366:	0018      	movs	r0, r3
 8006368:	f7fb ff66 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, motorptr->timerChannel);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <set_speed+0xb8>)
 8006372:	0011      	movs	r1, r2
 8006374:	0018      	movs	r0, r3
 8006376:	f7fb fe05 	bl	8001f84 <HAL_TIM_PWM_Start>

    motorptr->speed = new_speed;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	1cfa      	adds	r2, r7, #3
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	751a      	strb	r2, [r3, #20]
}
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	46bd      	mov	sp, r7
 8006386:	b002      	add	sp, #8
 8006388:	bd80      	pop	{r7, pc}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	20001cd0 	.word	0x20001cd0
 8006390:	20001aa4 	.word	0x20001aa4

08006394 <select_motor>:

static motor_t* select_motor(enum DM_MOTORS_E motoren)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	0002      	movs	r2, r0
 800639c:	1dfb      	adds	r3, r7, #7
 800639e:	701a      	strb	r2, [r3, #0]
    motor_t *motorptr = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]
    switch (motoren)
 80063a4:	1dfb      	adds	r3, r7, #7
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d00b      	beq.n	80063c4 <select_motor+0x30>
 80063ac:	dc02      	bgt.n	80063b4 <select_motor+0x20>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <select_motor+0x2a>
 80063b2:	e010      	b.n	80063d6 <select_motor+0x42>
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d008      	beq.n	80063ca <select_motor+0x36>
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d009      	beq.n	80063d0 <select_motor+0x3c>
 80063bc:	e00b      	b.n	80063d6 <select_motor+0x42>
    {
    case DM_MOTOR0:
        motorptr = &motors[0];
 80063be:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <select_motor+0x4c>)
 80063c0:	60fb      	str	r3, [r7, #12]
        break;
 80063c2:	e008      	b.n	80063d6 <select_motor+0x42>
    case DM_MOTOR1:
        motorptr = &motors[1];
 80063c4:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <select_motor+0x50>)
 80063c6:	60fb      	str	r3, [r7, #12]
        break;
 80063c8:	e005      	b.n	80063d6 <select_motor+0x42>
    case DM_MOTOR2:
        motorptr = &motors[2];
 80063ca:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <select_motor+0x54>)
 80063cc:	60fb      	str	r3, [r7, #12]
        break;
 80063ce:	e002      	b.n	80063d6 <select_motor+0x42>
    case DM_MOTOR3:
        motorptr = &motors[3];
 80063d0:	4b06      	ldr	r3, [pc, #24]	; (80063ec <select_motor+0x58>)
 80063d2:	60fb      	str	r3, [r7, #12]
        break;
 80063d4:	46c0      	nop			; (mov r8, r8)
    }
    return motorptr;
 80063d6:	68fb      	ldr	r3, [r7, #12]
}
 80063d8:	0018      	movs	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	b004      	add	sp, #16
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20000008 	.word	0x20000008
 80063e4:	20000020 	.word	0x20000020
 80063e8:	20000038 	.word	0x20000038
 80063ec:	20000050 	.word	0x20000050

080063f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063f6:	4b19      	ldr	r3, [pc, #100]	; (800645c <HAL_MspInit+0x6c>)
 80063f8:	4a18      	ldr	r2, [pc, #96]	; (800645c <HAL_MspInit+0x6c>)
 80063fa:	6992      	ldr	r2, [r2, #24]
 80063fc:	2101      	movs	r1, #1
 80063fe:	430a      	orrs	r2, r1
 8006400:	619a      	str	r2, [r3, #24]
 8006402:	4b16      	ldr	r3, [pc, #88]	; (800645c <HAL_MspInit+0x6c>)
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2201      	movs	r2, #1
 8006408:	4013      	ands	r3, r2
 800640a:	607b      	str	r3, [r7, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800640e:	4b13      	ldr	r3, [pc, #76]	; (800645c <HAL_MspInit+0x6c>)
 8006410:	4a12      	ldr	r2, [pc, #72]	; (800645c <HAL_MspInit+0x6c>)
 8006412:	69d2      	ldr	r2, [r2, #28]
 8006414:	2180      	movs	r1, #128	; 0x80
 8006416:	0549      	lsls	r1, r1, #21
 8006418:	430a      	orrs	r2, r1
 800641a:	61da      	str	r2, [r3, #28]
 800641c:	4b0f      	ldr	r3, [pc, #60]	; (800645c <HAL_MspInit+0x6c>)
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	2380      	movs	r3, #128	; 0x80
 8006422:	055b      	lsls	r3, r3, #21
 8006424:	4013      	ands	r3, r2
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800642a:	2305      	movs	r3, #5
 800642c:	425b      	negs	r3, r3
 800642e:	2200      	movs	r2, #0
 8006430:	2100      	movs	r1, #0
 8006432:	0018      	movs	r0, r3
 8006434:	f7fa fc94 	bl	8000d60 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8006438:	2302      	movs	r3, #2
 800643a:	425b      	negs	r3, r3
 800643c:	2200      	movs	r2, #0
 800643e:	2103      	movs	r1, #3
 8006440:	0018      	movs	r0, r3
 8006442:	f7fa fc8d 	bl	8000d60 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 8006446:	2301      	movs	r3, #1
 8006448:	425b      	negs	r3, r3
 800644a:	2200      	movs	r2, #0
 800644c:	2103      	movs	r1, #3
 800644e:	0018      	movs	r0, r3
 8006450:	f7fa fc86 	bl	8000d60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006454:	46c0      	nop			; (mov r8, r8)
 8006456:	46bd      	mov	sp, r7
 8006458:	b002      	add	sp, #8
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40021000 	.word	0x40021000

08006460 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <HAL_ADC_MspInit+0x84>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d134      	bne.n	80064dc <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006472:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <HAL_ADC_MspInit+0x88>)
 8006474:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <HAL_ADC_MspInit+0x88>)
 8006476:	6992      	ldr	r2, [r2, #24]
 8006478:	2180      	movs	r1, #128	; 0x80
 800647a:	0089      	lsls	r1, r1, #2
 800647c:	430a      	orrs	r2, r1
 800647e:	619a      	str	r2, [r3, #24]
 8006480:	4b19      	ldr	r3, [pc, #100]	; (80064e8 <HAL_ADC_MspInit+0x88>)
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	2380      	movs	r3, #128	; 0x80
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4013      	ands	r3, r2
 800648a:	60bb      	str	r3, [r7, #8]
 800648c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15 
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin 
 800648e:	230c      	movs	r3, #12
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	22ff      	movs	r2, #255	; 0xff
 8006494:	601a      	str	r2, [r3, #0]
                          |ADC4_Pin|ADC5_Pin|ADC6_Pin|ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006496:	230c      	movs	r3, #12
 8006498:	18fb      	adds	r3, r7, r3
 800649a:	2203      	movs	r2, #3
 800649c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649e:	230c      	movs	r3, #12
 80064a0:	18fb      	adds	r3, r7, r3
 80064a2:	2200      	movs	r2, #0
 80064a4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064a6:	230c      	movs	r3, #12
 80064a8:	18fa      	adds	r2, r7, r3
 80064aa:	2390      	movs	r3, #144	; 0x90
 80064ac:	05db      	lsls	r3, r3, #23
 80064ae:	0011      	movs	r1, r2
 80064b0:	0018      	movs	r0, r3
 80064b2:	f7fa fce9 	bl	8000e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC8_Pin|ADC9_Pin;
 80064b6:	230c      	movs	r3, #12
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	2230      	movs	r2, #48	; 0x30
 80064bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064be:	230c      	movs	r3, #12
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	2203      	movs	r2, #3
 80064c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c6:	230c      	movs	r3, #12
 80064c8:	18fb      	adds	r3, r7, r3
 80064ca:	2200      	movs	r2, #0
 80064cc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064ce:	230c      	movs	r3, #12
 80064d0:	18fb      	adds	r3, r7, r3
 80064d2:	4a06      	ldr	r2, [pc, #24]	; (80064ec <HAL_ADC_MspInit+0x8c>)
 80064d4:	0019      	movs	r1, r3
 80064d6:	0010      	movs	r0, r2
 80064d8:	f7fa fcd6 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80064dc:	46c0      	nop			; (mov r8, r8)
 80064de:	46bd      	mov	sp, r7
 80064e0:	b008      	add	sp, #32
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40012400 	.word	0x40012400
 80064e8:	40021000 	.word	0x40021000
 80064ec:	48000800 	.word	0x48000800

080064f0 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	2380      	movs	r3, #128	; 0x80
 80064fe:	05db      	lsls	r3, r3, #23
 8006500:	429a      	cmp	r2, r3
 8006502:	d10c      	bne.n	800651e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006504:	4b11      	ldr	r3, [pc, #68]	; (800654c <HAL_TIM_PWM_MspInit+0x5c>)
 8006506:	4a11      	ldr	r2, [pc, #68]	; (800654c <HAL_TIM_PWM_MspInit+0x5c>)
 8006508:	69d2      	ldr	r2, [r2, #28]
 800650a:	2101      	movs	r1, #1
 800650c:	430a      	orrs	r2, r1
 800650e:	61da      	str	r2, [r3, #28]
 8006510:	4b0e      	ldr	r3, [pc, #56]	; (800654c <HAL_TIM_PWM_MspInit+0x5c>)
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	2201      	movs	r2, #1
 8006516:	4013      	ands	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800651c:	e012      	b.n	8006544 <HAL_TIM_PWM_MspInit+0x54>
  else if(htim_pwm->Instance==TIM15)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a0b      	ldr	r2, [pc, #44]	; (8006550 <HAL_TIM_PWM_MspInit+0x60>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d10d      	bne.n	8006544 <HAL_TIM_PWM_MspInit+0x54>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006528:	4b08      	ldr	r3, [pc, #32]	; (800654c <HAL_TIM_PWM_MspInit+0x5c>)
 800652a:	4a08      	ldr	r2, [pc, #32]	; (800654c <HAL_TIM_PWM_MspInit+0x5c>)
 800652c:	6992      	ldr	r2, [r2, #24]
 800652e:	2180      	movs	r1, #128	; 0x80
 8006530:	0249      	lsls	r1, r1, #9
 8006532:	430a      	orrs	r2, r1
 8006534:	619a      	str	r2, [r3, #24]
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <HAL_TIM_PWM_MspInit+0x5c>)
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	2380      	movs	r3, #128	; 0x80
 800653c:	025b      	lsls	r3, r3, #9
 800653e:	4013      	ands	r3, r2
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b004      	add	sp, #16
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40021000 	.word	0x40021000
 8006550:	40014000 	.word	0x40014000

08006554 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM3)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a2a      	ldr	r2, [pc, #168]	; (800660c <HAL_TIM_Base_MspInit+0xb8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d114      	bne.n	8006590 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006566:	4b2a      	ldr	r3, [pc, #168]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 8006568:	4a29      	ldr	r2, [pc, #164]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 800656a:	69d2      	ldr	r2, [r2, #28]
 800656c:	2102      	movs	r1, #2
 800656e:	430a      	orrs	r2, r1
 8006570:	61da      	str	r2, [r3, #28]
 8006572:	4b27      	ldr	r3, [pc, #156]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	2202      	movs	r2, #2
 8006578:	4013      	ands	r3, r2
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800657e:	2200      	movs	r2, #0
 8006580:	2103      	movs	r1, #3
 8006582:	2010      	movs	r0, #16
 8006584:	f7fa fbec 	bl	8000d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006588:	2010      	movs	r0, #16
 800658a:	f7fa fbff 	bl	8000d8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800658e:	e038      	b.n	8006602 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1f      	ldr	r2, [pc, #124]	; (8006614 <HAL_TIM_Base_MspInit+0xc0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d10c      	bne.n	80065b4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800659a:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 800659c:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 800659e:	69d2      	ldr	r2, [r2, #28]
 80065a0:	2110      	movs	r1, #16
 80065a2:	430a      	orrs	r2, r1
 80065a4:	61da      	str	r2, [r3, #28]
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	2210      	movs	r2, #16
 80065ac:	4013      	ands	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	693b      	ldr	r3, [r7, #16]
}
 80065b2:	e026      	b.n	8006602 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM16)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a17      	ldr	r2, [pc, #92]	; (8006618 <HAL_TIM_Base_MspInit+0xc4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d10e      	bne.n	80065dc <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80065be:	4b14      	ldr	r3, [pc, #80]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 80065c0:	4a13      	ldr	r2, [pc, #76]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 80065c2:	6992      	ldr	r2, [r2, #24]
 80065c4:	2180      	movs	r1, #128	; 0x80
 80065c6:	0289      	lsls	r1, r1, #10
 80065c8:	430a      	orrs	r2, r1
 80065ca:	619a      	str	r2, [r3, #24]
 80065cc:	4b10      	ldr	r3, [pc, #64]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 80065ce:	699a      	ldr	r2, [r3, #24]
 80065d0:	2380      	movs	r3, #128	; 0x80
 80065d2:	029b      	lsls	r3, r3, #10
 80065d4:	4013      	ands	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
}
 80065da:	e012      	b.n	8006602 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM17)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0e      	ldr	r2, [pc, #56]	; (800661c <HAL_TIM_Base_MspInit+0xc8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d10d      	bne.n	8006602 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80065e6:	4b0a      	ldr	r3, [pc, #40]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 80065e8:	4a09      	ldr	r2, [pc, #36]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 80065ea:	6992      	ldr	r2, [r2, #24]
 80065ec:	2180      	movs	r1, #128	; 0x80
 80065ee:	02c9      	lsls	r1, r1, #11
 80065f0:	430a      	orrs	r2, r1
 80065f2:	619a      	str	r2, [r3, #24]
 80065f4:	4b06      	ldr	r3, [pc, #24]	; (8006610 <HAL_TIM_Base_MspInit+0xbc>)
 80065f6:	699a      	ldr	r2, [r3, #24]
 80065f8:	2380      	movs	r3, #128	; 0x80
 80065fa:	02db      	lsls	r3, r3, #11
 80065fc:	4013      	ands	r3, r2
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	68bb      	ldr	r3, [r7, #8]
}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	46bd      	mov	sp, r7
 8006606:	b006      	add	sp, #24
 8006608:	bd80      	pop	{r7, pc}
 800660a:	46c0      	nop			; (mov r8, r8)
 800660c:	40000400 	.word	0x40000400
 8006610:	40021000 	.word	0x40021000
 8006614:	40001000 	.word	0x40001000
 8006618:	40014400 	.word	0x40014400
 800661c:	40014800 	.word	0x40014800

08006620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	05db      	lsls	r3, r3, #23
 8006630:	429a      	cmp	r2, r3
 8006632:	d138      	bne.n	80066a6 <HAL_TIM_MspPostInit+0x86>
  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = PWM0_Pin;
 8006634:	230c      	movs	r3, #12
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	2280      	movs	r2, #128	; 0x80
 800663a:	0212      	lsls	r2, r2, #8
 800663c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800663e:	230c      	movs	r3, #12
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	2202      	movs	r2, #2
 8006644:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006646:	230c      	movs	r3, #12
 8006648:	18fb      	adds	r3, r7, r3
 800664a:	2200      	movs	r2, #0
 800664c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800664e:	230c      	movs	r3, #12
 8006650:	18fb      	adds	r3, r7, r3
 8006652:	2203      	movs	r2, #3
 8006654:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8006656:	230c      	movs	r3, #12
 8006658:	18fb      	adds	r3, r7, r3
 800665a:	2202      	movs	r2, #2
 800665c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM0_GPIO_Port, &GPIO_InitStruct);
 800665e:	230c      	movs	r3, #12
 8006660:	18fa      	adds	r2, r7, r3
 8006662:	2390      	movs	r3, #144	; 0x90
 8006664:	05db      	lsls	r3, r3, #23
 8006666:	0011      	movs	r1, r2
 8006668:	0018      	movs	r0, r3
 800666a:	f7fa fc0d 	bl	8000e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM1_Pin;
 800666e:	230c      	movs	r3, #12
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	2208      	movs	r2, #8
 8006674:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006676:	230c      	movs	r3, #12
 8006678:	18fb      	adds	r3, r7, r3
 800667a:	2202      	movs	r2, #2
 800667c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667e:	230c      	movs	r3, #12
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	2200      	movs	r2, #0
 8006684:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006686:	230c      	movs	r3, #12
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	2203      	movs	r2, #3
 800668c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800668e:	230c      	movs	r3, #12
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	2202      	movs	r2, #2
 8006694:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8006696:	230c      	movs	r3, #12
 8006698:	18fb      	adds	r3, r7, r3
 800669a:	4a47      	ldr	r2, [pc, #284]	; (80067b8 <HAL_TIM_MspPostInit+0x198>)
 800669c:	0019      	movs	r1, r3
 800669e:	0010      	movs	r0, r2
 80066a0:	f7fa fbf2 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80066a4:	e083      	b.n	80067ae <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a44      	ldr	r2, [pc, #272]	; (80067bc <HAL_TIM_MspPostInit+0x19c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d11b      	bne.n	80066e8 <HAL_TIM_MspPostInit+0xc8>
    GPIO_InitStruct.Pin = M0_PWM_Pin|M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin;
 80066b0:	230c      	movs	r3, #12
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	2278      	movs	r2, #120	; 0x78
 80066b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b8:	230c      	movs	r3, #12
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	2202      	movs	r2, #2
 80066be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c0:	230c      	movs	r3, #12
 80066c2:	18fb      	adds	r3, r7, r3
 80066c4:	2200      	movs	r2, #0
 80066c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066c8:	230c      	movs	r3, #12
 80066ca:	18fb      	adds	r3, r7, r3
 80066cc:	2203      	movs	r2, #3
 80066ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 80066d0:	230c      	movs	r3, #12
 80066d2:	18fb      	adds	r3, r7, r3
 80066d4:	2200      	movs	r2, #0
 80066d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066d8:	230c      	movs	r3, #12
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	4a38      	ldr	r2, [pc, #224]	; (80067c0 <HAL_TIM_MspPostInit+0x1a0>)
 80066de:	0019      	movs	r1, r3
 80066e0:	0010      	movs	r0, r2
 80066e2:	f7fa fbd1 	bl	8000e88 <HAL_GPIO_Init>
}
 80066e6:	e062      	b.n	80067ae <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a35      	ldr	r2, [pc, #212]	; (80067c4 <HAL_TIM_MspPostInit+0x1a4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d11c      	bne.n	800672c <HAL_TIM_MspPostInit+0x10c>
    GPIO_InitStruct.Pin = PWM4_Pin|PWM5_Pin;
 80066f2:	230c      	movs	r3, #12
 80066f4:	18fb      	adds	r3, r7, r3
 80066f6:	22c0      	movs	r2, #192	; 0xc0
 80066f8:	00d2      	lsls	r2, r2, #3
 80066fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066fc:	230c      	movs	r3, #12
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	2202      	movs	r2, #2
 8006702:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006704:	230c      	movs	r3, #12
 8006706:	18fb      	adds	r3, r7, r3
 8006708:	2200      	movs	r2, #0
 800670a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800670c:	230c      	movs	r3, #12
 800670e:	18fb      	adds	r3, r7, r3
 8006710:	2203      	movs	r2, #3
 8006712:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8006714:	230c      	movs	r3, #12
 8006716:	18fb      	adds	r3, r7, r3
 8006718:	2200      	movs	r2, #0
 800671a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800671c:	230c      	movs	r3, #12
 800671e:	18fb      	adds	r3, r7, r3
 8006720:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <HAL_TIM_MspPostInit+0x1a8>)
 8006722:	0019      	movs	r1, r3
 8006724:	0010      	movs	r0, r2
 8006726:	f7fa fbaf 	bl	8000e88 <HAL_GPIO_Init>
}
 800672a:	e040      	b.n	80067ae <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM16)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a26      	ldr	r2, [pc, #152]	; (80067cc <HAL_TIM_MspPostInit+0x1ac>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d11b      	bne.n	800676e <HAL_TIM_MspPostInit+0x14e>
    GPIO_InitStruct.Pin = PWM2_Pin;
 8006736:	230c      	movs	r3, #12
 8006738:	18fb      	adds	r3, r7, r3
 800673a:	2201      	movs	r2, #1
 800673c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800673e:	230c      	movs	r3, #12
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	2202      	movs	r2, #2
 8006744:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006746:	230c      	movs	r3, #12
 8006748:	18fb      	adds	r3, r7, r3
 800674a:	2200      	movs	r2, #0
 800674c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800674e:	230c      	movs	r3, #12
 8006750:	18fb      	adds	r3, r7, r3
 8006752:	2203      	movs	r2, #3
 8006754:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM16;
 8006756:	230c      	movs	r3, #12
 8006758:	18fb      	adds	r3, r7, r3
 800675a:	2200      	movs	r2, #0
 800675c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 800675e:	230c      	movs	r3, #12
 8006760:	18fb      	adds	r3, r7, r3
 8006762:	4a17      	ldr	r2, [pc, #92]	; (80067c0 <HAL_TIM_MspPostInit+0x1a0>)
 8006764:	0019      	movs	r1, r3
 8006766:	0010      	movs	r0, r2
 8006768:	f7fa fb8e 	bl	8000e88 <HAL_GPIO_Init>
}
 800676c:	e01f      	b.n	80067ae <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM17)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a17      	ldr	r2, [pc, #92]	; (80067d0 <HAL_TIM_MspPostInit+0x1b0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d11a      	bne.n	80067ae <HAL_TIM_MspPostInit+0x18e>
    GPIO_InitStruct.Pin = PWM3_Pin;
 8006778:	230c      	movs	r3, #12
 800677a:	18fb      	adds	r3, r7, r3
 800677c:	2202      	movs	r2, #2
 800677e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006780:	230c      	movs	r3, #12
 8006782:	18fb      	adds	r3, r7, r3
 8006784:	2202      	movs	r2, #2
 8006786:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006788:	230c      	movs	r3, #12
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	2200      	movs	r2, #0
 800678e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006790:	230c      	movs	r3, #12
 8006792:	18fb      	adds	r3, r7, r3
 8006794:	2203      	movs	r2, #3
 8006796:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM17;
 8006798:	230c      	movs	r3, #12
 800679a:	18fb      	adds	r3, r7, r3
 800679c:	2200      	movs	r2, #0
 800679e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM3_GPIO_Port, &GPIO_InitStruct);
 80067a0:	230c      	movs	r3, #12
 80067a2:	18fb      	adds	r3, r7, r3
 80067a4:	4a06      	ldr	r2, [pc, #24]	; (80067c0 <HAL_TIM_MspPostInit+0x1a0>)
 80067a6:	0019      	movs	r1, r3
 80067a8:	0010      	movs	r0, r2
 80067aa:	f7fa fb6d 	bl	8000e88 <HAL_GPIO_Init>
}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	46bd      	mov	sp, r7
 80067b2:	b008      	add	sp, #32
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	48000400 	.word	0x48000400
 80067bc:	40000400 	.word	0x40000400
 80067c0:	48001000 	.word	0x48001000
 80067c4:	40014000 	.word	0x40014000
 80067c8:	48001400 	.word	0x48001400
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40014800 	.word	0x40014800

080067d4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a30      	ldr	r2, [pc, #192]	; (80068a4 <HAL_UART_MspInit+0xd0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d12b      	bne.n	800683e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80067e6:	4b30      	ldr	r3, [pc, #192]	; (80068a8 <HAL_UART_MspInit+0xd4>)
 80067e8:	4a2f      	ldr	r2, [pc, #188]	; (80068a8 <HAL_UART_MspInit+0xd4>)
 80067ea:	6992      	ldr	r2, [r2, #24]
 80067ec:	2180      	movs	r1, #128	; 0x80
 80067ee:	01c9      	lsls	r1, r1, #7
 80067f0:	430a      	orrs	r2, r1
 80067f2:	619a      	str	r2, [r3, #24]
 80067f4:	4b2c      	ldr	r3, [pc, #176]	; (80068a8 <HAL_UART_MspInit+0xd4>)
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	2380      	movs	r3, #128	; 0x80
 80067fa:	01db      	lsls	r3, r3, #7
 80067fc:	4013      	ands	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	693b      	ldr	r3, [r7, #16]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = MC_TX1_Pin|MC_RX1_Pin;
 8006802:	2314      	movs	r3, #20
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	22c0      	movs	r2, #192	; 0xc0
 8006808:	00d2      	lsls	r2, r2, #3
 800680a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800680c:	2314      	movs	r3, #20
 800680e:	18fb      	adds	r3, r7, r3
 8006810:	2202      	movs	r2, #2
 8006812:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006814:	2314      	movs	r3, #20
 8006816:	18fb      	adds	r3, r7, r3
 8006818:	2200      	movs	r2, #0
 800681a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800681c:	2314      	movs	r3, #20
 800681e:	18fb      	adds	r3, r7, r3
 8006820:	2203      	movs	r2, #3
 8006822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006824:	2314      	movs	r3, #20
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	2201      	movs	r2, #1
 800682a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800682c:	2314      	movs	r3, #20
 800682e:	18fa      	adds	r2, r7, r3
 8006830:	2390      	movs	r3, #144	; 0x90
 8006832:	05db      	lsls	r3, r3, #23
 8006834:	0011      	movs	r1, r2
 8006836:	0018      	movs	r0, r3
 8006838:	f7fa fb26 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800683c:	e02d      	b.n	800689a <HAL_UART_MspInit+0xc6>
  else if(huart->Instance==USART2)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1a      	ldr	r2, [pc, #104]	; (80068ac <HAL_UART_MspInit+0xd8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d128      	bne.n	800689a <HAL_UART_MspInit+0xc6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006848:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <HAL_UART_MspInit+0xd4>)
 800684a:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <HAL_UART_MspInit+0xd4>)
 800684c:	69d2      	ldr	r2, [r2, #28]
 800684e:	2180      	movs	r1, #128	; 0x80
 8006850:	0289      	lsls	r1, r1, #10
 8006852:	430a      	orrs	r2, r1
 8006854:	61da      	str	r2, [r3, #28]
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <HAL_UART_MspInit+0xd4>)
 8006858:	69da      	ldr	r2, [r3, #28]
 800685a:	2380      	movs	r3, #128	; 0x80
 800685c:	029b      	lsls	r3, r3, #10
 800685e:	4013      	ands	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MC_CTS2_Pin|MC_RTS2_Pin|MC_TX2_Pin|MC_RX2_Pin;
 8006864:	2314      	movs	r3, #20
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	2278      	movs	r2, #120	; 0x78
 800686a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800686c:	2314      	movs	r3, #20
 800686e:	18fb      	adds	r3, r7, r3
 8006870:	2202      	movs	r2, #2
 8006872:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006874:	2314      	movs	r3, #20
 8006876:	18fb      	adds	r3, r7, r3
 8006878:	2200      	movs	r2, #0
 800687a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800687c:	2314      	movs	r3, #20
 800687e:	18fb      	adds	r3, r7, r3
 8006880:	2203      	movs	r2, #3
 8006882:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8006884:	2314      	movs	r3, #20
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	2200      	movs	r2, #0
 800688a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800688c:	2314      	movs	r3, #20
 800688e:	18fb      	adds	r3, r7, r3
 8006890:	4a07      	ldr	r2, [pc, #28]	; (80068b0 <HAL_UART_MspInit+0xdc>)
 8006892:	0019      	movs	r1, r3
 8006894:	0010      	movs	r0, r2
 8006896:	f7fa faf7 	bl	8000e88 <HAL_GPIO_Init>
}
 800689a:	46c0      	nop			; (mov r8, r8)
 800689c:	46bd      	mov	sp, r7
 800689e:	b00a      	add	sp, #40	; 0x28
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	40013800 	.word	0x40013800
 80068a8:	40021000 	.word	0x40021000
 80068ac:	40004400 	.word	0x40004400
 80068b0:	48000c00 	.word	0x48000c00

080068b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	; 0x28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0); 
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	0019      	movs	r1, r3
 80068ca:	2013      	movs	r0, #19
 80068cc:	f7fa fa48 	bl	8000d60 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn); 
 80068d0:	2013      	movs	r0, #19
 80068d2:	f7fa fa5b 	bl	8000d8c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80068d6:	4b21      	ldr	r3, [pc, #132]	; (800695c <HAL_InitTick+0xa8>)
 80068d8:	4a20      	ldr	r2, [pc, #128]	; (800695c <HAL_InitTick+0xa8>)
 80068da:	69d2      	ldr	r2, [r2, #28]
 80068dc:	2180      	movs	r1, #128	; 0x80
 80068de:	0049      	lsls	r1, r1, #1
 80068e0:	430a      	orrs	r2, r1
 80068e2:	61da      	str	r2, [r3, #28]
 80068e4:	4b1d      	ldr	r3, [pc, #116]	; (800695c <HAL_InitTick+0xa8>)
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	2380      	movs	r3, #128	; 0x80
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	4013      	ands	r3, r2
 80068ee:	60bb      	str	r3, [r7, #8]
 80068f0:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80068f2:	230c      	movs	r3, #12
 80068f4:	18fa      	adds	r2, r7, r3
 80068f6:	2310      	movs	r3, #16
 80068f8:	18fb      	adds	r3, r7, r3
 80068fa:	0011      	movs	r1, r2
 80068fc:	0018      	movs	r0, r3
 80068fe:	f7fb f97d 	bl	8001bfc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006902:	f7fb f965 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 8006906:	0003      	movs	r3, r0
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	4914      	ldr	r1, [pc, #80]	; (8006960 <HAL_InitTick+0xac>)
 800690e:	0018      	movs	r0, r3
 8006910:	f7f9 fc02 	bl	8000118 <__udivsi3>
 8006914:	0003      	movs	r3, r0
 8006916:	3b01      	subs	r3, #1
 8006918:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <HAL_InitTick+0xb0>)
 800691c:	4a12      	ldr	r2, [pc, #72]	; (8006968 <HAL_InitTick+0xb4>)
 800691e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8006920:	4b10      	ldr	r3, [pc, #64]	; (8006964 <HAL_InitTick+0xb0>)
 8006922:	4a12      	ldr	r2, [pc, #72]	; (800696c <HAL_InitTick+0xb8>)
 8006924:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <HAL_InitTick+0xb0>)
 8006928:	6a3a      	ldr	r2, [r7, #32]
 800692a:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 800692c:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <HAL_InitTick+0xb0>)
 800692e:	2200      	movs	r2, #0
 8006930:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006932:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <HAL_InitTick+0xb0>)
 8006934:	2200      	movs	r2, #0
 8006936:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8006938:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <HAL_InitTick+0xb0>)
 800693a:	0018      	movs	r0, r3
 800693c:	f7fb fa86 	bl	8001e4c <HAL_TIM_Base_Init>
 8006940:	1e03      	subs	r3, r0, #0
 8006942:	d105      	bne.n	8006950 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8006944:	4b07      	ldr	r3, [pc, #28]	; (8006964 <HAL_InitTick+0xb0>)
 8006946:	0018      	movs	r0, r3
 8006948:	f7fb faac 	bl	8001ea4 <HAL_TIM_Base_Start_IT>
 800694c:	0003      	movs	r3, r0
 800694e:	e000      	b.n	8006952 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
}
 8006952:	0018      	movs	r0, r3
 8006954:	46bd      	mov	sp, r7
 8006956:	b00a      	add	sp, #40	; 0x28
 8006958:	bd80      	pop	{r7, pc}
 800695a:	46c0      	nop			; (mov r8, r8)
 800695c:	40021000 	.word	0x40021000
 8006960:	000f4240 	.word	0x000f4240
 8006964:	20001cec 	.word	0x20001cec
 8006968:	40002000 	.word	0x40002000
 800696c:	000003e7 	.word	0x000003e7

08006970 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8006974:	f7fd f993 	bl	8003c9e <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006978:	46c0      	nop			; (mov r8, r8)
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <TIM3_IRQHandler+0x14>)
 8006986:	0018      	movs	r0, r3
 8006988:	f7fb fb40 	bl	800200c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800698c:	46c0      	nop			; (mov r8, r8)
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	20001aa4 	.word	0x20001aa4

08006998 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800699c:	4b03      	ldr	r3, [pc, #12]	; (80069ac <TIM14_IRQHandler+0x14>)
 800699e:	0018      	movs	r0, r3
 80069a0:	f7fb fb34 	bl	800200c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80069a4:	46c0      	nop			; (mov r8, r8)
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	20001cec 	.word	0x20001cec

080069b0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80069b4:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <USART1_IRQHandler+0x14>)
 80069b6:	0018      	movs	r0, r3
 80069b8:	f7fc fbf6 	bl	80031a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80069bc:	46c0      	nop			; (mov r8, r8)
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	20001ae4 	.word	0x20001ae4

080069c8 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80069cc:	4b03      	ldr	r3, [pc, #12]	; (80069dc <USART2_IRQHandler+0x14>)
 80069ce:	0018      	movs	r0, r3
 80069d0:	f7fc fbea 	bl	80031a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80069d4:	46c0      	nop			; (mov r8, r8)
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	20001bd4 	.word	0x20001bd4

080069e0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80069e4:	4b1a      	ldr	r3, [pc, #104]	; (8006a50 <SystemInit+0x70>)
 80069e6:	4a1a      	ldr	r2, [pc, #104]	; (8006a50 <SystemInit+0x70>)
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	2101      	movs	r1, #1
 80069ec:	430a      	orrs	r2, r1
 80069ee:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80069f0:	4b17      	ldr	r3, [pc, #92]	; (8006a50 <SystemInit+0x70>)
 80069f2:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <SystemInit+0x70>)
 80069f4:	6852      	ldr	r2, [r2, #4]
 80069f6:	4917      	ldr	r1, [pc, #92]	; (8006a54 <SystemInit+0x74>)
 80069f8:	400a      	ands	r2, r1
 80069fa:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80069fc:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <SystemInit+0x70>)
 80069fe:	4a14      	ldr	r2, [pc, #80]	; (8006a50 <SystemInit+0x70>)
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	4915      	ldr	r1, [pc, #84]	; (8006a58 <SystemInit+0x78>)
 8006a04:	400a      	ands	r2, r1
 8006a06:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006a08:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <SystemInit+0x70>)
 8006a0a:	4a11      	ldr	r2, [pc, #68]	; (8006a50 <SystemInit+0x70>)
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	4913      	ldr	r1, [pc, #76]	; (8006a5c <SystemInit+0x7c>)
 8006a10:	400a      	ands	r2, r1
 8006a12:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8006a14:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <SystemInit+0x70>)
 8006a16:	4a0e      	ldr	r2, [pc, #56]	; (8006a50 <SystemInit+0x70>)
 8006a18:	6852      	ldr	r2, [r2, #4]
 8006a1a:	4911      	ldr	r1, [pc, #68]	; (8006a60 <SystemInit+0x80>)
 8006a1c:	400a      	ands	r2, r1
 8006a1e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8006a20:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <SystemInit+0x70>)
 8006a22:	4a0b      	ldr	r2, [pc, #44]	; (8006a50 <SystemInit+0x70>)
 8006a24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a26:	210f      	movs	r1, #15
 8006a28:	438a      	bics	r2, r1
 8006a2a:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8006a2c:	4b08      	ldr	r3, [pc, #32]	; (8006a50 <SystemInit+0x70>)
 8006a2e:	4a08      	ldr	r2, [pc, #32]	; (8006a50 <SystemInit+0x70>)
 8006a30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a32:	490c      	ldr	r1, [pc, #48]	; (8006a64 <SystemInit+0x84>)
 8006a34:	400a      	ands	r2, r1
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <SystemInit+0x70>)
 8006a3a:	4a05      	ldr	r2, [pc, #20]	; (8006a50 <SystemInit+0x70>)
 8006a3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a3e:	2101      	movs	r1, #1
 8006a40:	438a      	bics	r2, r1
 8006a42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8006a44:	4b02      	ldr	r3, [pc, #8]	; (8006a50 <SystemInit+0x70>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	609a      	str	r2, [r3, #8]

}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	40021000 	.word	0x40021000
 8006a54:	08ffb80c 	.word	0x08ffb80c
 8006a58:	fef6ffff 	.word	0xfef6ffff
 8006a5c:	fffbffff 	.word	0xfffbffff
 8006a60:	ffc0ffff 	.word	0xffc0ffff
 8006a64:	fffcfe2c 	.word	0xfffcfe2c

08006a68 <traces>:
}

// ***************************************************************************

void traces(char *msg)
{
 8006a68:	b590      	push	{r4, r7, lr}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(trace_uart_ptr, " ", 1, 100);
 8006a70:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <traces+0x48>)
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	490f      	ldr	r1, [pc, #60]	; (8006ab4 <traces+0x4c>)
 8006a76:	2364      	movs	r3, #100	; 0x64
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f7fc fa0f 	bl	8002e9c <HAL_UART_Transmit>
    HAL_UART_Transmit(trace_uart_ptr, msg, strlen(msg), 100);
 8006a7e:	4b0c      	ldr	r3, [pc, #48]	; (8006ab0 <traces+0x48>)
 8006a80:	681c      	ldr	r4, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	0018      	movs	r0, r3
 8006a86:	f7f9 fb3f 	bl	8000108 <strlen>
 8006a8a:	0003      	movs	r3, r0
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	2364      	movs	r3, #100	; 0x64
 8006a92:	0020      	movs	r0, r4
 8006a94:	f7fc fa02 	bl	8002e9c <HAL_UART_Transmit>
    HAL_UART_Transmit(trace_uart_ptr, "\n", 1, 100);
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <traces+0x48>)
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	4906      	ldr	r1, [pc, #24]	; (8006ab8 <traces+0x50>)
 8006a9e:	2364      	movs	r3, #100	; 0x64
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f7fc f9fb 	bl	8002e9c <HAL_UART_Transmit>
}
 8006aa6:	46c0      	nop			; (mov r8, r8)
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	b003      	add	sp, #12
 8006aac:	bd90      	pop	{r4, r7, pc}
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	2000006c 	.word	0x2000006c
 8006ab4:	08007820 	.word	0x08007820
 8006ab8:	08007824 	.word	0x08007824

08006abc <tracef>:

void tracef(char *fmt, ...)
{
 8006abc:	b40f      	push	{r0, r1, r2, r3}
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8006ac4:	2314      	movs	r3, #20
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	607b      	str	r3, [r7, #4]
    vsniprintf(trace_buf, TRACE_BUFLEN, fmt, args);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4807      	ldr	r0, [pc, #28]	; (8006aec <tracef+0x30>)
 8006ad0:	2150      	movs	r1, #80	; 0x50
 8006ad2:	f000 f9cb 	bl	8006e6c <vsniprintf>
    traces(trace_buf);
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <tracef+0x30>)
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7ff ffc5 	bl	8006a68 <traces>
    va_end(args);
}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b002      	add	sp, #8
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	bc08      	pop	{r3}
 8006ae8:	b004      	add	sp, #16
 8006aea:	4718      	bx	r3
 8006aec:	200019b8 	.word	0x200019b8

08006af0 <get_response>:
// ***************************************************************************

// TODO Die Eingabe sollte interruptgesteuert oder per DMA erfolgen!!!

static bool get_response(char *expected_answer)
{
 8006af0:	b590      	push	{r4, r7, lr}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
    int len = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef receive_retval;
    do {
        // receive a response
        memset(rx_buf, 0, RX_BUF_SIZE);
 8006afc:	4b2d      	ldr	r3, [pc, #180]	; (8006bb4 <get_response+0xc4>)
 8006afe:	220a      	movs	r2, #10
 8006b00:	2100      	movs	r1, #0
 8006b02:	0018      	movs	r0, r3
 8006b04:	f000 f97f 	bl	8006e06 <memset>
        receive_retval = HAL_UART_Receive(wlan_uart_ptr, rx_buf, RX_BUF_SIZE, RX_TIMEOUT);
 8006b08:	4b2b      	ldr	r3, [pc, #172]	; (8006bb8 <get_response+0xc8>)
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	230b      	movs	r3, #11
 8006b0e:	18fc      	adds	r4, r7, r3
 8006b10:	4928      	ldr	r1, [pc, #160]	; (8006bb4 <get_response+0xc4>)
 8006b12:	23fa      	movs	r3, #250	; 0xfa
 8006b14:	220a      	movs	r2, #10
 8006b16:	f7fc fa65 	bl	8002fe4 <HAL_UART_Receive>
 8006b1a:	0003      	movs	r3, r0
 8006b1c:	7023      	strb	r3, [r4, #0]

        // try to determine length of answer
        // TODO this cannot really work - fix it!
        len = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
        while (len < (RX_BUF_SIZE-1) && rx_buf[len] != '\0')
 8006b22:	e002      	b.n	8006b2a <get_response+0x3a>
        {
            len++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3301      	adds	r3, #1
 8006b28:	60fb      	str	r3, [r7, #12]
        while (len < (RX_BUF_SIZE-1) && rx_buf[len] != '\0')
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	dc05      	bgt.n	8006b3c <get_response+0x4c>
 8006b30:	4a20      	ldr	r2, [pc, #128]	; (8006bb4 <get_response+0xc4>)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	18d3      	adds	r3, r2, r3
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f3      	bne.n	8006b24 <get_response+0x34>
        }
        // make the rx buffer a c string
        rx_buf[len] = '\0';
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <get_response+0xc4>)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	18d3      	adds	r3, r2, r3
 8006b42:	2200      	movs	r2, #0
 8006b44:	701a      	strb	r2, [r3, #0]
    } while (len >= (RX_BUF_SIZE-1));
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	dcd7      	bgt.n	8006afc <get_response+0xc>
    SERIAL_DEBUG("Received: ", rx_buf);
 8006b4c:	491b      	ldr	r1, [pc, #108]	; (8006bbc <get_response+0xcc>)
 8006b4e:	481c      	ldr	r0, [pc, #112]	; (8006bc0 <get_response+0xd0>)
 8006b50:	23fa      	movs	r3, #250	; 0xfa
 8006b52:	220a      	movs	r2, #10
 8006b54:	f7fc f9a2 	bl	8002e9c <HAL_UART_Transmit>
 8006b58:	4b16      	ldr	r3, [pc, #88]	; (8006bb4 <get_response+0xc4>)
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f7f9 fad4 	bl	8000108 <strlen>
 8006b60:	0003      	movs	r3, r0
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	4913      	ldr	r1, [pc, #76]	; (8006bb4 <get_response+0xc4>)
 8006b66:	4816      	ldr	r0, [pc, #88]	; (8006bc0 <get_response+0xd0>)
 8006b68:	23fa      	movs	r3, #250	; 0xfa
 8006b6a:	f7fc f997 	bl	8002e9c <HAL_UART_Transmit>
 8006b6e:	4915      	ldr	r1, [pc, #84]	; (8006bc4 <get_response+0xd4>)
 8006b70:	4813      	ldr	r0, [pc, #76]	; (8006bc0 <get_response+0xd0>)
 8006b72:	23fa      	movs	r3, #250	; 0xfa
 8006b74:	2202      	movs	r2, #2
 8006b76:	f7fc f991 	bl	8002e9c <HAL_UART_Transmit>
    SERIAL_DEBUG("Expected: ", expected_answer);
 8006b7a:	4913      	ldr	r1, [pc, #76]	; (8006bc8 <get_response+0xd8>)
 8006b7c:	4810      	ldr	r0, [pc, #64]	; (8006bc0 <get_response+0xd0>)
 8006b7e:	23fa      	movs	r3, #250	; 0xfa
 8006b80:	220a      	movs	r2, #10
 8006b82:	f7fc f98b 	bl	8002e9c <HAL_UART_Transmit>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7f9 fabd 	bl	8000108 <strlen>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	480a      	ldr	r0, [pc, #40]	; (8006bc0 <get_response+0xd0>)
 8006b96:	23fa      	movs	r3, #250	; 0xfa
 8006b98:	f7fc f980 	bl	8002e9c <HAL_UART_Transmit>
 8006b9c:	4909      	ldr	r1, [pc, #36]	; (8006bc4 <get_response+0xd4>)
 8006b9e:	4808      	ldr	r0, [pc, #32]	; (8006bc0 <get_response+0xd0>)
 8006ba0:	23fa      	movs	r3, #250	; 0xfa
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f7fc f97a 	bl	8002e9c <HAL_UART_Transmit>
//    itoa(receive_retval, rx_buf, 10);
//    SERIAL_DEBUG("Ret=", rx_buf);

    // check the result
    // TODO wirklichen Vergleich machen
    return true; //(strstr(rx_buf, expected_answer) != NULL);
 8006ba8:	2301      	movs	r3, #1
}
 8006baa:	0018      	movs	r0, r3
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b005      	add	sp, #20
 8006bb0:	bd90      	pop	{r4, r7, pc}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	20001a08 	.word	0x20001a08
 8006bb8:	20000070 	.word	0x20000070
 8006bbc:	08007848 	.word	0x08007848
 8006bc0:	20001ae4 	.word	0x20001ae4
 8006bc4:	08007854 	.word	0x08007854
 8006bc8:	08007858 	.word	0x08007858

08006bcc <send_command>:

static bool send_command(char *cmd, uint32_t delay_ms, char *expected_answer)
{
 8006bcc:	b590      	push	{r4, r7, lr}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(wlan_uart_ptr, cmd, strlen(cmd), TX_TIMEOUT);
 8006bd8:	4b18      	ldr	r3, [pc, #96]	; (8006c3c <send_command+0x70>)
 8006bda:	681c      	ldr	r4, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	0018      	movs	r0, r3
 8006be0:	f7f9 fa92 	bl	8000108 <strlen>
 8006be4:	0003      	movs	r3, r0
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68f9      	ldr	r1, [r7, #12]
 8006bea:	23fa      	movs	r3, #250	; 0xfa
 8006bec:	0020      	movs	r0, r4
 8006bee:	f7fc f955 	bl	8002e9c <HAL_UART_Transmit>
    SERIAL_DEBUG("Transmitted: ", cmd);
 8006bf2:	4913      	ldr	r1, [pc, #76]	; (8006c40 <send_command+0x74>)
 8006bf4:	4813      	ldr	r0, [pc, #76]	; (8006c44 <send_command+0x78>)
 8006bf6:	23fa      	movs	r3, #250	; 0xfa
 8006bf8:	220d      	movs	r2, #13
 8006bfa:	f7fc f94f 	bl	8002e9c <HAL_UART_Transmit>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	0018      	movs	r0, r3
 8006c02:	f7f9 fa81 	bl	8000108 <strlen>
 8006c06:	0003      	movs	r3, r0
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68f9      	ldr	r1, [r7, #12]
 8006c0c:	480d      	ldr	r0, [pc, #52]	; (8006c44 <send_command+0x78>)
 8006c0e:	23fa      	movs	r3, #250	; 0xfa
 8006c10:	f7fc f944 	bl	8002e9c <HAL_UART_Transmit>
 8006c14:	490c      	ldr	r1, [pc, #48]	; (8006c48 <send_command+0x7c>)
 8006c16:	480b      	ldr	r0, [pc, #44]	; (8006c44 <send_command+0x78>)
 8006c18:	23fa      	movs	r3, #250	; 0xfa
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f7fc f93e 	bl	8002e9c <HAL_UART_Transmit>
    HAL_Delay(delay_ms);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	0018      	movs	r0, r3
 8006c24:	f7f9 fb2e 	bl	8000284 <HAL_Delay>
    return get_response(expected_answer);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f7ff ff60 	bl	8006af0 <get_response>
 8006c30:	0003      	movs	r3, r0
}
 8006c32:	0018      	movs	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b005      	add	sp, #20
 8006c38:	bd90      	pop	{r4, r7, pc}
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	20000070 	.word	0x20000070
 8006c40:	08007864 	.word	0x08007864
 8006c44:	20001ae4 	.word	0x20001ae4
 8006c48:	08007854 	.word	0x08007854

08006c4c <config_start>:

// TODO Sinnvolle Fehlerbehandlung einführen - z. B. Reset des WIFI-Moduls und Neustart der Prozedur
// TODO WIFI-Modul bis zum Neustart auf schnellere Kommunikationsgeschwindigkeit umschalten und HAL_UART umkonfigurieren

static bool config_start()
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
    bool ok = true;
 8006c52:	1dfb      	adds	r3, r7, #7
 8006c54:	2201      	movs	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
    // TODO Macht es Sinn, das WIFI-Modul zurückzusetzen?
    ok = ok && send_command("$$$", 200, "CMD");
 8006c58:	1dfb      	adds	r3, r7, #7
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <config_start+0x28>
 8006c60:	4a17      	ldr	r2, [pc, #92]	; (8006cc0 <config_start+0x74>)
 8006c62:	4b18      	ldr	r3, [pc, #96]	; (8006cc4 <config_start+0x78>)
 8006c64:	21c8      	movs	r1, #200	; 0xc8
 8006c66:	0018      	movs	r0, r3
 8006c68:	f7ff ffb0 	bl	8006bcc <send_command>
 8006c6c:	1e03      	subs	r3, r0, #0
 8006c6e:	d001      	beq.n	8006c74 <config_start+0x28>
 8006c70:	2201      	movs	r2, #1
 8006c72:	e000      	b.n	8006c76 <config_start+0x2a>
 8006c74:	2200      	movs	r2, #0
 8006c76:	1dfb      	adds	r3, r7, #7
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	781a      	ldrb	r2, [r3, #0]
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	400a      	ands	r2, r1
 8006c80:	701a      	strb	r2, [r3, #0]
    ok = ok && send_command("\rload config\r", 0, "AOK");
 8006c82:	1dfb      	adds	r3, r7, #7
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <config_start+0x52>
 8006c8a:	4a0f      	ldr	r2, [pc, #60]	; (8006cc8 <config_start+0x7c>)
 8006c8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <config_start+0x80>)
 8006c8e:	2100      	movs	r1, #0
 8006c90:	0018      	movs	r0, r3
 8006c92:	f7ff ff9b 	bl	8006bcc <send_command>
 8006c96:	1e03      	subs	r3, r0, #0
 8006c98:	d001      	beq.n	8006c9e <config_start+0x52>
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	e000      	b.n	8006ca0 <config_start+0x54>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	1dfb      	adds	r3, r7, #7
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	781a      	ldrb	r2, [r3, #0]
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	400a      	ands	r2, r1
 8006caa:	701a      	strb	r2, [r3, #0]
    HAL_Delay(250);
 8006cac:	20fa      	movs	r0, #250	; 0xfa
 8006cae:	f7f9 fae9 	bl	8000284 <HAL_Delay>
    return ok;
 8006cb2:	1dfb      	adds	r3, r7, #7
 8006cb4:	781b      	ldrb	r3, [r3, #0]
}
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	b002      	add	sp, #8
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	080078a4 	.word	0x080078a4
 8006cc4:	080078a8 	.word	0x080078a8
 8006cc8:	080078ac 	.word	0x080078ac
 8006ccc:	080078b0 	.word	0x080078b0

08006cd0 <config_leave>:

static bool config_leave()
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
    return send_command("\rexit\r", 0, "EXIT");
 8006cd4:	4a04      	ldr	r2, [pc, #16]	; (8006ce8 <config_leave+0x18>)
 8006cd6:	4b05      	ldr	r3, [pc, #20]	; (8006cec <config_leave+0x1c>)
 8006cd8:	2100      	movs	r1, #0
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f7ff ff76 	bl	8006bcc <send_command>
 8006ce0:	0003      	movs	r3, r0
}
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	080078c0 	.word	0x080078c0
 8006cec:	080078c8 	.word	0x080078c8

08006cf0 <wifi_init>:
}

// ***************************************************************************

bool wifi_init()
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
    bool ok = true;
 8006cf6:	1dfb      	adds	r3, r7, #7
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	701a      	strb	r2, [r3, #0]
    ok = ok && config_start();
 8006cfc:	1dfb      	adds	r3, r7, #7
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <wifi_init+0x20>
 8006d04:	f7ff ffa2 	bl	8006c4c <config_start>
 8006d08:	1e03      	subs	r3, r0, #0
 8006d0a:	d001      	beq.n	8006d10 <wifi_init+0x20>
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	e000      	b.n	8006d12 <wifi_init+0x22>
 8006d10:	2200      	movs	r2, #0
 8006d12:	1dfb      	adds	r3, r7, #7
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	2101      	movs	r1, #1
 8006d1a:	400a      	ands	r2, r1
 8006d1c:	701a      	strb	r2, [r3, #0]
    ok = ok && config_leave();
 8006d1e:	1dfb      	adds	r3, r7, #7
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <wifi_init+0x42>
 8006d26:	f7ff ffd3 	bl	8006cd0 <config_leave>
 8006d2a:	1e03      	subs	r3, r0, #0
 8006d2c:	d001      	beq.n	8006d32 <wifi_init+0x42>
 8006d2e:	2201      	movs	r2, #1
 8006d30:	e000      	b.n	8006d34 <wifi_init+0x44>
 8006d32:	2200      	movs	r2, #0
 8006d34:	1dfb      	adds	r3, r7, #7
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	781a      	ldrb	r2, [r3, #0]
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	400a      	ands	r2, r1
 8006d3e:	701a      	strb	r2, [r3, #0]
    return ok;
 8006d40:	1dfb      	adds	r3, r7, #7
 8006d42:	781b      	ldrb	r3, [r3, #0]
}
 8006d44:	0018      	movs	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	b002      	add	sp, #8
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006d4c:	480d      	ldr	r0, [pc, #52]	; (8006d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006d4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006d50:	480d      	ldr	r0, [pc, #52]	; (8006d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8006d52:	490e      	ldr	r1, [pc, #56]	; (8006d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006d54:	4a0e      	ldr	r2, [pc, #56]	; (8006d90 <LoopForever+0xe>)
  movs r3, #0
 8006d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d58:	e002      	b.n	8006d60 <LoopCopyDataInit>

08006d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d5e:	3304      	adds	r3, #4

08006d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d64:	d3f9      	bcc.n	8006d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d66:	4a0b      	ldr	r2, [pc, #44]	; (8006d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006d68:	4c0b      	ldr	r4, [pc, #44]	; (8006d98 <LoopForever+0x16>)
  movs r3, #0
 8006d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d6c:	e001      	b.n	8006d72 <LoopFillZerobss>

08006d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d70:	3204      	adds	r2, #4

08006d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d74:	d3fb      	bcc.n	8006d6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006d76:	f7ff fe33 	bl	80069e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006d7a:	f000 f817 	bl	8006dac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006d7e:	f7ff f8b1 	bl	8005ee4 <main>

08006d82 <LoopForever>:

LoopForever:
    b LoopForever
 8006d82:	e7fe      	b.n	8006d82 <LoopForever>
  ldr   r0, =_estack
 8006d84:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d8c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8006d90:	08007ac4 	.word	0x08007ac4
  ldr r2, =_sbss
 8006d94:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8006d98:	20001d30 	.word	0x20001d30

08006d9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006d9c:	e7fe      	b.n	8006d9c <ADC1_COMP_IRQHandler>
	...

08006da0 <__errno>:
 8006da0:	4b01      	ldr	r3, [pc, #4]	; (8006da8 <__errno+0x8>)
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	4770      	bx	lr
 8006da6:	46c0      	nop			; (mov r8, r8)
 8006da8:	20000074 	.word	0x20000074

08006dac <__libc_init_array>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	2600      	movs	r6, #0
 8006db0:	4d0c      	ldr	r5, [pc, #48]	; (8006de4 <__libc_init_array+0x38>)
 8006db2:	4c0d      	ldr	r4, [pc, #52]	; (8006de8 <__libc_init_array+0x3c>)
 8006db4:	1b64      	subs	r4, r4, r5
 8006db6:	10a4      	asrs	r4, r4, #2
 8006db8:	42a6      	cmp	r6, r4
 8006dba:	d109      	bne.n	8006dd0 <__libc_init_array+0x24>
 8006dbc:	2600      	movs	r6, #0
 8006dbe:	f000 fc57 	bl	8007670 <_init>
 8006dc2:	4d0a      	ldr	r5, [pc, #40]	; (8006dec <__libc_init_array+0x40>)
 8006dc4:	4c0a      	ldr	r4, [pc, #40]	; (8006df0 <__libc_init_array+0x44>)
 8006dc6:	1b64      	subs	r4, r4, r5
 8006dc8:	10a4      	asrs	r4, r4, #2
 8006dca:	42a6      	cmp	r6, r4
 8006dcc:	d105      	bne.n	8006dda <__libc_init_array+0x2e>
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	00b3      	lsls	r3, r6, #2
 8006dd2:	58eb      	ldr	r3, [r5, r3]
 8006dd4:	4798      	blx	r3
 8006dd6:	3601      	adds	r6, #1
 8006dd8:	e7ee      	b.n	8006db8 <__libc_init_array+0xc>
 8006dda:	00b3      	lsls	r3, r6, #2
 8006ddc:	58eb      	ldr	r3, [r5, r3]
 8006dde:	4798      	blx	r3
 8006de0:	3601      	adds	r6, #1
 8006de2:	e7f2      	b.n	8006dca <__libc_init_array+0x1e>
 8006de4:	08007abc 	.word	0x08007abc
 8006de8:	08007abc 	.word	0x08007abc
 8006dec:	08007abc 	.word	0x08007abc
 8006df0:	08007ac0 	.word	0x08007ac0

08006df4 <memcpy>:
 8006df4:	2300      	movs	r3, #0
 8006df6:	b510      	push	{r4, lr}
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d100      	bne.n	8006dfe <memcpy+0xa>
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	5ccc      	ldrb	r4, [r1, r3]
 8006e00:	54c4      	strb	r4, [r0, r3]
 8006e02:	3301      	adds	r3, #1
 8006e04:	e7f8      	b.n	8006df8 <memcpy+0x4>

08006e06 <memset>:
 8006e06:	0003      	movs	r3, r0
 8006e08:	1882      	adds	r2, r0, r2
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d100      	bne.n	8006e10 <memset+0xa>
 8006e0e:	4770      	bx	lr
 8006e10:	7019      	strb	r1, [r3, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	e7f9      	b.n	8006e0a <memset+0x4>

08006e16 <_vsniprintf_r>:
 8006e16:	b530      	push	{r4, r5, lr}
 8006e18:	0014      	movs	r4, r2
 8006e1a:	b09b      	sub	sp, #108	; 0x6c
 8006e1c:	0005      	movs	r5, r0
 8006e1e:	001a      	movs	r2, r3
 8006e20:	2c00      	cmp	r4, #0
 8006e22:	da05      	bge.n	8006e30 <_vsniprintf_r+0x1a>
 8006e24:	238b      	movs	r3, #139	; 0x8b
 8006e26:	6003      	str	r3, [r0, #0]
 8006e28:	2001      	movs	r0, #1
 8006e2a:	4240      	negs	r0, r0
 8006e2c:	b01b      	add	sp, #108	; 0x6c
 8006e2e:	bd30      	pop	{r4, r5, pc}
 8006e30:	2382      	movs	r3, #130	; 0x82
 8006e32:	4668      	mov	r0, sp
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	8183      	strh	r3, [r0, #12]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9100      	str	r1, [sp, #0]
 8006e3c:	9104      	str	r1, [sp, #16]
 8006e3e:	429c      	cmp	r4, r3
 8006e40:	d000      	beq.n	8006e44 <_vsniprintf_r+0x2e>
 8006e42:	1e63      	subs	r3, r4, #1
 8006e44:	9302      	str	r3, [sp, #8]
 8006e46:	9305      	str	r3, [sp, #20]
 8006e48:	2301      	movs	r3, #1
 8006e4a:	4669      	mov	r1, sp
 8006e4c:	425b      	negs	r3, r3
 8006e4e:	81cb      	strh	r3, [r1, #14]
 8006e50:	0028      	movs	r0, r5
 8006e52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e54:	f000 f878 	bl	8006f48 <_svfiprintf_r>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	da01      	bge.n	8006e60 <_vsniprintf_r+0x4a>
 8006e5c:	238b      	movs	r3, #139	; 0x8b
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	2c00      	cmp	r4, #0
 8006e62:	d0e3      	beq.n	8006e2c <_vsniprintf_r+0x16>
 8006e64:	2300      	movs	r3, #0
 8006e66:	9a00      	ldr	r2, [sp, #0]
 8006e68:	7013      	strb	r3, [r2, #0]
 8006e6a:	e7df      	b.n	8006e2c <_vsniprintf_r+0x16>

08006e6c <vsniprintf>:
 8006e6c:	b507      	push	{r0, r1, r2, lr}
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	0013      	movs	r3, r2
 8006e72:	000a      	movs	r2, r1
 8006e74:	0001      	movs	r1, r0
 8006e76:	4802      	ldr	r0, [pc, #8]	; (8006e80 <vsniprintf+0x14>)
 8006e78:	6800      	ldr	r0, [r0, #0]
 8006e7a:	f7ff ffcc 	bl	8006e16 <_vsniprintf_r>
 8006e7e:	bd0e      	pop	{r1, r2, r3, pc}
 8006e80:	20000074 	.word	0x20000074

08006e84 <__ssputs_r>:
 8006e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e86:	688e      	ldr	r6, [r1, #8]
 8006e88:	b085      	sub	sp, #20
 8006e8a:	0007      	movs	r7, r0
 8006e8c:	000c      	movs	r4, r1
 8006e8e:	9203      	str	r2, [sp, #12]
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	429e      	cmp	r6, r3
 8006e94:	d839      	bhi.n	8006f0a <__ssputs_r+0x86>
 8006e96:	2390      	movs	r3, #144	; 0x90
 8006e98:	898a      	ldrh	r2, [r1, #12]
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	421a      	tst	r2, r3
 8006e9e:	d034      	beq.n	8006f0a <__ssputs_r+0x86>
 8006ea0:	2503      	movs	r5, #3
 8006ea2:	6909      	ldr	r1, [r1, #16]
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	1a5b      	subs	r3, r3, r1
 8006ea8:	9302      	str	r3, [sp, #8]
 8006eaa:	6963      	ldr	r3, [r4, #20]
 8006eac:	9802      	ldr	r0, [sp, #8]
 8006eae:	435d      	muls	r5, r3
 8006eb0:	0feb      	lsrs	r3, r5, #31
 8006eb2:	195d      	adds	r5, r3, r5
 8006eb4:	9b01      	ldr	r3, [sp, #4]
 8006eb6:	106d      	asrs	r5, r5, #1
 8006eb8:	3301      	adds	r3, #1
 8006eba:	181b      	adds	r3, r3, r0
 8006ebc:	42ab      	cmp	r3, r5
 8006ebe:	d900      	bls.n	8006ec2 <__ssputs_r+0x3e>
 8006ec0:	001d      	movs	r5, r3
 8006ec2:	0553      	lsls	r3, r2, #21
 8006ec4:	d532      	bpl.n	8006f2c <__ssputs_r+0xa8>
 8006ec6:	0029      	movs	r1, r5
 8006ec8:	0038      	movs	r0, r7
 8006eca:	f000 fb31 	bl	8007530 <_malloc_r>
 8006ece:	1e06      	subs	r6, r0, #0
 8006ed0:	d109      	bne.n	8006ee6 <__ssputs_r+0x62>
 8006ed2:	230c      	movs	r3, #12
 8006ed4:	603b      	str	r3, [r7, #0]
 8006ed6:	2340      	movs	r3, #64	; 0x40
 8006ed8:	2001      	movs	r0, #1
 8006eda:	89a2      	ldrh	r2, [r4, #12]
 8006edc:	4240      	negs	r0, r0
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	81a3      	strh	r3, [r4, #12]
 8006ee2:	b005      	add	sp, #20
 8006ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee6:	9a02      	ldr	r2, [sp, #8]
 8006ee8:	6921      	ldr	r1, [r4, #16]
 8006eea:	f7ff ff83 	bl	8006df4 <memcpy>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	4a14      	ldr	r2, [pc, #80]	; (8006f44 <__ssputs_r+0xc0>)
 8006ef2:	401a      	ands	r2, r3
 8006ef4:	2380      	movs	r3, #128	; 0x80
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	6126      	str	r6, [r4, #16]
 8006efe:	18f6      	adds	r6, r6, r3
 8006f00:	6026      	str	r6, [r4, #0]
 8006f02:	6165      	str	r5, [r4, #20]
 8006f04:	9e01      	ldr	r6, [sp, #4]
 8006f06:	1aed      	subs	r5, r5, r3
 8006f08:	60a5      	str	r5, [r4, #8]
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	42b3      	cmp	r3, r6
 8006f0e:	d200      	bcs.n	8006f12 <__ssputs_r+0x8e>
 8006f10:	001e      	movs	r6, r3
 8006f12:	0032      	movs	r2, r6
 8006f14:	9903      	ldr	r1, [sp, #12]
 8006f16:	6820      	ldr	r0, [r4, #0]
 8006f18:	f000 faad 	bl	8007476 <memmove>
 8006f1c:	68a3      	ldr	r3, [r4, #8]
 8006f1e:	2000      	movs	r0, #0
 8006f20:	1b9b      	subs	r3, r3, r6
 8006f22:	60a3      	str	r3, [r4, #8]
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	199e      	adds	r6, r3, r6
 8006f28:	6026      	str	r6, [r4, #0]
 8006f2a:	e7da      	b.n	8006ee2 <__ssputs_r+0x5e>
 8006f2c:	002a      	movs	r2, r5
 8006f2e:	0038      	movs	r0, r7
 8006f30:	f000 fb5c 	bl	80075ec <_realloc_r>
 8006f34:	1e06      	subs	r6, r0, #0
 8006f36:	d1e0      	bne.n	8006efa <__ssputs_r+0x76>
 8006f38:	6921      	ldr	r1, [r4, #16]
 8006f3a:	0038      	movs	r0, r7
 8006f3c:	f000 faae 	bl	800749c <_free_r>
 8006f40:	e7c7      	b.n	8006ed2 <__ssputs_r+0x4e>
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	fffffb7f 	.word	0xfffffb7f

08006f48 <_svfiprintf_r>:
 8006f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4a:	b09f      	sub	sp, #124	; 0x7c
 8006f4c:	9002      	str	r0, [sp, #8]
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	898b      	ldrh	r3, [r1, #12]
 8006f52:	000f      	movs	r7, r1
 8006f54:	0016      	movs	r6, r2
 8006f56:	061b      	lsls	r3, r3, #24
 8006f58:	d511      	bpl.n	8006f7e <_svfiprintf_r+0x36>
 8006f5a:	690b      	ldr	r3, [r1, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10e      	bne.n	8006f7e <_svfiprintf_r+0x36>
 8006f60:	2140      	movs	r1, #64	; 0x40
 8006f62:	f000 fae5 	bl	8007530 <_malloc_r>
 8006f66:	6038      	str	r0, [r7, #0]
 8006f68:	6138      	str	r0, [r7, #16]
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d105      	bne.n	8006f7a <_svfiprintf_r+0x32>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	9a02      	ldr	r2, [sp, #8]
 8006f72:	3801      	subs	r0, #1
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	b01f      	add	sp, #124	; 0x7c
 8006f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f7a:	2340      	movs	r3, #64	; 0x40
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	ad06      	add	r5, sp, #24
 8006f82:	616b      	str	r3, [r5, #20]
 8006f84:	3320      	adds	r3, #32
 8006f86:	766b      	strb	r3, [r5, #25]
 8006f88:	3310      	adds	r3, #16
 8006f8a:	76ab      	strb	r3, [r5, #26]
 8006f8c:	0034      	movs	r4, r6
 8006f8e:	7823      	ldrb	r3, [r4, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d147      	bne.n	8007024 <_svfiprintf_r+0xdc>
 8006f94:	1ba3      	subs	r3, r4, r6
 8006f96:	9304      	str	r3, [sp, #16]
 8006f98:	d00d      	beq.n	8006fb6 <_svfiprintf_r+0x6e>
 8006f9a:	1ba3      	subs	r3, r4, r6
 8006f9c:	0032      	movs	r2, r6
 8006f9e:	0039      	movs	r1, r7
 8006fa0:	9802      	ldr	r0, [sp, #8]
 8006fa2:	f7ff ff6f 	bl	8006e84 <__ssputs_r>
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	d100      	bne.n	8006fac <_svfiprintf_r+0x64>
 8006faa:	e0b5      	b.n	8007118 <_svfiprintf_r+0x1d0>
 8006fac:	696a      	ldr	r2, [r5, #20]
 8006fae:	9b04      	ldr	r3, [sp, #16]
 8006fb0:	4694      	mov	ip, r2
 8006fb2:	4463      	add	r3, ip
 8006fb4:	616b      	str	r3, [r5, #20]
 8006fb6:	7823      	ldrb	r3, [r4, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d100      	bne.n	8006fbe <_svfiprintf_r+0x76>
 8006fbc:	e0ac      	b.n	8007118 <_svfiprintf_r+0x1d0>
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4252      	negs	r2, r2
 8006fc4:	606a      	str	r2, [r5, #4]
 8006fc6:	a902      	add	r1, sp, #8
 8006fc8:	3254      	adds	r2, #84	; 0x54
 8006fca:	1852      	adds	r2, r2, r1
 8006fcc:	3401      	adds	r4, #1
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	60eb      	str	r3, [r5, #12]
 8006fd2:	60ab      	str	r3, [r5, #8]
 8006fd4:	7013      	strb	r3, [r2, #0]
 8006fd6:	65ab      	str	r3, [r5, #88]	; 0x58
 8006fd8:	4e58      	ldr	r6, [pc, #352]	; (800713c <_svfiprintf_r+0x1f4>)
 8006fda:	2205      	movs	r2, #5
 8006fdc:	7821      	ldrb	r1, [r4, #0]
 8006fde:	0030      	movs	r0, r6
 8006fe0:	f000 fa3e 	bl	8007460 <memchr>
 8006fe4:	1c62      	adds	r2, r4, #1
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d120      	bne.n	800702c <_svfiprintf_r+0xe4>
 8006fea:	6829      	ldr	r1, [r5, #0]
 8006fec:	06cb      	lsls	r3, r1, #27
 8006fee:	d504      	bpl.n	8006ffa <_svfiprintf_r+0xb2>
 8006ff0:	2353      	movs	r3, #83	; 0x53
 8006ff2:	ae02      	add	r6, sp, #8
 8006ff4:	3020      	adds	r0, #32
 8006ff6:	199b      	adds	r3, r3, r6
 8006ff8:	7018      	strb	r0, [r3, #0]
 8006ffa:	070b      	lsls	r3, r1, #28
 8006ffc:	d504      	bpl.n	8007008 <_svfiprintf_r+0xc0>
 8006ffe:	2353      	movs	r3, #83	; 0x53
 8007000:	202b      	movs	r0, #43	; 0x2b
 8007002:	ae02      	add	r6, sp, #8
 8007004:	199b      	adds	r3, r3, r6
 8007006:	7018      	strb	r0, [r3, #0]
 8007008:	7823      	ldrb	r3, [r4, #0]
 800700a:	2b2a      	cmp	r3, #42	; 0x2a
 800700c:	d016      	beq.n	800703c <_svfiprintf_r+0xf4>
 800700e:	2000      	movs	r0, #0
 8007010:	210a      	movs	r1, #10
 8007012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007014:	7822      	ldrb	r2, [r4, #0]
 8007016:	3a30      	subs	r2, #48	; 0x30
 8007018:	2a09      	cmp	r2, #9
 800701a:	d955      	bls.n	80070c8 <_svfiprintf_r+0x180>
 800701c:	2800      	cmp	r0, #0
 800701e:	d015      	beq.n	800704c <_svfiprintf_r+0x104>
 8007020:	9309      	str	r3, [sp, #36]	; 0x24
 8007022:	e013      	b.n	800704c <_svfiprintf_r+0x104>
 8007024:	2b25      	cmp	r3, #37	; 0x25
 8007026:	d0b5      	beq.n	8006f94 <_svfiprintf_r+0x4c>
 8007028:	3401      	adds	r4, #1
 800702a:	e7b0      	b.n	8006f8e <_svfiprintf_r+0x46>
 800702c:	2301      	movs	r3, #1
 800702e:	1b80      	subs	r0, r0, r6
 8007030:	4083      	lsls	r3, r0
 8007032:	6829      	ldr	r1, [r5, #0]
 8007034:	0014      	movs	r4, r2
 8007036:	430b      	orrs	r3, r1
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	e7cd      	b.n	8006fd8 <_svfiprintf_r+0x90>
 800703c:	9b05      	ldr	r3, [sp, #20]
 800703e:	1d18      	adds	r0, r3, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	9005      	str	r0, [sp, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	db39      	blt.n	80070bc <_svfiprintf_r+0x174>
 8007048:	9309      	str	r3, [sp, #36]	; 0x24
 800704a:	0014      	movs	r4, r2
 800704c:	7823      	ldrb	r3, [r4, #0]
 800704e:	2b2e      	cmp	r3, #46	; 0x2e
 8007050:	d10b      	bne.n	800706a <_svfiprintf_r+0x122>
 8007052:	7863      	ldrb	r3, [r4, #1]
 8007054:	1c62      	adds	r2, r4, #1
 8007056:	2b2a      	cmp	r3, #42	; 0x2a
 8007058:	d13e      	bne.n	80070d8 <_svfiprintf_r+0x190>
 800705a:	9b05      	ldr	r3, [sp, #20]
 800705c:	3402      	adds	r4, #2
 800705e:	1d1a      	adds	r2, r3, #4
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	9205      	str	r2, [sp, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	db34      	blt.n	80070d2 <_svfiprintf_r+0x18a>
 8007068:	9307      	str	r3, [sp, #28]
 800706a:	4e35      	ldr	r6, [pc, #212]	; (8007140 <_svfiprintf_r+0x1f8>)
 800706c:	7821      	ldrb	r1, [r4, #0]
 800706e:	2203      	movs	r2, #3
 8007070:	0030      	movs	r0, r6
 8007072:	f000 f9f5 	bl	8007460 <memchr>
 8007076:	2800      	cmp	r0, #0
 8007078:	d006      	beq.n	8007088 <_svfiprintf_r+0x140>
 800707a:	2340      	movs	r3, #64	; 0x40
 800707c:	1b80      	subs	r0, r0, r6
 800707e:	4083      	lsls	r3, r0
 8007080:	682a      	ldr	r2, [r5, #0]
 8007082:	3401      	adds	r4, #1
 8007084:	4313      	orrs	r3, r2
 8007086:	602b      	str	r3, [r5, #0]
 8007088:	7821      	ldrb	r1, [r4, #0]
 800708a:	2206      	movs	r2, #6
 800708c:	482d      	ldr	r0, [pc, #180]	; (8007144 <_svfiprintf_r+0x1fc>)
 800708e:	1c66      	adds	r6, r4, #1
 8007090:	7629      	strb	r1, [r5, #24]
 8007092:	f000 f9e5 	bl	8007460 <memchr>
 8007096:	2800      	cmp	r0, #0
 8007098:	d046      	beq.n	8007128 <_svfiprintf_r+0x1e0>
 800709a:	4b2b      	ldr	r3, [pc, #172]	; (8007148 <_svfiprintf_r+0x200>)
 800709c:	2b00      	cmp	r3, #0
 800709e:	d12f      	bne.n	8007100 <_svfiprintf_r+0x1b8>
 80070a0:	6829      	ldr	r1, [r5, #0]
 80070a2:	9b05      	ldr	r3, [sp, #20]
 80070a4:	2207      	movs	r2, #7
 80070a6:	05c9      	lsls	r1, r1, #23
 80070a8:	d528      	bpl.n	80070fc <_svfiprintf_r+0x1b4>
 80070aa:	189b      	adds	r3, r3, r2
 80070ac:	4393      	bics	r3, r2
 80070ae:	3308      	adds	r3, #8
 80070b0:	9305      	str	r3, [sp, #20]
 80070b2:	696b      	ldr	r3, [r5, #20]
 80070b4:	9a03      	ldr	r2, [sp, #12]
 80070b6:	189b      	adds	r3, r3, r2
 80070b8:	616b      	str	r3, [r5, #20]
 80070ba:	e767      	b.n	8006f8c <_svfiprintf_r+0x44>
 80070bc:	425b      	negs	r3, r3
 80070be:	60eb      	str	r3, [r5, #12]
 80070c0:	2302      	movs	r3, #2
 80070c2:	430b      	orrs	r3, r1
 80070c4:	602b      	str	r3, [r5, #0]
 80070c6:	e7c0      	b.n	800704a <_svfiprintf_r+0x102>
 80070c8:	434b      	muls	r3, r1
 80070ca:	3401      	adds	r4, #1
 80070cc:	189b      	adds	r3, r3, r2
 80070ce:	2001      	movs	r0, #1
 80070d0:	e7a0      	b.n	8007014 <_svfiprintf_r+0xcc>
 80070d2:	2301      	movs	r3, #1
 80070d4:	425b      	negs	r3, r3
 80070d6:	e7c7      	b.n	8007068 <_svfiprintf_r+0x120>
 80070d8:	2300      	movs	r3, #0
 80070da:	0014      	movs	r4, r2
 80070dc:	200a      	movs	r0, #10
 80070de:	001a      	movs	r2, r3
 80070e0:	606b      	str	r3, [r5, #4]
 80070e2:	7821      	ldrb	r1, [r4, #0]
 80070e4:	3930      	subs	r1, #48	; 0x30
 80070e6:	2909      	cmp	r1, #9
 80070e8:	d903      	bls.n	80070f2 <_svfiprintf_r+0x1aa>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0bd      	beq.n	800706a <_svfiprintf_r+0x122>
 80070ee:	9207      	str	r2, [sp, #28]
 80070f0:	e7bb      	b.n	800706a <_svfiprintf_r+0x122>
 80070f2:	4342      	muls	r2, r0
 80070f4:	3401      	adds	r4, #1
 80070f6:	1852      	adds	r2, r2, r1
 80070f8:	2301      	movs	r3, #1
 80070fa:	e7f2      	b.n	80070e2 <_svfiprintf_r+0x19a>
 80070fc:	3307      	adds	r3, #7
 80070fe:	e7d5      	b.n	80070ac <_svfiprintf_r+0x164>
 8007100:	ab05      	add	r3, sp, #20
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	003a      	movs	r2, r7
 8007106:	4b11      	ldr	r3, [pc, #68]	; (800714c <_svfiprintf_r+0x204>)
 8007108:	0029      	movs	r1, r5
 800710a:	9802      	ldr	r0, [sp, #8]
 800710c:	e000      	b.n	8007110 <_svfiprintf_r+0x1c8>
 800710e:	bf00      	nop
 8007110:	9003      	str	r0, [sp, #12]
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	d1cc      	bne.n	80070b2 <_svfiprintf_r+0x16a>
 8007118:	89bb      	ldrh	r3, [r7, #12]
 800711a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800711c:	065b      	lsls	r3, r3, #25
 800711e:	d400      	bmi.n	8007122 <_svfiprintf_r+0x1da>
 8007120:	e729      	b.n	8006f76 <_svfiprintf_r+0x2e>
 8007122:	2001      	movs	r0, #1
 8007124:	4240      	negs	r0, r0
 8007126:	e726      	b.n	8006f76 <_svfiprintf_r+0x2e>
 8007128:	ab05      	add	r3, sp, #20
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	003a      	movs	r2, r7
 800712e:	4b07      	ldr	r3, [pc, #28]	; (800714c <_svfiprintf_r+0x204>)
 8007130:	0029      	movs	r1, r5
 8007132:	9802      	ldr	r0, [sp, #8]
 8007134:	f000 f87a 	bl	800722c <_printf_i>
 8007138:	e7ea      	b.n	8007110 <_svfiprintf_r+0x1c8>
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	08007a88 	.word	0x08007a88
 8007140:	08007a8e 	.word	0x08007a8e
 8007144:	08007a92 	.word	0x08007a92
 8007148:	00000000 	.word	0x00000000
 800714c:	08006e85 	.word	0x08006e85

08007150 <_printf_common>:
 8007150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007152:	0015      	movs	r5, r2
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	688a      	ldr	r2, [r1, #8]
 8007158:	690b      	ldr	r3, [r1, #16]
 800715a:	9000      	str	r0, [sp, #0]
 800715c:	000c      	movs	r4, r1
 800715e:	4293      	cmp	r3, r2
 8007160:	da00      	bge.n	8007164 <_printf_common+0x14>
 8007162:	0013      	movs	r3, r2
 8007164:	0022      	movs	r2, r4
 8007166:	602b      	str	r3, [r5, #0]
 8007168:	3243      	adds	r2, #67	; 0x43
 800716a:	7812      	ldrb	r2, [r2, #0]
 800716c:	2a00      	cmp	r2, #0
 800716e:	d001      	beq.n	8007174 <_printf_common+0x24>
 8007170:	3301      	adds	r3, #1
 8007172:	602b      	str	r3, [r5, #0]
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	069b      	lsls	r3, r3, #26
 8007178:	d502      	bpl.n	8007180 <_printf_common+0x30>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	3302      	adds	r3, #2
 800717e:	602b      	str	r3, [r5, #0]
 8007180:	2706      	movs	r7, #6
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	401f      	ands	r7, r3
 8007186:	d027      	beq.n	80071d8 <_printf_common+0x88>
 8007188:	0023      	movs	r3, r4
 800718a:	3343      	adds	r3, #67	; 0x43
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	1e5a      	subs	r2, r3, #1
 8007190:	4193      	sbcs	r3, r2
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	0692      	lsls	r2, r2, #26
 8007196:	d430      	bmi.n	80071fa <_printf_common+0xaa>
 8007198:	0022      	movs	r2, r4
 800719a:	9901      	ldr	r1, [sp, #4]
 800719c:	3243      	adds	r2, #67	; 0x43
 800719e:	9800      	ldr	r0, [sp, #0]
 80071a0:	9e08      	ldr	r6, [sp, #32]
 80071a2:	47b0      	blx	r6
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d025      	beq.n	80071f4 <_printf_common+0xa4>
 80071a8:	2306      	movs	r3, #6
 80071aa:	6820      	ldr	r0, [r4, #0]
 80071ac:	682a      	ldr	r2, [r5, #0]
 80071ae:	68e1      	ldr	r1, [r4, #12]
 80071b0:	4003      	ands	r3, r0
 80071b2:	2500      	movs	r5, #0
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	d103      	bne.n	80071c0 <_printf_common+0x70>
 80071b8:	1a8d      	subs	r5, r1, r2
 80071ba:	43eb      	mvns	r3, r5
 80071bc:	17db      	asrs	r3, r3, #31
 80071be:	401d      	ands	r5, r3
 80071c0:	68a3      	ldr	r3, [r4, #8]
 80071c2:	6922      	ldr	r2, [r4, #16]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	dd01      	ble.n	80071cc <_printf_common+0x7c>
 80071c8:	1a9b      	subs	r3, r3, r2
 80071ca:	18ed      	adds	r5, r5, r3
 80071cc:	2700      	movs	r7, #0
 80071ce:	42bd      	cmp	r5, r7
 80071d0:	d120      	bne.n	8007214 <_printf_common+0xc4>
 80071d2:	2000      	movs	r0, #0
 80071d4:	e010      	b.n	80071f8 <_printf_common+0xa8>
 80071d6:	3701      	adds	r7, #1
 80071d8:	68e3      	ldr	r3, [r4, #12]
 80071da:	682a      	ldr	r2, [r5, #0]
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	429f      	cmp	r7, r3
 80071e0:	dad2      	bge.n	8007188 <_printf_common+0x38>
 80071e2:	0022      	movs	r2, r4
 80071e4:	2301      	movs	r3, #1
 80071e6:	3219      	adds	r2, #25
 80071e8:	9901      	ldr	r1, [sp, #4]
 80071ea:	9800      	ldr	r0, [sp, #0]
 80071ec:	9e08      	ldr	r6, [sp, #32]
 80071ee:	47b0      	blx	r6
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d1f0      	bne.n	80071d6 <_printf_common+0x86>
 80071f4:	2001      	movs	r0, #1
 80071f6:	4240      	negs	r0, r0
 80071f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071fa:	2030      	movs	r0, #48	; 0x30
 80071fc:	18e1      	adds	r1, r4, r3
 80071fe:	3143      	adds	r1, #67	; 0x43
 8007200:	7008      	strb	r0, [r1, #0]
 8007202:	0021      	movs	r1, r4
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	3145      	adds	r1, #69	; 0x45
 8007208:	7809      	ldrb	r1, [r1, #0]
 800720a:	18a2      	adds	r2, r4, r2
 800720c:	3243      	adds	r2, #67	; 0x43
 800720e:	3302      	adds	r3, #2
 8007210:	7011      	strb	r1, [r2, #0]
 8007212:	e7c1      	b.n	8007198 <_printf_common+0x48>
 8007214:	0022      	movs	r2, r4
 8007216:	2301      	movs	r3, #1
 8007218:	321a      	adds	r2, #26
 800721a:	9901      	ldr	r1, [sp, #4]
 800721c:	9800      	ldr	r0, [sp, #0]
 800721e:	9e08      	ldr	r6, [sp, #32]
 8007220:	47b0      	blx	r6
 8007222:	1c43      	adds	r3, r0, #1
 8007224:	d0e6      	beq.n	80071f4 <_printf_common+0xa4>
 8007226:	3701      	adds	r7, #1
 8007228:	e7d1      	b.n	80071ce <_printf_common+0x7e>
	...

0800722c <_printf_i>:
 800722c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800722e:	b08b      	sub	sp, #44	; 0x2c
 8007230:	9206      	str	r2, [sp, #24]
 8007232:	000a      	movs	r2, r1
 8007234:	3243      	adds	r2, #67	; 0x43
 8007236:	9307      	str	r3, [sp, #28]
 8007238:	9005      	str	r0, [sp, #20]
 800723a:	9204      	str	r2, [sp, #16]
 800723c:	7e0a      	ldrb	r2, [r1, #24]
 800723e:	000c      	movs	r4, r1
 8007240:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007242:	2a6e      	cmp	r2, #110	; 0x6e
 8007244:	d100      	bne.n	8007248 <_printf_i+0x1c>
 8007246:	e08f      	b.n	8007368 <_printf_i+0x13c>
 8007248:	d817      	bhi.n	800727a <_printf_i+0x4e>
 800724a:	2a63      	cmp	r2, #99	; 0x63
 800724c:	d02c      	beq.n	80072a8 <_printf_i+0x7c>
 800724e:	d808      	bhi.n	8007262 <_printf_i+0x36>
 8007250:	2a00      	cmp	r2, #0
 8007252:	d100      	bne.n	8007256 <_printf_i+0x2a>
 8007254:	e099      	b.n	800738a <_printf_i+0x15e>
 8007256:	2a58      	cmp	r2, #88	; 0x58
 8007258:	d054      	beq.n	8007304 <_printf_i+0xd8>
 800725a:	0026      	movs	r6, r4
 800725c:	3642      	adds	r6, #66	; 0x42
 800725e:	7032      	strb	r2, [r6, #0]
 8007260:	e029      	b.n	80072b6 <_printf_i+0x8a>
 8007262:	2a64      	cmp	r2, #100	; 0x64
 8007264:	d001      	beq.n	800726a <_printf_i+0x3e>
 8007266:	2a69      	cmp	r2, #105	; 0x69
 8007268:	d1f7      	bne.n	800725a <_printf_i+0x2e>
 800726a:	6821      	ldr	r1, [r4, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	0608      	lsls	r0, r1, #24
 8007270:	d523      	bpl.n	80072ba <_printf_i+0x8e>
 8007272:	1d11      	adds	r1, r2, #4
 8007274:	6019      	str	r1, [r3, #0]
 8007276:	6815      	ldr	r5, [r2, #0]
 8007278:	e025      	b.n	80072c6 <_printf_i+0x9a>
 800727a:	2a73      	cmp	r2, #115	; 0x73
 800727c:	d100      	bne.n	8007280 <_printf_i+0x54>
 800727e:	e088      	b.n	8007392 <_printf_i+0x166>
 8007280:	d808      	bhi.n	8007294 <_printf_i+0x68>
 8007282:	2a6f      	cmp	r2, #111	; 0x6f
 8007284:	d029      	beq.n	80072da <_printf_i+0xae>
 8007286:	2a70      	cmp	r2, #112	; 0x70
 8007288:	d1e7      	bne.n	800725a <_printf_i+0x2e>
 800728a:	2220      	movs	r2, #32
 800728c:	6809      	ldr	r1, [r1, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	6022      	str	r2, [r4, #0]
 8007292:	e003      	b.n	800729c <_printf_i+0x70>
 8007294:	2a75      	cmp	r2, #117	; 0x75
 8007296:	d020      	beq.n	80072da <_printf_i+0xae>
 8007298:	2a78      	cmp	r2, #120	; 0x78
 800729a:	d1de      	bne.n	800725a <_printf_i+0x2e>
 800729c:	0022      	movs	r2, r4
 800729e:	2178      	movs	r1, #120	; 0x78
 80072a0:	3245      	adds	r2, #69	; 0x45
 80072a2:	7011      	strb	r1, [r2, #0]
 80072a4:	4a6c      	ldr	r2, [pc, #432]	; (8007458 <_printf_i+0x22c>)
 80072a6:	e030      	b.n	800730a <_printf_i+0xde>
 80072a8:	000e      	movs	r6, r1
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	3642      	adds	r6, #66	; 0x42
 80072ae:	1d11      	adds	r1, r2, #4
 80072b0:	6019      	str	r1, [r3, #0]
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	7033      	strb	r3, [r6, #0]
 80072b6:	2301      	movs	r3, #1
 80072b8:	e079      	b.n	80073ae <_printf_i+0x182>
 80072ba:	0649      	lsls	r1, r1, #25
 80072bc:	d5d9      	bpl.n	8007272 <_printf_i+0x46>
 80072be:	1d11      	adds	r1, r2, #4
 80072c0:	6019      	str	r1, [r3, #0]
 80072c2:	2300      	movs	r3, #0
 80072c4:	5ed5      	ldrsh	r5, [r2, r3]
 80072c6:	2d00      	cmp	r5, #0
 80072c8:	da03      	bge.n	80072d2 <_printf_i+0xa6>
 80072ca:	232d      	movs	r3, #45	; 0x2d
 80072cc:	9a04      	ldr	r2, [sp, #16]
 80072ce:	426d      	negs	r5, r5
 80072d0:	7013      	strb	r3, [r2, #0]
 80072d2:	4b62      	ldr	r3, [pc, #392]	; (800745c <_printf_i+0x230>)
 80072d4:	270a      	movs	r7, #10
 80072d6:	9303      	str	r3, [sp, #12]
 80072d8:	e02f      	b.n	800733a <_printf_i+0x10e>
 80072da:	6820      	ldr	r0, [r4, #0]
 80072dc:	6819      	ldr	r1, [r3, #0]
 80072de:	0605      	lsls	r5, r0, #24
 80072e0:	d503      	bpl.n	80072ea <_printf_i+0xbe>
 80072e2:	1d08      	adds	r0, r1, #4
 80072e4:	6018      	str	r0, [r3, #0]
 80072e6:	680d      	ldr	r5, [r1, #0]
 80072e8:	e005      	b.n	80072f6 <_printf_i+0xca>
 80072ea:	0640      	lsls	r0, r0, #25
 80072ec:	d5f9      	bpl.n	80072e2 <_printf_i+0xb6>
 80072ee:	680d      	ldr	r5, [r1, #0]
 80072f0:	1d08      	adds	r0, r1, #4
 80072f2:	6018      	str	r0, [r3, #0]
 80072f4:	b2ad      	uxth	r5, r5
 80072f6:	4b59      	ldr	r3, [pc, #356]	; (800745c <_printf_i+0x230>)
 80072f8:	2708      	movs	r7, #8
 80072fa:	9303      	str	r3, [sp, #12]
 80072fc:	2a6f      	cmp	r2, #111	; 0x6f
 80072fe:	d018      	beq.n	8007332 <_printf_i+0x106>
 8007300:	270a      	movs	r7, #10
 8007302:	e016      	b.n	8007332 <_printf_i+0x106>
 8007304:	3145      	adds	r1, #69	; 0x45
 8007306:	700a      	strb	r2, [r1, #0]
 8007308:	4a54      	ldr	r2, [pc, #336]	; (800745c <_printf_i+0x230>)
 800730a:	9203      	str	r2, [sp, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	6821      	ldr	r1, [r4, #0]
 8007310:	1d10      	adds	r0, r2, #4
 8007312:	6018      	str	r0, [r3, #0]
 8007314:	6815      	ldr	r5, [r2, #0]
 8007316:	0608      	lsls	r0, r1, #24
 8007318:	d522      	bpl.n	8007360 <_printf_i+0x134>
 800731a:	07cb      	lsls	r3, r1, #31
 800731c:	d502      	bpl.n	8007324 <_printf_i+0xf8>
 800731e:	2320      	movs	r3, #32
 8007320:	4319      	orrs	r1, r3
 8007322:	6021      	str	r1, [r4, #0]
 8007324:	2710      	movs	r7, #16
 8007326:	2d00      	cmp	r5, #0
 8007328:	d103      	bne.n	8007332 <_printf_i+0x106>
 800732a:	2320      	movs	r3, #32
 800732c:	6822      	ldr	r2, [r4, #0]
 800732e:	439a      	bics	r2, r3
 8007330:	6022      	str	r2, [r4, #0]
 8007332:	0023      	movs	r3, r4
 8007334:	2200      	movs	r2, #0
 8007336:	3343      	adds	r3, #67	; 0x43
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	6863      	ldr	r3, [r4, #4]
 800733c:	60a3      	str	r3, [r4, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	db5c      	blt.n	80073fc <_printf_i+0x1d0>
 8007342:	2204      	movs	r2, #4
 8007344:	6821      	ldr	r1, [r4, #0]
 8007346:	4391      	bics	r1, r2
 8007348:	6021      	str	r1, [r4, #0]
 800734a:	2d00      	cmp	r5, #0
 800734c:	d158      	bne.n	8007400 <_printf_i+0x1d4>
 800734e:	9e04      	ldr	r6, [sp, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d064      	beq.n	800741e <_printf_i+0x1f2>
 8007354:	0026      	movs	r6, r4
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	3642      	adds	r6, #66	; 0x42
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	7033      	strb	r3, [r6, #0]
 800735e:	e05e      	b.n	800741e <_printf_i+0x1f2>
 8007360:	0648      	lsls	r0, r1, #25
 8007362:	d5da      	bpl.n	800731a <_printf_i+0xee>
 8007364:	b2ad      	uxth	r5, r5
 8007366:	e7d8      	b.n	800731a <_printf_i+0xee>
 8007368:	6809      	ldr	r1, [r1, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	0608      	lsls	r0, r1, #24
 800736e:	d505      	bpl.n	800737c <_printf_i+0x150>
 8007370:	1d11      	adds	r1, r2, #4
 8007372:	6019      	str	r1, [r3, #0]
 8007374:	6813      	ldr	r3, [r2, #0]
 8007376:	6962      	ldr	r2, [r4, #20]
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	e006      	b.n	800738a <_printf_i+0x15e>
 800737c:	0649      	lsls	r1, r1, #25
 800737e:	d5f7      	bpl.n	8007370 <_printf_i+0x144>
 8007380:	1d11      	adds	r1, r2, #4
 8007382:	6019      	str	r1, [r3, #0]
 8007384:	6813      	ldr	r3, [r2, #0]
 8007386:	8aa2      	ldrh	r2, [r4, #20]
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	2300      	movs	r3, #0
 800738c:	9e04      	ldr	r6, [sp, #16]
 800738e:	6123      	str	r3, [r4, #16]
 8007390:	e054      	b.n	800743c <_printf_i+0x210>
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	1d11      	adds	r1, r2, #4
 8007396:	6019      	str	r1, [r3, #0]
 8007398:	6816      	ldr	r6, [r2, #0]
 800739a:	2100      	movs	r1, #0
 800739c:	6862      	ldr	r2, [r4, #4]
 800739e:	0030      	movs	r0, r6
 80073a0:	f000 f85e 	bl	8007460 <memchr>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d001      	beq.n	80073ac <_printf_i+0x180>
 80073a8:	1b80      	subs	r0, r0, r6
 80073aa:	6060      	str	r0, [r4, #4]
 80073ac:	6863      	ldr	r3, [r4, #4]
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	2300      	movs	r3, #0
 80073b2:	9a04      	ldr	r2, [sp, #16]
 80073b4:	7013      	strb	r3, [r2, #0]
 80073b6:	e041      	b.n	800743c <_printf_i+0x210>
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	0032      	movs	r2, r6
 80073bc:	9906      	ldr	r1, [sp, #24]
 80073be:	9805      	ldr	r0, [sp, #20]
 80073c0:	9d07      	ldr	r5, [sp, #28]
 80073c2:	47a8      	blx	r5
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d043      	beq.n	8007450 <_printf_i+0x224>
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	2500      	movs	r5, #0
 80073cc:	079b      	lsls	r3, r3, #30
 80073ce:	d40f      	bmi.n	80073f0 <_printf_i+0x1c4>
 80073d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d2:	68e0      	ldr	r0, [r4, #12]
 80073d4:	4298      	cmp	r0, r3
 80073d6:	da3d      	bge.n	8007454 <_printf_i+0x228>
 80073d8:	0018      	movs	r0, r3
 80073da:	e03b      	b.n	8007454 <_printf_i+0x228>
 80073dc:	0022      	movs	r2, r4
 80073de:	2301      	movs	r3, #1
 80073e0:	3219      	adds	r2, #25
 80073e2:	9906      	ldr	r1, [sp, #24]
 80073e4:	9805      	ldr	r0, [sp, #20]
 80073e6:	9e07      	ldr	r6, [sp, #28]
 80073e8:	47b0      	blx	r6
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	d030      	beq.n	8007450 <_printf_i+0x224>
 80073ee:	3501      	adds	r5, #1
 80073f0:	68e3      	ldr	r3, [r4, #12]
 80073f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	429d      	cmp	r5, r3
 80073f8:	dbf0      	blt.n	80073dc <_printf_i+0x1b0>
 80073fa:	e7e9      	b.n	80073d0 <_printf_i+0x1a4>
 80073fc:	2d00      	cmp	r5, #0
 80073fe:	d0a9      	beq.n	8007354 <_printf_i+0x128>
 8007400:	9e04      	ldr	r6, [sp, #16]
 8007402:	0028      	movs	r0, r5
 8007404:	0039      	movs	r1, r7
 8007406:	f7f8 ff0d 	bl	8000224 <__aeabi_uidivmod>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	3e01      	subs	r6, #1
 800740e:	5c5b      	ldrb	r3, [r3, r1]
 8007410:	0028      	movs	r0, r5
 8007412:	7033      	strb	r3, [r6, #0]
 8007414:	0039      	movs	r1, r7
 8007416:	f7f8 fe7f 	bl	8000118 <__udivsi3>
 800741a:	1e05      	subs	r5, r0, #0
 800741c:	d1f1      	bne.n	8007402 <_printf_i+0x1d6>
 800741e:	2f08      	cmp	r7, #8
 8007420:	d109      	bne.n	8007436 <_printf_i+0x20a>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	07db      	lsls	r3, r3, #31
 8007426:	d506      	bpl.n	8007436 <_printf_i+0x20a>
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	6922      	ldr	r2, [r4, #16]
 800742c:	4293      	cmp	r3, r2
 800742e:	dc02      	bgt.n	8007436 <_printf_i+0x20a>
 8007430:	2330      	movs	r3, #48	; 0x30
 8007432:	3e01      	subs	r6, #1
 8007434:	7033      	strb	r3, [r6, #0]
 8007436:	9b04      	ldr	r3, [sp, #16]
 8007438:	1b9b      	subs	r3, r3, r6
 800743a:	6123      	str	r3, [r4, #16]
 800743c:	9b07      	ldr	r3, [sp, #28]
 800743e:	aa09      	add	r2, sp, #36	; 0x24
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	0021      	movs	r1, r4
 8007444:	9b06      	ldr	r3, [sp, #24]
 8007446:	9805      	ldr	r0, [sp, #20]
 8007448:	f7ff fe82 	bl	8007150 <_printf_common>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d1b3      	bne.n	80073b8 <_printf_i+0x18c>
 8007450:	2001      	movs	r0, #1
 8007452:	4240      	negs	r0, r0
 8007454:	b00b      	add	sp, #44	; 0x2c
 8007456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007458:	08007aaa 	.word	0x08007aaa
 800745c:	08007a99 	.word	0x08007a99

08007460 <memchr>:
 8007460:	b2c9      	uxtb	r1, r1
 8007462:	1882      	adds	r2, r0, r2
 8007464:	4290      	cmp	r0, r2
 8007466:	d101      	bne.n	800746c <memchr+0xc>
 8007468:	2000      	movs	r0, #0
 800746a:	4770      	bx	lr
 800746c:	7803      	ldrb	r3, [r0, #0]
 800746e:	428b      	cmp	r3, r1
 8007470:	d0fb      	beq.n	800746a <memchr+0xa>
 8007472:	3001      	adds	r0, #1
 8007474:	e7f6      	b.n	8007464 <memchr+0x4>

08007476 <memmove>:
 8007476:	b510      	push	{r4, lr}
 8007478:	4288      	cmp	r0, r1
 800747a:	d902      	bls.n	8007482 <memmove+0xc>
 800747c:	188b      	adds	r3, r1, r2
 800747e:	4298      	cmp	r0, r3
 8007480:	d308      	bcc.n	8007494 <memmove+0x1e>
 8007482:	2300      	movs	r3, #0
 8007484:	429a      	cmp	r2, r3
 8007486:	d007      	beq.n	8007498 <memmove+0x22>
 8007488:	5ccc      	ldrb	r4, [r1, r3]
 800748a:	54c4      	strb	r4, [r0, r3]
 800748c:	3301      	adds	r3, #1
 800748e:	e7f9      	b.n	8007484 <memmove+0xe>
 8007490:	5c8b      	ldrb	r3, [r1, r2]
 8007492:	5483      	strb	r3, [r0, r2]
 8007494:	3a01      	subs	r2, #1
 8007496:	d2fb      	bcs.n	8007490 <memmove+0x1a>
 8007498:	bd10      	pop	{r4, pc}
	...

0800749c <_free_r>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	0005      	movs	r5, r0
 80074a0:	2900      	cmp	r1, #0
 80074a2:	d010      	beq.n	80074c6 <_free_r+0x2a>
 80074a4:	1f0c      	subs	r4, r1, #4
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	da00      	bge.n	80074ae <_free_r+0x12>
 80074ac:	18e4      	adds	r4, r4, r3
 80074ae:	0028      	movs	r0, r5
 80074b0:	f000 f8d4 	bl	800765c <__malloc_lock>
 80074b4:	4a1d      	ldr	r2, [pc, #116]	; (800752c <_free_r+0x90>)
 80074b6:	6813      	ldr	r3, [r2, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <_free_r+0x2c>
 80074bc:	6063      	str	r3, [r4, #4]
 80074be:	6014      	str	r4, [r2, #0]
 80074c0:	0028      	movs	r0, r5
 80074c2:	f000 f8cc 	bl	800765e <__malloc_unlock>
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	d909      	bls.n	80074e0 <_free_r+0x44>
 80074cc:	6821      	ldr	r1, [r4, #0]
 80074ce:	1860      	adds	r0, r4, r1
 80074d0:	4283      	cmp	r3, r0
 80074d2:	d1f3      	bne.n	80074bc <_free_r+0x20>
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	1841      	adds	r1, r0, r1
 80074da:	6021      	str	r1, [r4, #0]
 80074dc:	e7ee      	b.n	80074bc <_free_r+0x20>
 80074de:	0013      	movs	r3, r2
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	d001      	beq.n	80074ea <_free_r+0x4e>
 80074e6:	42a2      	cmp	r2, r4
 80074e8:	d9f9      	bls.n	80074de <_free_r+0x42>
 80074ea:	6819      	ldr	r1, [r3, #0]
 80074ec:	1858      	adds	r0, r3, r1
 80074ee:	42a0      	cmp	r0, r4
 80074f0:	d10b      	bne.n	800750a <_free_r+0x6e>
 80074f2:	6820      	ldr	r0, [r4, #0]
 80074f4:	1809      	adds	r1, r1, r0
 80074f6:	1858      	adds	r0, r3, r1
 80074f8:	6019      	str	r1, [r3, #0]
 80074fa:	4282      	cmp	r2, r0
 80074fc:	d1e0      	bne.n	80074c0 <_free_r+0x24>
 80074fe:	6810      	ldr	r0, [r2, #0]
 8007500:	6852      	ldr	r2, [r2, #4]
 8007502:	1841      	adds	r1, r0, r1
 8007504:	6019      	str	r1, [r3, #0]
 8007506:	605a      	str	r2, [r3, #4]
 8007508:	e7da      	b.n	80074c0 <_free_r+0x24>
 800750a:	42a0      	cmp	r0, r4
 800750c:	d902      	bls.n	8007514 <_free_r+0x78>
 800750e:	230c      	movs	r3, #12
 8007510:	602b      	str	r3, [r5, #0]
 8007512:	e7d5      	b.n	80074c0 <_free_r+0x24>
 8007514:	6821      	ldr	r1, [r4, #0]
 8007516:	1860      	adds	r0, r4, r1
 8007518:	4282      	cmp	r2, r0
 800751a:	d103      	bne.n	8007524 <_free_r+0x88>
 800751c:	6810      	ldr	r0, [r2, #0]
 800751e:	6852      	ldr	r2, [r2, #4]
 8007520:	1841      	adds	r1, r0, r1
 8007522:	6021      	str	r1, [r4, #0]
 8007524:	6062      	str	r2, [r4, #4]
 8007526:	605c      	str	r4, [r3, #4]
 8007528:	e7ca      	b.n	80074c0 <_free_r+0x24>
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	20001a14 	.word	0x20001a14

08007530 <_malloc_r>:
 8007530:	2303      	movs	r3, #3
 8007532:	b570      	push	{r4, r5, r6, lr}
 8007534:	1ccd      	adds	r5, r1, #3
 8007536:	439d      	bics	r5, r3
 8007538:	3508      	adds	r5, #8
 800753a:	0006      	movs	r6, r0
 800753c:	2d0c      	cmp	r5, #12
 800753e:	d21e      	bcs.n	800757e <_malloc_r+0x4e>
 8007540:	250c      	movs	r5, #12
 8007542:	42a9      	cmp	r1, r5
 8007544:	d81d      	bhi.n	8007582 <_malloc_r+0x52>
 8007546:	0030      	movs	r0, r6
 8007548:	f000 f888 	bl	800765c <__malloc_lock>
 800754c:	4a25      	ldr	r2, [pc, #148]	; (80075e4 <_malloc_r+0xb4>)
 800754e:	6814      	ldr	r4, [r2, #0]
 8007550:	0021      	movs	r1, r4
 8007552:	2900      	cmp	r1, #0
 8007554:	d119      	bne.n	800758a <_malloc_r+0x5a>
 8007556:	4c24      	ldr	r4, [pc, #144]	; (80075e8 <_malloc_r+0xb8>)
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <_malloc_r+0x36>
 800755e:	0030      	movs	r0, r6
 8007560:	f000 f86a 	bl	8007638 <_sbrk_r>
 8007564:	6020      	str	r0, [r4, #0]
 8007566:	0029      	movs	r1, r5
 8007568:	0030      	movs	r0, r6
 800756a:	f000 f865 	bl	8007638 <_sbrk_r>
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	d12c      	bne.n	80075cc <_malloc_r+0x9c>
 8007572:	230c      	movs	r3, #12
 8007574:	0030      	movs	r0, r6
 8007576:	6033      	str	r3, [r6, #0]
 8007578:	f000 f871 	bl	800765e <__malloc_unlock>
 800757c:	e003      	b.n	8007586 <_malloc_r+0x56>
 800757e:	2d00      	cmp	r5, #0
 8007580:	dadf      	bge.n	8007542 <_malloc_r+0x12>
 8007582:	230c      	movs	r3, #12
 8007584:	6033      	str	r3, [r6, #0]
 8007586:	2000      	movs	r0, #0
 8007588:	bd70      	pop	{r4, r5, r6, pc}
 800758a:	680b      	ldr	r3, [r1, #0]
 800758c:	1b5b      	subs	r3, r3, r5
 800758e:	d41a      	bmi.n	80075c6 <_malloc_r+0x96>
 8007590:	2b0b      	cmp	r3, #11
 8007592:	d903      	bls.n	800759c <_malloc_r+0x6c>
 8007594:	600b      	str	r3, [r1, #0]
 8007596:	18cc      	adds	r4, r1, r3
 8007598:	6025      	str	r5, [r4, #0]
 800759a:	e003      	b.n	80075a4 <_malloc_r+0x74>
 800759c:	428c      	cmp	r4, r1
 800759e:	d10e      	bne.n	80075be <_malloc_r+0x8e>
 80075a0:	6863      	ldr	r3, [r4, #4]
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	0030      	movs	r0, r6
 80075a6:	f000 f85a 	bl	800765e <__malloc_unlock>
 80075aa:	0020      	movs	r0, r4
 80075ac:	2207      	movs	r2, #7
 80075ae:	300b      	adds	r0, #11
 80075b0:	1d23      	adds	r3, r4, #4
 80075b2:	4390      	bics	r0, r2
 80075b4:	1ac3      	subs	r3, r0, r3
 80075b6:	d0e7      	beq.n	8007588 <_malloc_r+0x58>
 80075b8:	425a      	negs	r2, r3
 80075ba:	50e2      	str	r2, [r4, r3]
 80075bc:	e7e4      	b.n	8007588 <_malloc_r+0x58>
 80075be:	684b      	ldr	r3, [r1, #4]
 80075c0:	6063      	str	r3, [r4, #4]
 80075c2:	000c      	movs	r4, r1
 80075c4:	e7ee      	b.n	80075a4 <_malloc_r+0x74>
 80075c6:	000c      	movs	r4, r1
 80075c8:	6849      	ldr	r1, [r1, #4]
 80075ca:	e7c2      	b.n	8007552 <_malloc_r+0x22>
 80075cc:	2303      	movs	r3, #3
 80075ce:	1cc4      	adds	r4, r0, #3
 80075d0:	439c      	bics	r4, r3
 80075d2:	42a0      	cmp	r0, r4
 80075d4:	d0e0      	beq.n	8007598 <_malloc_r+0x68>
 80075d6:	1a21      	subs	r1, r4, r0
 80075d8:	0030      	movs	r0, r6
 80075da:	f000 f82d 	bl	8007638 <_sbrk_r>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	d1da      	bne.n	8007598 <_malloc_r+0x68>
 80075e2:	e7c6      	b.n	8007572 <_malloc_r+0x42>
 80075e4:	20001a14 	.word	0x20001a14
 80075e8:	20001a18 	.word	0x20001a18

080075ec <_realloc_r>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	0007      	movs	r7, r0
 80075f0:	000d      	movs	r5, r1
 80075f2:	0016      	movs	r6, r2
 80075f4:	2900      	cmp	r1, #0
 80075f6:	d105      	bne.n	8007604 <_realloc_r+0x18>
 80075f8:	0011      	movs	r1, r2
 80075fa:	f7ff ff99 	bl	8007530 <_malloc_r>
 80075fe:	0004      	movs	r4, r0
 8007600:	0020      	movs	r0, r4
 8007602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007604:	2a00      	cmp	r2, #0
 8007606:	d103      	bne.n	8007610 <_realloc_r+0x24>
 8007608:	f7ff ff48 	bl	800749c <_free_r>
 800760c:	0034      	movs	r4, r6
 800760e:	e7f7      	b.n	8007600 <_realloc_r+0x14>
 8007610:	f000 f826 	bl	8007660 <_malloc_usable_size_r>
 8007614:	002c      	movs	r4, r5
 8007616:	4286      	cmp	r6, r0
 8007618:	d9f2      	bls.n	8007600 <_realloc_r+0x14>
 800761a:	0031      	movs	r1, r6
 800761c:	0038      	movs	r0, r7
 800761e:	f7ff ff87 	bl	8007530 <_malloc_r>
 8007622:	1e04      	subs	r4, r0, #0
 8007624:	d0ec      	beq.n	8007600 <_realloc_r+0x14>
 8007626:	0029      	movs	r1, r5
 8007628:	0032      	movs	r2, r6
 800762a:	f7ff fbe3 	bl	8006df4 <memcpy>
 800762e:	0029      	movs	r1, r5
 8007630:	0038      	movs	r0, r7
 8007632:	f7ff ff33 	bl	800749c <_free_r>
 8007636:	e7e3      	b.n	8007600 <_realloc_r+0x14>

08007638 <_sbrk_r>:
 8007638:	2300      	movs	r3, #0
 800763a:	b570      	push	{r4, r5, r6, lr}
 800763c:	4c06      	ldr	r4, [pc, #24]	; (8007658 <_sbrk_r+0x20>)
 800763e:	0005      	movs	r5, r0
 8007640:	0008      	movs	r0, r1
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	f7fd fe10 	bl	8005268 <_sbrk>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d103      	bne.n	8007654 <_sbrk_r+0x1c>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d000      	beq.n	8007654 <_sbrk_r+0x1c>
 8007652:	602b      	str	r3, [r5, #0]
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	46c0      	nop			; (mov r8, r8)
 8007658:	20001d2c 	.word	0x20001d2c

0800765c <__malloc_lock>:
 800765c:	4770      	bx	lr

0800765e <__malloc_unlock>:
 800765e:	4770      	bx	lr

08007660 <_malloc_usable_size_r>:
 8007660:	1f0b      	subs	r3, r1, #4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	1f18      	subs	r0, r3, #4
 8007666:	2b00      	cmp	r3, #0
 8007668:	da01      	bge.n	800766e <_malloc_usable_size_r+0xe>
 800766a:	580b      	ldr	r3, [r1, r0]
 800766c:	18c0      	adds	r0, r0, r3
 800766e:	4770      	bx	lr

08007670 <_init>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr

0800767c <_fini>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr
