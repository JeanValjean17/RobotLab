
DoroboGenerated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008740  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08008800  08008800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008bb4  08008bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d4  20000000  08008bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002440  200000d4  08008c90  000200d4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002514  08008c90  00022514  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000222e8  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004813  00000000  00000000  000423e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000015a8  00000000  00000000  00046bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013a0  00000000  00000000  000481a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000afe3  00000000  00000000  00049540  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000065f2  00000000  00000000  00054523  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0005ab15  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004f0c  00000000  00000000  0005ab94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d4 	.word	0x200000d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080087e8 	.word	0x080087e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d8 	.word	0x200000d8
 8000104:	080087e8 	.word	0x080087e8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_f2uiz>:
 8000230:	219e      	movs	r1, #158	; 0x9e
 8000232:	b510      	push	{r4, lr}
 8000234:	05c9      	lsls	r1, r1, #23
 8000236:	1c04      	adds	r4, r0, #0
 8000238:	f000 fa44 	bl	80006c4 <__aeabi_fcmpge>
 800023c:	2800      	cmp	r0, #0
 800023e:	d103      	bne.n	8000248 <__aeabi_f2uiz+0x18>
 8000240:	1c20      	adds	r0, r4, #0
 8000242:	f000 f9a9 	bl	8000598 <__aeabi_f2iz>
 8000246:	bd10      	pop	{r4, pc}
 8000248:	219e      	movs	r1, #158	; 0x9e
 800024a:	1c20      	adds	r0, r4, #0
 800024c:	05c9      	lsls	r1, r1, #23
 800024e:	f000 f807 	bl	8000260 <__aeabi_fsub>
 8000252:	f000 f9a1 	bl	8000598 <__aeabi_f2iz>
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	061b      	lsls	r3, r3, #24
 800025a:	469c      	mov	ip, r3
 800025c:	4460      	add	r0, ip
 800025e:	e7f2      	b.n	8000246 <__aeabi_f2uiz+0x16>

08000260 <__aeabi_fsub>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	46d6      	mov	lr, sl
 8000266:	4646      	mov	r6, r8
 8000268:	0044      	lsls	r4, r0, #1
 800026a:	b5c0      	push	{r6, r7, lr}
 800026c:	0fc2      	lsrs	r2, r0, #31
 800026e:	0247      	lsls	r7, r0, #9
 8000270:	0248      	lsls	r0, r1, #9
 8000272:	0a40      	lsrs	r0, r0, #9
 8000274:	4684      	mov	ip, r0
 8000276:	4666      	mov	r6, ip
 8000278:	0a7b      	lsrs	r3, r7, #9
 800027a:	0048      	lsls	r0, r1, #1
 800027c:	0fc9      	lsrs	r1, r1, #31
 800027e:	469a      	mov	sl, r3
 8000280:	0e24      	lsrs	r4, r4, #24
 8000282:	0015      	movs	r5, r2
 8000284:	00db      	lsls	r3, r3, #3
 8000286:	0e00      	lsrs	r0, r0, #24
 8000288:	4689      	mov	r9, r1
 800028a:	00f6      	lsls	r6, r6, #3
 800028c:	28ff      	cmp	r0, #255	; 0xff
 800028e:	d100      	bne.n	8000292 <__aeabi_fsub+0x32>
 8000290:	e08f      	b.n	80003b2 <__aeabi_fsub+0x152>
 8000292:	2101      	movs	r1, #1
 8000294:	464f      	mov	r7, r9
 8000296:	404f      	eors	r7, r1
 8000298:	0039      	movs	r1, r7
 800029a:	4291      	cmp	r1, r2
 800029c:	d066      	beq.n	800036c <__aeabi_fsub+0x10c>
 800029e:	1a22      	subs	r2, r4, r0
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	dc00      	bgt.n	80002a6 <__aeabi_fsub+0x46>
 80002a4:	e09d      	b.n	80003e2 <__aeabi_fsub+0x182>
 80002a6:	2800      	cmp	r0, #0
 80002a8:	d13d      	bne.n	8000326 <__aeabi_fsub+0xc6>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d100      	bne.n	80002b0 <__aeabi_fsub+0x50>
 80002ae:	e08b      	b.n	80003c8 <__aeabi_fsub+0x168>
 80002b0:	1e51      	subs	r1, r2, #1
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d000      	beq.n	80002b8 <__aeabi_fsub+0x58>
 80002b6:	e0b5      	b.n	8000424 <__aeabi_fsub+0x1c4>
 80002b8:	2401      	movs	r4, #1
 80002ba:	1b9b      	subs	r3, r3, r6
 80002bc:	015a      	lsls	r2, r3, #5
 80002be:	d544      	bpl.n	800034a <__aeabi_fsub+0xea>
 80002c0:	019b      	lsls	r3, r3, #6
 80002c2:	099f      	lsrs	r7, r3, #6
 80002c4:	0038      	movs	r0, r7
 80002c6:	f000 fa07 	bl	80006d8 <__clzsi2>
 80002ca:	3805      	subs	r0, #5
 80002cc:	4087      	lsls	r7, r0
 80002ce:	4284      	cmp	r4, r0
 80002d0:	dd00      	ble.n	80002d4 <__aeabi_fsub+0x74>
 80002d2:	e096      	b.n	8000402 <__aeabi_fsub+0x1a2>
 80002d4:	1b04      	subs	r4, r0, r4
 80002d6:	003a      	movs	r2, r7
 80002d8:	2020      	movs	r0, #32
 80002da:	3401      	adds	r4, #1
 80002dc:	40e2      	lsrs	r2, r4
 80002de:	1b04      	subs	r4, r0, r4
 80002e0:	40a7      	lsls	r7, r4
 80002e2:	003b      	movs	r3, r7
 80002e4:	1e5f      	subs	r7, r3, #1
 80002e6:	41bb      	sbcs	r3, r7
 80002e8:	2400      	movs	r4, #0
 80002ea:	4313      	orrs	r3, r2
 80002ec:	075a      	lsls	r2, r3, #29
 80002ee:	d004      	beq.n	80002fa <__aeabi_fsub+0x9a>
 80002f0:	220f      	movs	r2, #15
 80002f2:	401a      	ands	r2, r3
 80002f4:	2a04      	cmp	r2, #4
 80002f6:	d000      	beq.n	80002fa <__aeabi_fsub+0x9a>
 80002f8:	3304      	adds	r3, #4
 80002fa:	015a      	lsls	r2, r3, #5
 80002fc:	d527      	bpl.n	800034e <__aeabi_fsub+0xee>
 80002fe:	3401      	adds	r4, #1
 8000300:	2cff      	cmp	r4, #255	; 0xff
 8000302:	d100      	bne.n	8000306 <__aeabi_fsub+0xa6>
 8000304:	e079      	b.n	80003fa <__aeabi_fsub+0x19a>
 8000306:	2201      	movs	r2, #1
 8000308:	019b      	lsls	r3, r3, #6
 800030a:	0a5b      	lsrs	r3, r3, #9
 800030c:	b2e4      	uxtb	r4, r4
 800030e:	402a      	ands	r2, r5
 8000310:	025b      	lsls	r3, r3, #9
 8000312:	05e4      	lsls	r4, r4, #23
 8000314:	0a58      	lsrs	r0, r3, #9
 8000316:	07d2      	lsls	r2, r2, #31
 8000318:	4320      	orrs	r0, r4
 800031a:	4310      	orrs	r0, r2
 800031c:	bc1c      	pop	{r2, r3, r4}
 800031e:	4690      	mov	r8, r2
 8000320:	4699      	mov	r9, r3
 8000322:	46a2      	mov	sl, r4
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	2cff      	cmp	r4, #255	; 0xff
 8000328:	d0e0      	beq.n	80002ec <__aeabi_fsub+0x8c>
 800032a:	2180      	movs	r1, #128	; 0x80
 800032c:	04c9      	lsls	r1, r1, #19
 800032e:	430e      	orrs	r6, r1
 8000330:	2a1b      	cmp	r2, #27
 8000332:	dc7b      	bgt.n	800042c <__aeabi_fsub+0x1cc>
 8000334:	0031      	movs	r1, r6
 8000336:	2020      	movs	r0, #32
 8000338:	40d1      	lsrs	r1, r2
 800033a:	1a82      	subs	r2, r0, r2
 800033c:	4096      	lsls	r6, r2
 800033e:	1e72      	subs	r2, r6, #1
 8000340:	4196      	sbcs	r6, r2
 8000342:	430e      	orrs	r6, r1
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	015a      	lsls	r2, r3, #5
 8000348:	d4ba      	bmi.n	80002c0 <__aeabi_fsub+0x60>
 800034a:	075a      	lsls	r2, r3, #29
 800034c:	d1d0      	bne.n	80002f0 <__aeabi_fsub+0x90>
 800034e:	2201      	movs	r2, #1
 8000350:	08df      	lsrs	r7, r3, #3
 8000352:	402a      	ands	r2, r5
 8000354:	2cff      	cmp	r4, #255	; 0xff
 8000356:	d133      	bne.n	80003c0 <__aeabi_fsub+0x160>
 8000358:	2f00      	cmp	r7, #0
 800035a:	d100      	bne.n	800035e <__aeabi_fsub+0xfe>
 800035c:	e0a8      	b.n	80004b0 <__aeabi_fsub+0x250>
 800035e:	2380      	movs	r3, #128	; 0x80
 8000360:	03db      	lsls	r3, r3, #15
 8000362:	433b      	orrs	r3, r7
 8000364:	025b      	lsls	r3, r3, #9
 8000366:	0a5b      	lsrs	r3, r3, #9
 8000368:	24ff      	movs	r4, #255	; 0xff
 800036a:	e7d1      	b.n	8000310 <__aeabi_fsub+0xb0>
 800036c:	1a21      	subs	r1, r4, r0
 800036e:	2900      	cmp	r1, #0
 8000370:	dd4c      	ble.n	800040c <__aeabi_fsub+0x1ac>
 8000372:	2800      	cmp	r0, #0
 8000374:	d02a      	beq.n	80003cc <__aeabi_fsub+0x16c>
 8000376:	2cff      	cmp	r4, #255	; 0xff
 8000378:	d0b8      	beq.n	80002ec <__aeabi_fsub+0x8c>
 800037a:	2080      	movs	r0, #128	; 0x80
 800037c:	04c0      	lsls	r0, r0, #19
 800037e:	4306      	orrs	r6, r0
 8000380:	291b      	cmp	r1, #27
 8000382:	dd00      	ble.n	8000386 <__aeabi_fsub+0x126>
 8000384:	e0af      	b.n	80004e6 <__aeabi_fsub+0x286>
 8000386:	0030      	movs	r0, r6
 8000388:	2720      	movs	r7, #32
 800038a:	40c8      	lsrs	r0, r1
 800038c:	1a79      	subs	r1, r7, r1
 800038e:	408e      	lsls	r6, r1
 8000390:	1e71      	subs	r1, r6, #1
 8000392:	418e      	sbcs	r6, r1
 8000394:	4306      	orrs	r6, r0
 8000396:	199b      	adds	r3, r3, r6
 8000398:	0159      	lsls	r1, r3, #5
 800039a:	d5d6      	bpl.n	800034a <__aeabi_fsub+0xea>
 800039c:	3401      	adds	r4, #1
 800039e:	2cff      	cmp	r4, #255	; 0xff
 80003a0:	d100      	bne.n	80003a4 <__aeabi_fsub+0x144>
 80003a2:	e085      	b.n	80004b0 <__aeabi_fsub+0x250>
 80003a4:	2201      	movs	r2, #1
 80003a6:	497a      	ldr	r1, [pc, #488]	; (8000590 <__aeabi_fsub+0x330>)
 80003a8:	401a      	ands	r2, r3
 80003aa:	085b      	lsrs	r3, r3, #1
 80003ac:	400b      	ands	r3, r1
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e79c      	b.n	80002ec <__aeabi_fsub+0x8c>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d000      	beq.n	80003b8 <__aeabi_fsub+0x158>
 80003b6:	e770      	b.n	800029a <__aeabi_fsub+0x3a>
 80003b8:	e76b      	b.n	8000292 <__aeabi_fsub+0x32>
 80003ba:	1e3b      	subs	r3, r7, #0
 80003bc:	d1c5      	bne.n	800034a <__aeabi_fsub+0xea>
 80003be:	2200      	movs	r2, #0
 80003c0:	027b      	lsls	r3, r7, #9
 80003c2:	0a5b      	lsrs	r3, r3, #9
 80003c4:	b2e4      	uxtb	r4, r4
 80003c6:	e7a3      	b.n	8000310 <__aeabi_fsub+0xb0>
 80003c8:	0014      	movs	r4, r2
 80003ca:	e78f      	b.n	80002ec <__aeabi_fsub+0x8c>
 80003cc:	2e00      	cmp	r6, #0
 80003ce:	d04d      	beq.n	800046c <__aeabi_fsub+0x20c>
 80003d0:	1e48      	subs	r0, r1, #1
 80003d2:	2800      	cmp	r0, #0
 80003d4:	d157      	bne.n	8000486 <__aeabi_fsub+0x226>
 80003d6:	199b      	adds	r3, r3, r6
 80003d8:	2401      	movs	r4, #1
 80003da:	015a      	lsls	r2, r3, #5
 80003dc:	d5b5      	bpl.n	800034a <__aeabi_fsub+0xea>
 80003de:	2402      	movs	r4, #2
 80003e0:	e7e0      	b.n	80003a4 <__aeabi_fsub+0x144>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	d125      	bne.n	8000432 <__aeabi_fsub+0x1d2>
 80003e6:	1c62      	adds	r2, r4, #1
 80003e8:	b2d2      	uxtb	r2, r2
 80003ea:	2a01      	cmp	r2, #1
 80003ec:	dd72      	ble.n	80004d4 <__aeabi_fsub+0x274>
 80003ee:	1b9f      	subs	r7, r3, r6
 80003f0:	017a      	lsls	r2, r7, #5
 80003f2:	d535      	bpl.n	8000460 <__aeabi_fsub+0x200>
 80003f4:	1af7      	subs	r7, r6, r3
 80003f6:	000d      	movs	r5, r1
 80003f8:	e764      	b.n	80002c4 <__aeabi_fsub+0x64>
 80003fa:	2201      	movs	r2, #1
 80003fc:	2300      	movs	r3, #0
 80003fe:	402a      	ands	r2, r5
 8000400:	e786      	b.n	8000310 <__aeabi_fsub+0xb0>
 8000402:	003b      	movs	r3, r7
 8000404:	4a63      	ldr	r2, [pc, #396]	; (8000594 <__aeabi_fsub+0x334>)
 8000406:	1a24      	subs	r4, r4, r0
 8000408:	4013      	ands	r3, r2
 800040a:	e76f      	b.n	80002ec <__aeabi_fsub+0x8c>
 800040c:	2900      	cmp	r1, #0
 800040e:	d16c      	bne.n	80004ea <__aeabi_fsub+0x28a>
 8000410:	1c61      	adds	r1, r4, #1
 8000412:	b2c8      	uxtb	r0, r1
 8000414:	2801      	cmp	r0, #1
 8000416:	dd4e      	ble.n	80004b6 <__aeabi_fsub+0x256>
 8000418:	29ff      	cmp	r1, #255	; 0xff
 800041a:	d049      	beq.n	80004b0 <__aeabi_fsub+0x250>
 800041c:	199b      	adds	r3, r3, r6
 800041e:	085b      	lsrs	r3, r3, #1
 8000420:	000c      	movs	r4, r1
 8000422:	e763      	b.n	80002ec <__aeabi_fsub+0x8c>
 8000424:	2aff      	cmp	r2, #255	; 0xff
 8000426:	d041      	beq.n	80004ac <__aeabi_fsub+0x24c>
 8000428:	000a      	movs	r2, r1
 800042a:	e781      	b.n	8000330 <__aeabi_fsub+0xd0>
 800042c:	2601      	movs	r6, #1
 800042e:	1b9b      	subs	r3, r3, r6
 8000430:	e789      	b.n	8000346 <__aeabi_fsub+0xe6>
 8000432:	2c00      	cmp	r4, #0
 8000434:	d01c      	beq.n	8000470 <__aeabi_fsub+0x210>
 8000436:	28ff      	cmp	r0, #255	; 0xff
 8000438:	d021      	beq.n	800047e <__aeabi_fsub+0x21e>
 800043a:	2480      	movs	r4, #128	; 0x80
 800043c:	04e4      	lsls	r4, r4, #19
 800043e:	4252      	negs	r2, r2
 8000440:	4323      	orrs	r3, r4
 8000442:	2a1b      	cmp	r2, #27
 8000444:	dd00      	ble.n	8000448 <__aeabi_fsub+0x1e8>
 8000446:	e096      	b.n	8000576 <__aeabi_fsub+0x316>
 8000448:	001c      	movs	r4, r3
 800044a:	2520      	movs	r5, #32
 800044c:	40d4      	lsrs	r4, r2
 800044e:	1aaa      	subs	r2, r5, r2
 8000450:	4093      	lsls	r3, r2
 8000452:	1e5a      	subs	r2, r3, #1
 8000454:	4193      	sbcs	r3, r2
 8000456:	4323      	orrs	r3, r4
 8000458:	1af3      	subs	r3, r6, r3
 800045a:	0004      	movs	r4, r0
 800045c:	000d      	movs	r5, r1
 800045e:	e72d      	b.n	80002bc <__aeabi_fsub+0x5c>
 8000460:	2f00      	cmp	r7, #0
 8000462:	d000      	beq.n	8000466 <__aeabi_fsub+0x206>
 8000464:	e72e      	b.n	80002c4 <__aeabi_fsub+0x64>
 8000466:	2200      	movs	r2, #0
 8000468:	2400      	movs	r4, #0
 800046a:	e7a9      	b.n	80003c0 <__aeabi_fsub+0x160>
 800046c:	000c      	movs	r4, r1
 800046e:	e73d      	b.n	80002ec <__aeabi_fsub+0x8c>
 8000470:	2b00      	cmp	r3, #0
 8000472:	d058      	beq.n	8000526 <__aeabi_fsub+0x2c6>
 8000474:	43d2      	mvns	r2, r2
 8000476:	2a00      	cmp	r2, #0
 8000478:	d0ee      	beq.n	8000458 <__aeabi_fsub+0x1f8>
 800047a:	28ff      	cmp	r0, #255	; 0xff
 800047c:	d1e1      	bne.n	8000442 <__aeabi_fsub+0x1e2>
 800047e:	0033      	movs	r3, r6
 8000480:	24ff      	movs	r4, #255	; 0xff
 8000482:	000d      	movs	r5, r1
 8000484:	e732      	b.n	80002ec <__aeabi_fsub+0x8c>
 8000486:	29ff      	cmp	r1, #255	; 0xff
 8000488:	d010      	beq.n	80004ac <__aeabi_fsub+0x24c>
 800048a:	0001      	movs	r1, r0
 800048c:	e778      	b.n	8000380 <__aeabi_fsub+0x120>
 800048e:	2b00      	cmp	r3, #0
 8000490:	d06e      	beq.n	8000570 <__aeabi_fsub+0x310>
 8000492:	24ff      	movs	r4, #255	; 0xff
 8000494:	2e00      	cmp	r6, #0
 8000496:	d100      	bne.n	800049a <__aeabi_fsub+0x23a>
 8000498:	e728      	b.n	80002ec <__aeabi_fsub+0x8c>
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	4651      	mov	r1, sl
 800049e:	03d2      	lsls	r2, r2, #15
 80004a0:	4211      	tst	r1, r2
 80004a2:	d003      	beq.n	80004ac <__aeabi_fsub+0x24c>
 80004a4:	4661      	mov	r1, ip
 80004a6:	4211      	tst	r1, r2
 80004a8:	d100      	bne.n	80004ac <__aeabi_fsub+0x24c>
 80004aa:	0033      	movs	r3, r6
 80004ac:	24ff      	movs	r4, #255	; 0xff
 80004ae:	e71d      	b.n	80002ec <__aeabi_fsub+0x8c>
 80004b0:	24ff      	movs	r4, #255	; 0xff
 80004b2:	2300      	movs	r3, #0
 80004b4:	e72c      	b.n	8000310 <__aeabi_fsub+0xb0>
 80004b6:	2c00      	cmp	r4, #0
 80004b8:	d1e9      	bne.n	800048e <__aeabi_fsub+0x22e>
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d063      	beq.n	8000586 <__aeabi_fsub+0x326>
 80004be:	2e00      	cmp	r6, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fsub+0x264>
 80004c2:	e713      	b.n	80002ec <__aeabi_fsub+0x8c>
 80004c4:	199b      	adds	r3, r3, r6
 80004c6:	015a      	lsls	r2, r3, #5
 80004c8:	d400      	bmi.n	80004cc <__aeabi_fsub+0x26c>
 80004ca:	e73e      	b.n	800034a <__aeabi_fsub+0xea>
 80004cc:	4a31      	ldr	r2, [pc, #196]	; (8000594 <__aeabi_fsub+0x334>)
 80004ce:	000c      	movs	r4, r1
 80004d0:	4013      	ands	r3, r2
 80004d2:	e70b      	b.n	80002ec <__aeabi_fsub+0x8c>
 80004d4:	2c00      	cmp	r4, #0
 80004d6:	d11e      	bne.n	8000516 <__aeabi_fsub+0x2b6>
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d12f      	bne.n	800053c <__aeabi_fsub+0x2dc>
 80004dc:	2e00      	cmp	r6, #0
 80004de:	d04f      	beq.n	8000580 <__aeabi_fsub+0x320>
 80004e0:	0033      	movs	r3, r6
 80004e2:	000d      	movs	r5, r1
 80004e4:	e702      	b.n	80002ec <__aeabi_fsub+0x8c>
 80004e6:	2601      	movs	r6, #1
 80004e8:	e755      	b.n	8000396 <__aeabi_fsub+0x136>
 80004ea:	2c00      	cmp	r4, #0
 80004ec:	d11f      	bne.n	800052e <__aeabi_fsub+0x2ce>
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d043      	beq.n	800057a <__aeabi_fsub+0x31a>
 80004f2:	43c9      	mvns	r1, r1
 80004f4:	2900      	cmp	r1, #0
 80004f6:	d00b      	beq.n	8000510 <__aeabi_fsub+0x2b0>
 80004f8:	28ff      	cmp	r0, #255	; 0xff
 80004fa:	d039      	beq.n	8000570 <__aeabi_fsub+0x310>
 80004fc:	291b      	cmp	r1, #27
 80004fe:	dc44      	bgt.n	800058a <__aeabi_fsub+0x32a>
 8000500:	001c      	movs	r4, r3
 8000502:	2720      	movs	r7, #32
 8000504:	40cc      	lsrs	r4, r1
 8000506:	1a79      	subs	r1, r7, r1
 8000508:	408b      	lsls	r3, r1
 800050a:	1e59      	subs	r1, r3, #1
 800050c:	418b      	sbcs	r3, r1
 800050e:	4323      	orrs	r3, r4
 8000510:	199b      	adds	r3, r3, r6
 8000512:	0004      	movs	r4, r0
 8000514:	e740      	b.n	8000398 <__aeabi_fsub+0x138>
 8000516:	2b00      	cmp	r3, #0
 8000518:	d11a      	bne.n	8000550 <__aeabi_fsub+0x2f0>
 800051a:	2e00      	cmp	r6, #0
 800051c:	d124      	bne.n	8000568 <__aeabi_fsub+0x308>
 800051e:	2780      	movs	r7, #128	; 0x80
 8000520:	2200      	movs	r2, #0
 8000522:	03ff      	lsls	r7, r7, #15
 8000524:	e71b      	b.n	800035e <__aeabi_fsub+0xfe>
 8000526:	0033      	movs	r3, r6
 8000528:	0004      	movs	r4, r0
 800052a:	000d      	movs	r5, r1
 800052c:	e6de      	b.n	80002ec <__aeabi_fsub+0x8c>
 800052e:	28ff      	cmp	r0, #255	; 0xff
 8000530:	d01e      	beq.n	8000570 <__aeabi_fsub+0x310>
 8000532:	2480      	movs	r4, #128	; 0x80
 8000534:	04e4      	lsls	r4, r4, #19
 8000536:	4249      	negs	r1, r1
 8000538:	4323      	orrs	r3, r4
 800053a:	e7df      	b.n	80004fc <__aeabi_fsub+0x29c>
 800053c:	2e00      	cmp	r6, #0
 800053e:	d100      	bne.n	8000542 <__aeabi_fsub+0x2e2>
 8000540:	e6d4      	b.n	80002ec <__aeabi_fsub+0x8c>
 8000542:	1b9f      	subs	r7, r3, r6
 8000544:	017a      	lsls	r2, r7, #5
 8000546:	d400      	bmi.n	800054a <__aeabi_fsub+0x2ea>
 8000548:	e737      	b.n	80003ba <__aeabi_fsub+0x15a>
 800054a:	1af3      	subs	r3, r6, r3
 800054c:	000d      	movs	r5, r1
 800054e:	e6cd      	b.n	80002ec <__aeabi_fsub+0x8c>
 8000550:	24ff      	movs	r4, #255	; 0xff
 8000552:	2e00      	cmp	r6, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_fsub+0x2f8>
 8000556:	e6c9      	b.n	80002ec <__aeabi_fsub+0x8c>
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	4650      	mov	r0, sl
 800055c:	03d2      	lsls	r2, r2, #15
 800055e:	4210      	tst	r0, r2
 8000560:	d0a4      	beq.n	80004ac <__aeabi_fsub+0x24c>
 8000562:	4660      	mov	r0, ip
 8000564:	4210      	tst	r0, r2
 8000566:	d1a1      	bne.n	80004ac <__aeabi_fsub+0x24c>
 8000568:	0033      	movs	r3, r6
 800056a:	000d      	movs	r5, r1
 800056c:	24ff      	movs	r4, #255	; 0xff
 800056e:	e6bd      	b.n	80002ec <__aeabi_fsub+0x8c>
 8000570:	0033      	movs	r3, r6
 8000572:	24ff      	movs	r4, #255	; 0xff
 8000574:	e6ba      	b.n	80002ec <__aeabi_fsub+0x8c>
 8000576:	2301      	movs	r3, #1
 8000578:	e76e      	b.n	8000458 <__aeabi_fsub+0x1f8>
 800057a:	0033      	movs	r3, r6
 800057c:	0004      	movs	r4, r0
 800057e:	e6b5      	b.n	80002ec <__aeabi_fsub+0x8c>
 8000580:	2700      	movs	r7, #0
 8000582:	2200      	movs	r2, #0
 8000584:	e71c      	b.n	80003c0 <__aeabi_fsub+0x160>
 8000586:	0033      	movs	r3, r6
 8000588:	e6b0      	b.n	80002ec <__aeabi_fsub+0x8c>
 800058a:	2301      	movs	r3, #1
 800058c:	e7c0      	b.n	8000510 <__aeabi_fsub+0x2b0>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	7dffffff 	.word	0x7dffffff
 8000594:	fbffffff 	.word	0xfbffffff

08000598 <__aeabi_f2iz>:
 8000598:	0241      	lsls	r1, r0, #9
 800059a:	0043      	lsls	r3, r0, #1
 800059c:	0fc2      	lsrs	r2, r0, #31
 800059e:	0a49      	lsrs	r1, r1, #9
 80005a0:	0e1b      	lsrs	r3, r3, #24
 80005a2:	2000      	movs	r0, #0
 80005a4:	2b7e      	cmp	r3, #126	; 0x7e
 80005a6:	dd0d      	ble.n	80005c4 <__aeabi_f2iz+0x2c>
 80005a8:	2b9d      	cmp	r3, #157	; 0x9d
 80005aa:	dc0c      	bgt.n	80005c6 <__aeabi_f2iz+0x2e>
 80005ac:	2080      	movs	r0, #128	; 0x80
 80005ae:	0400      	lsls	r0, r0, #16
 80005b0:	4301      	orrs	r1, r0
 80005b2:	2b95      	cmp	r3, #149	; 0x95
 80005b4:	dc0a      	bgt.n	80005cc <__aeabi_f2iz+0x34>
 80005b6:	2096      	movs	r0, #150	; 0x96
 80005b8:	1ac3      	subs	r3, r0, r3
 80005ba:	40d9      	lsrs	r1, r3
 80005bc:	4248      	negs	r0, r1
 80005be:	2a00      	cmp	r2, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_f2iz+0x2c>
 80005c2:	0008      	movs	r0, r1
 80005c4:	4770      	bx	lr
 80005c6:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <__aeabi_f2iz+0x3c>)
 80005c8:	18d0      	adds	r0, r2, r3
 80005ca:	e7fb      	b.n	80005c4 <__aeabi_f2iz+0x2c>
 80005cc:	3b96      	subs	r3, #150	; 0x96
 80005ce:	4099      	lsls	r1, r3
 80005d0:	e7f4      	b.n	80005bc <__aeabi_f2iz+0x24>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	7fffffff 	.word	0x7fffffff

080005d8 <__aeabi_ui2f>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	1e04      	subs	r4, r0, #0
 80005dc:	d027      	beq.n	800062e <__aeabi_ui2f+0x56>
 80005de:	f000 f87b 	bl	80006d8 <__clzsi2>
 80005e2:	239e      	movs	r3, #158	; 0x9e
 80005e4:	1a1b      	subs	r3, r3, r0
 80005e6:	2b96      	cmp	r3, #150	; 0x96
 80005e8:	dc0a      	bgt.n	8000600 <__aeabi_ui2f+0x28>
 80005ea:	2296      	movs	r2, #150	; 0x96
 80005ec:	1ad2      	subs	r2, r2, r3
 80005ee:	4094      	lsls	r4, r2
 80005f0:	0264      	lsls	r4, r4, #9
 80005f2:	0a64      	lsrs	r4, r4, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	0264      	lsls	r4, r4, #9
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	0a60      	lsrs	r0, r4, #9
 80005fc:	4318      	orrs	r0, r3
 80005fe:	bd10      	pop	{r4, pc}
 8000600:	2b99      	cmp	r3, #153	; 0x99
 8000602:	dc17      	bgt.n	8000634 <__aeabi_ui2f+0x5c>
 8000604:	2299      	movs	r2, #153	; 0x99
 8000606:	1ad2      	subs	r2, r2, r3
 8000608:	2a00      	cmp	r2, #0
 800060a:	dd27      	ble.n	800065c <__aeabi_ui2f+0x84>
 800060c:	4094      	lsls	r4, r2
 800060e:	0022      	movs	r2, r4
 8000610:	4c13      	ldr	r4, [pc, #76]	; (8000660 <__aeabi_ui2f+0x88>)
 8000612:	4014      	ands	r4, r2
 8000614:	0751      	lsls	r1, r2, #29
 8000616:	d004      	beq.n	8000622 <__aeabi_ui2f+0x4a>
 8000618:	210f      	movs	r1, #15
 800061a:	400a      	ands	r2, r1
 800061c:	2a04      	cmp	r2, #4
 800061e:	d000      	beq.n	8000622 <__aeabi_ui2f+0x4a>
 8000620:	3404      	adds	r4, #4
 8000622:	0162      	lsls	r2, r4, #5
 8000624:	d412      	bmi.n	800064c <__aeabi_ui2f+0x74>
 8000626:	01a4      	lsls	r4, r4, #6
 8000628:	0a64      	lsrs	r4, r4, #9
 800062a:	b2db      	uxtb	r3, r3
 800062c:	e7e3      	b.n	80005f6 <__aeabi_ui2f+0x1e>
 800062e:	2300      	movs	r3, #0
 8000630:	2400      	movs	r4, #0
 8000632:	e7e0      	b.n	80005f6 <__aeabi_ui2f+0x1e>
 8000634:	22b9      	movs	r2, #185	; 0xb9
 8000636:	0021      	movs	r1, r4
 8000638:	1ad2      	subs	r2, r2, r3
 800063a:	4091      	lsls	r1, r2
 800063c:	000a      	movs	r2, r1
 800063e:	1e51      	subs	r1, r2, #1
 8000640:	418a      	sbcs	r2, r1
 8000642:	2105      	movs	r1, #5
 8000644:	1a09      	subs	r1, r1, r0
 8000646:	40cc      	lsrs	r4, r1
 8000648:	4314      	orrs	r4, r2
 800064a:	e7db      	b.n	8000604 <__aeabi_ui2f+0x2c>
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__aeabi_ui2f+0x88>)
 800064e:	401c      	ands	r4, r3
 8000650:	239f      	movs	r3, #159	; 0x9f
 8000652:	01a4      	lsls	r4, r4, #6
 8000654:	1a1b      	subs	r3, r3, r0
 8000656:	0a64      	lsrs	r4, r4, #9
 8000658:	b2db      	uxtb	r3, r3
 800065a:	e7cc      	b.n	80005f6 <__aeabi_ui2f+0x1e>
 800065c:	0022      	movs	r2, r4
 800065e:	e7d7      	b.n	8000610 <__aeabi_ui2f+0x38>
 8000660:	fbffffff 	.word	0xfbffffff

08000664 <__aeabi_cfrcmple>:
 8000664:	4684      	mov	ip, r0
 8000666:	1c08      	adds	r0, r1, #0
 8000668:	4661      	mov	r1, ip
 800066a:	e7ff      	b.n	800066c <__aeabi_cfcmpeq>

0800066c <__aeabi_cfcmpeq>:
 800066c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800066e:	f000 f8b7 	bl	80007e0 <__lesf2>
 8000672:	2800      	cmp	r0, #0
 8000674:	d401      	bmi.n	800067a <__aeabi_cfcmpeq+0xe>
 8000676:	2100      	movs	r1, #0
 8000678:	42c8      	cmn	r0, r1
 800067a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800067c <__aeabi_fcmpeq>:
 800067c:	b510      	push	{r4, lr}
 800067e:	f000 f849 	bl	8000714 <__eqsf2>
 8000682:	4240      	negs	r0, r0
 8000684:	3001      	adds	r0, #1
 8000686:	bd10      	pop	{r4, pc}

08000688 <__aeabi_fcmplt>:
 8000688:	b510      	push	{r4, lr}
 800068a:	f000 f8a9 	bl	80007e0 <__lesf2>
 800068e:	2800      	cmp	r0, #0
 8000690:	db01      	blt.n	8000696 <__aeabi_fcmplt+0xe>
 8000692:	2000      	movs	r0, #0
 8000694:	bd10      	pop	{r4, pc}
 8000696:	2001      	movs	r0, #1
 8000698:	bd10      	pop	{r4, pc}
 800069a:	46c0      	nop			; (mov r8, r8)

0800069c <__aeabi_fcmple>:
 800069c:	b510      	push	{r4, lr}
 800069e:	f000 f89f 	bl	80007e0 <__lesf2>
 80006a2:	2800      	cmp	r0, #0
 80006a4:	dd01      	ble.n	80006aa <__aeabi_fcmple+0xe>
 80006a6:	2000      	movs	r0, #0
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	2001      	movs	r0, #1
 80006ac:	bd10      	pop	{r4, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)

080006b0 <__aeabi_fcmpgt>:
 80006b0:	b510      	push	{r4, lr}
 80006b2:	f000 f855 	bl	8000760 <__gesf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	dc01      	bgt.n	80006be <__aeabi_fcmpgt+0xe>
 80006ba:	2000      	movs	r0, #0
 80006bc:	bd10      	pop	{r4, pc}
 80006be:	2001      	movs	r0, #1
 80006c0:	bd10      	pop	{r4, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)

080006c4 <__aeabi_fcmpge>:
 80006c4:	b510      	push	{r4, lr}
 80006c6:	f000 f84b 	bl	8000760 <__gesf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	da01      	bge.n	80006d2 <__aeabi_fcmpge+0xe>
 80006ce:	2000      	movs	r0, #0
 80006d0:	bd10      	pop	{r4, pc}
 80006d2:	2001      	movs	r0, #1
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)

080006d8 <__clzsi2>:
 80006d8:	211c      	movs	r1, #28
 80006da:	2301      	movs	r3, #1
 80006dc:	041b      	lsls	r3, r3, #16
 80006de:	4298      	cmp	r0, r3
 80006e0:	d301      	bcc.n	80006e6 <__clzsi2+0xe>
 80006e2:	0c00      	lsrs	r0, r0, #16
 80006e4:	3910      	subs	r1, #16
 80006e6:	0a1b      	lsrs	r3, r3, #8
 80006e8:	4298      	cmp	r0, r3
 80006ea:	d301      	bcc.n	80006f0 <__clzsi2+0x18>
 80006ec:	0a00      	lsrs	r0, r0, #8
 80006ee:	3908      	subs	r1, #8
 80006f0:	091b      	lsrs	r3, r3, #4
 80006f2:	4298      	cmp	r0, r3
 80006f4:	d301      	bcc.n	80006fa <__clzsi2+0x22>
 80006f6:	0900      	lsrs	r0, r0, #4
 80006f8:	3904      	subs	r1, #4
 80006fa:	a202      	add	r2, pc, #8	; (adr r2, 8000704 <__clzsi2+0x2c>)
 80006fc:	5c10      	ldrb	r0, [r2, r0]
 80006fe:	1840      	adds	r0, r0, r1
 8000700:	4770      	bx	lr
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	02020304 	.word	0x02020304
 8000708:	01010101 	.word	0x01010101
	...

08000714 <__eqsf2>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	0042      	lsls	r2, r0, #1
 8000718:	0245      	lsls	r5, r0, #9
 800071a:	024e      	lsls	r6, r1, #9
 800071c:	004c      	lsls	r4, r1, #1
 800071e:	0fc3      	lsrs	r3, r0, #31
 8000720:	0a6d      	lsrs	r5, r5, #9
 8000722:	0e12      	lsrs	r2, r2, #24
 8000724:	0a76      	lsrs	r6, r6, #9
 8000726:	0e24      	lsrs	r4, r4, #24
 8000728:	0fc9      	lsrs	r1, r1, #31
 800072a:	2001      	movs	r0, #1
 800072c:	2aff      	cmp	r2, #255	; 0xff
 800072e:	d006      	beq.n	800073e <__eqsf2+0x2a>
 8000730:	2cff      	cmp	r4, #255	; 0xff
 8000732:	d003      	beq.n	800073c <__eqsf2+0x28>
 8000734:	42a2      	cmp	r2, r4
 8000736:	d101      	bne.n	800073c <__eqsf2+0x28>
 8000738:	42b5      	cmp	r5, r6
 800073a:	d006      	beq.n	800074a <__eqsf2+0x36>
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	2d00      	cmp	r5, #0
 8000740:	d1fc      	bne.n	800073c <__eqsf2+0x28>
 8000742:	2cff      	cmp	r4, #255	; 0xff
 8000744:	d1fa      	bne.n	800073c <__eqsf2+0x28>
 8000746:	2e00      	cmp	r6, #0
 8000748:	d1f8      	bne.n	800073c <__eqsf2+0x28>
 800074a:	428b      	cmp	r3, r1
 800074c:	d006      	beq.n	800075c <__eqsf2+0x48>
 800074e:	2001      	movs	r0, #1
 8000750:	2a00      	cmp	r2, #0
 8000752:	d1f3      	bne.n	800073c <__eqsf2+0x28>
 8000754:	0028      	movs	r0, r5
 8000756:	1e45      	subs	r5, r0, #1
 8000758:	41a8      	sbcs	r0, r5
 800075a:	e7ef      	b.n	800073c <__eqsf2+0x28>
 800075c:	2000      	movs	r0, #0
 800075e:	e7ed      	b.n	800073c <__eqsf2+0x28>

08000760 <__gesf2>:
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	0042      	lsls	r2, r0, #1
 8000764:	0245      	lsls	r5, r0, #9
 8000766:	024c      	lsls	r4, r1, #9
 8000768:	0fc3      	lsrs	r3, r0, #31
 800076a:	0048      	lsls	r0, r1, #1
 800076c:	0a6d      	lsrs	r5, r5, #9
 800076e:	0e12      	lsrs	r2, r2, #24
 8000770:	0a64      	lsrs	r4, r4, #9
 8000772:	0e00      	lsrs	r0, r0, #24
 8000774:	0fc9      	lsrs	r1, r1, #31
 8000776:	2aff      	cmp	r2, #255	; 0xff
 8000778:	d01e      	beq.n	80007b8 <__gesf2+0x58>
 800077a:	28ff      	cmp	r0, #255	; 0xff
 800077c:	d021      	beq.n	80007c2 <__gesf2+0x62>
 800077e:	2a00      	cmp	r2, #0
 8000780:	d10a      	bne.n	8000798 <__gesf2+0x38>
 8000782:	426e      	negs	r6, r5
 8000784:	416e      	adcs	r6, r5
 8000786:	b2f6      	uxtb	r6, r6
 8000788:	2800      	cmp	r0, #0
 800078a:	d10f      	bne.n	80007ac <__gesf2+0x4c>
 800078c:	2c00      	cmp	r4, #0
 800078e:	d10d      	bne.n	80007ac <__gesf2+0x4c>
 8000790:	2000      	movs	r0, #0
 8000792:	2d00      	cmp	r5, #0
 8000794:	d009      	beq.n	80007aa <__gesf2+0x4a>
 8000796:	e005      	b.n	80007a4 <__gesf2+0x44>
 8000798:	2800      	cmp	r0, #0
 800079a:	d101      	bne.n	80007a0 <__gesf2+0x40>
 800079c:	2c00      	cmp	r4, #0
 800079e:	d001      	beq.n	80007a4 <__gesf2+0x44>
 80007a0:	428b      	cmp	r3, r1
 80007a2:	d011      	beq.n	80007c8 <__gesf2+0x68>
 80007a4:	2101      	movs	r1, #1
 80007a6:	4258      	negs	r0, r3
 80007a8:	4308      	orrs	r0, r1
 80007aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ac:	2e00      	cmp	r6, #0
 80007ae:	d0f7      	beq.n	80007a0 <__gesf2+0x40>
 80007b0:	2001      	movs	r0, #1
 80007b2:	3901      	subs	r1, #1
 80007b4:	4308      	orrs	r0, r1
 80007b6:	e7f8      	b.n	80007aa <__gesf2+0x4a>
 80007b8:	2d00      	cmp	r5, #0
 80007ba:	d0de      	beq.n	800077a <__gesf2+0x1a>
 80007bc:	2002      	movs	r0, #2
 80007be:	4240      	negs	r0, r0
 80007c0:	e7f3      	b.n	80007aa <__gesf2+0x4a>
 80007c2:	2c00      	cmp	r4, #0
 80007c4:	d0db      	beq.n	800077e <__gesf2+0x1e>
 80007c6:	e7f9      	b.n	80007bc <__gesf2+0x5c>
 80007c8:	4282      	cmp	r2, r0
 80007ca:	dceb      	bgt.n	80007a4 <__gesf2+0x44>
 80007cc:	db04      	blt.n	80007d8 <__gesf2+0x78>
 80007ce:	42a5      	cmp	r5, r4
 80007d0:	d8e8      	bhi.n	80007a4 <__gesf2+0x44>
 80007d2:	2000      	movs	r0, #0
 80007d4:	42a5      	cmp	r5, r4
 80007d6:	d2e8      	bcs.n	80007aa <__gesf2+0x4a>
 80007d8:	2101      	movs	r1, #1
 80007da:	1e58      	subs	r0, r3, #1
 80007dc:	4308      	orrs	r0, r1
 80007de:	e7e4      	b.n	80007aa <__gesf2+0x4a>

080007e0 <__lesf2>:
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	0042      	lsls	r2, r0, #1
 80007e4:	024d      	lsls	r5, r1, #9
 80007e6:	004c      	lsls	r4, r1, #1
 80007e8:	0246      	lsls	r6, r0, #9
 80007ea:	0a76      	lsrs	r6, r6, #9
 80007ec:	0e12      	lsrs	r2, r2, #24
 80007ee:	0fc3      	lsrs	r3, r0, #31
 80007f0:	0a6d      	lsrs	r5, r5, #9
 80007f2:	0e24      	lsrs	r4, r4, #24
 80007f4:	0fc9      	lsrs	r1, r1, #31
 80007f6:	2aff      	cmp	r2, #255	; 0xff
 80007f8:	d016      	beq.n	8000828 <__lesf2+0x48>
 80007fa:	2cff      	cmp	r4, #255	; 0xff
 80007fc:	d018      	beq.n	8000830 <__lesf2+0x50>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d10a      	bne.n	8000818 <__lesf2+0x38>
 8000802:	4270      	negs	r0, r6
 8000804:	4170      	adcs	r0, r6
 8000806:	b2c0      	uxtb	r0, r0
 8000808:	2c00      	cmp	r4, #0
 800080a:	d015      	beq.n	8000838 <__lesf2+0x58>
 800080c:	2800      	cmp	r0, #0
 800080e:	d005      	beq.n	800081c <__lesf2+0x3c>
 8000810:	2001      	movs	r0, #1
 8000812:	3901      	subs	r1, #1
 8000814:	4308      	orrs	r0, r1
 8000816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000818:	2c00      	cmp	r4, #0
 800081a:	d013      	beq.n	8000844 <__lesf2+0x64>
 800081c:	4299      	cmp	r1, r3
 800081e:	d014      	beq.n	800084a <__lesf2+0x6a>
 8000820:	2001      	movs	r0, #1
 8000822:	425b      	negs	r3, r3
 8000824:	4318      	orrs	r0, r3
 8000826:	e7f6      	b.n	8000816 <__lesf2+0x36>
 8000828:	2002      	movs	r0, #2
 800082a:	2e00      	cmp	r6, #0
 800082c:	d1f3      	bne.n	8000816 <__lesf2+0x36>
 800082e:	e7e4      	b.n	80007fa <__lesf2+0x1a>
 8000830:	2002      	movs	r0, #2
 8000832:	2d00      	cmp	r5, #0
 8000834:	d1ef      	bne.n	8000816 <__lesf2+0x36>
 8000836:	e7e2      	b.n	80007fe <__lesf2+0x1e>
 8000838:	2d00      	cmp	r5, #0
 800083a:	d1e7      	bne.n	800080c <__lesf2+0x2c>
 800083c:	2000      	movs	r0, #0
 800083e:	2e00      	cmp	r6, #0
 8000840:	d0e9      	beq.n	8000816 <__lesf2+0x36>
 8000842:	e7ed      	b.n	8000820 <__lesf2+0x40>
 8000844:	2d00      	cmp	r5, #0
 8000846:	d1e9      	bne.n	800081c <__lesf2+0x3c>
 8000848:	e7ea      	b.n	8000820 <__lesf2+0x40>
 800084a:	42a2      	cmp	r2, r4
 800084c:	dc06      	bgt.n	800085c <__lesf2+0x7c>
 800084e:	dbdf      	blt.n	8000810 <__lesf2+0x30>
 8000850:	42ae      	cmp	r6, r5
 8000852:	d803      	bhi.n	800085c <__lesf2+0x7c>
 8000854:	2000      	movs	r0, #0
 8000856:	42ae      	cmp	r6, r5
 8000858:	d3da      	bcc.n	8000810 <__lesf2+0x30>
 800085a:	e7dc      	b.n	8000816 <__lesf2+0x36>
 800085c:	2001      	movs	r0, #1
 800085e:	4249      	negs	r1, r1
 8000860:	4308      	orrs	r0, r1
 8000862:	e7d8      	b.n	8000816 <__lesf2+0x36>

08000864 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <HAL_Init+0x24>)
 800086a:	4a07      	ldr	r2, [pc, #28]	; (8000888 <HAL_Init+0x24>)
 800086c:	6812      	ldr	r2, [r2, #0]
 800086e:	2110      	movs	r1, #16
 8000870:	430a      	orrs	r2, r1
 8000872:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000874:	2000      	movs	r0, #0
 8000876:	f007 f8d9 	bl	8007a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087a:	f006 fe75 	bl	8007568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40022000 	.word	0x40022000

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  uwTick++;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <HAL_IncTick+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <HAL_IncTick+0x14>)
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200021ec 	.word	0x200021ec

080008a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b02      	ldr	r3, [pc, #8]	; (80008b4 <HAL_GetTick+0x10>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	200021ec 	.word	0x200021ec

080008b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff fff0 	bl	80008a4 <HAL_GetTick>
 80008c4:	0003      	movs	r3, r0
 80008c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	d002      	beq.n	80008d8 <HAL_Delay+0x20>
  {
     wait++;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	f7ff ffe3 	bl	80008a4 <HAL_GetTick>
 80008de:	0002      	movs	r2, r0
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	1ad2      	subs	r2, r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d3f7      	bcc.n	80008da <HAL_Delay+0x22>
  {
  }
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b004      	add	sp, #16
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008fc:	230f      	movs	r3, #15
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d101      	bne.n	8000912 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e124      	b.n	8000b5c <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10a      	bne.n	8000930 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	2100      	movs	r1, #0
 8000926:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	0018      	movs	r0, r3
 800092c:	f006 fe54 	bl	80075d8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000934:	2210      	movs	r2, #16
 8000936:	4013      	ands	r3, r2
 8000938:	d000      	beq.n	800093c <HAL_ADC_Init+0x48>
 800093a:	e102      	b.n	8000b42 <HAL_ADC_Init+0x24e>
 800093c:	230f      	movs	r3, #15
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d000      	beq.n	8000948 <HAL_ADC_Init+0x54>
 8000946:	e0fc      	b.n	8000b42 <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	2204      	movs	r2, #4
 8000950:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000952:	d000      	beq.n	8000956 <HAL_ADC_Init+0x62>
 8000954:	e0f5      	b.n	8000b42 <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a82      	ldr	r2, [pc, #520]	; (8000b64 <HAL_ADC_Init+0x270>)
 800095c:	4013      	ands	r3, r2
 800095e:	2202      	movs	r2, #2
 8000960:	431a      	orrs	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	2203      	movs	r2, #3
 800096e:	4013      	ands	r3, r2
 8000970:	2b01      	cmp	r3, #1
 8000972:	d112      	bne.n	800099a <HAL_ADC_Init+0xa6>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2201      	movs	r2, #1
 800097c:	4013      	ands	r3, r2
 800097e:	2b01      	cmp	r3, #1
 8000980:	d009      	beq.n	8000996 <HAL_ADC_Init+0xa2>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	68da      	ldr	r2, [r3, #12]
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	401a      	ands	r2, r3
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	429a      	cmp	r2, r3
 8000994:	d101      	bne.n	800099a <HAL_ADC_Init+0xa6>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <HAL_ADC_Init+0xa8>
 800099a:	2300      	movs	r3, #0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d116      	bne.n	80009ce <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	68d2      	ldr	r2, [r2, #12]
 80009aa:	2118      	movs	r1, #24
 80009ac:	438a      	bics	r2, r1
 80009ae:	0011      	movs	r1, r2
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	6892      	ldr	r2, [r2, #8]
 80009b4:	430a      	orrs	r2, r1
 80009b6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	6912      	ldr	r2, [r2, #16]
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	0891      	lsrs	r1, r2, #2
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	6852      	ldr	r2, [r2, #4]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	6812      	ldr	r2, [r2, #0]
 80009d6:	68d2      	ldr	r2, [r2, #12]
 80009d8:	4963      	ldr	r1, [pc, #396]	; (8000b68 <HAL_ADC_Init+0x274>)
 80009da:	400a      	ands	r2, r1
 80009dc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80009ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6a1b      	ldr	r3, [r3, #32]
 80009f0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80009f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d002      	beq.n	8000a02 <HAL_ADC_Init+0x10e>
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	015b      	lsls	r3, r3, #5
 8000a00:	e000      	b.n	8000a04 <HAL_ADC_Init+0x110>
 8000a02:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000a04:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000a0a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d101      	bne.n	8000a18 <HAL_ADC_Init+0x124>
 8000a14:	2304      	movs	r3, #4
 8000a16:	e000      	b.n	8000a1a <HAL_ADC_Init+0x126>
 8000a18:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 8000a1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000a22:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d115      	bne.n	8000a5e <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d105      	bne.n	8000a46 <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	0252      	lsls	r2, r2, #9
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	e00b      	b.n	8000a5e <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a56:	2201      	movs	r2, #1
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a62:	23c2      	movs	r3, #194	; 0xc2
 8000a64:	33ff      	adds	r3, #255	; 0xff
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d007      	beq.n	8000a7a <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000a72:	4313      	orrs	r3, r2
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	6812      	ldr	r2, [r2, #0]
 8000a82:	68d1      	ldr	r1, [r2, #12]
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	430a      	orrs	r2, r1
 8000a88:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	055b      	lsls	r3, r3, #21
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d01b      	beq.n	8000ace <HAL_ADC_Init+0x1da>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d017      	beq.n	8000ace <HAL_ADC_Init+0x1da>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d013      	beq.n	8000ace <HAL_ADC_Init+0x1da>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d00f      	beq.n	8000ace <HAL_ADC_Init+0x1da>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d00b      	beq.n	8000ace <HAL_ADC_Init+0x1da>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aba:	2b05      	cmp	r3, #5
 8000abc:	d007      	beq.n	8000ace <HAL_ADC_Init+0x1da>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d003      	beq.n	8000ace <HAL_ADC_Init+0x1da>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aca:	2b07      	cmp	r3, #7
 8000acc:	d112      	bne.n	8000af4 <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	6952      	ldr	r2, [r2, #20]
 8000ad8:	2107      	movs	r1, #7
 8000ada:	438a      	bics	r2, r1
 8000adc:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	6812      	ldr	r2, [r2, #0]
 8000ae6:	6951      	ldr	r1, [r2, #20]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000aec:	2007      	movs	r0, #7
 8000aee:	4002      	ands	r2, r0
 8000af0:	430a      	orrs	r2, r1
 8000af2:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <HAL_ADC_Init+0x278>)
 8000afc:	401a      	ands	r2, r3
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d10b      	bne.n	8000b1c <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	2203      	movs	r2, #3
 8000b10:	4393      	bics	r3, r2
 8000b12:	2201      	movs	r2, #1
 8000b14:	431a      	orrs	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000b1a:	e01c      	b.n	8000b56 <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	2212      	movs	r2, #18
 8000b22:	4393      	bics	r3, r2
 8000b24:	2210      	movs	r2, #16
 8000b26:	431a      	orrs	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b30:	2201      	movs	r2, #1
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000b40:	e009      	b.n	8000b56 <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	2210      	movs	r2, #16
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8000b4e:	230f      	movs	r3, #15
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b56:	230f      	movs	r3, #15
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	781b      	ldrb	r3, [r3, #0]
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b004      	add	sp, #16
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	fffffefd 	.word	0xfffffefd
 8000b68:	fffe0219 	.word	0xfffe0219
 8000b6c:	833fffe7 	.word	0x833fffe7

08000b70 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b78:	230f      	movs	r3, #15
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2204      	movs	r2, #4
 8000b88:	4013      	ands	r3, r2
 8000b8a:	d138      	bne.n	8000bfe <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2240      	movs	r2, #64	; 0x40
 8000b90:	5c9b      	ldrb	r3, [r3, r2]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d101      	bne.n	8000b9a <HAL_ADC_Start+0x2a>
 8000b96:	2302      	movs	r3, #2
 8000b98:	e038      	b.n	8000c0c <HAL_ADC_Start+0x9c>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2240      	movs	r2, #64	; 0x40
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d007      	beq.n	8000bba <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000baa:	230f      	movs	r3, #15
 8000bac:	18fc      	adds	r4, r7, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fa1d 	bl	8000ff0 <ADC_Enable>
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000bba:	230f      	movs	r3, #15
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d120      	bne.n	8000c06 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <HAL_ADC_Start+0xa4>)
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	0052      	lsls	r2, r2, #1
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2240      	movs	r2, #64	; 0x40
 8000be0:	2100      	movs	r1, #0
 8000be2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	221c      	movs	r2, #28
 8000bea:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	6892      	ldr	r2, [r2, #8]
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	e003      	b.n	8000c06 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000bfe:	230f      	movs	r3, #15
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	2202      	movs	r2, #2
 8000c04:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c06:	230f      	movs	r3, #15
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	781b      	ldrb	r3, [r3, #0]
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b005      	add	sp, #20
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	fffff0fe 	.word	0xfffff0fe

08000c18 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c20:	230f      	movs	r3, #15
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2240      	movs	r2, #64	; 0x40
 8000c2c:	5c9b      	ldrb	r3, [r3, r2]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d101      	bne.n	8000c36 <HAL_ADC_Stop+0x1e>
 8000c32:	2302      	movs	r3, #2
 8000c34:	e02c      	b.n	8000c90 <HAL_ADC_Stop+0x78>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2240      	movs	r2, #64	; 0x40
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000c3e:	230f      	movs	r3, #15
 8000c40:	18fc      	adds	r4, r7, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 fab8 	bl	80011ba <ADC_ConversionStop>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000c4e:	230f      	movs	r3, #15
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d114      	bne.n	8000c82 <HAL_ADC_Stop+0x6a>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fc      	adds	r4, r7, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 fa42 	bl	80010e8 <ADC_Disable>
 8000c64:	0003      	movs	r3, r0
 8000c66:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d107      	bne.n	8000c82 <HAL_ADC_Stop+0x6a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_ADC_Stop+0x80>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2240      	movs	r2, #64	; 0x40
 8000c86:	2100      	movs	r1, #0
 8000c88:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	781b      	ldrb	r3, [r3, #0]
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b005      	add	sp, #20
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	fffffefe 	.word	0xfffffefe

08000c9c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d102      	bne.n	8000cb4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000cae:	2308      	movs	r3, #8
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	e013      	b.n	8000cdc <HAL_ADC_PollForConversion+0x40>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d00b      	beq.n	8000cd8 <HAL_ADC_PollForConversion+0x3c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2240      	movs	r2, #64	; 0x40
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e06b      	b.n	8000db0 <HAL_ADC_PollForConversion+0x114>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000cd8:	230c      	movs	r3, #12
 8000cda:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000cdc:	f7ff fde2 	bl	80008a4 <HAL_GetTick>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ce4:	e019      	b.n	8000d1a <HAL_ADC_PollForConversion+0x7e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	d016      	beq.n	8000d1a <HAL_ADC_PollForConversion+0x7e>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <HAL_ADC_PollForConversion+0x66>
 8000cf2:	f7ff fdd7 	bl	80008a4 <HAL_GetTick>
 8000cf6:	0002      	movs	r2, r0
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1ad2      	subs	r2, r2, r3
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d90b      	bls.n	8000d1a <HAL_ADC_PollForConversion+0x7e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	2204      	movs	r2, #4
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2240      	movs	r2, #64	; 0x40
 8000d12:	2100      	movs	r1, #0
 8000d14:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e04a      	b.n	8000db0 <HAL_ADC_PollForConversion+0x114>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4013      	ands	r3, r2
 8000d24:	d0df      	beq.n	8000ce6 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	23c0      	movs	r3, #192	; 0xc0
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d12d      	bne.n	8000d9e <HAL_ADC_PollForConversion+0x102>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a1b      	ldr	r3, [r3, #32]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d129      	bne.n	8000d9e <HAL_ADC_PollForConversion+0x102>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2208      	movs	r2, #8
 8000d52:	4013      	ands	r3, r2
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d122      	bne.n	8000d9e <HAL_ADC_PollForConversion+0x102>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	2204      	movs	r2, #4
 8000d60:	4013      	ands	r3, r2
 8000d62:	d110      	bne.n	8000d86 <HAL_ADC_PollForConversion+0xea>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	6852      	ldr	r2, [r2, #4]
 8000d6e:	210c      	movs	r1, #12
 8000d70:	438a      	bics	r2, r1
 8000d72:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_ADC_PollForConversion+0x11c>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	645a      	str	r2, [r3, #68]	; 0x44
 8000d84:	e00b      	b.n	8000d9e <HAL_ADC_PollForConversion+0x102>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d96:	2201      	movs	r2, #1
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d103      	bne.n	8000dae <HAL_ADC_PollForConversion+0x112>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b004      	add	sp, #16
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	fffffefe 	.word	0xfffffefe

08000dbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dde:	230f      	movs	r3, #15
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	055b      	lsls	r3, r3, #21
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d011      	beq.n	8000e1a <HAL_ADC_ConfigChannel+0x46>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d00d      	beq.n	8000e1a <HAL_ADC_ConfigChannel+0x46>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d009      	beq.n	8000e1a <HAL_ADC_ConfigChannel+0x46>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d005      	beq.n	8000e1a <HAL_ADC_ConfigChannel+0x46>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d001      	beq.n	8000e1a <HAL_ADC_ConfigChannel+0x46>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2240      	movs	r2, #64	; 0x40
 8000e1e:	5c9b      	ldrb	r3, [r3, r2]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d101      	bne.n	8000e28 <HAL_ADC_ConfigChannel+0x54>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e0d1      	b.n	8000fcc <HAL_ADC_ConfigChannel+0x1f8>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2240      	movs	r2, #64	; 0x40
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2204      	movs	r2, #4
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d000      	beq.n	8000e3e <HAL_ADC_ConfigChannel+0x6a>
 8000e3c:	e0b5      	b.n	8000faa <HAL_ADC_ConfigChannel+0x1d6>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	4a64      	ldr	r2, [pc, #400]	; (8000fd4 <HAL_ADC_ConfigChannel+0x200>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d100      	bne.n	8000e4a <HAL_ADC_ConfigChannel+0x76>
 8000e48:	e083      	b.n	8000f52 <HAL_ADC_ConfigChannel+0x17e>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	6812      	ldr	r2, [r2, #0]
 8000e52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	2001      	movs	r0, #1
 8000e5a:	4090      	lsls	r0, r2
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	055b      	lsls	r3, r3, #21
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d037      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x10a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d033      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x10a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d02f      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x10a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d02b      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x10a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	d027      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x10a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e92:	2b05      	cmp	r3, #5
 8000e94:	d023      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x10a>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d01f      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x10a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea2:	2b07      	cmp	r3, #7
 8000ea4:	d01b      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x10a>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d012      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x10a>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	6952      	ldr	r2, [r2, #20]
 8000ec2:	2107      	movs	r1, #7
 8000ec4:	438a      	bics	r2, r1
 8000ec6:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	6951      	ldr	r1, [r2, #20]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	6892      	ldr	r2, [r2, #8]
 8000ed6:	2007      	movs	r0, #7
 8000ed8:	4002      	ands	r2, r0
 8000eda:	430a      	orrs	r2, r1
 8000edc:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b10      	cmp	r3, #16
 8000ee4:	d007      	beq.n	8000ef6 <HAL_ADC_ConfigChannel+0x122>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b11      	cmp	r3, #17
 8000eec:	d003      	beq.n	8000ef6 <HAL_ADC_ConfigChannel+0x122>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b12      	cmp	r3, #18
 8000ef4:	d163      	bne.n	8000fbe <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ef6:	4a38      	ldr	r2, [pc, #224]	; (8000fd8 <HAL_ADC_ConfigChannel+0x204>)
 8000ef8:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <HAL_ADC_ConfigChannel+0x204>)
 8000efa:	6819      	ldr	r1, [r3, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b10      	cmp	r3, #16
 8000f02:	d009      	beq.n	8000f18 <HAL_ADC_ConfigChannel+0x144>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b11      	cmp	r3, #17
 8000f0a:	d102      	bne.n	8000f12 <HAL_ADC_ConfigChannel+0x13e>
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	03db      	lsls	r3, r3, #15
 8000f10:	e004      	b.n	8000f1c <HAL_ADC_ConfigChannel+0x148>
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	045b      	lsls	r3, r3, #17
 8000f16:	e001      	b.n	8000f1c <HAL_ADC_ConfigChannel+0x148>
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	041b      	lsls	r3, r3, #16
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b10      	cmp	r3, #16
 8000f26:	d14a      	bne.n	8000fbe <HAL_ADC_ConfigChannel+0x1ea>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <HAL_ADC_ConfigChannel+0x208>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	492c      	ldr	r1, [pc, #176]	; (8000fe0 <HAL_ADC_ConfigChannel+0x20c>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff f8f2 	bl	8000118 <__udivsi3>
 8000f34:	0003      	movs	r3, r0
 8000f36:	001a      	movs	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	189b      	adds	r3, r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f42:	e002      	b.n	8000f4a <HAL_ADC_ConfigChannel+0x176>
          {
            wait_loop_index--;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f9      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x170>
 8000f50:	e035      	b.n	8000fbe <HAL_ADC_ConfigChannel+0x1ea>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	2001      	movs	r0, #1
 8000f62:	4090      	lsls	r0, r2
 8000f64:	0002      	movs	r2, r0
 8000f66:	43d2      	mvns	r2, r2
 8000f68:	400a      	ands	r2, r1
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d007      	beq.n	8000f84 <HAL_ADC_ConfigChannel+0x1b0>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b11      	cmp	r3, #17
 8000f7a:	d003      	beq.n	8000f84 <HAL_ADC_ConfigChannel+0x1b0>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b12      	cmp	r3, #18
 8000f82:	d11c      	bne.n	8000fbe <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <HAL_ADC_ConfigChannel+0x204>)
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_ADC_ConfigChannel+0x204>)
 8000f88:	6819      	ldr	r1, [r3, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d007      	beq.n	8000fa2 <HAL_ADC_ConfigChannel+0x1ce>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b11      	cmp	r3, #17
 8000f98:	d101      	bne.n	8000f9e <HAL_ADC_ConfigChannel+0x1ca>
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_ADC_ConfigChannel+0x210>)
 8000f9c:	e002      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0x1d0>
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_ADC_ConfigChannel+0x214>)
 8000fa0:	e000      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0x1d0>
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_ADC_ConfigChannel+0x218>)
 8000fa4:	400b      	ands	r3, r1
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e009      	b.n	8000fbe <HAL_ADC_ConfigChannel+0x1ea>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	2220      	movs	r2, #32
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2240      	movs	r2, #64	; 0x40
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	781b      	ldrb	r3, [r3, #0]
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b004      	add	sp, #16
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	00001001 	.word	0x00001001
 8000fd8:	40012708 	.word	0x40012708
 8000fdc:	20000064 	.word	0x20000064
 8000fe0:	000f4240 	.word	0x000f4240
 8000fe4:	ffbfffff 	.word	0xffbfffff
 8000fe8:	feffffff 	.word	0xfeffffff
 8000fec:	ff7fffff 	.word	0xff7fffff

08000ff0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2203      	movs	r2, #3
 8001008:	4013      	ands	r3, r2
 800100a:	2b01      	cmp	r3, #1
 800100c:	d112      	bne.n	8001034 <ADC_Enable+0x44>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	4013      	ands	r3, r2
 8001018:	2b01      	cmp	r3, #1
 800101a:	d009      	beq.n	8001030 <ADC_Enable+0x40>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	401a      	ands	r2, r3
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	429a      	cmp	r2, r3
 800102e:	d101      	bne.n	8001034 <ADC_Enable+0x44>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <ADC_Enable+0x46>
 8001034:	2300      	movs	r3, #0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d14b      	bne.n	80010d2 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <ADC_Enable+0xec>)
 8001042:	4013      	ands	r3, r2
 8001044:	d00d      	beq.n	8001062 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	2210      	movs	r2, #16
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001056:	2201      	movs	r2, #1
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e038      	b.n	80010d4 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	6892      	ldr	r2, [r2, #8]
 800106c:	2101      	movs	r1, #1
 800106e:	430a      	orrs	r2, r1
 8001070:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <ADC_Enable+0xf0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	491b      	ldr	r1, [pc, #108]	; (80010e4 <ADC_Enable+0xf4>)
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff f84d 	bl	8000118 <__udivsi3>
 800107e:	0003      	movs	r3, r0
 8001080:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001082:	e002      	b.n	800108a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	3b01      	subs	r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f9      	bne.n	8001084 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001090:	f7ff fc08 	bl	80008a4 <HAL_GetTick>
 8001094:	0003      	movs	r3, r0
 8001096:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001098:	e014      	b.n	80010c4 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800109a:	f7ff fc03 	bl	80008a4 <HAL_GetTick>
 800109e:	0002      	movs	r2, r0
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d90d      	bls.n	80010c4 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ac:	2210      	movs	r2, #16
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b8:	2201      	movs	r2, #1
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e007      	b.n	80010d4 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2201      	movs	r2, #1
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d1e3      	bne.n	800109a <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b004      	add	sp, #16
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	80000017 	.word	0x80000017
 80010e0:	20000064 	.word	0x20000064
 80010e4:	000f4240 	.word	0x000f4240

080010e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2203      	movs	r2, #3
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d112      	bne.n	8001128 <ADC_Disable+0x40>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	4013      	ands	r3, r2
 800110c:	2b01      	cmp	r3, #1
 800110e:	d009      	beq.n	8001124 <ADC_Disable+0x3c>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	401a      	ands	r2, r3
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	429a      	cmp	r2, r3
 8001122:	d101      	bne.n	8001128 <ADC_Disable+0x40>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <ADC_Disable+0x42>
 8001128:	2300      	movs	r3, #0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d040      	beq.n	80011b0 <ADC_Disable+0xc8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2205      	movs	r2, #5
 8001136:	4013      	ands	r3, r2
 8001138:	2b01      	cmp	r3, #1
 800113a:	d110      	bne.n	800115e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	6892      	ldr	r2, [r2, #8]
 8001146:	2102      	movs	r1, #2
 8001148:	430a      	orrs	r2, r1
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2203      	movs	r2, #3
 8001152:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001154:	f7ff fba6 	bl	80008a4 <HAL_GetTick>
 8001158:	0003      	movs	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800115c:	e022      	b.n	80011a4 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	2210      	movs	r2, #16
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116e:	2201      	movs	r2, #1
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e01b      	b.n	80011b2 <ADC_Disable+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800117a:	f7ff fb93 	bl	80008a4 <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d90d      	bls.n	80011a4 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	2210      	movs	r2, #16
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001198:	2201      	movs	r2, #1
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e006      	b.n	80011b2 <ADC_Disable+0xca>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2201      	movs	r2, #1
 80011ac:	4013      	ands	r3, r2
 80011ae:	d1e4      	bne.n	800117a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b004      	add	sp, #16
 80011b8:	bd80      	pop	{r7, pc}

080011ba <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2204      	movs	r2, #4
 80011ce:	4013      	ands	r3, r2
 80011d0:	d033      	beq.n	800123a <ADC_ConversionStop+0x80>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2204      	movs	r2, #4
 80011da:	4013      	ands	r3, r2
 80011dc:	d00d      	beq.n	80011fa <ADC_ConversionStop+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2202      	movs	r2, #2
 80011e6:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80011e8:	d107      	bne.n	80011fa <ADC_ConversionStop+0x40>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	6892      	ldr	r2, [r2, #8]
 80011f4:	2110      	movs	r1, #16
 80011f6:	430a      	orrs	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011fa:	f7ff fb53 	bl	80008a4 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001202:	e014      	b.n	800122e <ADC_ConversionStop+0x74>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001204:	f7ff fb4e 	bl	80008a4 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d90d      	bls.n	800122e <ADC_ConversionStop+0x74>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	2210      	movs	r2, #16
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001222:	2201      	movs	r2, #1
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e006      	b.n	800123c <ADC_ConversionStop+0x82>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2204      	movs	r2, #4
 8001236:	4013      	ands	r3, r2
 8001238:	d1e4      	bne.n	8001204 <ADC_ConversionStop+0x4a>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b004      	add	sp, #16
 8001242:	bd80      	pop	{r7, pc}

08001244 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	0002      	movs	r2, r0
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <NVIC_EnableIRQ+0x28>)
 8001252:	1dfa      	adds	r2, r7, #7
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	0011      	movs	r1, r2
 8001258:	221f      	movs	r2, #31
 800125a:	400a      	ands	r2, r1
 800125c:	2101      	movs	r1, #1
 800125e:	4091      	lsls	r1, r2
 8001260:	000a      	movs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}
 800126c:	e000e100 	.word	0xe000e100

08001270 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	0002      	movs	r2, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b7f      	cmp	r3, #127	; 0x7f
 8001284:	d932      	bls.n	80012ec <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001286:	4c2f      	ldr	r4, [pc, #188]	; (8001344 <NVIC_SetPriority+0xd4>)
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	001a      	movs	r2, r3
 800128e:	230f      	movs	r3, #15
 8001290:	4013      	ands	r3, r2
 8001292:	3b08      	subs	r3, #8
 8001294:	0899      	lsrs	r1, r3, #2
 8001296:	4a2b      	ldr	r2, [pc, #172]	; (8001344 <NVIC_SetPriority+0xd4>)
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	0018      	movs	r0, r3
 800129e:	230f      	movs	r3, #15
 80012a0:	4003      	ands	r3, r0
 80012a2:	3b08      	subs	r3, #8
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3306      	adds	r3, #6
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	18d3      	adds	r3, r2, r3
 80012ac:	3304      	adds	r3, #4
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	1dfa      	adds	r2, r7, #7
 80012b2:	7812      	ldrb	r2, [r2, #0]
 80012b4:	0010      	movs	r0, r2
 80012b6:	2203      	movs	r2, #3
 80012b8:	4002      	ands	r2, r0
 80012ba:	00d2      	lsls	r2, r2, #3
 80012bc:	20ff      	movs	r0, #255	; 0xff
 80012be:	4090      	lsls	r0, r2
 80012c0:	0002      	movs	r2, r0
 80012c2:	43d2      	mvns	r2, r2
 80012c4:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	20ff      	movs	r0, #255	; 0xff
 80012cc:	4018      	ands	r0, r3
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	001d      	movs	r5, r3
 80012d4:	2303      	movs	r3, #3
 80012d6:	402b      	ands	r3, r5
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4098      	lsls	r0, r3
 80012dc:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012de:	431a      	orrs	r2, r3
 80012e0:	1d8b      	adds	r3, r1, #6
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	18e3      	adds	r3, r4, r3
 80012e6:	3304      	adds	r3, #4
 80012e8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ea:	e027      	b.n	800133c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ec:	4c16      	ldr	r4, [pc, #88]	; (8001348 <NVIC_SetPriority+0xd8>)
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	4914      	ldr	r1, [pc, #80]	; (8001348 <NVIC_SetPriority+0xd8>)
 80012f8:	1dfa      	adds	r2, r7, #7
 80012fa:	7812      	ldrb	r2, [r2, #0]
 80012fc:	b252      	sxtb	r2, r2
 80012fe:	0892      	lsrs	r2, r2, #2
 8001300:	32c0      	adds	r2, #192	; 0xc0
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	5852      	ldr	r2, [r2, r1]
 8001306:	1df9      	adds	r1, r7, #7
 8001308:	7809      	ldrb	r1, [r1, #0]
 800130a:	0008      	movs	r0, r1
 800130c:	2103      	movs	r1, #3
 800130e:	4001      	ands	r1, r0
 8001310:	00c9      	lsls	r1, r1, #3
 8001312:	20ff      	movs	r0, #255	; 0xff
 8001314:	4088      	lsls	r0, r1
 8001316:	0001      	movs	r1, r0
 8001318:	43c9      	mvns	r1, r1
 800131a:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	0192      	lsls	r2, r2, #6
 8001320:	20ff      	movs	r0, #255	; 0xff
 8001322:	4010      	ands	r0, r2
 8001324:	1dfa      	adds	r2, r7, #7
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	0015      	movs	r5, r2
 800132a:	2203      	movs	r2, #3
 800132c:	402a      	ands	r2, r5
 800132e:	00d2      	lsls	r2, r2, #3
 8001330:	4090      	lsls	r0, r2
 8001332:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001334:	430a      	orrs	r2, r1
 8001336:	33c0      	adds	r3, #192	; 0xc0
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	511a      	str	r2, [r3, r4]
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bdb0      	pop	{r4, r5, r7, pc}
 8001344:	e000ed00 	.word	0xe000ed00
 8001348:	e000e100 	.word	0xe000e100

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <SysTick_Config+0x40>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e010      	b.n	8001384 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <SysTick_Config+0x44>)
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	3a01      	subs	r2, #1
 8001368:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	2301      	movs	r3, #1
 800136c:	425b      	negs	r3, r3
 800136e:	2103      	movs	r1, #3
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff ff7d 	bl	8001270 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SysTick_Config+0x44>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x44>)
 800137e:	2207      	movs	r2, #7
 8001380:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001382:	2300      	movs	r3, #0
}
 8001384:	0018      	movs	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	b002      	add	sp, #8
 800138a:	bd80      	pop	{r7, pc}
 800138c:	00ffffff 	.word	0x00ffffff
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	230f      	movs	r3, #15
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	1c02      	adds	r2, r0, #0
 80013a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	230f      	movs	r3, #15
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	0011      	movs	r1, r2
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7ff ff5c 	bl	8001270 <NVIC_SetPriority>
}
 80013b8:	46c0      	nop			; (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b004      	add	sp, #16
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	0002      	movs	r2, r0
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff ff36 	bl	8001244 <NVIC_EnableIRQ>
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7ff ffae 	bl	800134c <SysTick_Config>
 80013f0:	0003      	movs	r3, r0
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b04      	cmp	r3, #4
 8001408:	d106      	bne.n	8001418 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	2104      	movs	r1, #4
 8001412:	430a      	orrs	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001416:	e005      	b.n	8001424 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	2104      	movs	r1, #4
 8001420:	438a      	bics	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	230f      	movs	r3, #15
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2221      	movs	r2, #33	; 0x21
 8001444:	5c9b      	ldrb	r3, [r3, r2]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d007      	beq.n	800145c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2204      	movs	r2, #4
 8001450:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001452:	230f      	movs	r3, #15
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e028      	b.n	80014ae <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	210e      	movs	r1, #14
 8001468:	438a      	bics	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	2101      	movs	r1, #1
 8001478:	438a      	bics	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001484:	2101      	movs	r1, #1
 8001486:	4091      	lsls	r1, r2
 8001488:	000a      	movs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2221      	movs	r2, #33	; 0x21
 8001490:	2101      	movs	r1, #1
 8001492:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2220      	movs	r2, #32
 8001498:	2100      	movs	r1, #0
 800149a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	0010      	movs	r0, r2
 80014ac:	4798      	blx	r3
    } 
  }
  return status;
 80014ae:	230f      	movs	r3, #15
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	781b      	ldrb	r3, [r3, #0]
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b004      	add	sp, #16
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80014d2:	e155      	b.n	8001780 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2101      	movs	r1, #1
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4091      	lsls	r1, r2
 80014de:	000a      	movs	r2, r1
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d100      	bne.n	80014ec <HAL_GPIO_Init+0x30>
 80014ea:	e146      	b.n	800177a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x40>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b12      	cmp	r3, #18
 80014fa:	d123      	bne.n	8001544 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	08da      	lsrs	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3208      	adds	r2, #8
 8001504:	0092      	lsls	r2, r2, #2
 8001506:	58d3      	ldr	r3, [r2, r3]
 8001508:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2207      	movs	r2, #7
 800150e:	4013      	ands	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	409a      	lsls	r2, r3
 8001516:	0013      	movs	r3, r2
 8001518:	43da      	mvns	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2107      	movs	r1, #7
 8001528:	400b      	ands	r3, r1
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	409a      	lsls	r2, r3
 800152e:	0013      	movs	r3, r2
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	6939      	ldr	r1, [r7, #16]
 8001542:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	409a      	lsls	r2, r3
 8001552:	0013      	movs	r3, r2
 8001554:	43da      	mvns	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2203      	movs	r2, #3
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	409a      	lsls	r2, r3
 800156a:	0013      	movs	r3, r2
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d00b      	beq.n	8001598 <HAL_GPIO_Init+0xdc>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800158c:	2b11      	cmp	r3, #17
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b12      	cmp	r3, #18
 8001596:	d130      	bne.n	80015fa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	409a      	lsls	r2, r3
 80015a6:	0013      	movs	r3, r2
 80015a8:	43da      	mvns	r2, r3
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	409a      	lsls	r2, r3
 80015ba:	0013      	movs	r3, r2
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80015ce:	2201      	movs	r2, #1
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	43da      	mvns	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	2201      	movs	r2, #1
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	43da      	mvns	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	055b      	lsls	r3, r3, #21
 8001632:	4013      	ands	r3, r2
 8001634:	d100      	bne.n	8001638 <HAL_GPIO_Init+0x17c>
 8001636:	e0a0      	b.n	800177a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001638:	4b57      	ldr	r3, [pc, #348]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 800163a:	4a57      	ldr	r2, [pc, #348]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 800163c:	6992      	ldr	r2, [r2, #24]
 800163e:	2101      	movs	r1, #1
 8001640:	430a      	orrs	r2, r1
 8001642:	619a      	str	r2, [r3, #24]
 8001644:	4b54      	ldr	r3, [pc, #336]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_GPIO_Init+0x2e0>)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	589b      	ldr	r3, [r3, r2]
 800165c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2203      	movs	r2, #3
 8001662:	4013      	ands	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	409a      	lsls	r2, r3
 800166a:	0013      	movs	r3, r2
 800166c:	43da      	mvns	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	2390      	movs	r3, #144	; 0x90
 8001678:	05db      	lsls	r3, r3, #23
 800167a:	429a      	cmp	r2, r3
 800167c:	d019      	beq.n	80016b2 <HAL_GPIO_Init+0x1f6>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a47      	ldr	r2, [pc, #284]	; (80017a0 <HAL_GPIO_Init+0x2e4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0x1f2>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a46      	ldr	r2, [pc, #280]	; (80017a4 <HAL_GPIO_Init+0x2e8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00d      	beq.n	80016aa <HAL_GPIO_Init+0x1ee>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a45      	ldr	r2, [pc, #276]	; (80017a8 <HAL_GPIO_Init+0x2ec>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x1ea>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a44      	ldr	r2, [pc, #272]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_GPIO_Init+0x1e6>
 800169e:	2304      	movs	r3, #4
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x1f8>
 80016a2:	2305      	movs	r3, #5
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x1f8>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x1f8>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x1f8>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x1f8>
 80016b2:	2300      	movs	r3, #0
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	2103      	movs	r1, #3
 80016b8:	400a      	ands	r2, r1
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	; (800179c <HAL_GPIO_Init+0x2e0>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_GPIO_Init+0x2f4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43da      	mvns	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	025b      	lsls	r3, r3, #9
 80016ea:	4013      	ands	r3, r2
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <HAL_GPIO_Init+0x2f4>)
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <HAL_GPIO_Init+0x2f4>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43da      	mvns	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	029b      	lsls	r3, r3, #10
 8001714:	4013      	ands	r3, r2
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_GPIO_Init+0x2f4>)
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <HAL_GPIO_Init+0x2f4>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43da      	mvns	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	035b      	lsls	r3, r3, #13
 800173e:	4013      	ands	r3, r2
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_GPIO_Init+0x2f4>)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_GPIO_Init+0x2f4>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43da      	mvns	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	039b      	lsls	r3, r3, #14
 8001768:	4013      	ands	r3, r2
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_GPIO_Init+0x2f4>)
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	40da      	lsrs	r2, r3
 8001788:	1e13      	subs	r3, r2, #0
 800178a:	d000      	beq.n	800178e <HAL_GPIO_Init+0x2d2>
 800178c:	e6a2      	b.n	80014d4 <HAL_GPIO_Init+0x18>
  } 
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b006      	add	sp, #24
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	48000400 	.word	0x48000400
 80017a4:	48000800 	.word	0x48000800
 80017a8:	48000c00 	.word	0x48000c00
 80017ac:	48001000 	.word	0x48001000
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	000a      	movs	r2, r1
 80017be:	1cbb      	adds	r3, r7, #2
 80017c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	1cba      	adds	r2, r7, #2
 80017c8:	8812      	ldrh	r2, [r2, #0]
 80017ca:	4013      	ands	r3, r2
 80017cc:	d004      	beq.n	80017d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80017ce:	230f      	movs	r3, #15
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e003      	b.n	80017e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017d8:	230f      	movs	r3, #15
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80017e0:	230f      	movs	r3, #15
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	781b      	ldrb	r3, [r3, #0]
  }
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b004      	add	sp, #16
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	0008      	movs	r0, r1
 80017f8:	0011      	movs	r1, r2
 80017fa:	1cbb      	adds	r3, r7, #2
 80017fc:	1c02      	adds	r2, r0, #0
 80017fe:	801a      	strh	r2, [r3, #0]
 8001800:	1c7b      	adds	r3, r7, #1
 8001802:	1c0a      	adds	r2, r1, #0
 8001804:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001806:	1c7b      	adds	r3, r7, #1
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180e:	1cbb      	adds	r3, r7, #2
 8001810:	881a      	ldrh	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001816:	e003      	b.n	8001820 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001818:	1cbb      	adds	r3, r7, #2
 800181a:	881a      	ldrh	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b002      	add	sp, #8
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	000a      	movs	r2, r1
 8001832:	1cbb      	adds	r3, r7, #2
 8001834:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	1cbb      	adds	r3, r7, #2
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	405a      	eors	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	615a      	str	r2, [r3, #20]
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	4013      	ands	r3, r2
 8001860:	d100      	bne.n	8001864 <HAL_RCC_OscConfig+0x18>
 8001862:	e08d      	b.n	8001980 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001864:	4bc5      	ldr	r3, [pc, #788]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	220c      	movs	r2, #12
 800186a:	4013      	ands	r3, r2
 800186c:	2b04      	cmp	r3, #4
 800186e:	d00e      	beq.n	800188e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001870:	4bc2      	ldr	r3, [pc, #776]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	220c      	movs	r2, #12
 8001876:	4013      	ands	r3, r2
 8001878:	2b08      	cmp	r3, #8
 800187a:	d116      	bne.n	80018aa <HAL_RCC_OscConfig+0x5e>
 800187c:	4bbf      	ldr	r3, [pc, #764]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	23c0      	movs	r3, #192	; 0xc0
 8001882:	025b      	lsls	r3, r3, #9
 8001884:	401a      	ands	r2, r3
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	429a      	cmp	r2, r3
 800188c:	d10d      	bne.n	80018aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188e:	4bbb      	ldr	r3, [pc, #748]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	029b      	lsls	r3, r3, #10
 8001896:	4013      	ands	r3, r2
 8001898:	d100      	bne.n	800189c <HAL_RCC_OscConfig+0x50>
 800189a:	e070      	b.n	800197e <HAL_RCC_OscConfig+0x132>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d000      	beq.n	80018a6 <HAL_RCC_OscConfig+0x5a>
 80018a4:	e06b      	b.n	800197e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e327      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_OscConfig+0x76>
 80018b2:	4bb2      	ldr	r3, [pc, #712]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80018b4:	4ab1      	ldr	r2, [pc, #708]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0249      	lsls	r1, r1, #9
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e02f      	b.n	8001922 <HAL_RCC_OscConfig+0xd6>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x98>
 80018ca:	4bac      	ldr	r3, [pc, #688]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80018cc:	4aab      	ldr	r2, [pc, #684]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	49ab      	ldr	r1, [pc, #684]	; (8001b80 <HAL_RCC_OscConfig+0x334>)
 80018d2:	400a      	ands	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	4ba9      	ldr	r3, [pc, #676]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80018d8:	4aa8      	ldr	r2, [pc, #672]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	49a9      	ldr	r1, [pc, #676]	; (8001b84 <HAL_RCC_OscConfig+0x338>)
 80018de:	400a      	ands	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e01e      	b.n	8001922 <HAL_RCC_OscConfig+0xd6>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d10e      	bne.n	800190a <HAL_RCC_OscConfig+0xbe>
 80018ec:	4ba3      	ldr	r3, [pc, #652]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80018ee:	4aa3      	ldr	r2, [pc, #652]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	02c9      	lsls	r1, r1, #11
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	4ba0      	ldr	r3, [pc, #640]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80018fc:	4a9f      	ldr	r2, [pc, #636]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	0249      	lsls	r1, r1, #9
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e00b      	b.n	8001922 <HAL_RCC_OscConfig+0xd6>
 800190a:	4b9c      	ldr	r3, [pc, #624]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 800190c:	4a9b      	ldr	r2, [pc, #620]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	499b      	ldr	r1, [pc, #620]	; (8001b80 <HAL_RCC_OscConfig+0x334>)
 8001912:	400a      	ands	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	4b99      	ldr	r3, [pc, #612]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001918:	4a98      	ldr	r2, [pc, #608]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	4999      	ldr	r1, [pc, #612]	; (8001b84 <HAL_RCC_OscConfig+0x338>)
 800191e:	400a      	ands	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d014      	beq.n	8001954 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7fe ffbb 	bl	80008a4 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001934:	f7fe ffb6 	bl	80008a4 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e2d9      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b8d      	ldr	r3, [pc, #564]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	029b      	lsls	r3, r3, #10
 800194e:	4013      	ands	r3, r2
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0xe8>
 8001952:	e015      	b.n	8001980 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7fe ffa6 	bl	80008a4 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195e:	f7fe ffa1 	bl	80008a4 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b64      	cmp	r3, #100	; 0x64
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e2c4      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001970:	4b82      	ldr	r3, [pc, #520]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	029b      	lsls	r3, r3, #10
 8001978:	4013      	ands	r3, r2
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x112>
 800197c:	e000      	b.n	8001980 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d100      	bne.n	800198c <HAL_RCC_OscConfig+0x140>
 800198a:	e06c      	b.n	8001a66 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800198c:	4b7b      	ldr	r3, [pc, #492]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	220c      	movs	r2, #12
 8001992:	4013      	ands	r3, r2
 8001994:	d00e      	beq.n	80019b4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001996:	4b79      	ldr	r3, [pc, #484]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	220c      	movs	r2, #12
 800199c:	4013      	ands	r3, r2
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d11f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x196>
 80019a2:	4b76      	ldr	r3, [pc, #472]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	23c0      	movs	r3, #192	; 0xc0
 80019a8:	025b      	lsls	r3, r3, #9
 80019aa:	401a      	ands	r2, r3
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d116      	bne.n	80019e2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b4:	4b71      	ldr	r3, [pc, #452]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2202      	movs	r2, #2
 80019ba:	4013      	ands	r3, r2
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x17e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e297      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4a6c      	ldr	r2, [pc, #432]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80019cc:	4b6b      	ldr	r3, [pc, #428]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	21f8      	movs	r1, #248	; 0xf8
 80019d2:	438b      	bics	r3, r1
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	430b      	orrs	r3, r1
 80019de:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e0:	e041      	b.n	8001a66 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d024      	beq.n	8001a34 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ea:	4b64      	ldr	r3, [pc, #400]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80019ec:	4a63      	ldr	r2, [pc, #396]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7fe ff55 	bl	80008a4 <HAL_GetTick>
 80019fa:	0003      	movs	r3, r0
 80019fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a00:	f7fe ff50 	bl	80008a4 <HAL_GetTick>
 8001a04:	0002      	movs	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e273      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b5a      	ldr	r3, [pc, #360]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2202      	movs	r2, #2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d0f1      	beq.n	8001a00 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1c:	4a57      	ldr	r2, [pc, #348]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001a1e:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	21f8      	movs	r1, #248	; 0xf8
 8001a24:	438b      	bics	r3, r1
 8001a26:	0019      	movs	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e018      	b.n	8001a66 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a34:	4b51      	ldr	r3, [pc, #324]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001a36:	4a51      	ldr	r2, [pc, #324]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	438a      	bics	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7fe ff30 	bl	80008a4 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7fe ff2b 	bl	80008a4 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e24e      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5c:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2202      	movs	r2, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	d1f1      	bne.n	8001a4a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d036      	beq.n	8001ade <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d019      	beq.n	8001aac <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a78:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001a7a:	4a40      	ldr	r2, [pc, #256]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a7e:	2101      	movs	r1, #1
 8001a80:	430a      	orrs	r2, r1
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7fe ff0e 	bl	80008a4 <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8e:	f7fe ff09 	bl	80008a4 <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e22c      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d0f1      	beq.n	8001a8e <HAL_RCC_OscConfig+0x242>
 8001aaa:	e018      	b.n	8001ade <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001aae:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	438a      	bics	r2, r1
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab8:	f7fe fef4 	bl	80008a4 <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac2:	f7fe feef 	bl	80008a4 <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e212      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	2202      	movs	r2, #2
 8001ada:	4013      	ands	r3, r2
 8001adc:	d1f1      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d100      	bne.n	8001aea <HAL_RCC_OscConfig+0x29e>
 8001ae8:	e0b6      	b.n	8001c58 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2317      	movs	r3, #23
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001af4:	69da      	ldr	r2, [r3, #28]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	055b      	lsls	r3, r3, #21
 8001afa:	4013      	ands	r3, r2
 8001afc:	d111      	bne.n	8001b22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001b00:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001b02:	69d2      	ldr	r2, [r2, #28]
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	0549      	lsls	r1, r1, #21
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	61da      	str	r2, [r3, #28]
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001b0e:	69da      	ldr	r2, [r3, #28]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	055b      	lsls	r3, r3, #21
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b1a:	2317      	movs	r3, #23
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_RCC_OscConfig+0x33c>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d11a      	bne.n	8001b64 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_RCC_OscConfig+0x33c>)
 8001b30:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <HAL_RCC_OscConfig+0x33c>)
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	0049      	lsls	r1, r1, #1
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3c:	f7fe feb2 	bl	80008a4 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b46:	f7fe fead 	bl	80008a4 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	; 0x64
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e1d0      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_OscConfig+0x33c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4013      	ands	r3, r2
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d10f      	bne.n	8001b8c <HAL_RCC_OscConfig+0x340>
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001b6e:	4a03      	ldr	r2, [pc, #12]	; (8001b7c <HAL_RCC_OscConfig+0x330>)
 8001b70:	6a12      	ldr	r2, [r2, #32]
 8001b72:	2101      	movs	r1, #1
 8001b74:	430a      	orrs	r2, r1
 8001b76:	621a      	str	r2, [r3, #32]
 8001b78:	e036      	b.n	8001be8 <HAL_RCC_OscConfig+0x39c>
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	fffeffff 	.word	0xfffeffff
 8001b84:	fffbffff 	.word	0xfffbffff
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10c      	bne.n	8001bae <HAL_RCC_OscConfig+0x362>
 8001b94:	4bc9      	ldr	r3, [pc, #804]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001b96:	4ac9      	ldr	r2, [pc, #804]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001b98:	6a12      	ldr	r2, [r2, #32]
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	621a      	str	r2, [r3, #32]
 8001ba0:	4bc6      	ldr	r3, [pc, #792]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001ba2:	4ac6      	ldr	r2, [pc, #792]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001ba4:	6a12      	ldr	r2, [r2, #32]
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	438a      	bics	r2, r1
 8001baa:	621a      	str	r2, [r3, #32]
 8001bac:	e01c      	b.n	8001be8 <HAL_RCC_OscConfig+0x39c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x384>
 8001bb6:	4bc1      	ldr	r3, [pc, #772]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001bb8:	4ac0      	ldr	r2, [pc, #768]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001bba:	6a12      	ldr	r2, [r2, #32]
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	621a      	str	r2, [r3, #32]
 8001bc2:	4bbe      	ldr	r3, [pc, #760]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001bc4:	4abd      	ldr	r2, [pc, #756]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001bc6:	6a12      	ldr	r2, [r2, #32]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	621a      	str	r2, [r3, #32]
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0x39c>
 8001bd0:	4bba      	ldr	r3, [pc, #744]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001bd2:	4aba      	ldr	r2, [pc, #744]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001bd4:	6a12      	ldr	r2, [r2, #32]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	438a      	bics	r2, r1
 8001bda:	621a      	str	r2, [r3, #32]
 8001bdc:	4bb7      	ldr	r3, [pc, #732]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001bde:	4ab7      	ldr	r2, [pc, #732]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001be0:	6a12      	ldr	r2, [r2, #32]
 8001be2:	2104      	movs	r1, #4
 8001be4:	438a      	bics	r2, r1
 8001be6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d014      	beq.n	8001c1a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7fe fe58 	bl	80008a4 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	e009      	b.n	8001c0e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7fe fe53 	bl	80008a4 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	4aae      	ldr	r2, [pc, #696]	; (8001ec0 <HAL_RCC_OscConfig+0x674>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e175      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0e:	4bab      	ldr	r3, [pc, #684]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	2202      	movs	r2, #2
 8001c14:	4013      	ands	r3, r2
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3ae>
 8001c18:	e013      	b.n	8001c42 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7fe fe43 	bl	80008a4 <HAL_GetTick>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c22:	e009      	b.n	8001c38 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7fe fe3e 	bl	80008a4 <HAL_GetTick>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	4aa4      	ldr	r2, [pc, #656]	; (8001ec0 <HAL_RCC_OscConfig+0x674>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e160      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c38:	4ba0      	ldr	r3, [pc, #640]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c42:	2317      	movs	r3, #23
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4c:	4b9b      	ldr	r3, [pc, #620]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001c4e:	4a9b      	ldr	r2, [pc, #620]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001c50:	69d2      	ldr	r2, [r2, #28]
 8001c52:	499c      	ldr	r1, [pc, #624]	; (8001ec4 <HAL_RCC_OscConfig+0x678>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d063      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d12a      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c6a:	4b94      	ldr	r3, [pc, #592]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001c6c:	4a93      	ldr	r2, [pc, #588]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001c6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c70:	2104      	movs	r1, #4
 8001c72:	430a      	orrs	r2, r1
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c76:	4b91      	ldr	r3, [pc, #580]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001c78:	4a90      	ldr	r2, [pc, #576]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001c7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7fe fe0f 	bl	80008a4 <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c8c:	f7fe fe0a 	bl	80008a4 <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e12d      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c9e:	4b87      	ldr	r3, [pc, #540]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d0f1      	beq.n	8001c8c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ca8:	4a84      	ldr	r2, [pc, #528]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001caa:	4b84      	ldr	r3, [pc, #528]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cae:	21f8      	movs	r1, #248	; 0xf8
 8001cb0:	438b      	bics	r3, r1
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	6353      	str	r3, [r2, #52]	; 0x34
 8001cbe:	e034      	b.n	8001d2a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	3305      	adds	r3, #5
 8001cc6:	d111      	bne.n	8001cec <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001cc8:	4b7c      	ldr	r3, [pc, #496]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001cca:	4a7c      	ldr	r2, [pc, #496]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cce:	2104      	movs	r1, #4
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cd4:	4a79      	ldr	r2, [pc, #484]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001cd6:	4b79      	ldr	r3, [pc, #484]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	21f8      	movs	r1, #248	; 0xf8
 8001cdc:	438b      	bics	r3, r1
 8001cde:	0019      	movs	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	6353      	str	r3, [r2, #52]	; 0x34
 8001cea:	e01e      	b.n	8001d2a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cec:	4b73      	ldr	r3, [pc, #460]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001cee:	4a73      	ldr	r2, [pc, #460]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001cf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001cf8:	4b70      	ldr	r3, [pc, #448]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001cfa:	4a70      	ldr	r2, [pc, #448]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001cfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cfe:	2101      	movs	r1, #1
 8001d00:	438a      	bics	r2, r1
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7fe fdce 	bl	80008a4 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d0e:	f7fe fdc9 	bl	80008a4 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0ec      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d20:	4b66      	ldr	r3, [pc, #408]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d24:	2202      	movs	r2, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	d1f1      	bne.n	8001d0e <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	4013      	ands	r3, r2
 8001d32:	d05c      	beq.n	8001dee <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d34:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	220c      	movs	r2, #12
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d00e      	beq.n	8001d5e <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d40:	4b5e      	ldr	r3, [pc, #376]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	220c      	movs	r2, #12
 8001d46:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d114      	bne.n	8001d76 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d4c:	4b5b      	ldr	r3, [pc, #364]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	23c0      	movs	r3, #192	; 0xc0
 8001d52:	025b      	lsls	r3, r3, #9
 8001d54:	401a      	ands	r2, r3
 8001d56:	23c0      	movs	r3, #192	; 0xc0
 8001d58:	025b      	lsls	r3, r3, #9
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d5e:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	025b      	lsls	r3, r3, #9
 8001d66:	4013      	ands	r3, r2
 8001d68:	d040      	beq.n	8001dec <HAL_RCC_OscConfig+0x5a0>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d03c      	beq.n	8001dec <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0c1      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01b      	beq.n	8001db6 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d7e:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001d80:	4a4e      	ldr	r2, [pc, #312]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001d82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	0249      	lsls	r1, r1, #9
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fd8a 	bl	80008a4 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d96:	f7fe fd85 	bl	80008a4 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e0a8      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001da8:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	025b      	lsls	r3, r3, #9
 8001db0:	4013      	ands	r3, r2
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x54a>
 8001db4:	e01b      	b.n	8001dee <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001db8:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001dba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dbc:	4942      	ldr	r1, [pc, #264]	; (8001ec8 <HAL_RCC_OscConfig+0x67c>)
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7fe fd6f 	bl	80008a4 <HAL_GetTick>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dcc:	f7fe fd6a 	bl	80008a4 <HAL_GetTick>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e08d      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001dde:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	025b      	lsls	r3, r3, #9
 8001de6:	4013      	ands	r3, r2
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x580>
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001dec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d100      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5ac>
 8001df6:	e07f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	220c      	movs	r2, #12
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d100      	bne.n	8001e06 <HAL_RCC_OscConfig+0x5ba>
 8001e04:	e076      	b.n	8001ef4 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d14b      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001e10:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	492d      	ldr	r1, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x680>)
 8001e16:	400a      	ands	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe fd43 	bl	80008a4 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e24:	f7fe fd3e 	bl	80008a4 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e061      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	049b      	lsls	r3, r3, #18
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e42:	4a1e      	ldr	r2, [pc, #120]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	210f      	movs	r1, #15
 8001e4a:	438b      	bics	r3, r1
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	430b      	orrs	r3, r1
 8001e54:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e56:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	491c      	ldr	r1, [pc, #112]	; (8001ed0 <HAL_RCC_OscConfig+0x684>)
 8001e5e:	4019      	ands	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	4303      	orrs	r3, r0
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001e70:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	0449      	lsls	r1, r1, #17
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fd12 	bl	80008a4 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e86:	f7fe fd0d 	bl	80008a4 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e030      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	049b      	lsls	r3, r3, #18
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x63a>
 8001ea4:	e028      	b.n	8001ef8 <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_RCC_OscConfig+0x670>)
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	4907      	ldr	r1, [pc, #28]	; (8001ecc <HAL_RCC_OscConfig+0x680>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fcf7 	bl	80008a4 <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x69a>
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	00001388 	.word	0x00001388
 8001ec4:	efffffff 	.word	0xefffffff
 8001ec8:	fffeffff 	.word	0xfffeffff
 8001ecc:	feffffff 	.word	0xfeffffff
 8001ed0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7fe fce6 	bl	80008a4 <HAL_GetTick>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e009      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_RCC_OscConfig+0x6b8>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	049b      	lsls	r3, r3, #18
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x688>
 8001ef2:	e001      	b.n	8001ef8 <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	0018      	movs	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b006      	add	sp, #24
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f16:	4b7a      	ldr	r3, [pc, #488]	; (8002100 <HAL_RCC_ClockConfig+0x1f8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d211      	bcs.n	8001f48 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f24:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_RCC_ClockConfig+0x1f8>)
 8001f26:	4a76      	ldr	r2, [pc, #472]	; (8002100 <HAL_RCC_ClockConfig+0x1f8>)
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	0011      	movs	r1, r2
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f36:	4b72      	ldr	r3, [pc, #456]	; (8002100 <HAL_RCC_ClockConfig+0x1f8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0d7      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f52:	4a6c      	ldr	r2, [pc, #432]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 8001f54:	4b6b      	ldr	r3, [pc, #428]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	21f0      	movs	r1, #240	; 0xf0
 8001f5a:	438b      	bics	r3, r1
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	430b      	orrs	r3, r1
 8001f64:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d100      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x6a>
 8001f70:	e089      	b.n	8002086 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b62      	ldr	r3, [pc, #392]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	029b      	lsls	r3, r3, #10
 8001f82:	4013      	ands	r3, r2
 8001f84:	d120      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0b6      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b5c      	ldr	r3, [pc, #368]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	049b      	lsls	r3, r3, #18
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d114      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0aa      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001faa:	4b56      	ldr	r3, [pc, #344]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 8001fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	025b      	lsls	r3, r3, #9
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d108      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e09e      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e097      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 8001fca:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2103      	movs	r1, #3
 8001fd0:	438b      	bics	r3, r1
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe fc62 	bl	80008a4 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d111      	bne.n	8002010 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fec:	e009      	b.n	8002002 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fee:	f7fe fc59 	bl	80008a4 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	4a43      	ldr	r2, [pc, #268]	; (8002108 <HAL_RCC_ClockConfig+0x200>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e07a      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002002:	4b40      	ldr	r3, [pc, #256]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	220c      	movs	r2, #12
 8002008:	4013      	ands	r3, r2
 800200a:	2b04      	cmp	r3, #4
 800200c:	d1ef      	bne.n	8001fee <HAL_RCC_ClockConfig+0xe6>
 800200e:	e03a      	b.n	8002086 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d111      	bne.n	800203c <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002018:	e009      	b.n	800202e <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201a:	f7fe fc43 	bl	80008a4 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4a38      	ldr	r2, [pc, #224]	; (8002108 <HAL_RCC_ClockConfig+0x200>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e064      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202e:	4b35      	ldr	r3, [pc, #212]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	220c      	movs	r2, #12
 8002034:	4013      	ands	r3, r2
 8002036:	2b08      	cmp	r3, #8
 8002038:	d1ef      	bne.n	800201a <HAL_RCC_ClockConfig+0x112>
 800203a:	e024      	b.n	8002086 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d11b      	bne.n	800207c <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8002044:	e009      	b.n	800205a <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002046:	f7fe fc2d 	bl	80008a4 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	4a2d      	ldr	r2, [pc, #180]	; (8002108 <HAL_RCC_ClockConfig+0x200>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e04e      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	220c      	movs	r2, #12
 8002060:	4013      	ands	r3, r2
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d1ef      	bne.n	8002046 <HAL_RCC_ClockConfig+0x13e>
 8002066:	e00e      	b.n	8002086 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7fe fc1c 	bl	80008a4 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	4a25      	ldr	r2, [pc, #148]	; (8002108 <HAL_RCC_ClockConfig+0x200>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e03d      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	220c      	movs	r2, #12
 8002082:	4013      	ands	r3, r2
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCC_ClockConfig+0x1f8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	401a      	ands	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d911      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_RCC_ClockConfig+0x1f8>)
 8002096:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <HAL_RCC_ClockConfig+0x1f8>)
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	2101      	movs	r1, #1
 800209c:	438a      	bics	r2, r1
 800209e:	0011      	movs	r1, r2
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_RCC_ClockConfig+0x1f8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2201      	movs	r2, #1
 80020ac:	401a      	ands	r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e01f      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	d008      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4910      	ldr	r1, [pc, #64]	; (800210c <HAL_RCC_ClockConfig+0x204>)
 80020ca:	4019      	ands	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020d4:	f000 f820 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020d8:	0001      	movs	r1, r0
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	220f      	movs	r2, #15
 80020e2:	4013      	ands	r3, r2
 80020e4:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <HAL_RCC_ClockConfig+0x208>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	000a      	movs	r2, r1
 80020ea:	40da      	lsrs	r2, r3
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x20c>)
 80020ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f005 fc9b 	bl	8007a2c <HAL_InitTick>
  
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40022000 	.word	0x40022000
 8002104:	40021000 	.word	0x40021000
 8002108:	00001388 	.word	0x00001388
 800210c:	fffff8ff 	.word	0xfffff8ff
 8002110:	08008b68 	.word	0x08008b68
 8002114:	20000064 	.word	0x20000064

08002118 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b08f      	sub	sp, #60	; 0x3c
 800211c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800211e:	2314      	movs	r3, #20
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	4a37      	ldr	r2, [pc, #220]	; (8002200 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002124:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002126:	c313      	stmia	r3!, {r0, r1, r4}
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	4a35      	ldr	r2, [pc, #212]	; (8002204 <HAL_RCC_GetSysClockFreq+0xec>)
 8002130:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002132:	c313      	stmia	r3!, {r0, r1, r4}
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800213c:	2300      	movs	r3, #0
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002140:	2300      	movs	r3, #0
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800214c:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_RCC_GetSysClockFreq+0xf0>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002154:	220c      	movs	r2, #12
 8002156:	4013      	ands	r3, r2
 8002158:	2b08      	cmp	r3, #8
 800215a:	d006      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x52>
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d043      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0xd0>
 8002160:	2b04      	cmp	r3, #4
 8002162:	d144      	bne.n	80021ee <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002168:	e044      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216c:	0c9b      	lsrs	r3, r3, #18
 800216e:	220f      	movs	r2, #15
 8002170:	4013      	ands	r3, r2
 8002172:	2214      	movs	r2, #20
 8002174:	18ba      	adds	r2, r7, r2
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_RCC_GetSysClockFreq+0xf0>)
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	220f      	movs	r2, #15
 8002180:	4013      	ands	r3, r2
 8002182:	1d3a      	adds	r2, r7, #4
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800218a:	23c0      	movs	r3, #192	; 0xc0
 800218c:	025b      	lsls	r3, r3, #9
 800218e:	401a      	ands	r2, r3
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	025b      	lsls	r3, r3, #9
 8002194:	429a      	cmp	r2, r3
 8002196:	d109      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800219a:	481c      	ldr	r0, [pc, #112]	; (800220c <HAL_RCC_GetSysClockFreq+0xf4>)
 800219c:	f7fd ffbc 	bl	8000118 <__udivsi3>
 80021a0:	0003      	movs	r3, r0
 80021a2:	001a      	movs	r2, r3
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	4353      	muls	r3, r2
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
 80021aa:	e01a      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80021ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ae:	23c0      	movs	r3, #192	; 0xc0
 80021b0:	025b      	lsls	r3, r3, #9
 80021b2:	401a      	ands	r2, r3
 80021b4:	23c0      	movs	r3, #192	; 0xc0
 80021b6:	025b      	lsls	r3, r3, #9
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d109      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80021bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021be:	4814      	ldr	r0, [pc, #80]	; (8002210 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c0:	f7fd ffaa 	bl	8000118 <__udivsi3>
 80021c4:	0003      	movs	r3, r0
 80021c6:	001a      	movs	r2, r3
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	4353      	muls	r3, r2
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80021d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021d2:	480e      	ldr	r0, [pc, #56]	; (800220c <HAL_RCC_GetSysClockFreq+0xf4>)
 80021d4:	f7fd ffa0 	bl	8000118 <__udivsi3>
 80021d8:	0003      	movs	r3, r0
 80021da:	001a      	movs	r2, r3
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	4353      	muls	r3, r2
 80021e0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80021e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021e6:	e005      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021ec:	e002      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_RCC_GetSysClockFreq+0xf4>)
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b00f      	add	sp, #60	; 0x3c
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	08008800 	.word	0x08008800
 8002204:	08008810 	.word	0x08008810
 8002208:	40021000 	.word	0x40021000
 800220c:	007a1200 	.word	0x007a1200
 8002210:	02dc6c00 	.word	0x02dc6c00

08002214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002218:	4b02      	ldr	r3, [pc, #8]	; (8002224 <HAL_RCC_GetHCLKFreq+0x10>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	20000064 	.word	0x20000064

08002228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800222c:	f7ff fff2 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002230:	0001      	movs	r1, r0
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	2207      	movs	r2, #7
 800223a:	4013      	ands	r3, r2
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	40d9      	lsrs	r1, r3
 8002242:	000b      	movs	r3, r1
}    
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	40021000 	.word	0x40021000
 8002250:	08008b78 	.word	0x08008b78

08002254 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_RCC_GetClockConfig+0x4c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2203      	movs	r2, #3
 800226a:	401a      	ands	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_GetClockConfig+0x4c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	22f0      	movs	r2, #240	; 0xf0
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_RCC_GetClockConfig+0x4c>)
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	23e0      	movs	r3, #224	; 0xe0
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	401a      	ands	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_RCC_GetClockConfig+0x50>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2201      	movs	r2, #1
 8002290:	401a      	ands	r2, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	601a      	str	r2, [r3, #0]
}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	46bd      	mov	sp, r7
 800229a:	b002      	add	sp, #8
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	025b      	lsls	r3, r3, #9
 80022c0:	4013      	ands	r3, r2
 80022c2:	d100      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80022c4:	e08e      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80022c6:	2317      	movs	r3, #23
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ce:	4b6e      	ldr	r3, [pc, #440]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022d0:	69da      	ldr	r2, [r3, #28]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	055b      	lsls	r3, r3, #21
 80022d6:	4013      	ands	r3, r2
 80022d8:	d111      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	4b6b      	ldr	r3, [pc, #428]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022dc:	4a6a      	ldr	r2, [pc, #424]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022de:	69d2      	ldr	r2, [r2, #28]
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	0549      	lsls	r1, r1, #21
 80022e4:	430a      	orrs	r2, r1
 80022e6:	61da      	str	r2, [r3, #28]
 80022e8:	4b67      	ldr	r3, [pc, #412]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022ea:	69da      	ldr	r2, [r3, #28]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	055b      	lsls	r3, r3, #21
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f6:	2317      	movs	r3, #23
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4013      	ands	r3, r2
 8002308:	d11a      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230a:	4b60      	ldr	r3, [pc, #384]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800230c:	4a5f      	ldr	r2, [pc, #380]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	0049      	lsls	r1, r1, #1
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002318:	f7fe fac4 	bl	80008a4 <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	e008      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002322:	f7fe fabf 	bl	80008a4 <HAL_GetTick>
 8002326:	0002      	movs	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b64      	cmp	r3, #100	; 0x64
 800232e:	d901      	bls.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0a4      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4013      	ands	r3, r2
 800233e:	d0f0      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002340:	4b51      	ldr	r3, [pc, #324]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002342:	6a1a      	ldr	r2, [r3, #32]
 8002344:	23c0      	movs	r3, #192	; 0xc0
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d034      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	23c0      	movs	r3, #192	; 0xc0
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	401a      	ands	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	429a      	cmp	r2, r3
 8002360:	d02c      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002362:	4b49      	ldr	r3, [pc, #292]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a4a      	ldr	r2, [pc, #296]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002368:	4013      	ands	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800236c:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800236e:	4a46      	ldr	r2, [pc, #280]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002370:	6a12      	ldr	r2, [r2, #32]
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0249      	lsls	r1, r1, #9
 8002376:	430a      	orrs	r2, r1
 8002378:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800237a:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800237c:	4a42      	ldr	r2, [pc, #264]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800237e:	6a12      	ldr	r2, [r2, #32]
 8002380:	4944      	ldr	r1, [pc, #272]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002382:	400a      	ands	r2, r1
 8002384:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002386:	4b40      	ldr	r3, [pc, #256]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	4013      	ands	r3, r2
 8002392:	d013      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe fa86 	bl	80008a4 <HAL_GetTick>
 8002398:	0003      	movs	r3, r0
 800239a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	e009      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe fa81 	bl	80008a4 <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e065      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b2:	4b35      	ldr	r3, [pc, #212]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	2202      	movs	r2, #2
 80023b8:	4013      	ands	r3, r2
 80023ba:	d0f0      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023bc:	4a32      	ldr	r2, [pc, #200]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023be:	4b32      	ldr	r3, [pc, #200]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4933      	ldr	r1, [pc, #204]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80023c4:	4019      	ands	r1, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	430b      	orrs	r3, r1
 80023cc:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023ce:	2317      	movs	r3, #23
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023da:	4a2b      	ldr	r2, [pc, #172]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023dc:	69d2      	ldr	r2, [r2, #28]
 80023de:	492f      	ldr	r1, [pc, #188]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80023e0:	400a      	ands	r2, r1
 80023e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	4013      	ands	r3, r2
 80023ec:	d009      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ee:	4a26      	ldr	r2, [pc, #152]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	2103      	movs	r1, #3
 80023f6:	438b      	bics	r3, r1
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	430b      	orrs	r3, r1
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2202      	movs	r2, #2
 8002408:	4013      	ands	r3, r2
 800240a:	d008      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800240c:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4923      	ldr	r1, [pc, #140]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002414:	4019      	ands	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	430b      	orrs	r3, r1
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2220      	movs	r2, #32
 8002424:	4013      	ands	r3, r2
 8002426:	d009      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002428:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800242a:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	2110      	movs	r1, #16
 8002430:	438b      	bics	r3, r1
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	430b      	orrs	r3, r1
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	4013      	ands	r3, r2
 8002446:	d009      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	438b      	bics	r3, r1
 8002452:	0019      	movs	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	430b      	orrs	r3, r1
 800245a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4013      	ands	r3, r2
 8002466:	d009      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002468:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	2140      	movs	r1, #64	; 0x40
 8002470:	438b      	bics	r3, r1
 8002472:	0019      	movs	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	430b      	orrs	r3, r1
 800247a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b006      	add	sp, #24
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	40021000 	.word	0x40021000
 800248c:	40007000 	.word	0x40007000
 8002490:	fffffcff 	.word	0xfffffcff
 8002494:	fffeffff 	.word	0xfffeffff
 8002498:	00001388 	.word	0x00001388
 800249c:	efffffff 	.word	0xefffffff
 80024a0:	fffcffff 	.word	0xfffcffff

080024a4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e01e      	b.n	80024f4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	223d      	movs	r2, #61	; 0x3d
 80024ba:	5c9b      	ldrb	r3, [r3, r2]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d107      	bne.n	80024d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	223c      	movs	r2, #60	; 0x3c
 80024c6:	2100      	movs	r1, #0
 80024c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f005 f8fd 	bl	80076cc <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	223d      	movs	r2, #61	; 0x3d
 80024d6:	2102      	movs	r1, #2
 80024d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	0019      	movs	r1, r3
 80024e4:	0010      	movs	r0, r2
 80024e6:	f000 fb8b 	bl	8002c00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	223d      	movs	r2, #61	; 0x3d
 80024ee:	2101      	movs	r1, #1
 80024f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	68d2      	ldr	r2, [r2, #12]
 800250e:	2101      	movs	r1, #1
 8002510:	430a      	orrs	r2, r1
 8002512:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	2101      	movs	r1, #1
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	b002      	add	sp, #8
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	68d2      	ldr	r2, [r2, #12]
 8002542:	2101      	movs	r1, #1
 8002544:	438a      	bics	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4a0b      	ldr	r2, [pc, #44]	; (800257c <HAL_TIM_Base_Stop_IT+0x4c>)
 8002550:	4013      	ands	r3, r2
 8002552:	d10d      	bne.n	8002570 <HAL_TIM_Base_Stop_IT+0x40>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_TIM_Base_Stop_IT+0x50>)
 800255c:	4013      	ands	r3, r2
 800255e:	d107      	bne.n	8002570 <HAL_TIM_Base_Stop_IT+0x40>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	2101      	movs	r1, #1
 800256c:	438a      	bics	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	00001111 	.word	0x00001111
 8002580:	00000444 	.word	0x00000444

08002584 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e01e      	b.n	80025d4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	223d      	movs	r2, #61	; 0x3d
 800259a:	5c9b      	ldrb	r3, [r3, r2]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d107      	bne.n	80025b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	223c      	movs	r2, #60	; 0x3c
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f005 f85b 	bl	8007668 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	223d      	movs	r2, #61	; 0x3d
 80025b6:	2102      	movs	r1, #2
 80025b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	0019      	movs	r1, r3
 80025c4:	0010      	movs	r0, r2
 80025c6:	f000 fb1b 	bl	8002c00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	223d      	movs	r2, #61	; 0x3d
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6839      	ldr	r1, [r7, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 fe46 	bl	8003280 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a16      	ldr	r2, [pc, #88]	; (8002654 <HAL_TIM_PWM_Start+0x78>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00e      	beq.n	800261c <HAL_TIM_PWM_Start+0x40>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a15      	ldr	r2, [pc, #84]	; (8002658 <HAL_TIM_PWM_Start+0x7c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_TIM_PWM_Start+0x40>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a13      	ldr	r2, [pc, #76]	; (800265c <HAL_TIM_PWM_Start+0x80>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_TIM_PWM_Start+0x40>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <HAL_TIM_PWM_Start+0x84>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d101      	bne.n	8002620 <HAL_TIM_PWM_Start+0x44>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_TIM_PWM_Start+0x46>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	0209      	lsls	r1, r1, #8
 8002634:	430a      	orrs	r2, r1
 8002636:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	2101      	movs	r1, #1
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b002      	add	sp, #8
 8002650:	bd80      	pop	{r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	40012c00 	.word	0x40012c00
 8002658:	40014000 	.word	0x40014000
 800265c:	40014400 	.word	0x40014400
 8002660:	40014800 	.word	0x40014800

08002664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2202      	movs	r2, #2
 8002674:	4013      	ands	r3, r2
 8002676:	2b02      	cmp	r3, #2
 8002678:	d124      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	2b02      	cmp	r3, #2
 8002686:	d11d      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2203      	movs	r2, #3
 800268e:	4252      	negs	r2, r2
 8002690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2203      	movs	r2, #3
 80026a0:	4013      	ands	r3, r2
 80026a2:	d004      	beq.n	80026ae <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 fa92 	bl	8002bd0 <HAL_TIM_IC_CaptureCallback>
 80026ac:	e007      	b.n	80026be <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fa85 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 fa91 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2204      	movs	r2, #4
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d125      	bne.n	800271e <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2204      	movs	r2, #4
 80026da:	4013      	ands	r3, r2
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d11e      	bne.n	800271e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2205      	movs	r2, #5
 80026e6:	4252      	negs	r2, r2
 80026e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	23c0      	movs	r3, #192	; 0xc0
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4013      	ands	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0018      	movs	r0, r3
 8002702:	f000 fa65 	bl	8002bd0 <HAL_TIM_IC_CaptureCallback>
 8002706:	e007      	b.n	8002718 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	0018      	movs	r0, r3
 800270c:	f000 fa58 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	0018      	movs	r0, r3
 8002714:	f000 fa64 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2208      	movs	r2, #8
 8002726:	4013      	ands	r3, r2
 8002728:	2b08      	cmp	r3, #8
 800272a:	d124      	bne.n	8002776 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2208      	movs	r2, #8
 8002734:	4013      	ands	r3, r2
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11d      	bne.n	8002776 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2209      	movs	r2, #9
 8002740:	4252      	negs	r2, r2
 8002742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2204      	movs	r2, #4
 8002748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	2203      	movs	r2, #3
 8002752:	4013      	ands	r3, r2
 8002754:	d004      	beq.n	8002760 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0018      	movs	r0, r3
 800275a:	f000 fa39 	bl	8002bd0 <HAL_TIM_IC_CaptureCallback>
 800275e:	e007      	b.n	8002770 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0018      	movs	r0, r3
 8002764:	f000 fa2c 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 fa38 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2210      	movs	r2, #16
 800277e:	4013      	ands	r3, r2
 8002780:	2b10      	cmp	r3, #16
 8002782:	d125      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2210      	movs	r2, #16
 800278c:	4013      	ands	r3, r2
 800278e:	2b10      	cmp	r3, #16
 8002790:	d11e      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2211      	movs	r2, #17
 8002798:	4252      	negs	r2, r2
 800279a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2208      	movs	r2, #8
 80027a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	23c0      	movs	r3, #192	; 0xc0
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 fa0c 	bl	8002bd0 <HAL_TIM_IC_CaptureCallback>
 80027b8:	e007      	b.n	80027ca <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 f9ff 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 fa0b 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2201      	movs	r2, #1
 80027d8:	4013      	ands	r3, r2
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10f      	bne.n	80027fe <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d108      	bne.n	80027fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2202      	movs	r2, #2
 80027f2:	4252      	negs	r2, r2
 80027f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f004 fdf5 	bl	80073e8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	4013      	ands	r3, r2
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d10f      	bne.n	800282c <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2280      	movs	r2, #128	; 0x80
 8002814:	4013      	ands	r3, r2
 8002816:	2b80      	cmp	r3, #128	; 0x80
 8002818:	d108      	bne.n	800282c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2281      	movs	r2, #129	; 0x81
 8002820:	4252      	negs	r2, r2
 8002822:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0018      	movs	r0, r3
 8002828:	f000 fe04 	bl	8003434 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	4013      	ands	r3, r2
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d10f      	bne.n	800285a <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2240      	movs	r2, #64	; 0x40
 8002842:	4013      	ands	r3, r2
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d108      	bne.n	800285a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2241      	movs	r2, #65	; 0x41
 800284e:	4252      	negs	r2, r2
 8002850:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	0018      	movs	r0, r3
 8002856:	f000 f9cb 	bl	8002bf0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2220      	movs	r2, #32
 8002862:	4013      	ands	r3, r2
 8002864:	2b20      	cmp	r3, #32
 8002866:	d10f      	bne.n	8002888 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	4013      	ands	r3, r2
 8002872:	2b20      	cmp	r3, #32
 8002874:	d108      	bne.n	8002888 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2221      	movs	r2, #33	; 0x21
 800287c:	4252      	negs	r2, r2
 800287e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0018      	movs	r0, r3
 8002884:	f000 fdce 	bl	8003424 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	223c      	movs	r2, #60	; 0x3c
 80028a0:	5c9b      	ldrb	r3, [r3, r2]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e0a4      	b.n	80029f4 <HAL_TIM_PWM_ConfigChannel+0x164>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	223c      	movs	r2, #60	; 0x3c
 80028ae:	2101      	movs	r1, #1
 80028b0:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	223d      	movs	r2, #61	; 0x3d
 80028b6:	2102      	movs	r1, #2
 80028b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d029      	beq.n	8002914 <HAL_TIM_PWM_ConfigChannel+0x84>
 80028c0:	d802      	bhi.n	80028c8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 80028c6:	e08c      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d046      	beq.n	800295a <HAL_TIM_PWM_ConfigChannel+0xca>
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	d065      	beq.n	800299c <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 80028d0:	e087      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	0011      	movs	r1, r2
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 fa12 	bl	8002d04 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	6992      	ldr	r2, [r2, #24]
 80028ea:	2108      	movs	r1, #8
 80028ec:	430a      	orrs	r2, r1
 80028ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	6992      	ldr	r2, [r2, #24]
 80028fa:	2104      	movs	r1, #4
 80028fc:	438a      	bics	r2, r1
 80028fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	6991      	ldr	r1, [r2, #24]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	6912      	ldr	r2, [r2, #16]
 800290e:	430a      	orrs	r2, r1
 8002910:	619a      	str	r2, [r3, #24]
    break;
 8002912:	e066      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	0011      	movs	r1, r2
 800291c:	0018      	movs	r0, r3
 800291e:	f000 fa7f 	bl	8002e20 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	6992      	ldr	r2, [r2, #24]
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	0109      	lsls	r1, r1, #4
 8002930:	430a      	orrs	r2, r1
 8002932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	6992      	ldr	r2, [r2, #24]
 800293e:	492f      	ldr	r1, [pc, #188]	; (80029fc <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002940:	400a      	ands	r2, r1
 8002942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	6991      	ldr	r1, [r2, #24]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	6912      	ldr	r2, [r2, #16]
 8002952:	0212      	lsls	r2, r2, #8
 8002954:	430a      	orrs	r2, r1
 8002956:	619a      	str	r2, [r3, #24]
    break;
 8002958:	e043      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	0011      	movs	r1, r2
 8002962:	0018      	movs	r0, r3
 8002964:	f000 fae6 	bl	8002f34 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	69d2      	ldr	r2, [r2, #28]
 8002972:	2108      	movs	r1, #8
 8002974:	430a      	orrs	r2, r1
 8002976:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	69d2      	ldr	r2, [r2, #28]
 8002982:	2104      	movs	r1, #4
 8002984:	438a      	bics	r2, r1
 8002986:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	69d1      	ldr	r1, [r2, #28]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	6912      	ldr	r2, [r2, #16]
 8002996:	430a      	orrs	r2, r1
 8002998:	61da      	str	r2, [r3, #28]
    break;
 800299a:	e022      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	0011      	movs	r1, r2
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 fb51 	bl	800304c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	69d2      	ldr	r2, [r2, #28]
 80029b4:	2180      	movs	r1, #128	; 0x80
 80029b6:	0109      	lsls	r1, r1, #4
 80029b8:	430a      	orrs	r2, r1
 80029ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	69d2      	ldr	r2, [r2, #28]
 80029c6:	490d      	ldr	r1, [pc, #52]	; (80029fc <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	69d1      	ldr	r1, [r2, #28]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	6912      	ldr	r2, [r2, #16]
 80029da:	0212      	lsls	r2, r2, #8
 80029dc:	430a      	orrs	r2, r1
 80029de:	61da      	str	r2, [r3, #28]
    break;
 80029e0:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	223d      	movs	r2, #61	; 0x3d
 80029e6:	2101      	movs	r1, #1
 80029e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	223c      	movs	r2, #60	; 0x3c
 80029ee:	2100      	movs	r1, #0
 80029f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b004      	add	sp, #16
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	fffffbff 	.word	0xfffffbff

08002a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	223c      	movs	r2, #60	; 0x3c
 8002a12:	5c9b      	ldrb	r3, [r3, r2]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_TIM_ConfigClockSource+0x1c>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0ca      	b.n	8002bb2 <HAL_TIM_ConfigClockSource+0x1b2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	223c      	movs	r2, #60	; 0x3c
 8002a20:	2101      	movs	r1, #1
 8002a22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	223d      	movs	r2, #61	; 0x3d
 8002a28:	2102      	movs	r1, #2
 8002a2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2277      	movs	r2, #119	; 0x77
 8002a38:	4393      	bics	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a5f      	ldr	r2, [pc, #380]	; (8002bbc <HAL_TIM_ConfigClockSource+0x1bc>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b40      	cmp	r3, #64	; 0x40
 8002a52:	d100      	bne.n	8002a56 <HAL_TIM_ConfigClockSource+0x56>
 8002a54:	e078      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x148>
 8002a56:	d80e      	bhi.n	8002a76 <HAL_TIM_ConfigClockSource+0x76>
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d100      	bne.n	8002a5e <HAL_TIM_ConfigClockSource+0x5e>
 8002a5c:	e08b      	b.n	8002b76 <HAL_TIM_ConfigClockSource+0x176>
 8002a5e:	d803      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x68>
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d100      	bne.n	8002a66 <HAL_TIM_ConfigClockSource+0x66>
 8002a64:	e080      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8002a66:	e09b      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d100      	bne.n	8002a6e <HAL_TIM_ConfigClockSource+0x6e>
 8002a6c:	e08a      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x184>
 8002a6e:	2b30      	cmp	r3, #48	; 0x30
 8002a70:	d100      	bne.n	8002a74 <HAL_TIM_ConfigClockSource+0x74>
 8002a72:	e08e      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x192>
    break;
 8002a74:	e094      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8002a76:	2b70      	cmp	r3, #112	; 0x70
 8002a78:	d017      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0xaa>
 8002a7a:	d804      	bhi.n	8002a86 <HAL_TIM_ConfigClockSource+0x86>
 8002a7c:	2b50      	cmp	r3, #80	; 0x50
 8002a7e:	d043      	beq.n	8002b08 <HAL_TIM_ConfigClockSource+0x108>
 8002a80:	2b60      	cmp	r3, #96	; 0x60
 8002a82:	d051      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x128>
    break;
 8002a84:	e08c      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	0152      	lsls	r2, r2, #5
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_TIM_ConfigClockSource+0x98>
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	0192      	lsls	r2, r2, #6
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d024      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0xe0>
    break;
 8002a96:	e083      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	6892      	ldr	r2, [r2, #8]
 8002aa2:	2107      	movs	r1, #7
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	609a      	str	r2, [r3, #8]
    break;
 8002aa8:	e07a      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f000 fbbf 	bl	800323c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2277      	movs	r2, #119	; 0x77
 8002aca:	4393      	bics	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2277      	movs	r2, #119	; 0x77
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	609a      	str	r2, [r3, #8]
    break;
 8002ade:	e05f      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f000 fba4 	bl	800323c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	6892      	ldr	r2, [r2, #8]
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	01c9      	lsls	r1, r1, #7
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
    break;
 8002b06:	e04b      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	001a      	movs	r2, r3
 8002b16:	f000 fb09 	bl	800312c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2150      	movs	r1, #80	; 0x50
 8002b20:	0018      	movs	r0, r3
 8002b22:	f000 fb6b 	bl	80031fc <TIM_ITRx_SetConfig>
    break;
 8002b26:	e03b      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	001a      	movs	r2, r3
 8002b36:	f000 fb2b 	bl	8003190 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2160      	movs	r1, #96	; 0x60
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 fb5b 	bl	80031fc <TIM_ITRx_SetConfig>
    break;
 8002b46:	e02b      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	001a      	movs	r2, r3
 8002b56:	f000 fae9 	bl	800312c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2140      	movs	r1, #64	; 0x40
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 fb4b 	bl	80031fc <TIM_ITRx_SetConfig>
    break;
 8002b66:	e01b      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 fb44 	bl	80031fc <TIM_ITRx_SetConfig>
    break;
 8002b74:	e014      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2110      	movs	r1, #16
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 fb3d 	bl	80031fc <TIM_ITRx_SetConfig>
    break;
 8002b82:	e00d      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2120      	movs	r1, #32
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 fb36 	bl	80031fc <TIM_ITRx_SetConfig>
    break;
 8002b90:	e006      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2130      	movs	r1, #48	; 0x30
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fb2f 	bl	80031fc <TIM_ITRx_SetConfig>
    break;
 8002b9e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	223d      	movs	r2, #61	; 0x3d
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	223c      	movs	r2, #60	; 0x3c
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b004      	add	sp, #16
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	ffff00ff 	.word	0xffff00ff

08002bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b002      	add	sp, #8
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a34      	ldr	r2, [pc, #208]	; (8002ce8 <TIM_Base_SetConfig+0xe8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d008      	beq.n	8002c2e <TIM_Base_SetConfig+0x2e>
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	05db      	lsls	r3, r3, #23
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d003      	beq.n	8002c2e <TIM_Base_SetConfig+0x2e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a30      	ldr	r2, [pc, #192]	; (8002cec <TIM_Base_SetConfig+0xec>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d108      	bne.n	8002c40 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2270      	movs	r2, #112	; 0x70
 8002c32:	4393      	bics	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a29      	ldr	r2, [pc, #164]	; (8002ce8 <TIM_Base_SetConfig+0xe8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d018      	beq.n	8002c7a <TIM_Base_SetConfig+0x7a>
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	05db      	lsls	r3, r3, #23
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d013      	beq.n	8002c7a <TIM_Base_SetConfig+0x7a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a25      	ldr	r2, [pc, #148]	; (8002cec <TIM_Base_SetConfig+0xec>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00f      	beq.n	8002c7a <TIM_Base_SetConfig+0x7a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a24      	ldr	r2, [pc, #144]	; (8002cf0 <TIM_Base_SetConfig+0xf0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_Base_SetConfig+0x7a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <TIM_Base_SetConfig+0xf4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0x7a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <TIM_Base_SetConfig+0xf8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0x7a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <TIM_Base_SetConfig+0xfc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <TIM_Base_SetConfig+0x100>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	4393      	bics	r3, r2
 8002c92:	001a      	movs	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <TIM_Base_SetConfig+0xe8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <TIM_Base_SetConfig+0xd2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <TIM_Base_SetConfig+0xf4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <TIM_Base_SetConfig+0xd2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <TIM_Base_SetConfig+0xf8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d003      	beq.n	8002cd2 <TIM_Base_SetConfig+0xd2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <TIM_Base_SetConfig+0xfc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d103      	bne.n	8002cda <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	615a      	str	r2, [r3, #20]
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b004      	add	sp, #16
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	40002000 	.word	0x40002000
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800
 8002d00:	fffffcff 	.word	0xfffffcff

08002d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4393      	bics	r3, r2
 8002d22:	001a      	movs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2270      	movs	r2, #112	; 0x70
 8002d3e:	4393      	bics	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2203      	movs	r2, #3
 8002d46:	4393      	bics	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2202      	movs	r2, #2
 8002d58:	4393      	bics	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <TIM_OC1_SetConfig+0x104>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_OC1_SetConfig+0x82>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <TIM_OC1_SetConfig+0x108>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_OC1_SetConfig+0x82>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <TIM_OC1_SetConfig+0x10c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_OC1_SetConfig+0x82>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a24      	ldr	r2, [pc, #144]	; (8002e14 <TIM_OC1_SetConfig+0x110>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10c      	bne.n	8002da0 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2208      	movs	r2, #8
 8002d8a:	4393      	bics	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4393      	bics	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <TIM_OC1_SetConfig+0x104>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00b      	beq.n	8002dc0 <TIM_OC1_SetConfig+0xbc>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <TIM_OC1_SetConfig+0x108>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <TIM_OC1_SetConfig+0xbc>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <TIM_OC1_SetConfig+0x10c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <TIM_OC1_SetConfig+0xbc>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <TIM_OC1_SetConfig+0x110>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <TIM_OC1_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <TIM_OC1_SetConfig+0x114>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <TIM_OC1_SetConfig+0x118>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b006      	add	sp, #24
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40014400 	.word	0x40014400
 8002e14:	40014800 	.word	0x40014800
 8002e18:	fffffeff 	.word	0xfffffeff
 8002e1c:	fffffdff 	.word	0xfffffdff

08002e20 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	001a      	movs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a2e      	ldr	r2, [pc, #184]	; (8002f14 <TIM_OC2_SetConfig+0xf4>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <TIM_OC2_SetConfig+0xf8>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2220      	movs	r2, #32
 8002e76:	4393      	bics	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a24      	ldr	r2, [pc, #144]	; (8002f1c <TIM_OC2_SetConfig+0xfc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10d      	bne.n	8002eaa <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2280      	movs	r2, #128	; 0x80
 8002e92:	4393      	bics	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2240      	movs	r2, #64	; 0x40
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <TIM_OC2_SetConfig+0xfc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <TIM_OC2_SetConfig+0xaa>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <TIM_OC2_SetConfig+0x100>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <TIM_OC2_SetConfig+0xaa>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <TIM_OC2_SetConfig+0x104>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_OC2_SetConfig+0xaa>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <TIM_OC2_SetConfig+0x108>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d113      	bne.n	8002ef2 <TIM_OC2_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <TIM_OC2_SetConfig+0x10c>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <TIM_OC2_SetConfig+0x110>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	621a      	str	r2, [r3, #32]
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b006      	add	sp, #24
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	ffff8fff 	.word	0xffff8fff
 8002f18:	fffffcff 	.word	0xfffffcff
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40014000 	.word	0x40014000
 8002f24:	40014400 	.word	0x40014400
 8002f28:	40014800 	.word	0x40014800
 8002f2c:	fffffbff 	.word	0xfffffbff
 8002f30:	fffff7ff 	.word	0xfffff7ff

08002f34 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4a35      	ldr	r2, [pc, #212]	; (8003024 <TIM_OC3_SetConfig+0xf0>)
 8002f50:	401a      	ands	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2270      	movs	r2, #112	; 0x70
 8002f6c:	4393      	bics	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2203      	movs	r2, #3
 8002f74:	4393      	bics	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	4a28      	ldr	r2, [pc, #160]	; (8003028 <TIM_OC3_SetConfig+0xf4>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a24      	ldr	r2, [pc, #144]	; (800302c <TIM_OC3_SetConfig+0xf8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d10d      	bne.n	8002fba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	4a23      	ldr	r2, [pc, #140]	; (8003030 <TIM_OC3_SetConfig+0xfc>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	; (8003034 <TIM_OC3_SetConfig+0x100>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	; (800302c <TIM_OC3_SetConfig+0xf8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00b      	beq.n	8002fda <TIM_OC3_SetConfig+0xa6>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <TIM_OC3_SetConfig+0x104>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <TIM_OC3_SetConfig+0xa6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	; (800303c <TIM_OC3_SetConfig+0x108>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <TIM_OC3_SetConfig+0xa6>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <TIM_OC3_SetConfig+0x10c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d113      	bne.n	8003002 <TIM_OC3_SetConfig+0xce>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4a19      	ldr	r2, [pc, #100]	; (8003044 <TIM_OC3_SetConfig+0x110>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4a18      	ldr	r2, [pc, #96]	; (8003048 <TIM_OC3_SetConfig+0x114>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	621a      	str	r2, [r3, #32]
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b006      	add	sp, #24
 8003022:	bd80      	pop	{r7, pc}
 8003024:	fffffeff 	.word	0xfffffeff
 8003028:	fffffdff 	.word	0xfffffdff
 800302c:	40012c00 	.word	0x40012c00
 8003030:	fffff7ff 	.word	0xfffff7ff
 8003034:	fffffbff 	.word	0xfffffbff
 8003038:	40014000 	.word	0x40014000
 800303c:	40014400 	.word	0x40014400
 8003040:	40014800 	.word	0x40014800
 8003044:	ffffefff 	.word	0xffffefff
 8003048:	ffffdfff 	.word	0xffffdfff

0800304c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	4a28      	ldr	r2, [pc, #160]	; (8003108 <TIM_OC4_SetConfig+0xbc>)
 8003068:	401a      	ands	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4a22      	ldr	r2, [pc, #136]	; (800310c <TIM_OC4_SetConfig+0xc0>)
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4a21      	ldr	r2, [pc, #132]	; (8003110 <TIM_OC4_SetConfig+0xc4>)
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <TIM_OC4_SetConfig+0xc8>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	031b      	lsls	r3, r3, #12
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a19      	ldr	r2, [pc, #100]	; (8003118 <TIM_OC4_SetConfig+0xcc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00b      	beq.n	80030d0 <TIM_OC4_SetConfig+0x84>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <TIM_OC4_SetConfig+0xd0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d007      	beq.n	80030d0 <TIM_OC4_SetConfig+0x84>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a17      	ldr	r2, [pc, #92]	; (8003120 <TIM_OC4_SetConfig+0xd4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_OC4_SetConfig+0x84>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a16      	ldr	r2, [pc, #88]	; (8003124 <TIM_OC4_SetConfig+0xd8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d109      	bne.n	80030e4 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	4a15      	ldr	r2, [pc, #84]	; (8003128 <TIM_OC4_SetConfig+0xdc>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	019b      	lsls	r3, r3, #6
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	621a      	str	r2, [r3, #32]
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	b006      	add	sp, #24
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	ffffefff 	.word	0xffffefff
 800310c:	ffff8fff 	.word	0xffff8fff
 8003110:	fffffcff 	.word	0xfffffcff
 8003114:	ffffdfff 	.word	0xffffdfff
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40014000 	.word	0x40014000
 8003120:	40014400 	.word	0x40014400
 8003124:	40014800 	.word	0x40014800
 8003128:	ffffbfff 	.word	0xffffbfff

0800312c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	2201      	movs	r2, #1
 800314c:	4393      	bics	r3, r2
 800314e:	001a      	movs	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	22f0      	movs	r2, #240	; 0xf0
 800315e:	4393      	bics	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	220a      	movs	r2, #10
 8003170:	4393      	bics	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	621a      	str	r2, [r3, #32]
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b006      	add	sp, #24
 800318e:	bd80      	pop	{r7, pc}

08003190 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	2210      	movs	r2, #16
 80031aa:	4393      	bics	r3, r2
 80031ac:	001a      	movs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <TIM_TI2_ConfigInputStage+0x68>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	031b      	lsls	r3, r3, #12
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	22a0      	movs	r2, #160	; 0xa0
 80031d4:	4393      	bics	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	621a      	str	r2, [r3, #32]
}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b006      	add	sp, #24
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	ffff0fff 	.word	0xffff0fff

080031fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	000a      	movs	r2, r1
 8003206:	1cbb      	adds	r3, r7, #2
 8003208:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2270      	movs	r2, #112	; 0x70
 8003218:	4393      	bics	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800321c:	1cbb      	adds	r3, r7, #2
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	2207      	movs	r2, #7
 8003222:	4313      	orrs	r3, r2
 8003224:	b29b      	uxth	r3, r3
 8003226:	001a      	movs	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	609a      	str	r2, [r3, #8]
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b004      	add	sp, #16
 800323a:	bd80      	pop	{r7, pc}

0800323c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <TIM_ETR_SetConfig+0x40>)
 8003258:	4013      	ands	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	021a      	lsls	r2, r3, #8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	431a      	orrs	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4313      	orrs	r3, r2
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	609a      	str	r2, [r3, #8]
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b006      	add	sp, #24
 800327a:	bd80      	pop	{r7, pc}
 800327c:	ffff00ff 	.word	0xffff00ff

08003280 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003290:	2201      	movs	r2, #1
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	409a      	lsls	r2, r3
 8003296:	0013      	movs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	43d2      	mvns	r2, r2
 80032a2:	401a      	ands	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4099      	lsls	r1, r3
 80032b2:	000b      	movs	r3, r1
 80032b4:	431a      	orrs	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b006      	add	sp, #24
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	223c      	movs	r2, #60	; 0x3c
 80032d0:	5c9b      	ldrb	r3, [r3, r2]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e032      	b.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	223c      	movs	r2, #60	; 0x3c
 80032de:	2101      	movs	r1, #1
 80032e0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	223d      	movs	r2, #61	; 0x3d
 80032e6:	2102      	movs	r1, #2
 80032e8:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	6852      	ldr	r2, [r2, #4]
 80032f4:	2170      	movs	r1, #112	; 0x70
 80032f6:	438a      	bics	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	6851      	ldr	r1, [r2, #4]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	6892      	ldr	r2, [r2, #8]
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	438a      	bics	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	6891      	ldr	r1, [r2, #8]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	6852      	ldr	r2, [r2, #4]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	223d      	movs	r2, #61	; 0x3d
 8003332:	2101      	movs	r1, #1
 8003334:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	223c      	movs	r2, #60	; 0x3c
 800333a:	2100      	movs	r1, #0
 800333c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b002      	add	sp, #8
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223c      	movs	r2, #60	; 0x3c
 800335a:	5c9b      	ldrb	r3, [r3, r2]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003360:	2302      	movs	r3, #2
 8003362:	e04d      	b.n	8003400 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223c      	movs	r2, #60	; 0x3c
 8003368:	2101      	movs	r1, #1
 800336a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	223d      	movs	r2, #61	; 0x3d
 8003370:	2102      	movs	r1, #2
 8003372:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	22ff      	movs	r2, #255	; 0xff
 8003378:	4393      	bics	r3, r2
 800337a:	001a      	movs	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a20      	ldr	r2, [pc, #128]	; (8003408 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8003388:	401a      	ands	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a1d      	ldr	r2, [pc, #116]	; (800340c <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8003396:	401a      	ands	r2, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 80033a4:	401a      	ands	r2, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a18      	ldr	r2, [pc, #96]	; (8003414 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>)
 80033b2:	401a      	ands	r2, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a16      	ldr	r2, [pc, #88]	; (8003418 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 80033c0:	401a      	ands	r2, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a13      	ldr	r2, [pc, #76]	; (800341c <HAL_TIMEx_ConfigBreakDeadTime+0xd4>)
 80033ce:	401a      	ands	r2, r3
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4a11      	ldr	r2, [pc, #68]	; (8003420 <HAL_TIMEx_ConfigBreakDeadTime+0xd8>)
 80033dc:	401a      	ands	r2, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	223d      	movs	r2, #61	; 0x3d
 80033f2:	2101      	movs	r1, #1
 80033f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	223c      	movs	r2, #60	; 0x3c
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b004      	add	sp, #16
 8003406:	bd80      	pop	{r7, pc}
 8003408:	fffffcff 	.word	0xfffffcff
 800340c:	fffffbff 	.word	0xfffffbff
 8003410:	fffff7ff 	.word	0xfffff7ff
 8003414:	ffffefff 	.word	0xffffefff
 8003418:	ffffdfff 	.word	0xffffdfff
 800341c:	ffffbfff 	.word	0xffffbfff
 8003420:	ffff7fff 	.word	0xffff7fff

08003424 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b002      	add	sp, #8
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e047      	b.n	80034e6 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2269      	movs	r2, #105	; 0x69
 800345a:	5c9b      	ldrb	r3, [r3, r2]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2268      	movs	r2, #104	; 0x68
 8003466:	2100      	movs	r1, #0
 8003468:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0018      	movs	r0, r3
 800346e:	f004 fa6d 	bl	800794c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2269      	movs	r2, #105	; 0x69
 8003476:	2124      	movs	r1, #36	; 0x24
 8003478:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	2101      	movs	r1, #1
 8003486:	438a      	bics	r2, r1
 8003488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	0018      	movs	r0, r3
 800348e:	f000 fae5 	bl	8003a5c <UART_SetConfig>
 8003492:	0003      	movs	r3, r0
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e024      	b.n	80034e6 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	0018      	movs	r0, r3
 80034a8:	f000 fc94 	bl	8003dd4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	6852      	ldr	r2, [r2, #4]
 80034b6:	490e      	ldr	r1, [pc, #56]	; (80034f0 <HAL_UART_Init+0xac>)
 80034b8:	400a      	ands	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	6892      	ldr	r2, [r2, #8]
 80034c6:	212a      	movs	r1, #42	; 0x2a
 80034c8:	438a      	bics	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	2101      	movs	r1, #1
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 fd24 	bl	8003f2c <UART_CheckIdleState>
 80034e4:	0003      	movs	r3, r0
}
 80034e6:	0018      	movs	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b002      	add	sp, #8
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	ffffb7ff 	.word	0xffffb7ff

080034f4 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	1dbb      	adds	r3, r7, #6
 8003502:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2269      	movs	r2, #105	; 0x69
 800350c:	5c9b      	ldrb	r3, [r3, r2]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b20      	cmp	r3, #32
 8003512:	d000      	beq.n	8003516 <HAL_UART_Transmit+0x22>
 8003514:	e08c      	b.n	8003630 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_UART_Transmit+0x30>
 800351c:	1dbb      	adds	r3, r7, #6
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e084      	b.n	8003632 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	015b      	lsls	r3, r3, #5
 8003530:	429a      	cmp	r2, r3
 8003532:	d109      	bne.n	8003548 <HAL_UART_Transmit+0x54>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2201      	movs	r2, #1
 8003540:	4013      	ands	r3, r2
 8003542:	d001      	beq.n	8003548 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e074      	b.n	8003632 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2268      	movs	r2, #104	; 0x68
 800354c:	5c9b      	ldrb	r3, [r3, r2]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_UART_Transmit+0x62>
 8003552:	2302      	movs	r3, #2
 8003554:	e06d      	b.n	8003632 <HAL_UART_Transmit+0x13e>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2268      	movs	r2, #104	; 0x68
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2269      	movs	r2, #105	; 0x69
 8003568:	2121      	movs	r1, #33	; 0x21
 800356a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800356c:	f7fd f99a 	bl	80008a4 <HAL_GetTick>
 8003570:	0003      	movs	r3, r0
 8003572:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1dba      	adds	r2, r7, #6
 8003578:	2150      	movs	r1, #80	; 0x50
 800357a:	8812      	ldrh	r2, [r2, #0]
 800357c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1dba      	adds	r2, r7, #6
 8003582:	2152      	movs	r1, #82	; 0x52
 8003584:	8812      	ldrh	r2, [r2, #0]
 8003586:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8003588:	e035      	b.n	80035f6 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2252      	movs	r2, #82	; 0x52
 800358e:	5a9b      	ldrh	r3, [r3, r2]
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b299      	uxth	r1, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2252      	movs	r2, #82	; 0x52
 800359a:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	0013      	movs	r3, r2
 80035a6:	2200      	movs	r2, #0
 80035a8:	2180      	movs	r1, #128	; 0x80
 80035aa:	f000 fd17 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 80035ae:	1e03      	subs	r3, r0, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e03d      	b.n	8003632 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	015b      	lsls	r3, r3, #5
 80035be:	429a      	cmp	r2, r3
 80035c0:	d111      	bne.n	80035e6 <HAL_UART_Transmit+0xf2>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10d      	bne.n	80035e6 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	8812      	ldrh	r2, [r2, #0]
 80035d6:	05d2      	lsls	r2, r2, #23
 80035d8:	0dd2      	lsrs	r2, r2, #23
 80035da:	b292      	uxth	r2, r2
 80035dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	3302      	adds	r3, #2
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	e007      	b.n	80035f6 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	1c59      	adds	r1, r3, #1
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2252      	movs	r2, #82	; 0x52
 80035fa:	5a9b      	ldrh	r3, [r3, r2]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1c3      	bne.n	800358a <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	0013      	movs	r3, r2
 800360c:	2200      	movs	r2, #0
 800360e:	2140      	movs	r1, #64	; 0x40
 8003610:	f000 fce4 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d001      	beq.n	800361c <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e00a      	b.n	8003632 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2269      	movs	r2, #105	; 0x69
 8003620:	2120      	movs	r1, #32
 8003622:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2268      	movs	r2, #104	; 0x68
 8003628:	2100      	movs	r1, #0
 800362a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	e000      	b.n	8003632 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8003630:	2302      	movs	r3, #2
  }
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b006      	add	sp, #24
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	1dbb      	adds	r3, r7, #6
 800364a:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	226a      	movs	r2, #106	; 0x6a
 8003654:	5c9b      	ldrb	r3, [r3, r2]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b20      	cmp	r3, #32
 800365a:	d000      	beq.n	800365e <HAL_UART_Receive+0x22>
 800365c:	e0c8      	b.n	80037f0 <HAL_UART_Receive+0x1b4>
  {
    if((pData == NULL ) || (Size == 0U))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_UART_Receive+0x30>
 8003664:	1dbb      	adds	r3, r7, #6
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0c0      	b.n	80037f2 <HAL_UART_Receive+0x1b6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	015b      	lsls	r3, r3, #5
 8003678:	429a      	cmp	r2, r3
 800367a:	d109      	bne.n	8003690 <HAL_UART_Receive+0x54>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <HAL_UART_Receive+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2201      	movs	r2, #1
 8003688:	4013      	ands	r3, r2
 800368a:	d001      	beq.n	8003690 <HAL_UART_Receive+0x54>
      {
        return  HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0b0      	b.n	80037f2 <HAL_UART_Receive+0x1b6>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2268      	movs	r2, #104	; 0x68
 8003694:	5c9b      	ldrb	r3, [r3, r2]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_UART_Receive+0x62>
 800369a:	2302      	movs	r3, #2
 800369c:	e0a9      	b.n	80037f2 <HAL_UART_Receive+0x1b6>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2268      	movs	r2, #104	; 0x68
 80036a2:	2101      	movs	r1, #1
 80036a4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	226a      	movs	r2, #106	; 0x6a
 80036b0:	2122      	movs	r1, #34	; 0x22
 80036b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80036b4:	f7fd f8f6 	bl	80008a4 <HAL_GetTick>
 80036b8:	0003      	movs	r3, r0
 80036ba:	61fb      	str	r3, [r7, #28]

    huart->RxXferSize = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1dba      	adds	r2, r7, #6
 80036c0:	2158      	movs	r1, #88	; 0x58
 80036c2:	8812      	ldrh	r2, [r2, #0]
 80036c4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1dba      	adds	r2, r7, #6
 80036ca:	215a      	movs	r1, #90	; 0x5a
 80036cc:	8812      	ldrh	r2, [r2, #0]
 80036ce:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	429a      	cmp	r2, r3
 80036da:	d10d      	bne.n	80036f8 <HAL_UART_Receive+0xbc>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <HAL_UART_Receive+0xb2>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	225c      	movs	r2, #92	; 0x5c
 80036e8:	4944      	ldr	r1, [pc, #272]	; (80037fc <HAL_UART_Receive+0x1c0>)
 80036ea:	5299      	strh	r1, [r3, r2]
 80036ec:	e029      	b.n	8003742 <HAL_UART_Receive+0x106>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	225c      	movs	r2, #92	; 0x5c
 80036f2:	21ff      	movs	r1, #255	; 0xff
 80036f4:	5299      	strh	r1, [r3, r2]
 80036f6:	e024      	b.n	8003742 <HAL_UART_Receive+0x106>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10d      	bne.n	800371c <HAL_UART_Receive+0xe0>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <HAL_UART_Receive+0xd6>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	225c      	movs	r2, #92	; 0x5c
 800370c:	21ff      	movs	r1, #255	; 0xff
 800370e:	5299      	strh	r1, [r3, r2]
 8003710:	e017      	b.n	8003742 <HAL_UART_Receive+0x106>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	225c      	movs	r2, #92	; 0x5c
 8003716:	217f      	movs	r1, #127	; 0x7f
 8003718:	5299      	strh	r1, [r3, r2]
 800371a:	e012      	b.n	8003742 <HAL_UART_Receive+0x106>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	055b      	lsls	r3, r3, #21
 8003724:	429a      	cmp	r2, r3
 8003726:	d10c      	bne.n	8003742 <HAL_UART_Receive+0x106>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d104      	bne.n	800373a <HAL_UART_Receive+0xfe>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	225c      	movs	r2, #92	; 0x5c
 8003734:	217f      	movs	r1, #127	; 0x7f
 8003736:	5299      	strh	r1, [r3, r2]
 8003738:	e003      	b.n	8003742 <HAL_UART_Receive+0x106>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	225c      	movs	r2, #92	; 0x5c
 800373e:	213f      	movs	r1, #63	; 0x3f
 8003740:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003742:	231a      	movs	r3, #26
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	215c      	movs	r1, #92	; 0x5c
 800374a:	5a52      	ldrh	r2, [r2, r1]
 800374c:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800374e:	e03f      	b.n	80037d0 <HAL_UART_Receive+0x194>
    {
      huart->RxXferCount--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	225a      	movs	r2, #90	; 0x5a
 8003754:	5a9b      	ldrh	r3, [r3, r2]
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b299      	uxth	r1, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	225a      	movs	r2, #90	; 0x5a
 8003760:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	0013      	movs	r3, r2
 800376c:	2200      	movs	r2, #0
 800376e:	2120      	movs	r1, #32
 8003770:	f000 fc34 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003774:	1e03      	subs	r3, r0, #0
 8003776:	d001      	beq.n	800377c <HAL_UART_Receive+0x140>
      {
        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e03a      	b.n	80037f2 <HAL_UART_Receive+0x1b6>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	015b      	lsls	r3, r3, #5
 8003784:	429a      	cmp	r2, r3
 8003786:	d114      	bne.n	80037b2 <HAL_UART_Receive+0x176>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d110      	bne.n	80037b2 <HAL_UART_Receive+0x176>
      {
        tmp = (uint16_t*) pData ;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800379a:	b29b      	uxth	r3, r3
 800379c:	221a      	movs	r2, #26
 800379e:	18ba      	adds	r2, r7, r2
 80037a0:	8812      	ldrh	r2, [r2, #0]
 80037a2:	4013      	ands	r3, r2
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	3302      	adds	r3, #2
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	e00e      	b.n	80037d0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	60ba      	str	r2, [r7, #8]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80037be:	b292      	uxth	r2, r2
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	211a      	movs	r1, #26
 80037c4:	1879      	adds	r1, r7, r1
 80037c6:	8809      	ldrh	r1, [r1, #0]
 80037c8:	b2c9      	uxtb	r1, r1
 80037ca:	400a      	ands	r2, r1
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	225a      	movs	r2, #90	; 0x5a
 80037d4:	5a9b      	ldrh	r3, [r3, r2]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1b9      	bne.n	8003750 <HAL_UART_Receive+0x114>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	226a      	movs	r2, #106	; 0x6a
 80037e0:	2120      	movs	r1, #32
 80037e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2268      	movs	r2, #104	; 0x68
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	e000      	b.n	80037f2 <HAL_UART_Receive+0x1b6>
  }
  else
  {
    return HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
  }
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b008      	add	sp, #32
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	000001ff 	.word	0x000001ff

08003800 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	220f      	movs	r2, #15
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10c      	bne.n	8003840 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2220      	movs	r2, #32
 800382a:	4013      	ands	r3, r2
 800382c:	d008      	beq.n	8003840 <HAL_UART_IRQHandler+0x40>
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2220      	movs	r2, #32
 8003832:	4013      	ands	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f000 fcc1 	bl	80041c0 <UART_Receive_IT>
      return;
 800383e:	e0ef      	b.n	8003a20 <HAL_UART_IRQHandler+0x220>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d100      	bne.n	8003850 <HAL_UART_IRQHandler+0x50>
 800384e:	e0af      	b.n	80039b0 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2201      	movs	r2, #1
 8003854:	4013      	ands	r3, r2
 8003856:	d105      	bne.n	8003864 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	2390      	movs	r3, #144	; 0x90
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4013      	ands	r3, r2
 8003860:	d100      	bne.n	8003864 <HAL_UART_IRQHandler+0x64>
 8003862:	e0a5      	b.n	80039b0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2201      	movs	r2, #1
 8003868:	4013      	ands	r3, r2
 800386a:	d00e      	beq.n	800388a <HAL_UART_IRQHandler+0x8a>
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4013      	ands	r3, r2
 8003874:	d009      	beq.n	800388a <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2201      	movs	r2, #1
 800387c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003882:	2201      	movs	r2, #1
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2202      	movs	r2, #2
 800388e:	4013      	ands	r3, r2
 8003890:	d00d      	beq.n	80038ae <HAL_UART_IRQHandler+0xae>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2202      	movs	r2, #2
 80038a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a6:	2204      	movs	r2, #4
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2204      	movs	r2, #4
 80038b2:	4013      	ands	r3, r2
 80038b4:	d00d      	beq.n	80038d2 <HAL_UART_IRQHandler+0xd2>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2201      	movs	r2, #1
 80038ba:	4013      	ands	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2204      	movs	r2, #4
 80038c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ca:	2202      	movs	r2, #2
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2208      	movs	r2, #8
 80038d6:	4013      	ands	r3, r2
 80038d8:	d011      	beq.n	80038fe <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2220      	movs	r2, #32
 80038de:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80038e0:	d103      	bne.n	80038ea <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2201      	movs	r2, #1
 80038e6:	4013      	ands	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2208      	movs	r2, #8
 80038f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f6:	2208      	movs	r2, #8
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d100      	bne.n	8003908 <HAL_UART_IRQHandler+0x108>
 8003906:	e08a      	b.n	8003a1e <HAL_UART_IRQHandler+0x21e>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2220      	movs	r2, #32
 800390c:	4013      	ands	r3, r2
 800390e:	d007      	beq.n	8003920 <HAL_UART_IRQHandler+0x120>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2220      	movs	r2, #32
 8003914:	4013      	ands	r3, r2
 8003916:	d003      	beq.n	8003920 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0018      	movs	r0, r3
 800391c:	f000 fc50 	bl	80041c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003924:	2208      	movs	r2, #8
 8003926:	4013      	ands	r3, r2
 8003928:	d105      	bne.n	8003936 <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2240      	movs	r2, #64	; 0x40
 8003932:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003934:	d032      	beq.n	800399c <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f000 fb9b 	bl	8004074 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2240      	movs	r2, #64	; 0x40
 8003946:	4013      	ands	r3, r2
 8003948:	d023      	beq.n	8003992 <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	6892      	ldr	r2, [r2, #8]
 8003954:	2140      	movs	r1, #64	; 0x40
 8003956:	438a      	bics	r2, r1
 8003958:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800395e:	2b00      	cmp	r3, #0
 8003960:	d012      	beq.n	8003988 <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003966:	4a30      	ldr	r2, [pc, #192]	; (8003a28 <HAL_UART_IRQHandler+0x228>)
 8003968:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396e:	0018      	movs	r0, r3
 8003970:	f7fd fd5e 	bl	8001430 <HAL_DMA_Abort_IT>
 8003974:	1e03      	subs	r3, r0, #0
 8003976:	d019      	beq.n	80039ac <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003982:	0018      	movs	r0, r3
 8003984:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003986:	e011      	b.n	80039ac <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0018      	movs	r0, r3
 800398c:	f000 f85e 	bl	8003a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	e00c      	b.n	80039ac <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	0018      	movs	r0, r3
 8003996:	f000 f859 	bl	8003a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399a:	e007      	b.n	80039ac <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 f854 	bl	8003a4c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80039aa:	e038      	b.n	8003a1e <HAL_UART_IRQHandler+0x21e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ac:	46c0      	nop			; (mov r8, r8)
    return;
 80039ae:	e036      	b.n	8003a1e <HAL_UART_IRQHandler+0x21e>

  } /* End if some error occurs */

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	035b      	lsls	r3, r3, #13
 80039b6:	4013      	ands	r3, r2
 80039b8:	d016      	beq.n	80039e8 <HAL_UART_IRQHandler+0x1e8>
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	03db      	lsls	r3, r3, #15
 80039c0:	4013      	ands	r3, r2
 80039c2:	d011      	beq.n	80039e8 <HAL_UART_IRQHandler+0x1e8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	0352      	lsls	r2, r2, #13
 80039cc:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2269      	movs	r2, #105	; 0x69
 80039d2:	2120      	movs	r1, #32
 80039d4:	5499      	strb	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	226a      	movs	r2, #106	; 0x6a
 80039da:	2120      	movs	r1, #32
 80039dc:	5499      	strb	r1, [r3, r2]
    HAL_UARTEx_WakeupCallback(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 fc67 	bl	80042b4 <HAL_UARTEx_WakeupCallback>
    return;
 80039e6:	e01b      	b.n	8003a20 <HAL_UART_IRQHandler+0x220>
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	4013      	ands	r3, r2
 80039ee:	d008      	beq.n	8003a02 <HAL_UART_IRQHandler+0x202>
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	4013      	ands	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_UART_IRQHandler+0x202>
  {
    UART_Transmit_IT(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	0018      	movs	r0, r3
 80039fc:	f000 fb6f 	bl	80040de <UART_Transmit_IT>
    return;
 8003a00:	e00e      	b.n	8003a20 <HAL_UART_IRQHandler+0x220>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2240      	movs	r2, #64	; 0x40
 8003a06:	4013      	ands	r3, r2
 8003a08:	d00a      	beq.n	8003a20 <HAL_UART_IRQHandler+0x220>
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2240      	movs	r2, #64	; 0x40
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d006      	beq.n	8003a20 <HAL_UART_IRQHandler+0x220>
  {
    UART_EndTransmit_IT(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f000 fbb9 	bl	800418c <UART_EndTransmit_IT>
    return;
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	e000      	b.n	8003a20 <HAL_UART_IRQHandler+0x220>
    return;
 8003a1e:	46c0      	nop			; (mov r8, r8)
  }

}
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b006      	add	sp, #24
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	080040b1 	.word	0x080040b1

08003a2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003a68:	2317      	movs	r3, #23
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8003a70:	230a      	movs	r3, #10
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2200      	movs	r2, #0
 8003a76:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8003a78:	2314      	movs	r3, #20
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a80:	2313      	movs	r3, #19
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	49c0      	ldr	r1, [pc, #768]	; (8003dac <UART_SetConfig+0x350>)
 8003aac:	4011      	ands	r1, r2
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	6852      	ldr	r2, [r2, #4]
 8003abe:	49bc      	ldr	r1, [pc, #752]	; (8003db0 <UART_SetConfig+0x354>)
 8003ac0:	4011      	ands	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68d2      	ldr	r2, [r2, #12]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	6892      	ldr	r2, [r2, #8]
 8003ae0:	49b4      	ldr	r1, [pc, #720]	; (8003db4 <UART_SetConfig+0x358>)
 8003ae2:	4011      	ands	r1, r2
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4ab2      	ldr	r2, [pc, #712]	; (8003db8 <UART_SetConfig+0x35c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d125      	bne.n	8003b40 <UART_SetConfig+0xe4>
 8003af4:	4bb1      	ldr	r3, [pc, #708]	; (8003dbc <UART_SetConfig+0x360>)
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	2203      	movs	r2, #3
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d00f      	beq.n	8003b20 <UART_SetConfig+0xc4>
 8003b00:	d304      	bcc.n	8003b0c <UART_SetConfig+0xb0>
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d011      	beq.n	8003b2a <UART_SetConfig+0xce>
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d005      	beq.n	8003b16 <UART_SetConfig+0xba>
 8003b0a:	e013      	b.n	8003b34 <UART_SetConfig+0xd8>
 8003b0c:	2317      	movs	r3, #23
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e064      	b.n	8003be0 <UART_SetConfig+0x184>
 8003b16:	2317      	movs	r3, #23
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e05f      	b.n	8003be0 <UART_SetConfig+0x184>
 8003b20:	2317      	movs	r3, #23
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	2204      	movs	r2, #4
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e05a      	b.n	8003be0 <UART_SetConfig+0x184>
 8003b2a:	2317      	movs	r3, #23
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	2208      	movs	r2, #8
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	e055      	b.n	8003be0 <UART_SetConfig+0x184>
 8003b34:	2317      	movs	r3, #23
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	2210      	movs	r2, #16
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	e04f      	b.n	8003be0 <UART_SetConfig+0x184>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a9e      	ldr	r2, [pc, #632]	; (8003dc0 <UART_SetConfig+0x364>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d132      	bne.n	8003bb0 <UART_SetConfig+0x154>
 8003b4a:	4b9c      	ldr	r3, [pc, #624]	; (8003dbc <UART_SetConfig+0x360>)
 8003b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4e:	23c0      	movs	r3, #192	; 0xc0
 8003b50:	029b      	lsls	r3, r3, #10
 8003b52:	4013      	ands	r3, r2
 8003b54:	2280      	movs	r2, #128	; 0x80
 8003b56:	0252      	lsls	r2, r2, #9
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d019      	beq.n	8003b90 <UART_SetConfig+0x134>
 8003b5c:	2280      	movs	r2, #128	; 0x80
 8003b5e:	0252      	lsls	r2, r2, #9
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d802      	bhi.n	8003b6a <UART_SetConfig+0x10e>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <UART_SetConfig+0x120>
 8003b68:	e01c      	b.n	8003ba4 <UART_SetConfig+0x148>
 8003b6a:	2280      	movs	r2, #128	; 0x80
 8003b6c:	0292      	lsls	r2, r2, #10
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <UART_SetConfig+0x13e>
 8003b72:	22c0      	movs	r2, #192	; 0xc0
 8003b74:	0292      	lsls	r2, r2, #10
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d005      	beq.n	8003b86 <UART_SetConfig+0x12a>
 8003b7a:	e013      	b.n	8003ba4 <UART_SetConfig+0x148>
 8003b7c:	2317      	movs	r3, #23
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	e02c      	b.n	8003be0 <UART_SetConfig+0x184>
 8003b86:	2317      	movs	r3, #23
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	e027      	b.n	8003be0 <UART_SetConfig+0x184>
 8003b90:	2317      	movs	r3, #23
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2204      	movs	r2, #4
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e022      	b.n	8003be0 <UART_SetConfig+0x184>
 8003b9a:	2317      	movs	r3, #23
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e01d      	b.n	8003be0 <UART_SetConfig+0x184>
 8003ba4:	2317      	movs	r3, #23
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	2210      	movs	r2, #16
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	e017      	b.n	8003be0 <UART_SetConfig+0x184>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a83      	ldr	r2, [pc, #524]	; (8003dc4 <UART_SetConfig+0x368>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d104      	bne.n	8003bc4 <UART_SetConfig+0x168>
 8003bba:	2317      	movs	r3, #23
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	e00d      	b.n	8003be0 <UART_SetConfig+0x184>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a7f      	ldr	r2, [pc, #508]	; (8003dc8 <UART_SetConfig+0x36c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d104      	bne.n	8003bd8 <UART_SetConfig+0x17c>
 8003bce:	2317      	movs	r3, #23
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e003      	b.n	8003be0 <UART_SetConfig+0x184>
 8003bd8:	2317      	movs	r3, #23
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	2210      	movs	r2, #16
 8003bde:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d000      	beq.n	8003bee <UART_SetConfig+0x192>
 8003bec:	e07b      	b.n	8003ce6 <UART_SetConfig+0x28a>
  {
    switch (clocksource)
 8003bee:	2317      	movs	r3, #23
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d01c      	beq.n	8003c32 <UART_SetConfig+0x1d6>
 8003bf8:	dc02      	bgt.n	8003c00 <UART_SetConfig+0x1a4>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <UART_SetConfig+0x1ae>
 8003bfe:	e04f      	b.n	8003ca0 <UART_SetConfig+0x244>
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d027      	beq.n	8003c54 <UART_SetConfig+0x1f8>
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d039      	beq.n	8003c7c <UART_SetConfig+0x220>
 8003c08:	e04a      	b.n	8003ca0 <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003c0a:	f7fe fb0d 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	005a      	lsls	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	18d2      	adds	r2, r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	0019      	movs	r1, r3
 8003c20:	0010      	movs	r0, r2
 8003c22:	f7fc fa79 	bl	8000118 <__udivsi3>
 8003c26:	0003      	movs	r3, r0
 8003c28:	001a      	movs	r2, r3
 8003c2a:	2314      	movs	r3, #20
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	801a      	strh	r2, [r3, #0]
        break;
 8003c30:	e03b      	b.n	8003caa <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	4a64      	ldr	r2, [pc, #400]	; (8003dcc <UART_SetConfig+0x370>)
 8003c3a:	189a      	adds	r2, r3, r2
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	0019      	movs	r1, r3
 8003c42:	0010      	movs	r0, r2
 8003c44:	f7fc fa68 	bl	8000118 <__udivsi3>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	2314      	movs	r3, #20
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	801a      	strh	r2, [r3, #0]
        break;
 8003c52:	e02a      	b.n	8003caa <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c54:	f7fe fa60 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	005a      	lsls	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	085b      	lsrs	r3, r3, #1
 8003c62:	18d2      	adds	r2, r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	0019      	movs	r1, r3
 8003c6a:	0010      	movs	r0, r2
 8003c6c:	f7fc fa54 	bl	8000118 <__udivsi3>
 8003c70:	0003      	movs	r3, r0
 8003c72:	001a      	movs	r2, r3
 8003c74:	2314      	movs	r3, #20
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	801a      	strh	r2, [r3, #0]
        break;
 8003c7a:	e016      	b.n	8003caa <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	085b      	lsrs	r3, r3, #1
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	0252      	lsls	r2, r2, #9
 8003c86:	189a      	adds	r2, r3, r2
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	0019      	movs	r1, r3
 8003c8e:	0010      	movs	r0, r2
 8003c90:	f7fc fa42 	bl	8000118 <__udivsi3>
 8003c94:	0003      	movs	r3, r0
 8003c96:	001a      	movs	r2, r3
 8003c98:	2314      	movs	r3, #20
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	801a      	strh	r2, [r3, #0]
        break;
 8003c9e:	e004      	b.n	8003caa <UART_SetConfig+0x24e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003ca0:	2313      	movs	r3, #19
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]
        break;
 8003ca8:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003caa:	230a      	movs	r3, #10
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	2214      	movs	r2, #20
 8003cb0:	18ba      	adds	r2, r7, r2
 8003cb2:	8812      	ldrh	r2, [r2, #0]
 8003cb4:	210f      	movs	r1, #15
 8003cb6:	438a      	bics	r2, r1
 8003cb8:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cba:	2314      	movs	r3, #20
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	105b      	asrs	r3, r3, #1
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b299      	uxth	r1, r3
 8003cca:	230a      	movs	r3, #10
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	220a      	movs	r2, #10
 8003cd0:	18ba      	adds	r2, r7, r2
 8003cd2:	8812      	ldrh	r2, [r2, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	220a      	movs	r2, #10
 8003cde:	18ba      	adds	r2, r7, r2
 8003ce0:	8812      	ldrh	r2, [r2, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
 8003ce4:	e05b      	b.n	8003d9e <UART_SetConfig+0x342>
  }
  else
  {
    switch (clocksource)
 8003ce6:	2317      	movs	r3, #23
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d01b      	beq.n	8003d28 <UART_SetConfig+0x2cc>
 8003cf0:	dc02      	bgt.n	8003cf8 <UART_SetConfig+0x29c>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <UART_SetConfig+0x2a6>
 8003cf6:	e04d      	b.n	8003d94 <UART_SetConfig+0x338>
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d026      	beq.n	8003d4a <UART_SetConfig+0x2ee>
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d037      	beq.n	8003d70 <UART_SetConfig+0x314>
 8003d00:	e048      	b.n	8003d94 <UART_SetConfig+0x338>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681c      	ldr	r4, [r3, #0]
 8003d06:	f7fe fa8f 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	18d2      	adds	r2, r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0019      	movs	r1, r3
 8003d1a:	0010      	movs	r0, r2
 8003d1c:	f7fc f9fc 	bl	8000118 <__udivsi3>
 8003d20:	0003      	movs	r3, r0
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	60e3      	str	r3, [r4, #12]
        break;
 8003d26:	e03a      	b.n	8003d9e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681c      	ldr	r4, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <UART_SetConfig+0x374>)
 8003d34:	189a      	adds	r2, r3, r2
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	0010      	movs	r0, r2
 8003d3e:	f7fc f9eb 	bl	8000118 <__udivsi3>
 8003d42:	0003      	movs	r3, r0
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	60e3      	str	r3, [r4, #12]
        break;
 8003d48:	e029      	b.n	8003d9e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681c      	ldr	r4, [r3, #0]
 8003d4e:	f7fe f9e3 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 8003d52:	0002      	movs	r2, r0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	18d2      	adds	r2, r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	0019      	movs	r1, r3
 8003d62:	0010      	movs	r0, r2
 8003d64:	f7fc f9d8 	bl	8000118 <__udivsi3>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	60e3      	str	r3, [r4, #12]
        break;
 8003d6e:	e016      	b.n	8003d9e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681c      	ldr	r4, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	0212      	lsls	r2, r2, #8
 8003d7e:	189a      	adds	r2, r3, r2
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0019      	movs	r1, r3
 8003d86:	0010      	movs	r0, r2
 8003d88:	f7fc f9c6 	bl	8000118 <__udivsi3>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	60e3      	str	r3, [r4, #12]
        break;
 8003d92:	e004      	b.n	8003d9e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003d94:	2313      	movs	r3, #19
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
        break;
 8003d9c:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8003d9e:	2313      	movs	r3, #19
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	781b      	ldrb	r3, [r3, #0]

}
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b007      	add	sp, #28
 8003daa:	bd90      	pop	{r4, r7, pc}
 8003dac:	efff69f3 	.word	0xefff69f3
 8003db0:	ffffcfff 	.word	0xffffcfff
 8003db4:	fffff4ff 	.word	0xfffff4ff
 8003db8:	40013800 	.word	0x40013800
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40004400 	.word	0x40004400
 8003dc4:	40004800 	.word	0x40004800
 8003dc8:	40004c00 	.word	0x40004c00
 8003dcc:	00f42400 	.word	0x00f42400
 8003dd0:	007a1200 	.word	0x007a1200

08003dd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	2201      	movs	r2, #1
 8003de2:	4013      	ands	r3, r2
 8003de4:	d00a      	beq.n	8003dfc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	6852      	ldr	r2, [r2, #4]
 8003df0:	4945      	ldr	r1, [pc, #276]	; (8003f08 <UART_AdvFeatureConfig+0x134>)
 8003df2:	4011      	ands	r1, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	2202      	movs	r2, #2
 8003e02:	4013      	ands	r3, r2
 8003e04:	d00a      	beq.n	8003e1c <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	6852      	ldr	r2, [r2, #4]
 8003e10:	493e      	ldr	r1, [pc, #248]	; (8003f0c <UART_AdvFeatureConfig+0x138>)
 8003e12:	4011      	ands	r1, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2204      	movs	r2, #4
 8003e22:	4013      	ands	r3, r2
 8003e24:	d00a      	beq.n	8003e3c <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	6852      	ldr	r2, [r2, #4]
 8003e30:	4937      	ldr	r1, [pc, #220]	; (8003f10 <UART_AdvFeatureConfig+0x13c>)
 8003e32:	4011      	ands	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	2208      	movs	r2, #8
 8003e42:	4013      	ands	r3, r2
 8003e44:	d00a      	beq.n	8003e5c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	6852      	ldr	r2, [r2, #4]
 8003e50:	4930      	ldr	r1, [pc, #192]	; (8003f14 <UART_AdvFeatureConfig+0x140>)
 8003e52:	4011      	ands	r1, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	2210      	movs	r2, #16
 8003e62:	4013      	ands	r3, r2
 8003e64:	d00a      	beq.n	8003e7c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	6892      	ldr	r2, [r2, #8]
 8003e70:	4929      	ldr	r1, [pc, #164]	; (8003f18 <UART_AdvFeatureConfig+0x144>)
 8003e72:	4011      	ands	r1, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	2220      	movs	r2, #32
 8003e82:	4013      	ands	r3, r2
 8003e84:	d00a      	beq.n	8003e9c <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	4922      	ldr	r1, [pc, #136]	; (8003f1c <UART_AdvFeatureConfig+0x148>)
 8003e92:	4011      	ands	r1, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	2240      	movs	r2, #64	; 0x40
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d01b      	beq.n	8003ede <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	6852      	ldr	r2, [r2, #4]
 8003eb0:	491b      	ldr	r1, [pc, #108]	; (8003f20 <UART_AdvFeatureConfig+0x14c>)
 8003eb2:	4011      	ands	r1, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	035b      	lsls	r3, r3, #13
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d10a      	bne.n	8003ede <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	6852      	ldr	r2, [r2, #4]
 8003ed2:	4914      	ldr	r1, [pc, #80]	; (8003f24 <UART_AdvFeatureConfig+0x150>)
 8003ed4:	4011      	ands	r1, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2280      	movs	r2, #128	; 0x80
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d00a      	beq.n	8003efe <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	6852      	ldr	r2, [r2, #4]
 8003ef2:	490d      	ldr	r1, [pc, #52]	; (8003f28 <UART_AdvFeatureConfig+0x154>)
 8003ef4:	4011      	ands	r1, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
  }
}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b002      	add	sp, #8
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	fffdffff 	.word	0xfffdffff
 8003f0c:	fffeffff 	.word	0xfffeffff
 8003f10:	fffbffff 	.word	0xfffbffff
 8003f14:	ffff7fff 	.word	0xffff7fff
 8003f18:	ffffefff 	.word	0xffffefff
 8003f1c:	ffffdfff 	.word	0xffffdfff
 8003f20:	ffefffff 	.word	0xffefffff
 8003f24:	ff9fffff 	.word	0xff9fffff
 8003f28:	fff7ffff 	.word	0xfff7ffff

08003f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f3e:	f7fc fcb1 	bl	80008a4 <HAL_GetTick>
 8003f42:	0003      	movs	r3, r0
 8003f44:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a21      	ldr	r2, [pc, #132]	; (8003fd0 <UART_CheckIdleState+0xa4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <UART_CheckIdleState+0x2e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <UART_CheckIdleState+0xa8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d129      	bne.n	8003fae <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2208      	movs	r2, #8
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d10d      	bne.n	8003f84 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	0399      	lsls	r1, r3, #14
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <UART_CheckIdleState+0xac>)
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	0013      	movs	r3, r2
 8003f76:	2200      	movs	r2, #0
 8003f78:	f000 f830 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003f7c:	1e03      	subs	r3, r0, #0
 8003f7e:	d001      	beq.n	8003f84 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e021      	b.n	8003fc8 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d10d      	bne.n	8003fae <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	03d9      	lsls	r1, r3, #15
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <UART_CheckIdleState+0xac>)
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	0013      	movs	r3, r2
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f000 f81b 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003fa6:	1e03      	subs	r3, r0, #0
 8003fa8:	d001      	beq.n	8003fae <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e00c      	b.n	8003fc8 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2269      	movs	r2, #105	; 0x69
 8003fb2:	2120      	movs	r1, #32
 8003fb4:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	226a      	movs	r2, #106	; 0x6a
 8003fba:	2120      	movs	r1, #32
 8003fbc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2268      	movs	r2, #104	; 0x68
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	0018      	movs	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b004      	add	sp, #16
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	40004400 	.word	0x40004400
 8003fd8:	01ffffff 	.word	0x01ffffff

08003fdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	1dfb      	adds	r3, r7, #7
 8003fea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fec:	e02b      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	d028      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ffa:	f7fc fc53 	bl	80008a4 <HAL_GetTick>
 8003ffe:	0002      	movs	r2, r0
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	429a      	cmp	r2, r3
 8004008:	d91d      	bls.n	8004046 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	4916      	ldr	r1, [pc, #88]	; (8004070 <UART_WaitOnFlagUntilTimeout+0x94>)
 8004016:	400a      	ands	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	6892      	ldr	r2, [r2, #8]
 8004024:	2101      	movs	r1, #1
 8004026:	438a      	bics	r2, r1
 8004028:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2269      	movs	r2, #105	; 0x69
 800402e:	2120      	movs	r1, #32
 8004030:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	226a      	movs	r2, #106	; 0x6a
 8004036:	2120      	movs	r1, #32
 8004038:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2268      	movs	r2, #104	; 0x68
 800403e:	2100      	movs	r1, #0
 8004040:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e00f      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	401a      	ands	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	425a      	negs	r2, r3
 8004056:	4153      	adcs	r3, r2
 8004058:	b2db      	uxtb	r3, r3
 800405a:	001a      	movs	r2, r3
 800405c:	1dfb      	adds	r3, r7, #7
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d0c4      	beq.n	8003fee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	fffffe5f 	.word	0xfffffe5f

08004074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	4909      	ldr	r1, [pc, #36]	; (80040ac <UART_EndRxTransfer+0x38>)
 8004088:	400a      	ands	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	6892      	ldr	r2, [r2, #8]
 8004096:	2101      	movs	r1, #1
 8004098:	438a      	bics	r2, r1
 800409a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	226a      	movs	r2, #106	; 0x6a
 80040a0:	2120      	movs	r1, #32
 80040a2:	5499      	strb	r1, [r3, r2]
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b002      	add	sp, #8
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	fffffedf 	.word	0xfffffedf

080040b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	225a      	movs	r2, #90	; 0x5a
 80040c2:	2100      	movs	r1, #0
 80040c4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2252      	movs	r2, #82	; 0x52
 80040ca:	2100      	movs	r1, #0
 80040cc:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7ff fcbb 	bl	8003a4c <HAL_UART_ErrorCallback>
}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	46bd      	mov	sp, r7
 80040da:	b004      	add	sp, #16
 80040dc:	bd80      	pop	{r7, pc}

080040de <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2269      	movs	r2, #105	; 0x69
 80040ea:	5c9b      	ldrb	r3, [r3, r2]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b21      	cmp	r3, #33	; 0x21
 80040f0:	d147      	bne.n	8004182 <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2252      	movs	r2, #82	; 0x52
 80040f6:	5a9b      	ldrh	r3, [r3, r2]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d111      	bne.n	8004122 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	438a      	bics	r2, r1
 800410c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	2140      	movs	r1, #64	; 0x40
 800411a:	430a      	orrs	r2, r1
 800411c:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e030      	b.n	8004184 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	015b      	lsls	r3, r3, #5
 800412a:	429a      	cmp	r2, r3
 800412c:	d114      	bne.n	8004158 <UART_Transmit_IT+0x7a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d110      	bne.n	8004158 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	8812      	ldrh	r2, [r2, #0]
 8004144:	05d2      	lsls	r2, r2, #23
 8004146:	0dd2      	lsrs	r2, r2, #23
 8004148:	b292      	uxth	r2, r2
 800414a:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004150:	1c9a      	adds	r2, r3, #2
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	64da      	str	r2, [r3, #76]	; 0x4c
 8004156:	e009      	b.n	800416c <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6819      	ldr	r1, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004160:	1c58      	adds	r0, r3, #1
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	64d0      	str	r0, [r2, #76]	; 0x4c
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	850b      	strh	r3, [r1, #40]	; 0x28
      }
      huart->TxXferCount--;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2252      	movs	r2, #82	; 0x52
 8004170:	5a9b      	ldrh	r3, [r3, r2]
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b299      	uxth	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2252      	movs	r2, #82	; 0x52
 800417c:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
  }
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b004      	add	sp, #16
 800418a:	bd80      	pop	{r7, pc}

0800418c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	2140      	movs	r1, #64	; 0x40
 80041a0:	438a      	bics	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2269      	movs	r2, #105	; 0x69
 80041a8:	2120      	movs	r1, #32
 80041aa:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7ff fc3c 	bl	8003a2c <HAL_UART_TxCpltCallback>

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b002      	add	sp, #8
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 80041c8:	230e      	movs	r3, #14
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	215c      	movs	r1, #92	; 0x5c
 80041d0:	5a52      	ldrh	r2, [r2, r1]
 80041d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	226a      	movs	r2, #106	; 0x6a
 80041d8:	5c9b      	ldrb	r3, [r3, r2]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b22      	cmp	r3, #34	; 0x22
 80041de:	d15a      	bne.n	8004296 <UART_Receive_IT+0xd6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	230c      	movs	r3, #12
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80041ea:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	015b      	lsls	r3, r3, #5
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d116      	bne.n	8004226 <UART_Receive_IT+0x66>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d112      	bne.n	8004226 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8004206:	230c      	movs	r3, #12
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	220e      	movs	r2, #14
 800420c:	18ba      	adds	r2, r7, r2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	8812      	ldrh	r2, [r2, #0]
 8004212:	4013      	ands	r3, r2
 8004214:	b29a      	uxth	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	1c9a      	adds	r2, r3, #2
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
 8004224:	e00f      	b.n	8004246 <UART_Receive_IT+0x86>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	1c59      	adds	r1, r3, #1
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6551      	str	r1, [r2, #84]	; 0x54
 8004230:	220c      	movs	r2, #12
 8004232:	18ba      	adds	r2, r7, r2
 8004234:	8812      	ldrh	r2, [r2, #0]
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	210e      	movs	r1, #14
 800423a:	1879      	adds	r1, r7, r1
 800423c:	8809      	ldrh	r1, [r1, #0]
 800423e:	b2c9      	uxtb	r1, r1
 8004240:	400a      	ands	r2, r1
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	225a      	movs	r2, #90	; 0x5a
 800424a:	5a9b      	ldrh	r3, [r3, r2]
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29b      	uxth	r3, r3
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	215a      	movs	r1, #90	; 0x5a
 8004256:	1c18      	adds	r0, r3, #0
 8004258:	5250      	strh	r0, [r2, r1]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d119      	bne.n	8004292 <UART_Receive_IT+0xd2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	4911      	ldr	r1, [pc, #68]	; (80042b0 <UART_Receive_IT+0xf0>)
 800426a:	400a      	ands	r2, r1
 800426c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	6892      	ldr	r2, [r2, #8]
 8004278:	2101      	movs	r1, #1
 800427a:	438a      	bics	r2, r1
 800427c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	226a      	movs	r2, #106	; 0x6a
 8004282:	2120      	movs	r1, #32
 8004284:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0018      	movs	r0, r3
 800428a:	f7ff fbd7 	bl	8003a3c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e00a      	b.n	80042a8 <UART_Receive_IT+0xe8>
    }

    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e008      	b.n	80042a8 <UART_Receive_IT+0xe8>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	6992      	ldr	r2, [r2, #24]
 80042a0:	2108      	movs	r1, #8
 80042a2:	430a      	orrs	r2, r1
 80042a4:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
  }
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b004      	add	sp, #16
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	fffffedf 	.word	0xfffffedf

080042b4 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b002      	add	sp, #8
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80042c8:	f001 fc40 	bl	8005b4c <xTaskGetSchedulerState>
 80042cc:	0003      	movs	r3, r0
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d001      	beq.n	80042d6 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80042d2:	f000 f999 	bl	8004608 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3308      	adds	r3, #8
 80042e8:	001a      	movs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	4252      	negs	r2, r2
 80042f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3308      	adds	r3, #8
 80042fa:	001a      	movs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3308      	adds	r3, #8
 8004304:	001a      	movs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b002      	add	sp, #8
 8004316:	bd80      	pop	{r7, pc}

08004318 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	b002      	add	sp, #8
 800432c:	bd80      	pop	{r7, pc}

0800432e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	601a      	str	r2, [r3, #0]
}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	46bd      	mov	sp, r7
 800436e:	b004      	add	sp, #16
 8004370:	bd80      	pop	{r7, pc}

08004372 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3301      	adds	r3, #1
 8004386:	d103      	bne.n	8004390 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e00c      	b.n	80043aa <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3308      	adds	r3, #8
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e002      	b.n	800439e <vListInsert+0x2c>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d9f6      	bls.n	8004398 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	b004      	add	sp, #16
 80043dc:	bd80      	pop	{r7, pc}

080043de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6892      	ldr	r2, [r2, #8]
 80043f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6852      	ldr	r2, [r2, #4]
 80043fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	d103      	bne.n	8004412 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	1e5a      	subs	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	b004      	add	sp, #16
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3b04      	subs	r3, #4
 8004440:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	0452      	lsls	r2, r2, #17
 8004448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3b04      	subs	r3, #4
 800444e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3b04      	subs	r3, #4
 800445a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800445c:	4a08      	ldr	r2, [pc, #32]	; (8004480 <pxPortInitialiseStack+0x50>)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3b14      	subs	r3, #20
 8004466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3b20      	subs	r3, #32
 8004472:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004474:	68fb      	ldr	r3, [r7, #12]
}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b004      	add	sp, #16
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	08004485 	.word	0x08004485

08004484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <prvTaskExitError+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	d001      	beq.n	8004494 <prvTaskExitError+0x10>
 8004490:	b672      	cpsid	i
 8004492:	e7fe      	b.n	8004492 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8004494:	b672      	cpsid	i
	for( ;; );
 8004496:	e7fe      	b.n	8004496 <prvTaskExitError+0x12>
 8004498:	20000000 	.word	0x20000000

0800449c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80044b0:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <pxCurrentTCBConst2>)
 80044b2:	6813      	ldr	r3, [r2, #0]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	3020      	adds	r0, #32
 80044b8:	f380 8809 	msr	PSP, r0
 80044bc:	2002      	movs	r0, #2
 80044be:	f380 8814 	msr	CONTROL, r0
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80044c8:	46ae      	mov	lr, r5
 80044ca:	bc08      	pop	{r3}
 80044cc:	bc04      	pop	{r2}
 80044ce:	b662      	cpsie	i
 80044d0:	4718      	bx	r3
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	46c0      	nop			; (mov r8, r8)
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	46c0      	nop			; (mov r8, r8)
 80044de:	46c0      	nop			; (mov r8, r8)

080044e0 <pxCurrentTCBConst2>:
 80044e0:	20002048 	.word	0x20002048
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80044e4:	46c0      	nop			; (mov r8, r8)
 80044e6:	46c0      	nop			; (mov r8, r8)

080044e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80044ec:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <xPortStartScheduler+0x3c>)
 80044ee:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <xPortStartScheduler+0x3c>)
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	21ff      	movs	r1, #255	; 0xff
 80044f4:	0409      	lsls	r1, r1, #16
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <xPortStartScheduler+0x3c>)
 80044fc:	4a09      	ldr	r2, [pc, #36]	; (8004524 <xPortStartScheduler+0x3c>)
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	21ff      	movs	r1, #255	; 0xff
 8004502:	0609      	lsls	r1, r1, #24
 8004504:	430a      	orrs	r2, r1
 8004506:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004508:	f000 f898 	bl	800463c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <xPortStartScheduler+0x40>)
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004512:	f7ff ffcd 	bl	80044b0 <vPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8004516:	f7ff ffb5 	bl	8004484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800451a:	2300      	movs	r3, #0
}
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	e000ed20 	.word	0xe000ed20
 8004528:	20000000 	.word	0x20000000

0800452c <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <vPortYield+0x1c>)
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	0552      	lsls	r2, r2, #21
 8004536:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8004538:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800453c:	f3bf 8f6f 	isb	sy
}
 8004540:	46c0      	nop			; (mov r8, r8)
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004550:	b672      	cpsid	i
    uxCriticalNesting++;
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <vPortEnterCritical+0x20>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <vPortEnterCritical+0x20>)
 800455a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800455c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004560:	f3bf 8f6f 	isb	sy
}
 8004564:	46c0      	nop			; (mov r8, r8)
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	20000000 	.word	0x20000000

08004570 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <vPortExitCritical+0x2c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <vPortExitCritical+0x10>
 800457c:	b672      	cpsid	i
 800457e:	e7fe      	b.n	800457e <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <vPortExitCritical+0x2c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	1e5a      	subs	r2, r3, #1
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <vPortExitCritical+0x2c>)
 8004588:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800458a:	4b04      	ldr	r3, [pc, #16]	; (800459c <vPortExitCritical+0x2c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d100      	bne.n	8004594 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004592:	b662      	cpsie	i
    }
}
 8004594:	46c0      	nop			; (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	20000000 	.word	0x20000000

080045a0 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80045a0:	f3ef 8010 	mrs	r0, PRIMASK
 80045a4:	b672      	cpsid	i
 80045a6:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	0018      	movs	r0, r3

080045ac <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 80045ac:	f380 8810 	msr	PRIMASK, r0
 80045b0:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
 80045b2:	46c0      	nop			; (mov r8, r8)
	...

080045c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045c0:	f3ef 8009 	mrs	r0, PSP
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <pxCurrentTCBConst>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	3820      	subs	r0, #32
 80045ca:	6010      	str	r0, [r2, #0]
 80045cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80045ce:	4644      	mov	r4, r8
 80045d0:	464d      	mov	r5, r9
 80045d2:	4656      	mov	r6, sl
 80045d4:	465f      	mov	r7, fp
 80045d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80045d8:	b508      	push	{r3, lr}
 80045da:	b672      	cpsid	i
 80045dc:	f001 f8b4 	bl	8005748 <vTaskSwitchContext>
 80045e0:	b662      	cpsie	i
 80045e2:	bc0c      	pop	{r2, r3}
 80045e4:	6811      	ldr	r1, [r2, #0]
 80045e6:	6808      	ldr	r0, [r1, #0]
 80045e8:	3010      	adds	r0, #16
 80045ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80045ec:	46a0      	mov	r8, r4
 80045ee:	46a9      	mov	r9, r5
 80045f0:	46b2      	mov	sl, r6
 80045f2:	46bb      	mov	fp, r7
 80045f4:	f380 8809 	msr	PSP, r0
 80045f8:	3820      	subs	r0, #32
 80045fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80045fc:	4718      	bx	r3
 80045fe:	46c0      	nop			; (mov r8, r8)

08004600 <pxCurrentTCBConst>:
 8004600:	20002048 	.word	0x20002048
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	46c0      	nop			; (mov r8, r8)

08004608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800460e:	f7ff ffc7 	bl	80045a0 <ulSetInterruptMaskFromISR>
 8004612:	0003      	movs	r3, r0
 8004614:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004616:	f000 ffe3 	bl	80055e0 <xTaskIncrementTick>
 800461a:	1e03      	subs	r3, r0, #0
 800461c:	d003      	beq.n	8004626 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <xPortSysTickHandler+0x30>)
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	0552      	lsls	r2, r2, #21
 8004624:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	0018      	movs	r0, r3
 800462a:	f7ff ffbf 	bl	80045ac <vClearInterruptMaskFromISR>
}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	46bd      	mov	sp, r7
 8004632:	b002      	add	sp, #8
 8004634:	bd80      	pop	{r7, pc}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800463c:	b5b0      	push	{r4, r5, r7, lr}
 800463e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004640:	4c07      	ldr	r4, [pc, #28]	; (8004660 <vPortSetupTimerInterrupt+0x24>)
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <vPortSetupTimerInterrupt+0x28>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	21c8      	movs	r1, #200	; 0xc8
 8004648:	0018      	movs	r0, r3
 800464a:	f7fb fd65 	bl	8000118 <__udivsi3>
 800464e:	0003      	movs	r3, r0
 8004650:	3b01      	subs	r3, #1
 8004652:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <vPortSetupTimerInterrupt+0x2c>)
 8004656:	2207      	movs	r2, #7
 8004658:	601a      	str	r2, [r3, #0]
}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	46bd      	mov	sp, r7
 800465e:	bdb0      	pop	{r4, r5, r7, pc}
 8004660:	e000e014 	.word	0xe000e014
 8004664:	20000064 	.word	0x20000064
 8004668:	e000e010 	.word	0xe000e010

0800466c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004678:	f000 ff0c 	bl	8005494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800467c:	4b49      	ldr	r3, [pc, #292]	; (80047a4 <pvPortMalloc+0x138>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004684:	f000 f8e0 	bl	8004848 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004688:	4b47      	ldr	r3, [pc, #284]	; (80047a8 <pvPortMalloc+0x13c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	4013      	ands	r3, r2
 8004690:	d000      	beq.n	8004694 <pvPortMalloc+0x28>
 8004692:	e079      	b.n	8004788 <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d012      	beq.n	80046c0 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800469a:	2208      	movs	r2, #8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2207      	movs	r2, #7
 80046a6:	4013      	ands	r3, r2
 80046a8:	d00a      	beq.n	80046c0 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2207      	movs	r2, #7
 80046ae:	4393      	bics	r3, r2
 80046b0:	3308      	adds	r3, #8
 80046b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2207      	movs	r2, #7
 80046b8:	4013      	ands	r3, r2
 80046ba:	d001      	beq.n	80046c0 <pvPortMalloc+0x54>
 80046bc:	b672      	cpsid	i
 80046be:	e7fe      	b.n	80046be <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d060      	beq.n	8004788 <pvPortMalloc+0x11c>
 80046c6:	4b39      	ldr	r3, [pc, #228]	; (80047ac <pvPortMalloc+0x140>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d85b      	bhi.n	8004788 <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046d0:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <pvPortMalloc+0x144>)
 80046d2:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80046d4:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <pvPortMalloc+0x144>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046da:	e004      	b.n	80046e6 <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d203      	bcs.n	80046f8 <pvPortMalloc+0x8c>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f1      	bne.n	80046dc <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046f8:	4b2a      	ldr	r3, [pc, #168]	; (80047a4 <pvPortMalloc+0x138>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d042      	beq.n	8004788 <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2208      	movs	r2, #8
 8004708:	189b      	adds	r3, r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1ad2      	subs	r2, r2, r3
 800471c:	2308      	movs	r3, #8
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	429a      	cmp	r2, r3
 8004722:	d916      	bls.n	8004752 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	18d3      	adds	r3, r2, r3
 800472a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2207      	movs	r2, #7
 8004730:	4013      	ands	r3, r2
 8004732:	d001      	beq.n	8004738 <pvPortMalloc+0xcc>
 8004734:	b672      	cpsid	i
 8004736:	e7fe      	b.n	8004736 <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	0018      	movs	r0, r3
 800474e:	f000 f8db 	bl	8004908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <pvPortMalloc+0x140>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	1ad2      	subs	r2, r2, r3
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <pvPortMalloc+0x140>)
 800475e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004760:	4b12      	ldr	r3, [pc, #72]	; (80047ac <pvPortMalloc+0x140>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <pvPortMalloc+0x148>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d203      	bcs.n	8004774 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <pvPortMalloc+0x140>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <pvPortMalloc+0x148>)
 8004772:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <pvPortMalloc+0x13c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	431a      	orrs	r2, r3
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004788:	f000 fe90 	bl	80054ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2207      	movs	r2, #7
 8004790:	4013      	ands	r3, r2
 8004792:	d001      	beq.n	8004798 <pvPortMalloc+0x12c>
 8004794:	b672      	cpsid	i
 8004796:	e7fe      	b.n	8004796 <pvPortMalloc+0x12a>
	return pvReturn;
 8004798:	68fb      	ldr	r3, [r7, #12]
}
 800479a:	0018      	movs	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	b006      	add	sp, #24
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	20002038 	.word	0x20002038
 80047a8:	20002044 	.word	0x20002044
 80047ac:	2000203c 	.word	0x2000203c
 80047b0:	20002030 	.word	0x20002030
 80047b4:	20002040 	.word	0x20002040

080047b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d035      	beq.n	8004836 <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047ca:	2308      	movs	r3, #8
 80047cc:	425b      	negs	r3, r3
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	18d3      	adds	r3, r2, r3
 80047d2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4b18      	ldr	r3, [pc, #96]	; (8004840 <vPortFree+0x88>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4013      	ands	r3, r2
 80047e2:	d101      	bne.n	80047e8 <vPortFree+0x30>
 80047e4:	b672      	cpsid	i
 80047e6:	e7fe      	b.n	80047e6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <vPortFree+0x3c>
 80047f0:	b672      	cpsid	i
 80047f2:	e7fe      	b.n	80047f2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <vPortFree+0x88>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4013      	ands	r3, r2
 80047fe:	d01a      	beq.n	8004836 <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d116      	bne.n	8004836 <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <vPortFree+0x88>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004818:	f000 fe3c 	bl	8005494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	4b08      	ldr	r3, [pc, #32]	; (8004844 <vPortFree+0x8c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	18d2      	adds	r2, r2, r3
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <vPortFree+0x8c>)
 8004828:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	0018      	movs	r0, r3
 800482e:	f000 f86b 	bl	8004908 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004832:	f000 fe3b 	bl	80054ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b004      	add	sp, #16
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	20002044 	.word	0x20002044
 8004844:	2000203c 	.word	0x2000203c

08004848 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800484e:	23fa      	movs	r3, #250	; 0xfa
 8004850:	015b      	lsls	r3, r3, #5
 8004852:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004854:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <prvHeapInit+0xa8>)
 8004856:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2207      	movs	r2, #7
 800485c:	4013      	ands	r3, r2
 800485e:	d00c      	beq.n	800487a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3307      	adds	r3, #7
 8004864:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2207      	movs	r2, #7
 800486a:	4393      	bics	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1ad2      	subs	r2, r2, r3
 8004874:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <prvHeapInit+0xa8>)
 8004876:	18d3      	adds	r3, r2, r3
 8004878:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800487e:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <prvHeapInit+0xac>)
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <prvHeapInit+0xac>)
 8004886:	2200      	movs	r2, #0
 8004888:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	18d3      	adds	r3, r2, r3
 8004890:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004892:	2208      	movs	r2, #8
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2207      	movs	r2, #7
 800489e:	4393      	bics	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <prvHeapInit+0xb0>)
 80048a6:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <prvHeapInit+0xb0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2200      	movs	r2, #0
 80048ae:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048b0:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <prvHeapInit+0xb0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	1ad2      	subs	r2, r2, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <prvHeapInit+0xb0>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <prvHeapInit+0xb4>)
 80048d4:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <prvHeapInit+0xb8>)
 80048dc:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <prvHeapInit+0xbc>)
 80048e0:	2280      	movs	r2, #128	; 0x80
 80048e2:	0612      	lsls	r2, r2, #24
 80048e4:	601a      	str	r2, [r3, #0]
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b004      	add	sp, #16
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	200000f0 	.word	0x200000f0
 80048f4:	20002030 	.word	0x20002030
 80048f8:	20002038 	.word	0x20002038
 80048fc:	20002040 	.word	0x20002040
 8004900:	2000203c 	.word	0x2000203c
 8004904:	20002044 	.word	0x20002044

08004908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004910:	4b27      	ldr	r3, [pc, #156]	; (80049b0 <prvInsertBlockIntoFreeList+0xa8>)
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e002      	b.n	800491c <prvInsertBlockIntoFreeList+0x14>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d3f7      	bcc.n	8004916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	18d2      	adds	r2, r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d108      	bne.n	800494a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	18d2      	adds	r2, r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	18d2      	adds	r2, r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d118      	bne.n	8004990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b14      	ldr	r3, [pc, #80]	; (80049b4 <prvInsertBlockIntoFreeList+0xac>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d00d      	beq.n	8004986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	18d2      	adds	r2, r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e008      	b.n	8004998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <prvInsertBlockIntoFreeList+0xac>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e003      	b.n	8004998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d002      	beq.n	80049a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b004      	add	sp, #16
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	20002030 	.word	0x20002030
 80049b4:	20002038 	.word	0x20002038

080049b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <xQueueGenericReset+0x18>
 80049cc:	b672      	cpsid	i
 80049ce:	e7fe      	b.n	80049ce <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80049d0:	f7ff fdbc 	bl	800454c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	434b      	muls	r3, r1
 80049e2:	18d2      	adds	r2, r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	1e59      	subs	r1, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	434b      	muls	r3, r1
 8004a06:	18d2      	adds	r2, r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2244      	movs	r2, #68	; 0x44
 8004a10:	21ff      	movs	r1, #255	; 0xff
 8004a12:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2245      	movs	r2, #69	; 0x45
 8004a18:	21ff      	movs	r1, #255	; 0xff
 8004a1a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10d      	bne.n	8004a3e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d013      	beq.n	8004a52 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3310      	adds	r3, #16
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 fefa 	bl	8005828 <xTaskRemoveFromEventList>
 8004a34:	1e03      	subs	r3, r0, #0
 8004a36:	d00c      	beq.n	8004a52 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a38:	f7ff fd78 	bl	800452c <vPortYield>
 8004a3c:	e009      	b.n	8004a52 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3310      	adds	r3, #16
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7ff fc4a 	bl	80042dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3324      	adds	r3, #36	; 0x24
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7ff fc45 	bl	80042dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a52:	f7ff fd8d 	bl	8004570 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a56:	2301      	movs	r3, #1
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b004      	add	sp, #16
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b08b      	sub	sp, #44	; 0x2c
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	1dfb      	adds	r3, r7, #7
 8004a6c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <xQueueGenericCreate+0x18>
 8004a74:	b672      	cpsid	i
 8004a76:	e7fe      	b.n	8004a76 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	e003      	b.n	8004a8c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	4353      	muls	r3, r2
 8004a8a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	3350      	adds	r3, #80	; 0x50
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7ff fdeb 	bl	800466c <pvPortMalloc>
 8004a96:	0003      	movs	r3, r0
 8004a98:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00c      	beq.n	8004aba <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	3350      	adds	r3, #80	; 0x50
 8004aa4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aa6:	1dfb      	adds	r3, r7, #7
 8004aa8:	781c      	ldrb	r4, [r3, #0]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	0023      	movs	r3, r4
 8004ab6:	f000 f805 	bl	8004ac4 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8004aba:	69bb      	ldr	r3, [r7, #24]
	}
 8004abc:	0018      	movs	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b009      	add	sp, #36	; 0x24
 8004ac2:	bd90      	pop	{r4, r7, pc}

08004ac4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	001a      	movs	r2, r3
 8004ad2:	1cfb      	adds	r3, r7, #3
 8004ad4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e002      	b.n	8004aea <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2101      	movs	r1, #1
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7ff ff5c 	bl	80049b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	1cfa      	adds	r2, r7, #3
 8004b04:	214c      	movs	r1, #76	; 0x4c
 8004b06:	7812      	ldrb	r2, [r2, #0]
 8004b08:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b004      	add	sp, #16
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00e      	beq.n	8004b3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	2300      	movs	r3, #0
 8004b36:	2200      	movs	r2, #0
 8004b38:	2100      	movs	r1, #0
 8004b3a:	f000 f820 	bl	8004b7e <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	0002      	movs	r2, r0
 8004b4e:	1dfb      	adds	r3, r7, #7
 8004b50:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b52:	2301      	movs	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b5a:	1dfb      	adds	r3, r7, #7
 8004b5c:	781a      	ldrb	r2, [r3, #0]
 8004b5e:	6939      	ldr	r1, [r7, #16]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7ff ff7c 	bl	8004a60 <xQueueGenericCreate>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7ff ffcf 	bl	8004b12 <prvInitialiseMutex>

		return pxNewQueue;
 8004b74:	68fb      	ldr	r3, [r7, #12]
	}
 8004b76:	0018      	movs	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b006      	add	sp, #24
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b08a      	sub	sp, #40	; 0x28
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <xQueueGenericSend+0x20>
 8004b9a:	b672      	cpsid	i
 8004b9c:	e7fe      	b.n	8004b9c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d103      	bne.n	8004bac <xQueueGenericSend+0x2e>
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <xQueueGenericSend+0x32>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <xQueueGenericSend+0x34>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <xQueueGenericSend+0x3c>
 8004bb6:	b672      	cpsid	i
 8004bb8:	e7fe      	b.n	8004bb8 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d103      	bne.n	8004bc8 <xQueueGenericSend+0x4a>
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <xQueueGenericSend+0x4e>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <xQueueGenericSend+0x50>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <xQueueGenericSend+0x58>
 8004bd2:	b672      	cpsid	i
 8004bd4:	e7fe      	b.n	8004bd4 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bd6:	f000 ffb9 	bl	8005b4c <xTaskGetSchedulerState>
 8004bda:	1e03      	subs	r3, r0, #0
 8004bdc:	d102      	bne.n	8004be4 <xQueueGenericSend+0x66>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <xQueueGenericSend+0x6a>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <xQueueGenericSend+0x6c>
 8004be8:	2300      	movs	r3, #0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <xQueueGenericSend+0x74>
 8004bee:	b672      	cpsid	i
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bf2:	f7ff fcab 	bl	800454c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <xQueueGenericSend+0x8a>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d11e      	bne.n	8004c46 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f000 f95d 	bl	8004ece <prvCopyDataToQueue>
 8004c14:	0003      	movs	r3, r0
 8004c16:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d009      	beq.n	8004c34 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	3324      	adds	r3, #36	; 0x24
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 fdff 	bl	8005828 <xTaskRemoveFromEventList>
 8004c2a:	1e03      	subs	r3, r0, #0
 8004c2c:	d007      	beq.n	8004c3e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c2e:	f7ff fc7d 	bl	800452c <vPortYield>
 8004c32:	e004      	b.n	8004c3e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c3a:	f7ff fc77 	bl	800452c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c3e:	f7ff fc97 	bl	8004570 <vPortExitCritical>
				return pdPASS;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e05b      	b.n	8004cfe <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d103      	bne.n	8004c54 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c4c:	f7ff fc90 	bl	8004570 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	e054      	b.n	8004cfe <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004c5a:	2314      	movs	r3, #20
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f000 fe3e 	bl	80058e0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c64:	2301      	movs	r3, #1
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c68:	f7ff fc82 	bl	8004570 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c6c:	f000 fc12 	bl	8005494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c70:	f7ff fc6c 	bl	800454c <vPortEnterCritical>
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	2244      	movs	r2, #68	; 0x44
 8004c78:	5c9b      	ldrb	r3, [r3, r2]
 8004c7a:	b25b      	sxtb	r3, r3
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	d103      	bne.n	8004c88 <xQueueGenericSend+0x10a>
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2244      	movs	r2, #68	; 0x44
 8004c84:	2100      	movs	r1, #0
 8004c86:	5499      	strb	r1, [r3, r2]
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	2245      	movs	r2, #69	; 0x45
 8004c8c:	5c9b      	ldrb	r3, [r3, r2]
 8004c8e:	b25b      	sxtb	r3, r3
 8004c90:	3301      	adds	r3, #1
 8004c92:	d103      	bne.n	8004c9c <xQueueGenericSend+0x11e>
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	2245      	movs	r2, #69	; 0x45
 8004c98:	2100      	movs	r1, #0
 8004c9a:	5499      	strb	r1, [r3, r2]
 8004c9c:	f7ff fc68 	bl	8004570 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ca0:	1d3a      	adds	r2, r7, #4
 8004ca2:	2314      	movs	r3, #20
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	0011      	movs	r1, r2
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f000 fe33 	bl	8005914 <xTaskCheckForTimeOut>
 8004cae:	1e03      	subs	r3, r0, #0
 8004cb0:	d11e      	bne.n	8004cf0 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f000 fa11 	bl	80050dc <prvIsQueueFull>
 8004cba:	1e03      	subs	r3, r0, #0
 8004cbc:	d011      	beq.n	8004ce2 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	3310      	adds	r3, #16
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	0011      	movs	r1, r2
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f000 fd90 	bl	80057ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 f98e 	bl	8004ff0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cd4:	f000 fbea 	bl	80054ac <xTaskResumeAll>
 8004cd8:	1e03      	subs	r3, r0, #0
 8004cda:	d18a      	bne.n	8004bf2 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004cdc:	f7ff fc26 	bl	800452c <vPortYield>
 8004ce0:	e787      	b.n	8004bf2 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 f983 	bl	8004ff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cea:	f000 fbdf 	bl	80054ac <xTaskResumeAll>
 8004cee:	e780      	b.n	8004bf2 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f000 f97c 	bl	8004ff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cf8:	f000 fbd8 	bl	80054ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004cfc:	2300      	movs	r3, #0
		}
	}
}
 8004cfe:	0018      	movs	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b00a      	add	sp, #40	; 0x28
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b08a      	sub	sp, #40	; 0x28
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <xQueueGenericReceive+0x20>
 8004d22:	b672      	cpsid	i
 8004d24:	e7fe      	b.n	8004d24 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d103      	bne.n	8004d34 <xQueueGenericReceive+0x2e>
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <xQueueGenericReceive+0x32>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <xQueueGenericReceive+0x34>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <xQueueGenericReceive+0x3c>
 8004d3e:	b672      	cpsid	i
 8004d40:	e7fe      	b.n	8004d40 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d42:	f000 ff03 	bl	8005b4c <xTaskGetSchedulerState>
 8004d46:	1e03      	subs	r3, r0, #0
 8004d48:	d102      	bne.n	8004d50 <xQueueGenericReceive+0x4a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <xQueueGenericReceive+0x4e>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <xQueueGenericReceive+0x50>
 8004d54:	2300      	movs	r3, #0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <xQueueGenericReceive+0x58>
 8004d5a:	b672      	cpsid	i
 8004d5c:	e7fe      	b.n	8004d5c <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d5e:	f7ff fbf5 	bl	800454c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d03a      	beq.n	8004de4 <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	0011      	movs	r1, r2
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 f912 	bl	8004fa4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d11a      	bne.n	8004dbc <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	1e5a      	subs	r2, r3, #1
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d104      	bne.n	8004da0 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004d96:	f000 ffaf 	bl	8005cf8 <pvTaskIncrementMutexHeldCount>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d019      	beq.n	8004ddc <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	3310      	adds	r3, #16
 8004dac:	0018      	movs	r0, r3
 8004dae:	f000 fd3b 	bl	8005828 <xTaskRemoveFromEventList>
 8004db2:	1e03      	subs	r3, r0, #0
 8004db4:	d012      	beq.n	8004ddc <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8004db6:	f7ff fbb9 	bl	800452c <vPortYield>
 8004dba:	e00f      	b.n	8004ddc <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	3324      	adds	r3, #36	; 0x24
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f000 fd2a 	bl	8005828 <xTaskRemoveFromEventList>
 8004dd4:	1e03      	subs	r3, r0, #0
 8004dd6:	d001      	beq.n	8004ddc <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8004dd8:	f7ff fba8 	bl	800452c <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8004ddc:	f7ff fbc8 	bl	8004570 <vPortExitCritical>
				return pdPASS;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e070      	b.n	8004ec6 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dea:	f7ff fbc1 	bl	8004570 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e069      	b.n	8004ec6 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004df8:	2310      	movs	r3, #16
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f000 fd6f 	bl	80058e0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e02:	2301      	movs	r3, #1
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e06:	f7ff fbb3 	bl	8004570 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e0a:	f000 fb43 	bl	8005494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e0e:	f7ff fb9d 	bl	800454c <vPortEnterCritical>
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	2244      	movs	r2, #68	; 0x44
 8004e16:	5c9b      	ldrb	r3, [r3, r2]
 8004e18:	b25b      	sxtb	r3, r3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	d103      	bne.n	8004e26 <xQueueGenericReceive+0x120>
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	2244      	movs	r2, #68	; 0x44
 8004e22:	2100      	movs	r1, #0
 8004e24:	5499      	strb	r1, [r3, r2]
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	2245      	movs	r2, #69	; 0x45
 8004e2a:	5c9b      	ldrb	r3, [r3, r2]
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	d103      	bne.n	8004e3a <xQueueGenericReceive+0x134>
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	2245      	movs	r2, #69	; 0x45
 8004e36:	2100      	movs	r1, #0
 8004e38:	5499      	strb	r1, [r3, r2]
 8004e3a:	f7ff fb99 	bl	8004570 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e3e:	1d3a      	adds	r2, r7, #4
 8004e40:	2310      	movs	r3, #16
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	0011      	movs	r1, r2
 8004e46:	0018      	movs	r0, r3
 8004e48:	f000 fd64 	bl	8005914 <xTaskCheckForTimeOut>
 8004e4c:	1e03      	subs	r3, r0, #0
 8004e4e:	d12c      	bne.n	8004eaa <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 f92c 	bl	80050b0 <prvIsQueueEmpty>
 8004e58:	1e03      	subs	r3, r0, #0
 8004e5a:	d01f      	beq.n	8004e9c <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d108      	bne.n	8004e76 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
 8004e64:	f7ff fb72 	bl	800454c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f000 fe89 	bl	8005b84 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8004e72:	f7ff fb7d 	bl	8004570 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	3324      	adds	r3, #36	; 0x24
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	0011      	movs	r1, r2
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f000 fcb4 	bl	80057ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	0018      	movs	r0, r3
 8004e88:	f000 f8b2 	bl	8004ff0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e8c:	f000 fb0e 	bl	80054ac <xTaskResumeAll>
 8004e90:	1e03      	subs	r3, r0, #0
 8004e92:	d000      	beq.n	8004e96 <xQueueGenericReceive+0x190>
 8004e94:	e763      	b.n	8004d5e <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 8004e96:	f7ff fb49 	bl	800452c <vPortYield>
 8004e9a:	e760      	b.n	8004d5e <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 f8a6 	bl	8004ff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ea4:	f000 fb02 	bl	80054ac <xTaskResumeAll>
 8004ea8:	e759      	b.n	8004d5e <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	0018      	movs	r0, r3
 8004eae:	f000 f89f 	bl	8004ff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eb2:	f000 fafb 	bl	80054ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f000 f8f9 	bl	80050b0 <prvIsQueueEmpty>
 8004ebe:	1e03      	subs	r3, r0, #0
 8004ec0:	d100      	bne.n	8004ec4 <xQueueGenericReceive+0x1be>
 8004ec2:	e74c      	b.n	8004d5e <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ec4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b00a      	add	sp, #40	; 0x28
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b086      	sub	sp, #24
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10e      	bne.n	8004f0a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d14e      	bne.n	8004f92 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f000 fea1 	bl	8005c40 <xTaskPriorityDisinherit>
 8004efe:	0003      	movs	r3, r0
 8004f00:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	605a      	str	r2, [r3, #4]
 8004f08:	e043      	b.n	8004f92 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d119      	bne.n	8004f44 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6898      	ldr	r0, [r3, #8]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	f003 f826 	bl	8007f6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	18d2      	adds	r2, r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d32b      	bcc.n	8004f92 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	609a      	str	r2, [r3, #8]
 8004f42:	e026      	b.n	8004f92 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	68d8      	ldr	r0, [r3, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	0019      	movs	r1, r3
 8004f50:	f003 f80c 	bl	8007f6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	425b      	negs	r3, r3
 8004f5e:	18d2      	adds	r2, r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d207      	bcs.n	8004f80 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	425b      	negs	r3, r3
 8004f7a:	18d2      	adds	r2, r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d105      	bne.n	8004f92 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f9a:	697b      	ldr	r3, [r7, #20]
}
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b006      	add	sp, #24
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d018      	beq.n	8004fe8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	18d2      	adds	r2, r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d303      	bcc.n	8004fd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68d9      	ldr	r1, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f002 ffc2 	bl	8007f6c <memcpy>
	}
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b002      	add	sp, #8
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ff8:	f7ff faa8 	bl	800454c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ffc:	230f      	movs	r3, #15
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	2145      	movs	r1, #69	; 0x45
 8005004:	5c52      	ldrb	r2, [r2, r1]
 8005006:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005008:	e014      	b.n	8005034 <prvUnlockQueue+0x44>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d017      	beq.n	8005042 <prvUnlockQueue+0x52>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3324      	adds	r3, #36	; 0x24
 8005016:	0018      	movs	r0, r3
 8005018:	f000 fc06 	bl	8005828 <xTaskRemoveFromEventList>
 800501c:	1e03      	subs	r3, r0, #0
 800501e:	d001      	beq.n	8005024 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005020:	f000 fcc6 	bl	80059b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005024:	230f      	movs	r3, #15
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	3b01      	subs	r3, #1
 800502c:	b2da      	uxtb	r2, r3
 800502e:	230f      	movs	r3, #15
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005034:	230f      	movs	r3, #15
 8005036:	18fb      	adds	r3, r7, r3
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	b25b      	sxtb	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	dce4      	bgt.n	800500a <prvUnlockQueue+0x1a>
 8005040:	e000      	b.n	8005044 <prvUnlockQueue+0x54>
					break;
 8005042:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2245      	movs	r2, #69	; 0x45
 8005048:	21ff      	movs	r1, #255	; 0xff
 800504a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800504c:	f7ff fa90 	bl	8004570 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005050:	f7ff fa7c 	bl	800454c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005054:	230e      	movs	r3, #14
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	2144      	movs	r1, #68	; 0x44
 800505c:	5c52      	ldrb	r2, [r2, r1]
 800505e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005060:	e014      	b.n	800508c <prvUnlockQueue+0x9c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d017      	beq.n	800509a <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3310      	adds	r3, #16
 800506e:	0018      	movs	r0, r3
 8005070:	f000 fbda 	bl	8005828 <xTaskRemoveFromEventList>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d001      	beq.n	800507c <prvUnlockQueue+0x8c>
				{
					vTaskMissedYield();
 8005078:	f000 fc9a 	bl	80059b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800507c:	230e      	movs	r3, #14
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	3b01      	subs	r3, #1
 8005084:	b2da      	uxtb	r2, r3
 8005086:	230e      	movs	r3, #14
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800508c:	230e      	movs	r3, #14
 800508e:	18fb      	adds	r3, r7, r3
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b25b      	sxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	dce4      	bgt.n	8005062 <prvUnlockQueue+0x72>
 8005098:	e000      	b.n	800509c <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 800509a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2244      	movs	r2, #68	; 0x44
 80050a0:	21ff      	movs	r1, #255	; 0xff
 80050a2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80050a4:	f7ff fa64 	bl	8004570 <vPortExitCritical>
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b004      	add	sp, #16
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050b8:	f7ff fa48 	bl	800454c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e001      	b.n	80050ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ce:	f7ff fa4f 	bl	8004570 <vPortExitCritical>

	return xReturn;
 80050d2:	68fb      	ldr	r3, [r7, #12]
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b004      	add	sp, #16
 80050da:	bd80      	pop	{r7, pc}

080050dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050e4:	f7ff fa32 	bl	800454c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d102      	bne.n	80050fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050f4:	2301      	movs	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e001      	b.n	80050fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050fe:	f7ff fa37 	bl	8004570 <vPortExitCritical>

	return xReturn;
 8005102:	68fb      	ldr	r3, [r7, #12]
}
 8005104:	0018      	movs	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	b004      	add	sp, #16
 800510a:	bd80      	pop	{r7, pc}

0800510c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b08d      	sub	sp, #52	; 0x34
 8005110:	af04      	add	r7, sp, #16
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	1dbb      	adds	r3, r7, #6
 800511a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800511c:	1dbb      	adds	r3, r7, #6
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	0018      	movs	r0, r3
 8005124:	f7ff faa2 	bl	800466c <pvPortMalloc>
 8005128:	0003      	movs	r3, r0
 800512a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d010      	beq.n	8005154 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005132:	205c      	movs	r0, #92	; 0x5c
 8005134:	f7ff fa9a 	bl	800466c <pvPortMalloc>
 8005138:	0003      	movs	r3, r0
 800513a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
 8005148:	e006      	b.n	8005158 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	0018      	movs	r0, r3
 800514e:	f7ff fb33 	bl	80047b8 <vPortFree>
 8005152:	e001      	b.n	8005158 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005154:	2300      	movs	r3, #0
 8005156:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d016      	beq.n	800518c <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800515e:	1dbb      	adds	r3, r7, #6
 8005160:	881a      	ldrh	r2, [r3, #0]
 8005162:	683c      	ldr	r4, [r7, #0]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	2300      	movs	r3, #0
 800516a:	9303      	str	r3, [sp, #12]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	9302      	str	r3, [sp, #8]
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	0023      	movs	r3, r4
 800517a:	f000 f80f 	bl	800519c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	0018      	movs	r0, r3
 8005182:	f000 f88d 	bl	80052a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005186:	2301      	movs	r3, #1
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	e002      	b.n	8005192 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800518c:	2301      	movs	r3, #1
 800518e:	425b      	negs	r3, r3
 8005190:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005192:	69bb      	ldr	r3, [r7, #24]
	}
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	b009      	add	sp, #36	; 0x24
 800519a:	bd90      	pop	{r4, r7, pc}

0800519c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	001a      	movs	r2, r3
 80051b4:	21a5      	movs	r1, #165	; 0xa5
 80051b6:	f002 fee2 	bl	8007f7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4936      	ldr	r1, [pc, #216]	; (800529c <prvInitialiseNewTask+0x100>)
 80051c2:	468c      	mov	ip, r1
 80051c4:	4463      	add	r3, ip
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	18d3      	adds	r3, r2, r3
 80051ca:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2207      	movs	r2, #7
 80051d0:	4393      	bics	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2207      	movs	r2, #7
 80051d8:	4013      	ands	r3, r2
 80051da:	d001      	beq.n	80051e0 <prvInitialiseNewTask+0x44>
 80051dc:	b672      	cpsid	i
 80051de:	e7fe      	b.n	80051de <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	e013      	b.n	800520e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	18d3      	adds	r3, r2, r3
 80051ec:	7818      	ldrb	r0, [r3, #0]
 80051ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051f0:	2134      	movs	r1, #52	; 0x34
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	18d3      	adds	r3, r2, r3
 80051f6:	185b      	adds	r3, r3, r1
 80051f8:	1c02      	adds	r2, r0, #0
 80051fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	18d3      	adds	r3, r2, r3
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d006      	beq.n	8005216 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	3301      	adds	r3, #1
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b0f      	cmp	r3, #15
 8005212:	d9e8      	bls.n	80051e6 <prvInitialiseNewTask+0x4a>
 8005214:	e000      	b.n	8005218 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005216:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	2243      	movs	r2, #67	; 0x43
 800521c:	2100      	movs	r1, #0
 800521e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	2b04      	cmp	r3, #4
 8005224:	d901      	bls.n	800522a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005226:	2304      	movs	r3, #4
 8005228:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	6a3a      	ldr	r2, [r7, #32]
 800522e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	6a3a      	ldr	r2, [r7, #32]
 8005234:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	2200      	movs	r2, #0
 800523a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	3304      	adds	r3, #4
 8005240:	0018      	movs	r0, r3
 8005242:	f7ff f869 	bl	8004318 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	3318      	adds	r3, #24
 800524a:	0018      	movs	r0, r3
 800524c:	f7ff f864 	bl	8004318 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005254:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	2205      	movs	r2, #5
 800525a:	1ad2      	subs	r2, r2, r3
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005264:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	2200      	movs	r2, #0
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	2258      	movs	r2, #88	; 0x58
 8005270:	2100      	movs	r1, #0
 8005272:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	0018      	movs	r0, r3
 800527c:	f7ff f8d8 	bl	8004430 <pxPortInitialiseStack>
 8005280:	0002      	movs	r2, r0
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005290:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b006      	add	sp, #24
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	3fffffff 	.word	0x3fffffff

080052a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052a8:	f7ff f950 	bl	800454c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052ac:	4b2a      	ldr	r3, [pc, #168]	; (8005358 <prvAddNewTaskToReadyList+0xb8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	4b29      	ldr	r3, [pc, #164]	; (8005358 <prvAddNewTaskToReadyList+0xb8>)
 80052b4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80052b6:	4b29      	ldr	r3, [pc, #164]	; (800535c <prvAddNewTaskToReadyList+0xbc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052be:	4b27      	ldr	r3, [pc, #156]	; (800535c <prvAddNewTaskToReadyList+0xbc>)
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052c4:	4b24      	ldr	r3, [pc, #144]	; (8005358 <prvAddNewTaskToReadyList+0xb8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d110      	bne.n	80052ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052cc:	f000 fb8a 	bl	80059e4 <prvInitialiseTaskLists>
 80052d0:	e00d      	b.n	80052ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052d2:	4b23      	ldr	r3, [pc, #140]	; (8005360 <prvAddNewTaskToReadyList+0xc0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052da:	4b20      	ldr	r3, [pc, #128]	; (800535c <prvAddNewTaskToReadyList+0xbc>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d802      	bhi.n	80052ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052e8:	4b1c      	ldr	r3, [pc, #112]	; (800535c <prvAddNewTaskToReadyList+0xbc>)
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052ee:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <prvAddNewTaskToReadyList+0xc4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	4b1b      	ldr	r3, [pc, #108]	; (8005364 <prvAddNewTaskToReadyList+0xc4>)
 80052f6:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052f8:	4b1a      	ldr	r3, [pc, #104]	; (8005364 <prvAddNewTaskToReadyList+0xc4>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	4b18      	ldr	r3, [pc, #96]	; (8005368 <prvAddNewTaskToReadyList+0xc8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d903      	bls.n	8005314 <prvAddNewTaskToReadyList+0x74>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005310:	4b15      	ldr	r3, [pc, #84]	; (8005368 <prvAddNewTaskToReadyList+0xc8>)
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	0013      	movs	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	189b      	adds	r3, r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4a12      	ldr	r2, [pc, #72]	; (800536c <prvAddNewTaskToReadyList+0xcc>)
 8005322:	189a      	adds	r2, r3, r2
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	0019      	movs	r1, r3
 800532a:	0010      	movs	r0, r2
 800532c:	f7fe ffff 	bl	800432e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005330:	f7ff f91e 	bl	8004570 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <prvAddNewTaskToReadyList+0xc0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800533c:	4b07      	ldr	r3, [pc, #28]	; (800535c <prvAddNewTaskToReadyList+0xbc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	429a      	cmp	r2, r3
 8005348:	d201      	bcs.n	800534e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800534a:	f7ff f8ef 	bl	800452c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	46bd      	mov	sp, r7
 8005352:	b002      	add	sp, #8
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	20002120 	.word	0x20002120
 800535c:	20002048 	.word	0x20002048
 8005360:	2000212c 	.word	0x2000212c
 8005364:	2000213c 	.word	0x2000213c
 8005368:	20002128 	.word	0x20002128
 800536c:	2000204c 	.word	0x2000204c

08005370 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <vTaskDelayUntil+0x18>
 8005384:	b672      	cpsid	i
 8005386:	e7fe      	b.n	8005386 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <vTaskDelayUntil+0x22>
 800538e:	b672      	cpsid	i
 8005390:	e7fe      	b.n	8005390 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
 8005392:	4b23      	ldr	r3, [pc, #140]	; (8005420 <vTaskDelayUntil+0xb0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <vTaskDelayUntil+0x2e>
 800539a:	b672      	cpsid	i
 800539c:	e7fe      	b.n	800539c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
 800539e:	f000 f879 	bl	8005494 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80053a2:	4b20      	ldr	r3, [pc, #128]	; (8005424 <vTaskDelayUntil+0xb4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	18d3      	adds	r3, r2, r3
 80053b0:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d90b      	bls.n	80053d4 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d911      	bls.n	80053ea <vTaskDelayUntil+0x7a>
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d90d      	bls.n	80053ea <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 80053ce:	2301      	movs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	e00a      	b.n	80053ea <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d803      	bhi.n	80053e6 <vTaskDelayUntil+0x76>
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d901      	bls.n	80053ea <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
 80053e6:	2301      	movs	r3, #1
 80053e8:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d006      	beq.n	8005404 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2100      	movs	r1, #0
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 fc8c 	bl	8005d1c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005404:	f000 f852 	bl	80054ac <xTaskResumeAll>
 8005408:	0003      	movs	r3, r0
 800540a:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
 8005412:	f7ff f88b 	bl	800452c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	46bd      	mov	sp, r7
 800541a:	b006      	add	sp, #24
 800541c:	bd80      	pop	{r7, pc}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	20002148 	.word	0x20002148
 8005424:	20002124 	.word	0x20002124

08005428 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800542e:	4913      	ldr	r1, [pc, #76]	; (800547c <vTaskStartScheduler+0x54>)
 8005430:	4813      	ldr	r0, [pc, #76]	; (8005480 <vTaskStartScheduler+0x58>)
 8005432:	4b14      	ldr	r3, [pc, #80]	; (8005484 <vTaskStartScheduler+0x5c>)
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	2300      	movs	r3, #0
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	2240      	movs	r2, #64	; 0x40
 800543e:	f7ff fe65 	bl	800510c <xTaskCreate>
 8005442:	0003      	movs	r3, r0
 8005444:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d10d      	bne.n	8005468 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800544c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800544e:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <vTaskStartScheduler+0x60>)
 8005450:	2201      	movs	r2, #1
 8005452:	4252      	negs	r2, r2
 8005454:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005456:	4b0d      	ldr	r3, [pc, #52]	; (800548c <vTaskStartScheduler+0x64>)
 8005458:	2201      	movs	r2, #1
 800545a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <vTaskStartScheduler+0x68>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005462:	f7ff f841 	bl	80044e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005466:	e004      	b.n	8005472 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3301      	adds	r3, #1
 800546c:	d101      	bne.n	8005472 <vTaskStartScheduler+0x4a>
 800546e:	b672      	cpsid	i
 8005470:	e7fe      	b.n	8005470 <vTaskStartScheduler+0x48>
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	b002      	add	sp, #8
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	08008820 	.word	0x08008820
 8005480:	080059c5 	.word	0x080059c5
 8005484:	20002144 	.word	0x20002144
 8005488:	20002140 	.word	0x20002140
 800548c:	2000212c 	.word	0x2000212c
 8005490:	20002124 	.word	0x20002124

08005494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005498:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <vTaskSuspendAll+0x14>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	4b02      	ldr	r3, [pc, #8]	; (80054a8 <vTaskSuspendAll+0x14>)
 80054a0:	601a      	str	r2, [r3, #0]
}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20002148 	.word	0x20002148

080054ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ba:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <xTaskResumeAll+0xf8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <xTaskResumeAll+0x1a>
 80054c2:	b672      	cpsid	i
 80054c4:	e7fe      	b.n	80054c4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054c6:	f7ff f841 	bl	800454c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054ca:	4b36      	ldr	r3, [pc, #216]	; (80055a4 <xTaskResumeAll+0xf8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	1e5a      	subs	r2, r3, #1
 80054d0:	4b34      	ldr	r3, [pc, #208]	; (80055a4 <xTaskResumeAll+0xf8>)
 80054d2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054d4:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <xTaskResumeAll+0xf8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d15b      	bne.n	8005594 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054dc:	4b32      	ldr	r3, [pc, #200]	; (80055a8 <xTaskResumeAll+0xfc>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d057      	beq.n	8005594 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054e4:	e02f      	b.n	8005546 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054e6:	4b31      	ldr	r3, [pc, #196]	; (80055ac <xTaskResumeAll+0x100>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3318      	adds	r3, #24
 80054f2:	0018      	movs	r0, r3
 80054f4:	f7fe ff73 	bl	80043de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3304      	adds	r3, #4
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7fe ff6e 	bl	80043de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005506:	4b2a      	ldr	r3, [pc, #168]	; (80055b0 <xTaskResumeAll+0x104>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d903      	bls.n	8005516 <xTaskResumeAll+0x6a>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005512:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <xTaskResumeAll+0x104>)
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551a:	0013      	movs	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	189b      	adds	r3, r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4a24      	ldr	r2, [pc, #144]	; (80055b4 <xTaskResumeAll+0x108>)
 8005524:	189a      	adds	r2, r3, r2
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3304      	adds	r3, #4
 800552a:	0019      	movs	r1, r3
 800552c:	0010      	movs	r0, r2
 800552e:	f7fe fefe 	bl	800432e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <xTaskResumeAll+0x10c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	429a      	cmp	r2, r3
 800553e:	d302      	bcc.n	8005546 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005540:	4b1e      	ldr	r3, [pc, #120]	; (80055bc <xTaskResumeAll+0x110>)
 8005542:	2201      	movs	r2, #1
 8005544:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005546:	4b19      	ldr	r3, [pc, #100]	; (80055ac <xTaskResumeAll+0x100>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1cb      	bne.n	80054e6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005554:	f000 fad6 	bl	8005b04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005558:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <xTaskResumeAll+0x114>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00f      	beq.n	8005584 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005564:	f000 f83c 	bl	80055e0 <xTaskIncrementTick>
 8005568:	1e03      	subs	r3, r0, #0
 800556a:	d002      	beq.n	8005572 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800556c:	4b13      	ldr	r3, [pc, #76]	; (80055bc <xTaskResumeAll+0x110>)
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3b01      	subs	r3, #1
 8005576:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f2      	bne.n	8005564 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800557e:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <xTaskResumeAll+0x114>)
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005584:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <xTaskResumeAll+0x110>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800558c:	2301      	movs	r3, #1
 800558e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005590:	f7fe ffcc 	bl	800452c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005594:	f7fe ffec 	bl	8004570 <vPortExitCritical>

	return xAlreadyYielded;
 8005598:	68bb      	ldr	r3, [r7, #8]
}
 800559a:	0018      	movs	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	b004      	add	sp, #16
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	20002148 	.word	0x20002148
 80055a8:	20002120 	.word	0x20002120
 80055ac:	200020e0 	.word	0x200020e0
 80055b0:	20002128 	.word	0x20002128
 80055b4:	2000204c 	.word	0x2000204c
 80055b8:	20002048 	.word	0x20002048
 80055bc:	20002134 	.word	0x20002134
 80055c0:	20002130 	.word	0x20002130

080055c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055ca:	4b04      	ldr	r3, [pc, #16]	; (80055dc <xTaskGetTickCount+0x18>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055d0:	687b      	ldr	r3, [r7, #4]
}
 80055d2:	0018      	movs	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b002      	add	sp, #8
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	20002124 	.word	0x20002124

080055e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ea:	4b4c      	ldr	r3, [pc, #304]	; (800571c <xTaskIncrementTick+0x13c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d000      	beq.n	80055f4 <xTaskIncrementTick+0x14>
 80055f2:	e083      	b.n	80056fc <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80055f4:	4b4a      	ldr	r3, [pc, #296]	; (8005720 <xTaskIncrementTick+0x140>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055fc:	4b48      	ldr	r3, [pc, #288]	; (8005720 <xTaskIncrementTick+0x140>)
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d117      	bne.n	8005638 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005608:	4b46      	ldr	r3, [pc, #280]	; (8005724 <xTaskIncrementTick+0x144>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <xTaskIncrementTick+0x36>
 8005612:	b672      	cpsid	i
 8005614:	e7fe      	b.n	8005614 <xTaskIncrementTick+0x34>
 8005616:	4b43      	ldr	r3, [pc, #268]	; (8005724 <xTaskIncrementTick+0x144>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	4b42      	ldr	r3, [pc, #264]	; (8005728 <xTaskIncrementTick+0x148>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4b40      	ldr	r3, [pc, #256]	; (8005724 <xTaskIncrementTick+0x144>)
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	4b40      	ldr	r3, [pc, #256]	; (8005728 <xTaskIncrementTick+0x148>)
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	4b40      	ldr	r3, [pc, #256]	; (800572c <xTaskIncrementTick+0x14c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	4b3e      	ldr	r3, [pc, #248]	; (800572c <xTaskIncrementTick+0x14c>)
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	f000 fa66 	bl	8005b04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005638:	4b3d      	ldr	r3, [pc, #244]	; (8005730 <xTaskIncrementTick+0x150>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	429a      	cmp	r2, r3
 8005640:	d34e      	bcc.n	80056e0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005642:	4b38      	ldr	r3, [pc, #224]	; (8005724 <xTaskIncrementTick+0x144>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <xTaskIncrementTick+0x70>
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <xTaskIncrementTick+0x72>
 8005650:	2300      	movs	r3, #0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005656:	4b36      	ldr	r3, [pc, #216]	; (8005730 <xTaskIncrementTick+0x150>)
 8005658:	2201      	movs	r2, #1
 800565a:	4252      	negs	r2, r2
 800565c:	601a      	str	r2, [r3, #0]
					break;
 800565e:	e03f      	b.n	80056e0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005660:	4b30      	ldr	r3, [pc, #192]	; (8005724 <xTaskIncrementTick+0x144>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	d203      	bcs.n	8005680 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005678:	4b2d      	ldr	r3, [pc, #180]	; (8005730 <xTaskIncrementTick+0x150>)
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	601a      	str	r2, [r3, #0]
						break;
 800567e:	e02f      	b.n	80056e0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	3304      	adds	r3, #4
 8005684:	0018      	movs	r0, r3
 8005686:	f7fe feaa 	bl	80043de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d004      	beq.n	800569c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	3318      	adds	r3, #24
 8005696:	0018      	movs	r0, r3
 8005698:	f7fe fea1 	bl	80043de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	4b24      	ldr	r3, [pc, #144]	; (8005734 <xTaskIncrementTick+0x154>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d903      	bls.n	80056b0 <xTaskIncrementTick+0xd0>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	4b21      	ldr	r3, [pc, #132]	; (8005734 <xTaskIncrementTick+0x154>)
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	0013      	movs	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	189b      	adds	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <xTaskIncrementTick+0x158>)
 80056be:	189a      	adds	r2, r3, r2
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	3304      	adds	r3, #4
 80056c4:	0019      	movs	r1, r3
 80056c6:	0010      	movs	r0, r2
 80056c8:	f7fe fe31 	bl	800432e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <xTaskIncrementTick+0x15c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d3b3      	bcc.n	8005642 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80056da:	2301      	movs	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056de:	e7b0      	b.n	8005642 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056e0:	4b16      	ldr	r3, [pc, #88]	; (800573c <xTaskIncrementTick+0x15c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e6:	4914      	ldr	r1, [pc, #80]	; (8005738 <xTaskIncrementTick+0x158>)
 80056e8:	0013      	movs	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	189b      	adds	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	585b      	ldr	r3, [r3, r1]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d907      	bls.n	8005706 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80056f6:	2301      	movs	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e004      	b.n	8005706 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056fc:	4b10      	ldr	r3, [pc, #64]	; (8005740 <xTaskIncrementTick+0x160>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <xTaskIncrementTick+0x160>)
 8005704:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005706:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <xTaskIncrementTick+0x164>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800570e:	2301      	movs	r3, #1
 8005710:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005712:	697b      	ldr	r3, [r7, #20]
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	b006      	add	sp, #24
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20002148 	.word	0x20002148
 8005720:	20002124 	.word	0x20002124
 8005724:	200020d8 	.word	0x200020d8
 8005728:	200020dc 	.word	0x200020dc
 800572c:	20002138 	.word	0x20002138
 8005730:	20002140 	.word	0x20002140
 8005734:	20002128 	.word	0x20002128
 8005738:	2000204c 	.word	0x2000204c
 800573c:	20002048 	.word	0x20002048
 8005740:	20002130 	.word	0x20002130
 8005744:	20002134 	.word	0x20002134

08005748 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800574e:	4b22      	ldr	r3, [pc, #136]	; (80057d8 <vTaskSwitchContext+0x90>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005756:	4b21      	ldr	r3, [pc, #132]	; (80057dc <vTaskSwitchContext+0x94>)
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800575c:	e037      	b.n	80057ce <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800575e:	4b1f      	ldr	r3, [pc, #124]	; (80057dc <vTaskSwitchContext+0x94>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005764:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <vTaskSwitchContext+0x98>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	e007      	b.n	800577c <vTaskSwitchContext+0x34>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <vTaskSwitchContext+0x2e>
 8005772:	b672      	cpsid	i
 8005774:	e7fe      	b.n	8005774 <vTaskSwitchContext+0x2c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3b01      	subs	r3, #1
 800577a:	607b      	str	r3, [r7, #4]
 800577c:	4919      	ldr	r1, [pc, #100]	; (80057e4 <vTaskSwitchContext+0x9c>)
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	0013      	movs	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	189b      	adds	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	585b      	ldr	r3, [r3, r1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0ee      	beq.n	800576c <vTaskSwitchContext+0x24>
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	0013      	movs	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	189b      	adds	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4a12      	ldr	r2, [pc, #72]	; (80057e4 <vTaskSwitchContext+0x9c>)
 800579a:	189b      	adds	r3, r3, r2
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	605a      	str	r2, [r3, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	3308      	adds	r3, #8
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d104      	bne.n	80057be <vTaskSwitchContext+0x76>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	605a      	str	r2, [r3, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <vTaskSwitchContext+0xa0>)
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <vTaskSwitchContext+0x98>)
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	601a      	str	r2, [r3, #0]
}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b002      	add	sp, #8
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	20002148 	.word	0x20002148
 80057dc:	20002134 	.word	0x20002134
 80057e0:	20002128 	.word	0x20002128
 80057e4:	2000204c 	.word	0x2000204c
 80057e8:	20002048 	.word	0x20002048

080057ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <vTaskPlaceOnEventList+0x14>
 80057fc:	b672      	cpsid	i
 80057fe:	e7fe      	b.n	80057fe <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005800:	4b08      	ldr	r3, [pc, #32]	; (8005824 <vTaskPlaceOnEventList+0x38>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3318      	adds	r3, #24
 8005806:	001a      	movs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	0011      	movs	r1, r2
 800580c:	0018      	movs	r0, r3
 800580e:	f7fe fdb0 	bl	8004372 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2101      	movs	r1, #1
 8005816:	0018      	movs	r0, r3
 8005818:	f000 fa80 	bl	8005d1c <prvAddCurrentTaskToDelayedList>
}
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	b002      	add	sp, #8
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20002048 	.word	0x20002048

08005828 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <xTaskRemoveFromEventList+0x1a>
 800583e:	b672      	cpsid	i
 8005840:	e7fe      	b.n	8005840 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	3318      	adds	r3, #24
 8005846:	0018      	movs	r0, r3
 8005848:	f7fe fdc9 	bl	80043de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800584c:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <xTaskRemoveFromEventList+0xa0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11d      	bne.n	8005890 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	3304      	adds	r3, #4
 8005858:	0018      	movs	r0, r3
 800585a:	f7fe fdc0 	bl	80043de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	4b1a      	ldr	r3, [pc, #104]	; (80058cc <xTaskRemoveFromEventList+0xa4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d903      	bls.n	8005872 <xTaskRemoveFromEventList+0x4a>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586e:	4b17      	ldr	r3, [pc, #92]	; (80058cc <xTaskRemoveFromEventList+0xa4>)
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005876:	0013      	movs	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	189b      	adds	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4a14      	ldr	r2, [pc, #80]	; (80058d0 <xTaskRemoveFromEventList+0xa8>)
 8005880:	189a      	adds	r2, r3, r2
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	3304      	adds	r3, #4
 8005886:	0019      	movs	r1, r3
 8005888:	0010      	movs	r0, r2
 800588a:	f7fe fd50 	bl	800432e <vListInsertEnd>
 800588e:	e007      	b.n	80058a0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3318      	adds	r3, #24
 8005894:	001a      	movs	r2, r3
 8005896:	4b0f      	ldr	r3, [pc, #60]	; (80058d4 <xTaskRemoveFromEventList+0xac>)
 8005898:	0011      	movs	r1, r2
 800589a:	0018      	movs	r0, r3
 800589c:	f7fe fd47 	bl	800432e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <xTaskRemoveFromEventList+0xb0>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d905      	bls.n	80058ba <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058b2:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <xTaskRemoveFromEventList+0xb4>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e001      	b.n	80058be <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80058be:	68fb      	ldr	r3, [r7, #12]
}
 80058c0:	0018      	movs	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b004      	add	sp, #16
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	20002148 	.word	0x20002148
 80058cc:	20002128 	.word	0x20002128
 80058d0:	2000204c 	.word	0x2000204c
 80058d4:	200020e0 	.word	0x200020e0
 80058d8:	20002048 	.word	0x20002048
 80058dc:	20002134 	.word	0x20002134

080058e0 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <vTaskSetTimeOutState+0x12>
 80058ee:	b672      	cpsid	i
 80058f0:	e7fe      	b.n	80058f0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <vTaskSetTimeOutState+0x2c>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <vTaskSetTimeOutState+0x30>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	605a      	str	r2, [r3, #4]
}
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	46bd      	mov	sp, r7
 8005906:	b002      	add	sp, #8
 8005908:	bd80      	pop	{r7, pc}
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	20002138 	.word	0x20002138
 8005910:	20002124 	.word	0x20002124

08005914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <xTaskCheckForTimeOut+0x14>
 8005924:	b672      	cpsid	i
 8005926:	e7fe      	b.n	8005926 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <xTaskCheckForTimeOut+0x1e>
 800592e:	b672      	cpsid	i
 8005930:	e7fe      	b.n	8005930 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8005932:	f7fe fe0b 	bl	800454c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005936:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <xTaskCheckForTimeOut+0x94>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	d102      	bne.n	800594a <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	e027      	b.n	800599a <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b17      	ldr	r3, [pc, #92]	; (80059ac <xTaskCheckForTimeOut+0x98>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d007      	beq.n	8005966 <xTaskCheckForTimeOut+0x52>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	429a      	cmp	r2, r3
 800595e:	d802      	bhi.n	8005966 <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005960:	2301      	movs	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	e019      	b.n	800599a <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	1ad2      	subs	r2, r2, r3
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d20f      	bcs.n	8005996 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6859      	ldr	r1, [r3, #4]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	1acb      	subs	r3, r1, r3
 8005982:	18d2      	adds	r2, r2, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	0018      	movs	r0, r3
 800598c:	f7ff ffa8 	bl	80058e0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e001      	b.n	800599a <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
 8005996:	2301      	movs	r3, #1
 8005998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800599a:	f7fe fde9 	bl	8004570 <vPortExitCritical>

	return xReturn;
 800599e:	68fb      	ldr	r3, [r7, #12]
}
 80059a0:	0018      	movs	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b004      	add	sp, #16
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20002124 	.word	0x20002124
 80059ac:	20002138 	.word	0x20002138

080059b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059b4:	4b02      	ldr	r3, [pc, #8]	; (80059c0 <vTaskMissedYield+0x10>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20002134 	.word	0x20002134

080059c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059cc:	f000 f84e 	bl	8005a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059d0:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <prvIdleTask+0x1c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d9f9      	bls.n	80059cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80059d8:	f7fe fda8 	bl	800452c <vPortYield>
		prvCheckTasksWaitingTermination();
 80059dc:	e7f6      	b.n	80059cc <prvIdleTask+0x8>
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	2000204c 	.word	0x2000204c

080059e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	e00c      	b.n	8005a0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	0013      	movs	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	189b      	adds	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4a14      	ldr	r2, [pc, #80]	; (8005a4c <prvInitialiseTaskLists+0x68>)
 80059fc:	189b      	adds	r3, r3, r2
 80059fe:	0018      	movs	r0, r3
 8005a00:	f7fe fc6c 	bl	80042dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3301      	adds	r3, #1
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d9ef      	bls.n	80059f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a10:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <prvInitialiseTaskLists+0x6c>)
 8005a12:	0018      	movs	r0, r3
 8005a14:	f7fe fc62 	bl	80042dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a18:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <prvInitialiseTaskLists+0x70>)
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f7fe fc5e 	bl	80042dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a20:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <prvInitialiseTaskLists+0x74>)
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7fe fc5a 	bl	80042dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <prvInitialiseTaskLists+0x78>)
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7fe fc56 	bl	80042dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <prvInitialiseTaskLists+0x7c>)
 8005a32:	0018      	movs	r0, r3
 8005a34:	f7fe fc52 	bl	80042dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <prvInitialiseTaskLists+0x80>)
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <prvInitialiseTaskLists+0x6c>)
 8005a3c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <prvInitialiseTaskLists+0x84>)
 8005a40:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <prvInitialiseTaskLists+0x70>)
 8005a42:	601a      	str	r2, [r3, #0]
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b002      	add	sp, #8
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	2000204c 	.word	0x2000204c
 8005a50:	200020b0 	.word	0x200020b0
 8005a54:	200020c4 	.word	0x200020c4
 8005a58:	200020e0 	.word	0x200020e0
 8005a5c:	200020f4 	.word	0x200020f4
 8005a60:	2000210c 	.word	0x2000210c
 8005a64:	200020d8 	.word	0x200020d8
 8005a68:	200020dc 	.word	0x200020dc

08005a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a72:	e027      	b.n	8005ac4 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 8005a74:	f7ff fd0e 	bl	8005494 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005a78:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <prvCheckTasksWaitingTermination+0x68>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	425a      	negs	r2, r3
 8005a7e:	4153      	adcs	r3, r2
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8005a84:	f7ff fd12 	bl	80054ac <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d11a      	bne.n	8005ac4 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8005a8e:	f7fe fd5d 	bl	800454c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a92:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <prvCheckTasksWaitingTermination+0x68>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f7fe fc9d 	bl	80043de <uxListRemove>
					--uxCurrentNumberOfTasks;
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <prvCheckTasksWaitingTermination+0x6c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	1e5a      	subs	r2, r3, #1
 8005aaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <prvCheckTasksWaitingTermination+0x6c>)
 8005aac:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 8005aae:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <prvCheckTasksWaitingTermination+0x70>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	1e5a      	subs	r2, r3, #1
 8005ab4:	4b09      	ldr	r3, [pc, #36]	; (8005adc <prvCheckTasksWaitingTermination+0x70>)
 8005ab6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8005ab8:	f7fe fd5a 	bl	8004570 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f000 f80e 	bl	8005ae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <prvCheckTasksWaitingTermination+0x70>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1d3      	bne.n	8005a74 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005acc:	46c0      	nop			; (mov r8, r8)
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b002      	add	sp, #8
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	200020f4 	.word	0x200020f4
 8005ad8:	20002120 	.word	0x20002120
 8005adc:	20002108 	.word	0x20002108

08005ae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	0018      	movs	r0, r3
 8005aee:	f7fe fe63 	bl	80047b8 <vPortFree>
			vPortFree( pxTCB );
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7fe fe5f 	bl	80047b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	46bd      	mov	sp, r7
 8005afe:	b002      	add	sp, #8
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b0a:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <prvResetNextTaskUnblockTime+0x40>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <prvResetNextTaskUnblockTime+0x14>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <prvResetNextTaskUnblockTime+0x16>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d004      	beq.n	8005b28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <prvResetNextTaskUnblockTime+0x44>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	4252      	negs	r2, r2
 8005b24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b26:	e008      	b.n	8005b3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b28:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <prvResetNextTaskUnblockTime+0x40>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <prvResetNextTaskUnblockTime+0x44>)
 8005b38:	601a      	str	r2, [r3, #0]
}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b002      	add	sp, #8
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	200020d8 	.word	0x200020d8
 8005b48:	20002140 	.word	0x20002140

08005b4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <xTaskGetSchedulerState+0x30>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	607b      	str	r3, [r7, #4]
 8005b5e:	e008      	b.n	8005b72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <xTaskGetSchedulerState+0x34>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	607b      	str	r3, [r7, #4]
 8005b6c:	e001      	b.n	8005b72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b72:	687b      	ldr	r3, [r7, #4]
	}
 8005b74:	0018      	movs	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b002      	add	sp, #8
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	2000212c 	.word	0x2000212c
 8005b80:	20002148 	.word	0x20002148

08005b84 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d04a      	beq.n	8005c2c <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9a:	4b26      	ldr	r3, [pc, #152]	; (8005c34 <vTaskPriorityInherit+0xb0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d243      	bcs.n	8005c2c <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	db06      	blt.n	8005bba <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bac:	4b21      	ldr	r3, [pc, #132]	; (8005c34 <vTaskPriorityInherit+0xb0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	2205      	movs	r2, #5
 8005bb4:	1ad2      	subs	r2, r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6959      	ldr	r1, [r3, #20]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc2:	0013      	movs	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	189b      	adds	r3, r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <vTaskPriorityInherit+0xb4>)
 8005bcc:	189b      	adds	r3, r3, r2
 8005bce:	4299      	cmp	r1, r3
 8005bd0:	d101      	bne.n	8005bd6 <vTaskPriorityInherit+0x52>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <vTaskPriorityInherit+0x54>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d022      	beq.n	8005c22 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3304      	adds	r3, #4
 8005be0:	0018      	movs	r0, r3
 8005be2:	f7fe fbfc 	bl	80043de <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005be6:	4b13      	ldr	r3, [pc, #76]	; (8005c34 <vTaskPriorityInherit+0xb0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf4:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <vTaskPriorityInherit+0xb8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d903      	bls.n	8005c04 <vTaskPriorityInherit+0x80>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <vTaskPriorityInherit+0xb8>)
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c08:	0013      	movs	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	189b      	adds	r3, r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4a09      	ldr	r2, [pc, #36]	; (8005c38 <vTaskPriorityInherit+0xb4>)
 8005c12:	189a      	adds	r2, r3, r2
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3304      	adds	r3, #4
 8005c18:	0019      	movs	r1, r3
 8005c1a:	0010      	movs	r0, r2
 8005c1c:	f7fe fb87 	bl	800432e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c20:	e004      	b.n	8005c2c <vTaskPriorityInherit+0xa8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c22:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <vTaskPriorityInherit+0xb0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8005c2c:	46c0      	nop			; (mov r8, r8)
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b004      	add	sp, #16
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20002048 	.word	0x20002048
 8005c38:	2000204c 	.word	0x2000204c
 8005c3c:	20002128 	.word	0x20002128

08005c40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d044      	beq.n	8005ce0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c56:	4b25      	ldr	r3, [pc, #148]	; (8005cec <xTaskPriorityDisinherit+0xac>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <xTaskPriorityDisinherit+0x24>
 8005c60:	b672      	cpsid	i
 8005c62:	e7fe      	b.n	8005c62 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <xTaskPriorityDisinherit+0x30>
 8005c6c:	b672      	cpsid	i
 8005c6e:	e7fe      	b.n	8005c6e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c74:	1e5a      	subs	r2, r3, #1
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d02c      	beq.n	8005ce0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d128      	bne.n	8005ce0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	3304      	adds	r3, #4
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7fe fba3 	bl	80043de <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	2205      	movs	r2, #5
 8005ca6:	1ad2      	subs	r2, r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <xTaskPriorityDisinherit+0xb0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d903      	bls.n	8005cc0 <xTaskPriorityDisinherit+0x80>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <xTaskPriorityDisinherit+0xb0>)
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	0013      	movs	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	189b      	adds	r3, r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <xTaskPriorityDisinherit+0xb4>)
 8005cce:	189a      	adds	r2, r3, r2
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	0019      	movs	r1, r3
 8005cd6:	0010      	movs	r0, r2
 8005cd8:	f7fe fb29 	bl	800432e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
	}
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b004      	add	sp, #16
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	20002048 	.word	0x20002048
 8005cf0:	20002128 	.word	0x20002128
 8005cf4:	2000204c 	.word	0x2000204c

08005cf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <pvTaskIncrementMutexHeldCount+0x20>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d04:	4b04      	ldr	r3, [pc, #16]	; (8005d18 <pvTaskIncrementMutexHeldCount+0x20>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d0a:	3201      	adds	r2, #1
 8005d0c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005d0e:	4b02      	ldr	r3, [pc, #8]	; (8005d18 <pvTaskIncrementMutexHeldCount+0x20>)
 8005d10:	681b      	ldr	r3, [r3, #0]
	}
 8005d12:	0018      	movs	r0, r3
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20002048 	.word	0x20002048

08005d1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d26:	4b21      	ldr	r3, [pc, #132]	; (8005dac <prvAddCurrentTaskToDelayedList+0x90>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d2c:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3304      	adds	r3, #4
 8005d32:	0018      	movs	r0, r3
 8005d34:	f7fe fb53 	bl	80043de <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	d10b      	bne.n	8005d56 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d44:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	1d1a      	adds	r2, r3, #4
 8005d4a:	4b1a      	ldr	r3, [pc, #104]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d4c:	0011      	movs	r1, r2
 8005d4e:	0018      	movs	r0, r3
 8005d50:	f7fe faed 	bl	800432e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d54:	e026      	b.n	8005da4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	18d3      	adds	r3, r2, r3
 8005d5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d5e:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d209      	bcs.n	8005d82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d6e:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3304      	adds	r3, #4
 8005d78:	0019      	movs	r1, r3
 8005d7a:	0010      	movs	r0, r2
 8005d7c:	f7fe faf9 	bl	8004372 <vListInsert>
}
 8005d80:	e010      	b.n	8005da4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d82:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	0019      	movs	r1, r3
 8005d8e:	0010      	movs	r0, r2
 8005d90:	f7fe faef 	bl	8004372 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d94:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d202      	bcs.n	8005da4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d9e:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	601a      	str	r2, [r3, #0]
}
 8005da4:	46c0      	nop			; (mov r8, r8)
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b004      	add	sp, #16
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20002124 	.word	0x20002124
 8005db0:	20002048 	.word	0x20002048
 8005db4:	2000210c 	.word	0x2000210c
 8005db8:	200020dc 	.word	0x200020dc
 8005dbc:	200020d8 	.word	0x200020d8
 8005dc0:	20002140 	.word	0x20002140

08005dc4 <InitMotorControl>:
#define MAX_ROT_VEL 60

static MovementControl robotMovement;

void InitMotorControl()
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
    robotMovement.direction = Mov_Straight;
 8005dc8:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <InitMotorControl+0x18>)
 8005dca:	2204      	movs	r2, #4
 8005dcc:	705a      	strb	r2, [r3, #1]
    robotMovement.duration = 1;
 8005dce:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <InitMotorControl+0x18>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	701a      	strb	r2, [r3, #0]
}
 8005dd4:	46c0      	nop			; (mov r8, r8)
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	2000214c 	.word	0x2000214c

08005de0 <MoveStraight>:

int8_t MoveStraight(int8_t vel)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	0002      	movs	r2, r0
 8005de8:	1dfb      	adds	r3, r7, #7
 8005dea:	701a      	strb	r2, [r3, #0]
    motor_set(DM_MOTOR0, vel * -1);
 8005dec:	1dfb      	adds	r3, r7, #7
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	425b      	negs	r3, r3
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	b25b      	sxtb	r3, r3
 8005df6:	0019      	movs	r1, r3
 8005df8:	2000      	movs	r0, #0
 8005dfa:	f001 fb0c 	bl	8007416 <motor_set>
    motor_set(DM_MOTOR1, vel);
 8005dfe:	1dfb      	adds	r3, r7, #7
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	0019      	movs	r1, r3
 8005e06:	2001      	movs	r0, #1
 8005e08:	f001 fb05 	bl	8007416 <motor_set>
    motor_set(DM_MOTOR3, 0);
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	2003      	movs	r0, #3
 8005e10:	f001 fb01 	bl	8007416 <motor_set>

    if (vel >= MAX_VEL)
 8005e14:	1dfb      	adds	r3, r7, #7
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	b25b      	sxtb	r3, r3
 8005e1a:	2b3b      	cmp	r3, #59	; 0x3b
 8005e1c:	dd03      	ble.n	8005e26 <MoveStraight+0x46>
        vel = MAX_VEL;
 8005e1e:	1dfb      	adds	r3, r7, #7
 8005e20:	223c      	movs	r2, #60	; 0x3c
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	e005      	b.n	8005e32 <MoveStraight+0x52>
    else
        vel += 20;
 8005e26:	1dfb      	adds	r3, r7, #7
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	3314      	adds	r3, #20
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	1dfb      	adds	r3, r7, #7
 8005e30:	701a      	strb	r2, [r3, #0]

    return vel;
 8005e32:	1dfb      	adds	r3, r7, #7
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	b25b      	sxtb	r3, r3
}
 8005e38:	0018      	movs	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <MoveBack>:

int8_t MoveBack(int8_t vel)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	0002      	movs	r2, r0
 8005e48:	1dfb      	adds	r3, r7, #7
 8005e4a:	701a      	strb	r2, [r3, #0]
    motor_set(DM_MOTOR0, vel);
 8005e4c:	1dfb      	adds	r3, r7, #7
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	b25b      	sxtb	r3, r3
 8005e52:	0019      	movs	r1, r3
 8005e54:	2000      	movs	r0, #0
 8005e56:	f001 fade 	bl	8007416 <motor_set>
    motor_set(DM_MOTOR1, vel * -1);
 8005e5a:	1dfb      	adds	r3, r7, #7
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	425b      	negs	r3, r3
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	b25b      	sxtb	r3, r3
 8005e64:	0019      	movs	r1, r3
 8005e66:	2001      	movs	r0, #1
 8005e68:	f001 fad5 	bl	8007416 <motor_set>
    motor_set(DM_MOTOR3, 0);
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	2003      	movs	r0, #3
 8005e70:	f001 fad1 	bl	8007416 <motor_set>

    if (vel >= MAX_VEL)
 8005e74:	1dfb      	adds	r3, r7, #7
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	b25b      	sxtb	r3, r3
 8005e7a:	2b3b      	cmp	r3, #59	; 0x3b
 8005e7c:	dd03      	ble.n	8005e86 <MoveBack+0x46>
        vel = MAX_VEL;
 8005e7e:	1dfb      	adds	r3, r7, #7
 8005e80:	223c      	movs	r2, #60	; 0x3c
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	e005      	b.n	8005e92 <MoveBack+0x52>
    else
        vel += 20;
 8005e86:	1dfb      	adds	r3, r7, #7
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	3314      	adds	r3, #20
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	1dfb      	adds	r3, r7, #7
 8005e90:	701a      	strb	r2, [r3, #0]

    return vel;
 8005e92:	1dfb      	adds	r3, r7, #7
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	b25b      	sxtb	r3, r3
}
 8005e98:	0018      	movs	r0, r3
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	b002      	add	sp, #8
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <RotateLeft>:

int8_t RotateLeft(int8_t vel)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	0002      	movs	r2, r0
 8005ea8:	1dfb      	adds	r3, r7, #7
 8005eaa:	701a      	strb	r2, [r3, #0]
    motor_set(DM_MOTOR0, vel);
 8005eac:	1dfb      	adds	r3, r7, #7
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	0019      	movs	r1, r3
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	f001 faae 	bl	8007416 <motor_set>
    motor_set(DM_MOTOR1, vel);
 8005eba:	1dfb      	adds	r3, r7, #7
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	0019      	movs	r1, r3
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	f001 faa7 	bl	8007416 <motor_set>
    motor_set(DM_MOTOR3, -vel);
 8005ec8:	1dfb      	adds	r3, r7, #7
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	425b      	negs	r3, r3
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	b25b      	sxtb	r3, r3
 8005ed2:	0019      	movs	r1, r3
 8005ed4:	2003      	movs	r0, #3
 8005ed6:	f001 fa9e 	bl	8007416 <motor_set>

    if (vel >= MAX_ROT_VEL)
 8005eda:	1dfb      	adds	r3, r7, #7
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b25b      	sxtb	r3, r3
 8005ee0:	2b3b      	cmp	r3, #59	; 0x3b
 8005ee2:	dd03      	ble.n	8005eec <RotateLeft+0x4c>
        vel = MAX_ROT_VEL;
 8005ee4:	1dfb      	adds	r3, r7, #7
 8005ee6:	223c      	movs	r2, #60	; 0x3c
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	e005      	b.n	8005ef8 <RotateLeft+0x58>
    else
        vel += 20;
 8005eec:	1dfb      	adds	r3, r7, #7
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	3314      	adds	r3, #20
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	1dfb      	adds	r3, r7, #7
 8005ef6:	701a      	strb	r2, [r3, #0]

    return vel;
 8005ef8:	1dfb      	adds	r3, r7, #7
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	b25b      	sxtb	r3, r3
}
 8005efe:	0018      	movs	r0, r3
 8005f00:	46bd      	mov	sp, r7
 8005f02:	b002      	add	sp, #8
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <RotateRight>:

int8_t RotateRight(int8_t vel)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	0002      	movs	r2, r0
 8005f0e:	1dfb      	adds	r3, r7, #7
 8005f10:	701a      	strb	r2, [r3, #0]
    motor_set(DM_MOTOR0, -vel);
 8005f12:	1dfb      	adds	r3, r7, #7
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	425b      	negs	r3, r3
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	b25b      	sxtb	r3, r3
 8005f1c:	0019      	movs	r1, r3
 8005f1e:	2000      	movs	r0, #0
 8005f20:	f001 fa79 	bl	8007416 <motor_set>
    motor_set(DM_MOTOR1, -vel);
 8005f24:	1dfb      	adds	r3, r7, #7
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	425b      	negs	r3, r3
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	b25b      	sxtb	r3, r3
 8005f2e:	0019      	movs	r1, r3
 8005f30:	2001      	movs	r0, #1
 8005f32:	f001 fa70 	bl	8007416 <motor_set>
    motor_set(DM_MOTOR3, vel);
 8005f36:	1dfb      	adds	r3, r7, #7
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	b25b      	sxtb	r3, r3
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	2003      	movs	r0, #3
 8005f40:	f001 fa69 	bl	8007416 <motor_set>

    if (vel >= MAX_ROT_VEL)
 8005f44:	1dfb      	adds	r3, r7, #7
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	b25b      	sxtb	r3, r3
 8005f4a:	2b3b      	cmp	r3, #59	; 0x3b
 8005f4c:	dd03      	ble.n	8005f56 <RotateRight+0x50>
        vel = MAX_ROT_VEL;
 8005f4e:	1dfb      	adds	r3, r7, #7
 8005f50:	223c      	movs	r2, #60	; 0x3c
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e005      	b.n	8005f62 <RotateRight+0x5c>
    else
        vel += 20;
 8005f56:	1dfb      	adds	r3, r7, #7
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	3314      	adds	r3, #20
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	1dfb      	adds	r3, r7, #7
 8005f60:	701a      	strb	r2, [r3, #0]

    return vel;
 8005f62:	1dfb      	adds	r3, r7, #7
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	b25b      	sxtb	r3, r3
}
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <StopMovement>:

int8_t StopMovement()
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
    motor_set(DM_MOTOR0, 0);
 8005f74:	2100      	movs	r1, #0
 8005f76:	2000      	movs	r0, #0
 8005f78:	f001 fa4d 	bl	8007416 <motor_set>
    motor_set(DM_MOTOR1, 0);
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f001 fa49 	bl	8007416 <motor_set>
    motor_set(DM_MOTOR3, 0);
 8005f84:	2100      	movs	r1, #0
 8005f86:	2003      	movs	r0, #3
 8005f88:	f001 fa45 	bl	8007416 <motor_set>

    return 0;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	0018      	movs	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <WriteMovement>:

bool WriteMovement(enum RobotMovement direction, uint8_t duration)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	0002      	movs	r2, r0
 8005f9c:	1dfb      	adds	r3, r7, #7
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	1dbb      	adds	r3, r7, #6
 8005fa2:	1c0a      	adds	r2, r1, #0
 8005fa4:	701a      	strb	r2, [r3, #0]

    // validate if there's still movement being executed
    if (robotMovement.duration > 1)
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <WriteMovement+0x38>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d901      	bls.n	8005fb2 <WriteMovement+0x1e>
    {
        return 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e008      	b.n	8005fc4 <WriteMovement+0x30>
    }

    robotMovement.direction = direction;
 8005fb2:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <WriteMovement+0x38>)
 8005fb4:	1dfa      	adds	r2, r7, #7
 8005fb6:	7812      	ldrb	r2, [r2, #0]
 8005fb8:	705a      	strb	r2, [r3, #1]
    robotMovement.duration = duration;
 8005fba:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <WriteMovement+0x38>)
 8005fbc:	1dba      	adds	r2, r7, #6
 8005fbe:	7812      	ldrb	r2, [r2, #0]
 8005fc0:	701a      	strb	r2, [r3, #0]

    return 1;
 8005fc2:	2301      	movs	r3, #1
}
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b002      	add	sp, #8
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	2000214c 	.word	0x2000214c

08005fd0 <ReadMovementToExecute>:

MovementControl ReadMovementToExecute()
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
    return robotMovement;
 8005fd6:	1d3b      	adds	r3, r7, #4
 8005fd8:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <ReadMovementToExecute+0x34>)
 8005fda:	8812      	ldrh	r2, [r2, #0]
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	1d3a      	adds	r2, r7, #4
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	7811      	ldrb	r1, [r2, #0]
 8005fe4:	20ff      	movs	r0, #255	; 0xff
 8005fe6:	4001      	ands	r1, r0
 8005fe8:	20ff      	movs	r0, #255	; 0xff
 8005fea:	4383      	bics	r3, r0
 8005fec:	430b      	orrs	r3, r1
 8005fee:	7852      	ldrb	r2, [r2, #1]
 8005ff0:	21ff      	movs	r1, #255	; 0xff
 8005ff2:	400a      	ands	r2, r1
 8005ff4:	0212      	lsls	r2, r2, #8
 8005ff6:	4904      	ldr	r1, [pc, #16]	; (8006008 <ReadMovementToExecute+0x38>)
 8005ff8:	400b      	ands	r3, r1
 8005ffa:	4313      	orrs	r3, r2
}
 8005ffc:	1c18      	adds	r0, r3, #0
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b002      	add	sp, #8
 8006002:	bd80      	pop	{r7, pc}
 8006004:	2000214c 	.word	0x2000214c
 8006008:	ffff00ff 	.word	0xffff00ff

0800600c <SetUpSensors>:
 */

#include "ObstacleSensor.H"

void SetUpSensors()
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0

    digital_configure_pin(DD_PIN_PC13, DD_CFG_INPUT_PULLUP);
 8006010:	2101      	movs	r1, #1
 8006012:	2005      	movs	r0, #5
 8006014:	f000 f95a 	bl	80062cc <digital_configure_pin>

    digital_configure_pin(DD_PIN_PA8, DD_CFG_INPUT_PULLUP);
 8006018:	2101      	movs	r1, #1
 800601a:	2004      	movs	r0, #4
 800601c:	f000 f956 	bl	80062cc <digital_configure_pin>
}
 8006020:	46c0      	nop			; (mov r8, r8)
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <ReadBumperSensors>:

Bumpers ReadBumperSensors()
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
    Bumpers _bumperSensors;

    _bumperSensors.Left = digital_get_pin(DD_PIN_PA8);
 800602c:	2004      	movs	r0, #4
 800602e:	f000 f9be 	bl	80063ae <digital_get_pin>
 8006032:	0003      	movs	r3, r0
 8006034:	1e5a      	subs	r2, r3, #1
 8006036:	4193      	sbcs	r3, r2
 8006038:	b2da      	uxtb	r2, r3
 800603a:	1d3b      	adds	r3, r7, #4
 800603c:	2101      	movs	r1, #1
 800603e:	400a      	ands	r2, r1
 8006040:	0010      	movs	r0, r2
 8006042:	781a      	ldrb	r2, [r3, #0]
 8006044:	2101      	movs	r1, #1
 8006046:	438a      	bics	r2, r1
 8006048:	1c11      	adds	r1, r2, #0
 800604a:	1c02      	adds	r2, r0, #0
 800604c:	430a      	orrs	r2, r1
 800604e:	701a      	strb	r2, [r3, #0]

    _bumperSensors.Right = digital_get_pin(DD_PIN_PC13);
 8006050:	2005      	movs	r0, #5
 8006052:	f000 f9ac 	bl	80063ae <digital_get_pin>
 8006056:	0003      	movs	r3, r0
 8006058:	1e5a      	subs	r2, r3, #1
 800605a:	4193      	sbcs	r3, r2
 800605c:	b2da      	uxtb	r2, r3
 800605e:	1d3b      	adds	r3, r7, #4
 8006060:	2101      	movs	r1, #1
 8006062:	400a      	ands	r2, r1
 8006064:	1890      	adds	r0, r2, r2
 8006066:	781a      	ldrb	r2, [r3, #0]
 8006068:	2102      	movs	r1, #2
 800606a:	438a      	bics	r2, r1
 800606c:	1c11      	adds	r1, r2, #0
 800606e:	1c02      	adds	r2, r0, #0
 8006070:	430a      	orrs	r2, r1
 8006072:	701a      	strb	r2, [r3, #0]

    return _bumperSensors;
 8006074:	1d3b      	adds	r3, r7, #4
 8006076:	781b      	ldrb	r3, [r3, #0]
}
 8006078:	1c18      	adds	r0, r3, #0
 800607a:	46bd      	mov	sp, r7
 800607c:	b002      	add	sp, #8
 800607e:	bd80      	pop	{r7, pc}

08006080 <ReadDistanceSensors>:

DistanceSensor ReadDistanceSensors()
{
 8006080:	b590      	push	{r4, r7, lr}
 8006082:	b089      	sub	sp, #36	; 0x24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
    DistanceSensor _distanceSensors;

    _distanceSensors.RightRawValue = adc_get_value(DA_ADC_CHANNEL0);
 8006088:	2000      	movs	r0, #0
 800608a:	f000 f8b5 	bl	80061f8 <adc_get_value>
 800608e:	0002      	movs	r2, r0
 8006090:	230c      	movs	r3, #12
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	605a      	str	r2, [r3, #4]
    _distanceSensors.LeftRawValue = adc_get_value(DA_ADC_CHANNEL2);
 8006096:	2002      	movs	r0, #2
 8006098:	f000 f8ae 	bl	80061f8 <adc_get_value>
 800609c:	0002      	movs	r2, r0
 800609e:	230c      	movs	r3, #12
 80060a0:	18fb      	adds	r3, r7, r3
 80060a2:	601a      	str	r2, [r3, #0]

    float floatValueRight = (1789 - _distanceSensors.RightRawValue) / 19;
 80060a4:	230c      	movs	r3, #12
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <ReadDistanceSensors+0x94>)
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2113      	movs	r1, #19
 80060b0:	0018      	movs	r0, r3
 80060b2:	f7fa f831 	bl	8000118 <__udivsi3>
 80060b6:	0003      	movs	r3, r0
 80060b8:	0018      	movs	r0, r3
 80060ba:	f7fa fa8d 	bl	80005d8 <__aeabi_ui2f>
 80060be:	1c03      	adds	r3, r0, #0
 80060c0:	61fb      	str	r3, [r7, #28]

    float floatValueLeft = (1647 - _distanceSensors.LeftRawValue) / 19;
 80060c2:	230c      	movs	r3, #12
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a13      	ldr	r2, [pc, #76]	; (8006118 <ReadDistanceSensors+0x98>)
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2113      	movs	r1, #19
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7fa f822 	bl	8000118 <__udivsi3>
 80060d4:	0003      	movs	r3, r0
 80060d6:	0018      	movs	r0, r3
 80060d8:	f7fa fa7e 	bl	80005d8 <__aeabi_ui2f>
 80060dc:	1c03      	adds	r3, r0, #0
 80060de:	61bb      	str	r3, [r7, #24]

    _distanceSensors.Right = (uint32_t) floatValueRight;
 80060e0:	69f8      	ldr	r0, [r7, #28]
 80060e2:	f7fa f8a5 	bl	8000230 <__aeabi_f2uiz>
 80060e6:	0003      	movs	r3, r0
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	230c      	movs	r3, #12
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	725a      	strb	r2, [r3, #9]
    _distanceSensors.Left = (uint32_t) floatValueLeft;
 80060f0:	69b8      	ldr	r0, [r7, #24]
 80060f2:	f7fa f89d 	bl	8000230 <__aeabi_f2uiz>
 80060f6:	0003      	movs	r3, r0
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	230c      	movs	r3, #12
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	721a      	strb	r2, [r3, #8]


    return _distanceSensors;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	220c      	movs	r2, #12
 8006104:	18ba      	adds	r2, r7, r2
 8006106:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006108:	c313      	stmia	r3!, {r0, r1, r4}
}
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	46bd      	mov	sp, r7
 800610e:	b009      	add	sp, #36	; 0x24
 8006110:	bd90      	pop	{r4, r7, pc}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	000006fd 	.word	0x000006fd
 8006118:	0000066f 	.word	0x0000066f

0800611c <select_adc_channel>:

extern ADC_HandleTypeDef hadc;


static uint32_t select_adc_channel(enum DA_ADC_CHANNEL_E adc_channels)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	0002      	movs	r2, r0
 8006124:	1dfb      	adds	r3, r7, #7
 8006126:	701a      	strb	r2, [r3, #0]
    switch (adc_channels)
 8006128:	1dfb      	adds	r3, r7, #7
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b09      	cmp	r3, #9
 800612e:	d818      	bhi.n	8006162 <select_adc_channel+0x46>
 8006130:	009a      	lsls	r2, r3, #2
 8006132:	4b0e      	ldr	r3, [pc, #56]	; (800616c <select_adc_channel+0x50>)
 8006134:	18d3      	adds	r3, r2, r3
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	469f      	mov	pc, r3
    {
    case DA_ADC_CHANNEL0:
        return ADC_CHANNEL_0;
 800613a:	2300      	movs	r3, #0
 800613c:	e012      	b.n	8006164 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL1:
        return ADC_CHANNEL_1;
 800613e:	2301      	movs	r3, #1
 8006140:	e010      	b.n	8006164 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL2:
        return ADC_CHANNEL_2;
 8006142:	2302      	movs	r3, #2
 8006144:	e00e      	b.n	8006164 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL3:
        return ADC_CHANNEL_3;
 8006146:	2303      	movs	r3, #3
 8006148:	e00c      	b.n	8006164 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL4:
        return ADC_CHANNEL_4;
 800614a:	2304      	movs	r3, #4
 800614c:	e00a      	b.n	8006164 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL5:
        return ADC_CHANNEL_5;
 800614e:	2305      	movs	r3, #5
 8006150:	e008      	b.n	8006164 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL6:
        return ADC_CHANNEL_6;
 8006152:	2306      	movs	r3, #6
 8006154:	e006      	b.n	8006164 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL7:
        return ADC_CHANNEL_7;
 8006156:	2307      	movs	r3, #7
 8006158:	e004      	b.n	8006164 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL8:
        return ADC_CHANNEL_14;
 800615a:	230e      	movs	r3, #14
 800615c:	e002      	b.n	8006164 <select_adc_channel+0x48>
        break;
    case DA_ADC_CHANNEL9:
        return ADC_CHANNEL_15;
 800615e:	230f      	movs	r3, #15
 8006160:	e000      	b.n	8006164 <select_adc_channel+0x48>
        break;
    default:
        return ADC_CHANNEL_0;
 8006162:	2300      	movs	r3, #0
    }
}
 8006164:	0018      	movs	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	b002      	add	sp, #8
 800616a:	bd80      	pop	{r7, pc}
 800616c:	08008af8 	.word	0x08008af8

08006170 <activate_channel>:

static void activate_channel(uint32_t adc_channel)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig;
    sConfig.Channel = adc_channel;
 8006178:	230c      	movs	r3, #12
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006180:	230c      	movs	r3, #12
 8006182:	18fb      	adds	r3, r7, r3
 8006184:	2280      	movs	r2, #128	; 0x80
 8006186:	0152      	lsls	r2, r2, #5
 8006188:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5; //ADC_SAMPLETIME_71CYCLES_5;
 800618a:	230c      	movs	r3, #12
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	2202      	movs	r2, #2
 8006190:	609a      	str	r2, [r3, #8]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8006192:	230c      	movs	r3, #12
 8006194:	18fa      	adds	r2, r7, r3
 8006196:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <activate_channel+0x38>)
 8006198:	0011      	movs	r1, r2
 800619a:	0018      	movs	r0, r3
 800619c:	f7fa fe1a 	bl	8000dd4 <HAL_ADC_ConfigChannel>
}
 80061a0:	46c0      	nop			; (mov r8, r8)
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b006      	add	sp, #24
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20002414 	.word	0x20002414

080061ac <deactivate_channel>:

static void deactivate_channel(uint32_t adc_channel)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig;
    sConfig.Channel = adc_channel;
 80061b4:	230c      	movs	r3, #12
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_RANK_NONE;
 80061bc:	230c      	movs	r3, #12
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <deactivate_channel+0x38>)
 80061c2:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5; //ADC_SAMPLETIME_71CYCLES_5;
 80061c4:	230c      	movs	r3, #12
 80061c6:	18fb      	adds	r3, r7, r3
 80061c8:	2202      	movs	r2, #2
 80061ca:	609a      	str	r2, [r3, #8]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80061cc:	230c      	movs	r3, #12
 80061ce:	18fa      	adds	r2, r7, r3
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <deactivate_channel+0x3c>)
 80061d2:	0011      	movs	r1, r2
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7fa fdfd 	bl	8000dd4 <HAL_ADC_ConfigChannel>
}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	46bd      	mov	sp, r7
 80061de:	b006      	add	sp, #24
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	00001001 	.word	0x00001001
 80061e8:	20002414 	.word	0x20002414

080061ec <adc_init>:
// **************************************************************************
// Public interface
// **************************************************************************

void adc_init()
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
    // no initialization
}
 80061f0:	46c0      	nop			; (mov r8, r8)
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <adc_get_value>:


uint32_t adc_get_value(enum DA_ADC_CHANNEL_E adc_channel_no)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	0002      	movs	r2, r0
 8006200:	1dfb      	adds	r3, r7, #7
 8006202:	701a      	strb	r2, [r3, #0]
    uint32_t adc_channel = select_adc_channel(adc_channel_no);
 8006204:	1dfb      	adds	r3, r7, #7
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	0018      	movs	r0, r3
 800620a:	f7ff ff87 	bl	800611c <select_adc_channel>
 800620e:	0003      	movs	r3, r0
 8006210:	617b      	str	r3, [r7, #20]
    uint32_t adc_value = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	613b      	str	r3, [r7, #16]
    uint32_t timeout = 10;
 8006216:	230a      	movs	r3, #10
 8006218:	60fb      	str	r3, [r7, #12]
    activate_channel(adc_channel);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	0018      	movs	r0, r3
 800621e:	f7ff ffa7 	bl	8006170 <activate_channel>
    HAL_ADC_Start(&hadc);
 8006222:	4b0e      	ldr	r3, [pc, #56]	; (800625c <adc_get_value+0x64>)
 8006224:	0018      	movs	r0, r3
 8006226:	f7fa fca3 	bl	8000b70 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, timeout);
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <adc_get_value+0x64>)
 800622e:	0011      	movs	r1, r2
 8006230:	0018      	movs	r0, r3
 8006232:	f7fa fd33 	bl	8000c9c <HAL_ADC_PollForConversion>
    adc_value = HAL_ADC_GetValue(&hadc);
 8006236:	4b09      	ldr	r3, [pc, #36]	; (800625c <adc_get_value+0x64>)
 8006238:	0018      	movs	r0, r3
 800623a:	f7fa fdbf 	bl	8000dbc <HAL_ADC_GetValue>
 800623e:	0003      	movs	r3, r0
 8006240:	613b      	str	r3, [r7, #16]
    HAL_ADC_Stop(&hadc);
 8006242:	4b06      	ldr	r3, [pc, #24]	; (800625c <adc_get_value+0x64>)
 8006244:	0018      	movs	r0, r3
 8006246:	f7fa fce7 	bl	8000c18 <HAL_ADC_Stop>
    deactivate_channel(adc_channel);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	0018      	movs	r0, r3
 800624e:	f7ff ffad 	bl	80061ac <deactivate_channel>
    return adc_value;
 8006252:	693b      	ldr	r3, [r7, #16]
}
 8006254:	0018      	movs	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	b006      	add	sp, #24
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20002414 	.word	0x20002414

08006260 <digital_init>:

static void select_pin(enum DD_PINS_E pin_no, pin_t* currentPin);


void digital_init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006266:	1d3b      	adds	r3, r7, #4
 8006268:	2200      	movs	r2, #0
 800626a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800626c:	1d3b      	adds	r3, r7, #4
 800626e:	2201      	movs	r2, #1
 8006270:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = DIP1_Pin;
 8006272:	1d3b      	adds	r3, r7, #4
 8006274:	2280      	movs	r2, #128	; 0x80
 8006276:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP1_GPIO_Port, &GPIO_InitStruct);
 8006278:	1d3b      	adds	r3, r7, #4
 800627a:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <digital_init+0x64>)
 800627c:	0019      	movs	r1, r3
 800627e:	0010      	movs	r0, r2
 8006280:	f7fb f91c 	bl	80014bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIP2_Pin;
 8006284:	1d3b      	adds	r3, r7, #4
 8006286:	2240      	movs	r2, #64	; 0x40
 8006288:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP2_GPIO_Port, &GPIO_InitStruct);
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	4a0d      	ldr	r2, [pc, #52]	; (80062c4 <digital_init+0x64>)
 800628e:	0019      	movs	r1, r3
 8006290:	0010      	movs	r0, r2
 8006292:	f7fb f913 	bl	80014bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIP3_Pin;
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	2220      	movs	r2, #32
 800629a:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP3_GPIO_Port, &GPIO_InitStruct);
 800629c:	1d3b      	adds	r3, r7, #4
 800629e:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <digital_init+0x64>)
 80062a0:	0019      	movs	r1, r3
 80062a2:	0010      	movs	r0, r2
 80062a4:	f7fb f90a 	bl	80014bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIP4_Pin;
 80062a8:	1d3b      	adds	r3, r7, #4
 80062aa:	2280      	movs	r2, #128	; 0x80
 80062ac:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(DIP4_GPIO_Port, &GPIO_InitStruct);
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	4a05      	ldr	r2, [pc, #20]	; (80062c8 <digital_init+0x68>)
 80062b2:	0019      	movs	r1, r3
 80062b4:	0010      	movs	r0, r2
 80062b6:	f7fb f901 	bl	80014bc <HAL_GPIO_Init>
}
 80062ba:	46c0      	nop			; (mov r8, r8)
 80062bc:	46bd      	mov	sp, r7
 80062be:	b006      	add	sp, #24
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	48000400 	.word	0x48000400
 80062c8:	48000c00 	.word	0x48000c00

080062cc <digital_configure_pin>:

void digital_configure_pin(enum DD_PINS_E pin_no, enum DD_PINCONFIG_E direction)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	; 0x28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	0002      	movs	r2, r0
 80062d4:	1dfb      	adds	r3, r7, #7
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	1dbb      	adds	r3, r7, #6
 80062da:	1c0a      	adds	r2, r1, #0
 80062dc:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef GPIO_InitStruct;
    pin_t pin;
    select_pin(pin_no, &pin);
 80062de:	230c      	movs	r3, #12
 80062e0:	18fa      	adds	r2, r7, r3
 80062e2:	1dfb      	adds	r3, r7, #7
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	0011      	movs	r1, r2
 80062e8:	0018      	movs	r0, r3
 80062ea:	f000 f87d 	bl	80063e8 <select_pin>
    GPIO_InitStruct.Pin = pin.pin;
 80062ee:	230c      	movs	r3, #12
 80062f0:	18fb      	adds	r3, r7, r3
 80062f2:	889b      	ldrh	r3, [r3, #4]
 80062f4:	001a      	movs	r2, r3
 80062f6:	2314      	movs	r3, #20
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	601a      	str	r2, [r3, #0]
    switch(direction)
 80062fc:	1dbb      	adds	r3, r7, #6
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d01a      	beq.n	800633a <digital_configure_pin+0x6e>
 8006304:	dc02      	bgt.n	800630c <digital_configure_pin+0x40>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <digital_configure_pin+0x4a>
            GPIO_InitStruct.Pull = GPIO_NOPULL;
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
            break;
        }
    }
}
 800630a:	e04c      	b.n	80063a6 <digital_configure_pin+0xda>
    switch(direction)
 800630c:	2b02      	cmp	r3, #2
 800630e:	d026      	beq.n	800635e <digital_configure_pin+0x92>
 8006310:	2b03      	cmp	r3, #3
 8006312:	d036      	beq.n	8006382 <digital_configure_pin+0xb6>
}
 8006314:	e047      	b.n	80063a6 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006316:	2314      	movs	r3, #20
 8006318:	18fb      	adds	r3, r7, r3
 800631a:	2201      	movs	r2, #1
 800631c:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800631e:	2314      	movs	r3, #20
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	2202      	movs	r2, #2
 8006324:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8006326:	230c      	movs	r3, #12
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2214      	movs	r2, #20
 800632e:	18ba      	adds	r2, r7, r2
 8006330:	0011      	movs	r1, r2
 8006332:	0018      	movs	r0, r3
 8006334:	f7fb f8c2 	bl	80014bc <HAL_GPIO_Init>
            break;
 8006338:	e035      	b.n	80063a6 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800633a:	2314      	movs	r3, #20
 800633c:	18fb      	adds	r3, r7, r3
 800633e:	2200      	movs	r2, #0
 8006340:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006342:	2314      	movs	r3, #20
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	2201      	movs	r2, #1
 8006348:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800634a:	230c      	movs	r3, #12
 800634c:	18fb      	adds	r3, r7, r3
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2214      	movs	r2, #20
 8006352:	18ba      	adds	r2, r7, r2
 8006354:	0011      	movs	r1, r2
 8006356:	0018      	movs	r0, r3
 8006358:	f7fb f8b0 	bl	80014bc <HAL_GPIO_Init>
            break;
 800635c:	e023      	b.n	80063a6 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800635e:	2314      	movs	r3, #20
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	2200      	movs	r2, #0
 8006364:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006366:	2314      	movs	r3, #20
 8006368:	18fb      	adds	r3, r7, r3
 800636a:	2202      	movs	r2, #2
 800636c:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800636e:	230c      	movs	r3, #12
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2214      	movs	r2, #20
 8006376:	18ba      	adds	r2, r7, r2
 8006378:	0011      	movs	r1, r2
 800637a:	0018      	movs	r0, r3
 800637c:	f7fb f89e 	bl	80014bc <HAL_GPIO_Init>
            break;
 8006380:	e011      	b.n	80063a6 <digital_configure_pin+0xda>
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006382:	2314      	movs	r3, #20
 8006384:	18fb      	adds	r3, r7, r3
 8006386:	2200      	movs	r2, #0
 8006388:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 800638a:	2314      	movs	r3, #20
 800638c:	18fb      	adds	r3, r7, r3
 800638e:	2200      	movs	r2, #0
 8006390:	609a      	str	r2, [r3, #8]
            HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 8006392:	230c      	movs	r3, #12
 8006394:	18fb      	adds	r3, r7, r3
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2214      	movs	r2, #20
 800639a:	18ba      	adds	r2, r7, r2
 800639c:	0011      	movs	r1, r2
 800639e:	0018      	movs	r0, r3
 80063a0:	f7fb f88c 	bl	80014bc <HAL_GPIO_Init>
            break;
 80063a4:	46c0      	nop			; (mov r8, r8)
}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	46bd      	mov	sp, r7
 80063aa:	b00a      	add	sp, #40	; 0x28
 80063ac:	bd80      	pop	{r7, pc}

080063ae <digital_get_pin>:
    select_pin(pin_no, &selectedPin);
    HAL_GPIO_WritePin(selectedPin.port, selectedPin.pin, level);
}

enum DD_PINLEVEL_E digital_get_pin(enum DD_PINS_E pin_no)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	0002      	movs	r2, r0
 80063b6:	1dfb      	adds	r3, r7, #7
 80063b8:	701a      	strb	r2, [r3, #0]
    pin_t selectedPin;
    select_pin(pin_no, &selectedPin);
 80063ba:	2308      	movs	r3, #8
 80063bc:	18fa      	adds	r2, r7, r3
 80063be:	1dfb      	adds	r3, r7, #7
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	0011      	movs	r1, r2
 80063c4:	0018      	movs	r0, r3
 80063c6:	f000 f80f 	bl	80063e8 <select_pin>
    return HAL_GPIO_ReadPin(selectedPin.port, selectedPin.pin);
 80063ca:	2308      	movs	r3, #8
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	2308      	movs	r3, #8
 80063d2:	18fb      	adds	r3, r7, r3
 80063d4:	889b      	ldrh	r3, [r3, #4]
 80063d6:	0019      	movs	r1, r3
 80063d8:	0010      	movs	r0, r2
 80063da:	f7fb f9eb 	bl	80017b4 <HAL_GPIO_ReadPin>
 80063de:	0003      	movs	r3, r0
}
 80063e0:	0018      	movs	r0, r3
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b004      	add	sp, #16
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <select_pin>:
    return ( level == DD_LEVEL_HIGH ? DD_DIP_OFF : DD_DIP_ON );
}


static void select_pin(enum DD_PINS_E pin_no, pin_t* currentPin)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	0002      	movs	r2, r0
 80063f0:	6039      	str	r1, [r7, #0]
 80063f2:	1dfb      	adds	r3, r7, #7
 80063f4:	701a      	strb	r2, [r3, #0]
    switch (pin_no)
 80063f6:	1dfb      	adds	r3, r7, #7
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b11      	cmp	r3, #17
 80063fc:	d900      	bls.n	8006400 <select_pin+0x18>
 80063fe:	e090      	b.n	8006522 <select_pin+0x13a>
 8006400:	009a      	lsls	r2, r3, #2
 8006402:	4b4d      	ldr	r3, [pc, #308]	; (8006538 <select_pin+0x150>)
 8006404:	18d3      	adds	r3, r2, r3
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	469f      	mov	pc, r3
    {
    case DD_PIN_PD14:
    {
        currentPin->port = DIGITAL0_GPIO_Port;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	4a4b      	ldr	r2, [pc, #300]	; (800653c <select_pin+0x154>)
 800640e:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL0_Pin;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2280      	movs	r2, #128	; 0x80
 8006414:	01d2      	lsls	r2, r2, #7
 8006416:	809a      	strh	r2, [r3, #4]
        break;
 8006418:	e08a      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PD15:
    {
        currentPin->port = DIGITAL1_GPIO_Port;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	4a47      	ldr	r2, [pc, #284]	; (800653c <select_pin+0x154>)
 800641e:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL1_Pin;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	4a47      	ldr	r2, [pc, #284]	; (8006540 <select_pin+0x158>)
 8006424:	809a      	strh	r2, [r3, #4]
        break;
 8006426:	e083      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PC8:
    {
        currentPin->port = DIGITAL2_GPIO_Port;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	4a46      	ldr	r2, [pc, #280]	; (8006544 <select_pin+0x15c>)
 800642c:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL2_Pin;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2280      	movs	r2, #128	; 0x80
 8006432:	0052      	lsls	r2, r2, #1
 8006434:	809a      	strh	r2, [r3, #4]
        break;
 8006436:	e07b      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PC9:
    {
        currentPin->port = DIGITAL3_GPIO_Port;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	4a42      	ldr	r2, [pc, #264]	; (8006544 <select_pin+0x15c>)
 800643c:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL3_Pin;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2280      	movs	r2, #128	; 0x80
 8006442:	0092      	lsls	r2, r2, #2
 8006444:	809a      	strh	r2, [r3, #4]
        break;
 8006446:	e073      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PA8:
    {
        currentPin->port = DIGITAL4_GPIO_Port;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2290      	movs	r2, #144	; 0x90
 800644c:	05d2      	lsls	r2, r2, #23
 800644e:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL4_Pin;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2280      	movs	r2, #128	; 0x80
 8006454:	0052      	lsls	r2, r2, #1
 8006456:	809a      	strh	r2, [r3, #4]
        break;
 8006458:	e06a      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PC13:
    {
        currentPin->port = DIGITAL5_GPIO_Port;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	4a39      	ldr	r2, [pc, #228]	; (8006544 <select_pin+0x15c>)
 800645e:	601a      	str	r2, [r3, #0]
        currentPin->pin = DIGITAL5_Pin;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2280      	movs	r2, #128	; 0x80
 8006464:	0192      	lsls	r2, r2, #6
 8006466:	809a      	strh	r2, [r3, #4]
        break;
 8006468:	e062      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PB11:
    {
        currentPin->port = SERVO0_GPIO_Port;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	4a36      	ldr	r2, [pc, #216]	; (8006548 <select_pin+0x160>)
 800646e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO0_Pin;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2280      	movs	r2, #128	; 0x80
 8006474:	0112      	lsls	r2, r2, #4
 8006476:	809a      	strh	r2, [r3, #4]
        break;
 8006478:	e05a      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PB10:
    {
        currentPin->port = SERVO1_GPIO_Port;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	4a32      	ldr	r2, [pc, #200]	; (8006548 <select_pin+0x160>)
 800647e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO1_Pin;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2280      	movs	r2, #128	; 0x80
 8006484:	00d2      	lsls	r2, r2, #3
 8006486:	809a      	strh	r2, [r3, #4]
        break;
 8006488:	e052      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PE14:
    {
        currentPin->port = SERVO2_GPIO_Port;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	4a2f      	ldr	r2, [pc, #188]	; (800654c <select_pin+0x164>)
 800648e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO2_Pin;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2280      	movs	r2, #128	; 0x80
 8006494:	01d2      	lsls	r2, r2, #7
 8006496:	809a      	strh	r2, [r3, #4]
        break;
 8006498:	e04a      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PE11:
    {
        currentPin->port = SERVO3_GPIO_Port;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	4a2b      	ldr	r2, [pc, #172]	; (800654c <select_pin+0x164>)
 800649e:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO3_Pin;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2280      	movs	r2, #128	; 0x80
 80064a4:	0112      	lsls	r2, r2, #4
 80064a6:	809a      	strh	r2, [r3, #4]
        break;
 80064a8:	e042      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PE9:
    {
        currentPin->port = SERVO4_GPIO_Port;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	4a27      	ldr	r2, [pc, #156]	; (800654c <select_pin+0x164>)
 80064ae:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO4_Pin;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2280      	movs	r2, #128	; 0x80
 80064b4:	0092      	lsls	r2, r2, #2
 80064b6:	809a      	strh	r2, [r3, #4]
        break;
 80064b8:	e03a      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PB1:
    {
        currentPin->port = SERVO5_GPIO_Port;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	4a22      	ldr	r2, [pc, #136]	; (8006548 <select_pin+0x160>)
 80064be:	601a      	str	r2, [r3, #0]
        currentPin->pin = SERVO5_Pin;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2202      	movs	r2, #2
 80064c4:	809a      	strh	r2, [r3, #4]
        break;
 80064c6:	e033      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PF10:
    {
        currentPin->port = PWM5_GPIO_Port;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	4a21      	ldr	r2, [pc, #132]	; (8006550 <select_pin+0x168>)
 80064cc:	601a      	str	r2, [r3, #0]
        currentPin->pin = PWM5_Pin;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2280      	movs	r2, #128	; 0x80
 80064d2:	00d2      	lsls	r2, r2, #3
 80064d4:	809a      	strh	r2, [r3, #4]
        break;
 80064d6:	e02b      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PF9:
	{
		currentPin->port = PWM4_GPIO_Port;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	4a1d      	ldr	r2, [pc, #116]	; (8006550 <select_pin+0x168>)
 80064dc:	601a      	str	r2, [r3, #0]
		currentPin->pin = PWM4_Pin;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2280      	movs	r2, #128	; 0x80
 80064e2:	0092      	lsls	r2, r2, #2
 80064e4:	809a      	strh	r2, [r3, #4]
		break;
 80064e6:	e023      	b.n	8006530 <select_pin+0x148>
	}
    case DD_PIN_PE1:
    {
    	currentPin->port = PWM3_GPIO_Port;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	4a18      	ldr	r2, [pc, #96]	; (800654c <select_pin+0x164>)
 80064ec:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM3_Pin;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2202      	movs	r2, #2
 80064f2:	809a      	strh	r2, [r3, #4]
    	break;
 80064f4:	e01c      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PE0:
    {
    	currentPin->port = PWM2_GPIO_Port;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	4a14      	ldr	r2, [pc, #80]	; (800654c <select_pin+0x164>)
 80064fa:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM2_Pin;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2201      	movs	r2, #1
 8006500:	809a      	strh	r2, [r3, #4]
    	break;
 8006502:	e015      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PB3:
    {
    	currentPin->port = PWM1_GPIO_Port;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	4a10      	ldr	r2, [pc, #64]	; (8006548 <select_pin+0x160>)
 8006508:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM1_Pin;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2208      	movs	r2, #8
 800650e:	809a      	strh	r2, [r3, #4]
    	break;
 8006510:	e00e      	b.n	8006530 <select_pin+0x148>
    }
    case DD_PIN_PA15:
    {
    	currentPin->port = PWM0_GPIO_Port;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2290      	movs	r2, #144	; 0x90
 8006516:	05d2      	lsls	r2, r2, #23
 8006518:	601a      	str	r2, [r3, #0]
    	currentPin->pin = PWM0_Pin;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	4a08      	ldr	r2, [pc, #32]	; (8006540 <select_pin+0x158>)
 800651e:	809a      	strh	r2, [r3, #4]
    	break;
 8006520:	e006      	b.n	8006530 <select_pin+0x148>
    }
    default:
    {
        currentPin->port = LED_GREEN_GPIO_Port;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	4a07      	ldr	r2, [pc, #28]	; (8006544 <select_pin+0x15c>)
 8006526:	601a      	str	r2, [r3, #0]
        currentPin->pin = LED_GREEN_Pin;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2204      	movs	r2, #4
 800652c:	809a      	strh	r2, [r3, #4]
        break;
 800652e:	46c0      	nop			; (mov r8, r8)
    }
        ;
    }
}
 8006530:	46c0      	nop			; (mov r8, r8)
 8006532:	46bd      	mov	sp, r7
 8006534:	b002      	add	sp, #8
 8006536:	bd80      	pop	{r7, pc}
 8006538:	08008b20 	.word	0x08008b20
 800653c:	48000c00 	.word	0x48000c00
 8006540:	ffff8000 	.word	0xffff8000
 8006544:	48000800 	.word	0x48000800
 8006548:	48000400 	.word	0x48000400
 800654c:	48001000 	.word	0x48001000
 8006550:	48001400 	.word	0x48001400

08006554 <dorobo_init>:
// Die main()-Funktion aus der CubeMX-generierten main() muss in
// init() abgespeichert und hinzugelinkt werden.
extern void init();

void dorobo_init(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
    init();
 8006558:	f000 f8c2 	bl	80066e0 <init>
    digital_init();
 800655c:	f7ff fe80 	bl	8006260 <digital_init>
}
 8006560:	46c0      	nop			; (mov r8, r8)
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <led_red_toggle>:
{
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, level);
}

void led_red_toggle(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800656c:	4b03      	ldr	r3, [pc, #12]	; (800657c <led_red_toggle+0x14>)
 800656e:	2102      	movs	r1, #2
 8006570:	0018      	movs	r0, r3
 8006572:	f7fb f959 	bl	8001828 <HAL_GPIO_TogglePin>
}
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	48000800 	.word	0x48000800

08006580 <_sbrk>:
}

// ***************************************************************************

caddr_t _sbrk(int incr)
{
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
    extern char _ebss;   ///< symbol defined by the linker
    extern char _estack; ///< symbol defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
 8006588:	4b19      	ldr	r3, [pc, #100]	; (80065f0 <_sbrk+0x70>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <_sbrk+0x16>
    {
        heap_end = &_ebss;
 8006590:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <_sbrk+0x70>)
 8006592:	4a18      	ldr	r2, [pc, #96]	; (80065f4 <_sbrk+0x74>)
 8006594:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 8006596:	4b16      	ldr	r3, [pc, #88]	; (80065f0 <_sbrk+0x70>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 800659c:	f3ef 8308 	mrs	r3, MSP
 80065a0:	001c      	movs	r4, r3
  return(result);
 80065a2:	0023      	movs	r3, r4
    // determine the maximum address available for the Heap
    // (1) Start with the current stack pointer
    //     This heap end address becomes a problem if
    //     the stack grows further - therefore we allow for
    //     some additional room.
    char *heapMax = (char *) __get_MSP() - 128;
 80065a4:	3b80      	subs	r3, #128	; 0x80
 80065a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 80065a8:	f3ef 8308 	mrs	r3, MSP
 80065ac:	001c      	movs	r4, r3
  return(result);
 80065ae:	0023      	movs	r3, r4
    if ( (char *) __get_MSP() < prev_heap_end )
 80065b0:	001a      	movs	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d201      	bcs.n	80065bc <_sbrk+0x3c>
    {
        // FreeRTOS multitasking has been started, because
        // the Stack usually lies in an BSS area managed
        // by FreeRTOS. Therefore the maximum heap end is
        // the end of RAM (symbol defined by the linker).
    	heapMax = &_estack; // this symbol is defined at the end of RAM
 80065b8:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <_sbrk+0x78>)
 80065ba:	60fb      	str	r3, [r7, #12]
    }

    if (heap_end + incr > heapMax)
 80065bc:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <_sbrk+0x70>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	18d2      	adds	r2, r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d907      	bls.n	80065da <_sbrk+0x5a>
    {
        //_write (STDERR_FILENO, "Heap and heapMax collision\n", 25);
        errno = ENOMEM;
 80065ca:	f001 fca5 	bl	8007f18 <__errno>
 80065ce:	0003      	movs	r3, r0
 80065d0:	220c      	movs	r2, #12
 80065d2:	601a      	str	r2, [r3, #0]
        return (caddr_t) -1;
 80065d4:	2301      	movs	r3, #1
 80065d6:	425b      	negs	r3, r3
 80065d8:	e006      	b.n	80065e8 <_sbrk+0x68>
        // Alternative implementation: exit(-1) to stop the system
    }

    heap_end += incr;
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <_sbrk+0x70>)
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	18d2      	adds	r2, r2, r3
 80065e2:	4b03      	ldr	r3, [pc, #12]	; (80065f0 <_sbrk+0x70>)
 80065e4:	601a      	str	r2, [r3, #0]
    return (caddr_t) prev_heap_end;
 80065e6:	68bb      	ldr	r3, [r7, #8]
}
 80065e8:	0018      	movs	r0, r3
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b005      	add	sp, #20
 80065ee:	bd90      	pop	{r4, r7, pc}
 80065f0:	20002150 	.word	0x20002150
 80065f4:	20002514 	.word	0x20002514
 80065f8:	20004000 	.word	0x20004000

080065fc <ft_start_sampling>:
	// nothing to initialize
}


void ft_start_sampling(enum DD_PINS_E leftSensor)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	0002      	movs	r2, r0
 8006604:	1dfb      	adds	r3, r7, #7
 8006606:	701a      	strb	r2, [r3, #0]
    leftIRSensor = leftSensor;
 8006608:	4b07      	ldr	r3, [pc, #28]	; (8006628 <ft_start_sampling+0x2c>)
 800660a:	1dfa      	adds	r2, r7, #7
 800660c:	7812      	ldrb	r2, [r2, #0]
 800660e:	701a      	strb	r2, [r3, #0]
    ft_samples_ready = false;
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <ft_start_sampling+0x30>)
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6);
 8006616:	4b06      	ldr	r3, [pc, #24]	; (8006630 <ft_start_sampling+0x34>)
 8006618:	0018      	movs	r0, r3
 800661a:	f7fb ff6f 	bl	80024fc <HAL_TIM_Base_Start_IT>
}
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	46bd      	mov	sp, r7
 8006622:	b002      	add	sp, #8
 8006624:	bd80      	pop	{r7, pc}
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	20002156 	.word	0x20002156
 800662c:	20002155 	.word	0x20002155
 8006630:	20002324 	.word	0x20002324

08006634 <ft_get_samples>:
}

// ***************************************************************************

void ft_get_samples()
{
 8006634:	b5b0      	push	{r4, r5, r7, lr}
 8006636:	af00      	add	r7, sp, #0
    if (ft_sample_index == SAMPLES)
 8006638:	4b15      	ldr	r3, [pc, #84]	; (8006690 <ft_get_samples+0x5c>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b28      	cmp	r3, #40	; 0x28
 800663e:	d111      	bne.n	8006664 <ft_get_samples+0x30>
    {
        HAL_TIM_Base_Stop_IT(&htim6);
 8006640:	4b14      	ldr	r3, [pc, #80]	; (8006694 <ft_get_samples+0x60>)
 8006642:	0018      	movs	r0, r3
 8006644:	f7fb ff74 	bl	8002530 <HAL_TIM_Base_Stop_IT>
        ft_sample_index = 0;
 8006648:	4b11      	ldr	r3, [pc, #68]	; (8006690 <ft_get_samples+0x5c>)
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]
        ft_samples_ready = true;
 800664e:	4b12      	ldr	r3, [pc, #72]	; (8006698 <ft_get_samples+0x64>)
 8006650:	2201      	movs	r2, #1
 8006652:	701a      	strb	r2, [r3, #0]
        if (sampling_finished != NULL)
 8006654:	4b11      	ldr	r3, [pc, #68]	; (800669c <ft_get_samples+0x68>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d015      	beq.n	8006688 <ft_get_samples+0x54>
            sampling_finished();
 800665c:	4b0f      	ldr	r3, [pc, #60]	; (800669c <ft_get_samples+0x68>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4798      	blx	r3
    else
    {
        signal1_[ft_sample_index] = digital_get_pin(leftIRSensor);
        ft_sample_index++;
    }
}
 8006662:	e011      	b.n	8006688 <ft_get_samples+0x54>
        signal1_[ft_sample_index] = digital_get_pin(leftIRSensor);
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <ft_get_samples+0x5c>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	001c      	movs	r4, r3
 800666a:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <ft_get_samples+0x6c>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	0018      	movs	r0, r3
 8006670:	f7ff fe9d 	bl	80063ae <digital_get_pin>
 8006674:	0003      	movs	r3, r0
 8006676:	001a      	movs	r2, r3
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <ft_get_samples+0x70>)
 800667a:	551a      	strb	r2, [r3, r4]
        ft_sample_index++;
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <ft_get_samples+0x5c>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	3301      	adds	r3, #1
 8006682:	b2da      	uxtb	r2, r3
 8006684:	4b02      	ldr	r3, [pc, #8]	; (8006690 <ft_get_samples+0x5c>)
 8006686:	701a      	strb	r2, [r3, #0]
}
 8006688:	46c0      	nop			; (mov r8, r8)
 800668a:	46bd      	mov	sp, r7
 800668c:	bdb0      	pop	{r4, r5, r7, pc}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	20002154 	.word	0x20002154
 8006694:	20002324 	.word	0x20002324
 8006698:	20002155 	.word	0x20002155
 800669c:	20002180 	.word	0x20002180
 80066a0:	20002156 	.word	0x20002156
 80066a4:	20002158 	.word	0x20002158

080066a8 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
    /* TIM Update event */
    if (__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET)
 80066ac:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <TIM6_DAC_IRQHandler+0x34>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2201      	movs	r2, #1
 80066b4:	4013      	ands	r3, r2
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d10d      	bne.n	80066d6 <TIM6_DAC_IRQHandler+0x2e>
    {
        if (__HAL_TIM_GET_IT_SOURCE(&htim6, TIM_IT_UPDATE) != RESET)
 80066ba:	4b08      	ldr	r3, [pc, #32]	; (80066dc <TIM6_DAC_IRQHandler+0x34>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	4013      	ands	r3, r2
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d106      	bne.n	80066d6 <TIM6_DAC_IRQHandler+0x2e>
        {
            __HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 80066c8:	4b04      	ldr	r3, [pc, #16]	; (80066dc <TIM6_DAC_IRQHandler+0x34>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2202      	movs	r2, #2
 80066ce:	4252      	negs	r2, r2
 80066d0:	611a      	str	r2, [r3, #16]

            ft_get_samples();
 80066d2:	f7ff ffaf 	bl	8006634 <ft_get_samples>
        }
    }
}
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20002324 	.word	0x20002324

080066e0 <init>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void init(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80066e4:	f7fa f8be 	bl	8000864 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80066e8:	f000 f819 	bl	800671e <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80066ec:	f000 fbae 	bl	8006e4c <MX_GPIO_Init>
  MX_TIM3_Init();
 80066f0:	f000 f97a 	bl	80069e8 <MX_TIM3_Init>
  MX_ADC_Init();
 80066f4:	f000 f898 	bl	8006828 <MX_ADC_Init>
  MX_USART1_UART_Init();
 80066f8:	f000 fb50 	bl	8006d9c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80066fc:	f000 fb7a 	bl	8006df4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8006700:	f000 f92a 	bl	8006958 <MX_TIM2_Init>
  MX_TIM15_Init();
 8006704:	f000 fa00 	bl	8006b08 <MX_TIM15_Init>
  MX_TIM16_Init();
 8006708:	f000 fa78 	bl	8006bfc <MX_TIM16_Init>
  MX_TIM17_Init();
 800670c:	f000 fade 	bl	8006ccc <MX_TIM17_Init>
  MX_TIM6_Init();
 8006710:	f000 f9d0 	bl	8006ab4 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8006714:	f000 f86a 	bl	80067ec <MX_NVIC_Init>
}
 8006718:	46c0      	nop			; (mov r8, r8)
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b098      	sub	sp, #96	; 0x60
 8006722:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8006724:	232c      	movs	r3, #44	; 0x2c
 8006726:	18fb      	adds	r3, r7, r3
 8006728:	2211      	movs	r2, #17
 800672a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800672c:	232c      	movs	r3, #44	; 0x2c
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	2201      	movs	r2, #1
 8006732:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8006734:	232c      	movs	r3, #44	; 0x2c
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	2201      	movs	r2, #1
 800673a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800673c:	232c      	movs	r3, #44	; 0x2c
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	2210      	movs	r2, #16
 8006742:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006744:	232c      	movs	r3, #44	; 0x2c
 8006746:	18fb      	adds	r3, r7, r3
 8006748:	2202      	movs	r2, #2
 800674a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800674c:	232c      	movs	r3, #44	; 0x2c
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	2280      	movs	r2, #128	; 0x80
 8006752:	0252      	lsls	r2, r2, #9
 8006754:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8006756:	232c      	movs	r3, #44	; 0x2c
 8006758:	18fb      	adds	r3, r7, r3
 800675a:	2280      	movs	r2, #128	; 0x80
 800675c:	0352      	lsls	r2, r2, #13
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8006760:	232c      	movs	r3, #44	; 0x2c
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	2200      	movs	r2, #0
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8006768:	232c      	movs	r3, #44	; 0x2c
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	0018      	movs	r0, r3
 800676e:	f7fb f86d 	bl	800184c <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006772:	231c      	movs	r3, #28
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	2207      	movs	r2, #7
 8006778:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800677a:	231c      	movs	r3, #28
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	2202      	movs	r2, #2
 8006780:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006782:	231c      	movs	r3, #28
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	2200      	movs	r2, #0
 8006788:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800678a:	231c      	movs	r3, #28
 800678c:	18fb      	adds	r3, r7, r3
 800678e:	2200      	movs	r2, #0
 8006790:	60da      	str	r2, [r3, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8006792:	231c      	movs	r3, #28
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	2101      	movs	r1, #1
 8006798:	0018      	movs	r0, r3
 800679a:	f7fb fbb5 	bl	8001f08 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800679e:	003b      	movs	r3, r7
 80067a0:	2203      	movs	r2, #3
 80067a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80067a4:	003b      	movs	r3, r7
 80067a6:	2200      	movs	r2, #0
 80067a8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80067aa:	003b      	movs	r3, r7
 80067ac:	2200      	movs	r2, #0
 80067ae:	60da      	str	r2, [r3, #12]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80067b0:	003b      	movs	r3, r7
 80067b2:	0018      	movs	r0, r3
 80067b4:	f7fb fd78 	bl	80022a8 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80067b8:	f7fb fd2c 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 80067bc:	0002      	movs	r2, r0
 80067be:	23fa      	movs	r3, #250	; 0xfa
 80067c0:	0099      	lsls	r1, r3, #2
 80067c2:	0010      	movs	r0, r2
 80067c4:	f7f9 fca8 	bl	8000118 <__udivsi3>
 80067c8:	0003      	movs	r3, r0
 80067ca:	0018      	movs	r0, r3
 80067cc:	f7fa fe08 	bl	80013e0 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80067d0:	2004      	movs	r0, #4
 80067d2:	f7fa fe13 	bl	80013fc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 80067d6:	2301      	movs	r3, #1
 80067d8:	425b      	negs	r3, r3
 80067da:	2200      	movs	r2, #0
 80067dc:	2103      	movs	r1, #3
 80067de:	0018      	movs	r0, r3
 80067e0:	f7fa fdd8 	bl	8001394 <HAL_NVIC_SetPriority>
}
 80067e4:	46c0      	nop			; (mov r8, r8)
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b018      	add	sp, #96	; 0x60
 80067ea:	bd80      	pop	{r7, pc}

080067ec <MX_NVIC_Init>:

/** NVIC Configuration
*/
void MX_NVIC_Init(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80067f0:	2200      	movs	r2, #0
 80067f2:	2103      	movs	r1, #3
 80067f4:	2011      	movs	r0, #17
 80067f6:	f7fa fdcd 	bl	8001394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80067fa:	2011      	movs	r0, #17
 80067fc:	f7fa fde0 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8006800:	2200      	movs	r2, #0
 8006802:	2103      	movs	r1, #3
 8006804:	201b      	movs	r0, #27
 8006806:	f7fa fdc5 	bl	8001394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800680a:	201b      	movs	r0, #27
 800680c:	f7fa fdd8 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8006810:	2200      	movs	r2, #0
 8006812:	2103      	movs	r1, #3
 8006814:	201c      	movs	r0, #28
 8006816:	f7fa fdbd 	bl	8001394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800681a:	201c      	movs	r0, #28
 800681c:	f7fa fdd0 	bl	80013c0 <HAL_NVIC_EnableIRQ>
}
 8006820:	46c0      	nop			; (mov r8, r8)
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <MX_ADC_Init>:

/* ADC init function */
void MX_ADC_Init(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc.Instance = ADC1;
 800682e:	4b47      	ldr	r3, [pc, #284]	; (800694c <MX_ADC_Init+0x124>)
 8006830:	4a47      	ldr	r2, [pc, #284]	; (8006950 <MX_ADC_Init+0x128>)
 8006832:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006834:	4b45      	ldr	r3, [pc, #276]	; (800694c <MX_ADC_Init+0x124>)
 8006836:	2200      	movs	r2, #0
 8006838:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800683a:	4b44      	ldr	r3, [pc, #272]	; (800694c <MX_ADC_Init+0x124>)
 800683c:	2200      	movs	r2, #0
 800683e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006840:	4b42      	ldr	r3, [pc, #264]	; (800694c <MX_ADC_Init+0x124>)
 8006842:	2200      	movs	r2, #0
 8006844:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006846:	4b41      	ldr	r3, [pc, #260]	; (800694c <MX_ADC_Init+0x124>)
 8006848:	2201      	movs	r2, #1
 800684a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800684c:	4b3f      	ldr	r3, [pc, #252]	; (800694c <MX_ADC_Init+0x124>)
 800684e:	2204      	movs	r2, #4
 8006850:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006852:	4b3e      	ldr	r3, [pc, #248]	; (800694c <MX_ADC_Init+0x124>)
 8006854:	2200      	movs	r2, #0
 8006856:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8006858:	4b3c      	ldr	r3, [pc, #240]	; (800694c <MX_ADC_Init+0x124>)
 800685a:	2200      	movs	r2, #0
 800685c:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 800685e:	4b3b      	ldr	r3, [pc, #236]	; (800694c <MX_ADC_Init+0x124>)
 8006860:	2200      	movs	r2, #0
 8006862:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006864:	4b39      	ldr	r3, [pc, #228]	; (800694c <MX_ADC_Init+0x124>)
 8006866:	2201      	movs	r2, #1
 8006868:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800686a:	4b38      	ldr	r3, [pc, #224]	; (800694c <MX_ADC_Init+0x124>)
 800686c:	2200      	movs	r2, #0
 800686e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006870:	4b36      	ldr	r3, [pc, #216]	; (800694c <MX_ADC_Init+0x124>)
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006876:	4b35      	ldr	r3, [pc, #212]	; (800694c <MX_ADC_Init+0x124>)
 8006878:	2201      	movs	r2, #1
 800687a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_ADC_Init(&hadc);
 800687c:	4b33      	ldr	r3, [pc, #204]	; (800694c <MX_ADC_Init+0x124>)
 800687e:	0018      	movs	r0, r3
 8006880:	f7fa f838 	bl	80008f4 <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8006884:	1d3b      	adds	r3, r7, #4
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE; //ADC_RANK_CHANNEL_NUMBER;
 800688a:	1d3b      	adds	r3, r7, #4
 800688c:	4a31      	ldr	r2, [pc, #196]	; (8006954 <MX_ADC_Init+0x12c>)
 800688e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5; //ADC_SAMPLETIME_71CYCLES_5;
 8006890:	1d3b      	adds	r3, r7, #4
 8006892:	2202      	movs	r2, #2
 8006894:	609a      	str	r2, [r3, #8]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8006896:	1d3a      	adds	r2, r7, #4
 8006898:	4b2c      	ldr	r3, [pc, #176]	; (800694c <MX_ADC_Init+0x124>)
 800689a:	0011      	movs	r1, r2
 800689c:	0018      	movs	r0, r3
 800689e:	f7fa fa99 	bl	8000dd4 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	2201      	movs	r2, #1
 80068a6:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80068a8:	1d3a      	adds	r2, r7, #4
 80068aa:	4b28      	ldr	r3, [pc, #160]	; (800694c <MX_ADC_Init+0x124>)
 80068ac:	0011      	movs	r1, r2
 80068ae:	0018      	movs	r0, r3
 80068b0:	f7fa fa90 	bl	8000dd4 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 80068b4:	1d3b      	adds	r3, r7, #4
 80068b6:	2202      	movs	r2, #2
 80068b8:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80068ba:	1d3a      	adds	r2, r7, #4
 80068bc:	4b23      	ldr	r3, [pc, #140]	; (800694c <MX_ADC_Init+0x124>)
 80068be:	0011      	movs	r1, r2
 80068c0:	0018      	movs	r0, r3
 80068c2:	f7fa fa87 	bl	8000dd4 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	2203      	movs	r2, #3
 80068ca:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80068cc:	1d3a      	adds	r2, r7, #4
 80068ce:	4b1f      	ldr	r3, [pc, #124]	; (800694c <MX_ADC_Init+0x124>)
 80068d0:	0011      	movs	r1, r2
 80068d2:	0018      	movs	r0, r3
 80068d4:	f7fa fa7e 	bl	8000dd4 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 80068d8:	1d3b      	adds	r3, r7, #4
 80068da:	2204      	movs	r2, #4
 80068dc:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80068de:	1d3a      	adds	r2, r7, #4
 80068e0:	4b1a      	ldr	r3, [pc, #104]	; (800694c <MX_ADC_Init+0x124>)
 80068e2:	0011      	movs	r1, r2
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7fa fa75 	bl	8000dd4 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 80068ea:	1d3b      	adds	r3, r7, #4
 80068ec:	2205      	movs	r2, #5
 80068ee:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80068f0:	1d3a      	adds	r2, r7, #4
 80068f2:	4b16      	ldr	r3, [pc, #88]	; (800694c <MX_ADC_Init+0x124>)
 80068f4:	0011      	movs	r1, r2
 80068f6:	0018      	movs	r0, r3
 80068f8:	f7fa fa6c 	bl	8000dd4 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 80068fc:	1d3b      	adds	r3, r7, #4
 80068fe:	2206      	movs	r2, #6
 8006900:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8006902:	1d3a      	adds	r2, r7, #4
 8006904:	4b11      	ldr	r3, [pc, #68]	; (800694c <MX_ADC_Init+0x124>)
 8006906:	0011      	movs	r1, r2
 8006908:	0018      	movs	r0, r3
 800690a:	f7fa fa63 	bl	8000dd4 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_7;
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	2207      	movs	r2, #7
 8006912:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8006914:	1d3a      	adds	r2, r7, #4
 8006916:	4b0d      	ldr	r3, [pc, #52]	; (800694c <MX_ADC_Init+0x124>)
 8006918:	0011      	movs	r1, r2
 800691a:	0018      	movs	r0, r3
 800691c:	f7fa fa5a 	bl	8000dd4 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_14;
 8006920:	1d3b      	adds	r3, r7, #4
 8006922:	220e      	movs	r2, #14
 8006924:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8006926:	1d3a      	adds	r2, r7, #4
 8006928:	4b08      	ldr	r3, [pc, #32]	; (800694c <MX_ADC_Init+0x124>)
 800692a:	0011      	movs	r1, r2
 800692c:	0018      	movs	r0, r3
 800692e:	f7fa fa51 	bl	8000dd4 <HAL_ADC_ConfigChannel>

    /**Configure for the selected ADC regular channel to be converted. 
    */
  sConfig.Channel = ADC_CHANNEL_15;
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	220f      	movs	r2, #15
 8006936:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8006938:	1d3a      	adds	r2, r7, #4
 800693a:	4b04      	ldr	r3, [pc, #16]	; (800694c <MX_ADC_Init+0x124>)
 800693c:	0011      	movs	r1, r2
 800693e:	0018      	movs	r0, r3
 8006940:	f7fa fa48 	bl	8000dd4 <HAL_ADC_ConfigChannel>
}
 8006944:	46c0      	nop			; (mov r8, r8)
 8006946:	46bd      	mov	sp, r7
 8006948:	b004      	add	sp, #16
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20002414 	.word	0x20002414
 8006950:	40012400 	.word	0x40012400
 8006954:	00001001 	.word	0x00001001

08006958 <MX_TIM2_Init>:

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	; 0x28
 800695c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800695e:	4b21      	ldr	r3, [pc, #132]	; (80069e4 <MX_TIM2_Init+0x8c>)
 8006960:	2280      	movs	r2, #128	; 0x80
 8006962:	05d2      	lsls	r2, r2, #23
 8006964:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006966:	4b1f      	ldr	r3, [pc, #124]	; (80069e4 <MX_TIM2_Init+0x8c>)
 8006968:	2200      	movs	r2, #0
 800696a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800696c:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <MX_TIM2_Init+0x8c>)
 800696e:	2200      	movs	r2, #0
 8006970:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <MX_TIM2_Init+0x8c>)
 8006974:	2200      	movs	r2, #0
 8006976:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006978:	4b1a      	ldr	r3, [pc, #104]	; (80069e4 <MX_TIM2_Init+0x8c>)
 800697a:	2200      	movs	r2, #0
 800697c:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&htim2);
 800697e:	4b19      	ldr	r3, [pc, #100]	; (80069e4 <MX_TIM2_Init+0x8c>)
 8006980:	0018      	movs	r0, r3
 8006982:	f7fb fdff 	bl	8002584 <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006986:	2320      	movs	r3, #32
 8006988:	18fb      	adds	r3, r7, r3
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800698e:	2320      	movs	r3, #32
 8006990:	18fb      	adds	r3, r7, r3
 8006992:	2200      	movs	r2, #0
 8006994:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8006996:	2320      	movs	r3, #32
 8006998:	18fa      	adds	r2, r7, r3
 800699a:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <MX_TIM2_Init+0x8c>)
 800699c:	0011      	movs	r1, r2
 800699e:	0018      	movs	r0, r3
 80069a0:	f7fc fc8f 	bl	80032c2 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80069a4:	1d3b      	adds	r3, r7, #4
 80069a6:	2260      	movs	r2, #96	; 0x60
 80069a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80069aa:	1d3b      	adds	r3, r7, #4
 80069ac:	2200      	movs	r2, #0
 80069ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80069b0:	1d3b      	adds	r3, r7, #4
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80069b6:	1d3b      	adds	r3, r7, #4
 80069b8:	2200      	movs	r2, #0
 80069ba:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80069bc:	1d39      	adds	r1, r7, #4
 80069be:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <MX_TIM2_Init+0x8c>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	0018      	movs	r0, r3
 80069c4:	f7fb ff64 	bl	8002890 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 80069c8:	1d39      	adds	r1, r7, #4
 80069ca:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <MX_TIM2_Init+0x8c>)
 80069cc:	2204      	movs	r2, #4
 80069ce:	0018      	movs	r0, r3
 80069d0:	f7fb ff5e 	bl	8002890 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim2);
 80069d4:	4b03      	ldr	r3, [pc, #12]	; (80069e4 <MX_TIM2_Init+0x8c>)
 80069d6:	0018      	movs	r0, r3
 80069d8:	f000 fede 	bl	8007798 <HAL_TIM_MspPostInit>

}
 80069dc:	46c0      	nop			; (mov r8, r8)
 80069de:	46bd      	mov	sp, r7
 80069e0:	b00a      	add	sp, #40	; 0x28
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20002364 	.word	0x20002364

080069e8 <MX_TIM3_Init>:

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08e      	sub	sp, #56	; 0x38
 80069ec:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 80069ee:	4b2f      	ldr	r3, [pc, #188]	; (8006aac <MX_TIM3_Init+0xc4>)
 80069f0:	4a2f      	ldr	r2, [pc, #188]	; (8006ab0 <MX_TIM3_Init+0xc8>)
 80069f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 80069f4:	4b2d      	ldr	r3, [pc, #180]	; (8006aac <MX_TIM3_Init+0xc4>)
 80069f6:	2214      	movs	r2, #20
 80069f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069fa:	4b2c      	ldr	r3, [pc, #176]	; (8006aac <MX_TIM3_Init+0xc4>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8006a00:	4b2a      	ldr	r3, [pc, #168]	; (8006aac <MX_TIM3_Init+0xc4>)
 8006a02:	2264      	movs	r2, #100	; 0x64
 8006a04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a06:	4b29      	ldr	r3, [pc, #164]	; (8006aac <MX_TIM3_Init+0xc4>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Init(&htim3);
 8006a0c:	4b27      	ldr	r3, [pc, #156]	; (8006aac <MX_TIM3_Init+0xc4>)
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f7fb fd48 	bl	80024a4 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a14:	2328      	movs	r3, #40	; 0x28
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	2280      	movs	r2, #128	; 0x80
 8006a1a:	0152      	lsls	r2, r2, #5
 8006a1c:	601a      	str	r2, [r3, #0]
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8006a1e:	2328      	movs	r3, #40	; 0x28
 8006a20:	18fa      	adds	r2, r7, r3
 8006a22:	4b22      	ldr	r3, [pc, #136]	; (8006aac <MX_TIM3_Init+0xc4>)
 8006a24:	0011      	movs	r1, r2
 8006a26:	0018      	movs	r0, r3
 8006a28:	f7fb ffea 	bl	8002a00 <HAL_TIM_ConfigClockSource>

  HAL_TIM_PWM_Init(&htim3);
 8006a2c:	4b1f      	ldr	r3, [pc, #124]	; (8006aac <MX_TIM3_Init+0xc4>)
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f7fb fda8 	bl	8002584 <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a34:	2320      	movs	r3, #32
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	2200      	movs	r2, #0
 8006a42:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8006a44:	2320      	movs	r3, #32
 8006a46:	18fa      	adds	r2, r7, r3
 8006a48:	4b18      	ldr	r3, [pc, #96]	; (8006aac <MX_TIM3_Init+0xc4>)
 8006a4a:	0011      	movs	r1, r2
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f7fc fc38 	bl	80032c2 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a52:	1d3b      	adds	r3, r7, #4
 8006a54:	2260      	movs	r2, #96	; 0x60
 8006a56:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8006a58:	1d3b      	adds	r3, r7, #4
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a5e:	1d3b      	adds	r3, r7, #4
 8006a60:	2200      	movs	r2, #0
 8006a62:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a64:	1d3b      	adds	r3, r7, #4
 8006a66:	2200      	movs	r2, #0
 8006a68:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8006a6a:	1d39      	adds	r1, r7, #4
 8006a6c:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <MX_TIM3_Init+0xc4>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	0018      	movs	r0, r3
 8006a72:	f7fb ff0d 	bl	8002890 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8006a76:	1d39      	adds	r1, r7, #4
 8006a78:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <MX_TIM3_Init+0xc4>)
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f7fb ff07 	bl	8002890 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 8006a82:	1d39      	adds	r1, r7, #4
 8006a84:	4b09      	ldr	r3, [pc, #36]	; (8006aac <MX_TIM3_Init+0xc4>)
 8006a86:	2208      	movs	r2, #8
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f7fb ff01 	bl	8002890 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
 8006a8e:	1d39      	adds	r1, r7, #4
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <MX_TIM3_Init+0xc4>)
 8006a92:	220c      	movs	r2, #12
 8006a94:	0018      	movs	r0, r3
 8006a96:	f7fb fefb 	bl	8002890 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim3);
 8006a9a:	4b04      	ldr	r3, [pc, #16]	; (8006aac <MX_TIM3_Init+0xc4>)
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f000 fe7b 	bl	8007798 <HAL_TIM_MspPostInit>

}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b00e      	add	sp, #56	; 0x38
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	20002274 	.word	0x20002274
 8006ab0:	40000400 	.word	0x40000400

08006ab4 <MX_TIM6_Init>:

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8006aba:	4b10      	ldr	r3, [pc, #64]	; (8006afc <MX_TIM6_Init+0x48>)
 8006abc:	4a10      	ldr	r2, [pc, #64]	; (8006b00 <MX_TIM6_Init+0x4c>)
 8006abe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48;
 8006ac0:	4b0e      	ldr	r3, [pc, #56]	; (8006afc <MX_TIM6_Init+0x48>)
 8006ac2:	2230      	movs	r2, #48	; 0x30
 8006ac4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <MX_TIM6_Init+0x48>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <MX_TIM6_Init+0x48>)
 8006ace:	4a0d      	ldr	r2, [pc, #52]	; (8006b04 <MX_TIM6_Init+0x50>)
 8006ad0:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Init(&htim6);
 8006ad2:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <MX_TIM6_Init+0x48>)
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f7fb fce5 	bl	80024a4 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006ada:	003b      	movs	r3, r7
 8006adc:	2220      	movs	r2, #32
 8006ade:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ae0:	003b      	movs	r3, r7
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8006ae6:	003a      	movs	r2, r7
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <MX_TIM6_Init+0x48>)
 8006aea:	0011      	movs	r1, r2
 8006aec:	0018      	movs	r0, r3
 8006aee:	f7fc fbe8 	bl	80032c2 <HAL_TIMEx_MasterConfigSynchronization>

}
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	46bd      	mov	sp, r7
 8006af6:	b002      	add	sp, #8
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	46c0      	nop			; (mov r8, r8)
 8006afc:	20002324 	.word	0x20002324
 8006b00:	40001000 	.word	0x40001000
 8006b04:	000003e7 	.word	0x000003e7

08006b08 <MX_TIM15_Init>:

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b090      	sub	sp, #64	; 0x40
 8006b0c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim15.Instance = TIM15;
 8006b0e:	4b39      	ldr	r3, [pc, #228]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006b10:	4a39      	ldr	r2, [pc, #228]	; (8006bf8 <MX_TIM15_Init+0xf0>)
 8006b12:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8006b14:	4b37      	ldr	r3, [pc, #220]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b1a:	4b36      	ldr	r3, [pc, #216]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0;
 8006b20:	4b34      	ldr	r3, [pc, #208]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b26:	4b33      	ldr	r3, [pc, #204]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8006b2c:	4b31      	ldr	r3, [pc, #196]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	615a      	str	r2, [r3, #20]
  HAL_TIM_PWM_Init(&htim15);
 8006b32:	4b30      	ldr	r3, [pc, #192]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006b34:	0018      	movs	r0, r3
 8006b36:	f7fb fd25 	bl	8002584 <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b3a:	2338      	movs	r3, #56	; 0x38
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b42:	2338      	movs	r3, #56	; 0x38
 8006b44:	18fb      	adds	r3, r7, r3
 8006b46:	2200      	movs	r2, #0
 8006b48:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 8006b4a:	2338      	movs	r3, #56	; 0x38
 8006b4c:	18fa      	adds	r2, r7, r3
 8006b4e:	4b29      	ldr	r3, [pc, #164]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006b50:	0011      	movs	r1, r2
 8006b52:	0018      	movs	r0, r3
 8006b54:	f7fc fbb5 	bl	80032c2 <HAL_TIMEx_MasterConfigSynchronization>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006b58:	231c      	movs	r3, #28
 8006b5a:	18fb      	adds	r3, r7, r3
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006b60:	231c      	movs	r3, #28
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	2200      	movs	r2, #0
 8006b66:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006b68:	231c      	movs	r3, #28
 8006b6a:	18fb      	adds	r3, r7, r3
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006b70:	231c      	movs	r3, #28
 8006b72:	18fb      	adds	r3, r7, r3
 8006b74:	2200      	movs	r2, #0
 8006b76:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006b78:	231c      	movs	r3, #28
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006b80:	231c      	movs	r3, #28
 8006b82:	18fb      	adds	r3, r7, r3
 8006b84:	2280      	movs	r2, #128	; 0x80
 8006b86:	0192      	lsls	r2, r2, #6
 8006b88:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006b8a:	231c      	movs	r3, #28
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	2200      	movs	r2, #0
 8006b90:	619a      	str	r2, [r3, #24]
  HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig);
 8006b92:	231c      	movs	r3, #28
 8006b94:	18fa      	adds	r2, r7, r3
 8006b96:	4b17      	ldr	r3, [pc, #92]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006b98:	0011      	movs	r1, r2
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f7fc fbd4 	bl	8003348 <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ba0:	003b      	movs	r3, r7
 8006ba2:	2260      	movs	r2, #96	; 0x60
 8006ba4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8006ba6:	003b      	movs	r3, r7
 8006ba8:	2200      	movs	r2, #0
 8006baa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006bac:	003b      	movs	r3, r7
 8006bae:	2200      	movs	r2, #0
 8006bb0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006bb2:	003b      	movs	r3, r7
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006bb8:	003b      	movs	r3, r7
 8006bba:	2200      	movs	r2, #0
 8006bbc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006bbe:	003b      	movs	r3, r7
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006bc4:	003b      	movs	r3, r7
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1);
 8006bca:	0039      	movs	r1, r7
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f7fb fe5d 	bl	8002890 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2);
 8006bd6:	0039      	movs	r1, r7
 8006bd8:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006bda:	2204      	movs	r2, #4
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f7fb fe57 	bl	8002890 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim15);
 8006be2:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <MX_TIM15_Init+0xec>)
 8006be4:	0018      	movs	r0, r3
 8006be6:	f000 fdd7 	bl	8007798 <HAL_TIM_MspPostInit>

}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b010      	add	sp, #64	; 0x40
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	200021f4 	.word	0x200021f4
 8006bf8:	40014000 	.word	0x40014000

08006bfc <MX_TIM16_Init>:

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08e      	sub	sp, #56	; 0x38
 8006c00:	af00      	add	r7, sp, #0

  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim16.Instance = TIM16;
 8006c02:	4b30      	ldr	r3, [pc, #192]	; (8006cc4 <MX_TIM16_Init+0xc8>)
 8006c04:	4a30      	ldr	r2, [pc, #192]	; (8006cc8 <MX_TIM16_Init+0xcc>)
 8006c06:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8006c08:	4b2e      	ldr	r3, [pc, #184]	; (8006cc4 <MX_TIM16_Init+0xc8>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c0e:	4b2d      	ldr	r3, [pc, #180]	; (8006cc4 <MX_TIM16_Init+0xc8>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 8006c14:	4b2b      	ldr	r3, [pc, #172]	; (8006cc4 <MX_TIM16_Init+0xc8>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c1a:	4b2a      	ldr	r3, [pc, #168]	; (8006cc4 <MX_TIM16_Init+0xc8>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006c20:	4b28      	ldr	r3, [pc, #160]	; (8006cc4 <MX_TIM16_Init+0xc8>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	615a      	str	r2, [r3, #20]
  HAL_TIM_Base_Init(&htim16);
 8006c26:	4b27      	ldr	r3, [pc, #156]	; (8006cc4 <MX_TIM16_Init+0xc8>)
 8006c28:	0018      	movs	r0, r3
 8006c2a:	f7fb fc3b 	bl	80024a4 <HAL_TIM_Base_Init>

  HAL_TIM_PWM_Init(&htim16);
 8006c2e:	4b25      	ldr	r3, [pc, #148]	; (8006cc4 <MX_TIM16_Init+0xc8>)
 8006c30:	0018      	movs	r0, r3
 8006c32:	f7fb fca7 	bl	8002584 <HAL_TIM_PWM_Init>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006c36:	231c      	movs	r3, #28
 8006c38:	18fb      	adds	r3, r7, r3
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006c3e:	231c      	movs	r3, #28
 8006c40:	18fb      	adds	r3, r7, r3
 8006c42:	2200      	movs	r2, #0
 8006c44:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006c46:	231c      	movs	r3, #28
 8006c48:	18fb      	adds	r3, r7, r3
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006c4e:	231c      	movs	r3, #28
 8006c50:	18fb      	adds	r3, r7, r3
 8006c52:	2200      	movs	r2, #0
 8006c54:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006c56:	231c      	movs	r3, #28
 8006c58:	18fb      	adds	r3, r7, r3
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006c5e:	231c      	movs	r3, #28
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	2280      	movs	r2, #128	; 0x80
 8006c64:	0192      	lsls	r2, r2, #6
 8006c66:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006c68:	231c      	movs	r3, #28
 8006c6a:	18fb      	adds	r3, r7, r3
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	619a      	str	r2, [r3, #24]
  HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig);
 8006c70:	231c      	movs	r3, #28
 8006c72:	18fa      	adds	r2, r7, r3
 8006c74:	4b13      	ldr	r3, [pc, #76]	; (8006cc4 <MX_TIM16_Init+0xc8>)
 8006c76:	0011      	movs	r1, r2
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f7fc fb65 	bl	8003348 <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c7e:	003b      	movs	r3, r7
 8006c80:	2260      	movs	r2, #96	; 0x60
 8006c82:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8006c84:	003b      	movs	r3, r7
 8006c86:	2200      	movs	r2, #0
 8006c88:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c8a:	003b      	movs	r3, r7
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006c90:	003b      	movs	r3, r7
 8006c92:	2200      	movs	r2, #0
 8006c94:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c96:	003b      	movs	r3, r7
 8006c98:	2200      	movs	r2, #0
 8006c9a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006c9c:	003b      	movs	r3, r7
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006ca2:	003b      	movs	r3, r7
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1);
 8006ca8:	0039      	movs	r1, r7
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <MX_TIM16_Init+0xc8>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f7fb fdee 	bl	8002890 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim16);
 8006cb4:	4b03      	ldr	r3, [pc, #12]	; (8006cc4 <MX_TIM16_Init+0xc8>)
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f000 fd6e 	bl	8007798 <HAL_TIM_MspPostInit>

}
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b00e      	add	sp, #56	; 0x38
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	20002460 	.word	0x20002460
 8006cc8:	40014400 	.word	0x40014400

08006ccc <MX_TIM17_Init>:

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08e      	sub	sp, #56	; 0x38
 8006cd0:	af00      	add	r7, sp, #0

  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim17.Instance = TIM17;
 8006cd2:	4b30      	ldr	r3, [pc, #192]	; (8006d94 <MX_TIM17_Init+0xc8>)
 8006cd4:	4a30      	ldr	r2, [pc, #192]	; (8006d98 <MX_TIM17_Init+0xcc>)
 8006cd6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8006cd8:	4b2e      	ldr	r3, [pc, #184]	; (8006d94 <MX_TIM17_Init+0xc8>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cde:	4b2d      	ldr	r3, [pc, #180]	; (8006d94 <MX_TIM17_Init+0xc8>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8006ce4:	4b2b      	ldr	r3, [pc, #172]	; (8006d94 <MX_TIM17_Init+0xc8>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cea:	4b2a      	ldr	r3, [pc, #168]	; (8006d94 <MX_TIM17_Init+0xc8>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006cf0:	4b28      	ldr	r3, [pc, #160]	; (8006d94 <MX_TIM17_Init+0xc8>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	615a      	str	r2, [r3, #20]
  HAL_TIM_Base_Init(&htim17);
 8006cf6:	4b27      	ldr	r3, [pc, #156]	; (8006d94 <MX_TIM17_Init+0xc8>)
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f7fb fbd3 	bl	80024a4 <HAL_TIM_Base_Init>

  HAL_TIM_PWM_Init(&htim17);
 8006cfe:	4b25      	ldr	r3, [pc, #148]	; (8006d94 <MX_TIM17_Init+0xc8>)
 8006d00:	0018      	movs	r0, r3
 8006d02:	f7fb fc3f 	bl	8002584 <HAL_TIM_PWM_Init>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006d06:	231c      	movs	r3, #28
 8006d08:	18fb      	adds	r3, r7, r3
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006d0e:	231c      	movs	r3, #28
 8006d10:	18fb      	adds	r3, r7, r3
 8006d12:	2200      	movs	r2, #0
 8006d14:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006d16:	231c      	movs	r3, #28
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006d1e:	231c      	movs	r3, #28
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	2200      	movs	r2, #0
 8006d24:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006d26:	231c      	movs	r3, #28
 8006d28:	18fb      	adds	r3, r7, r3
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006d2e:	231c      	movs	r3, #28
 8006d30:	18fb      	adds	r3, r7, r3
 8006d32:	2280      	movs	r2, #128	; 0x80
 8006d34:	0192      	lsls	r2, r2, #6
 8006d36:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006d38:	231c      	movs	r3, #28
 8006d3a:	18fb      	adds	r3, r7, r3
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	619a      	str	r2, [r3, #24]
  HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig);
 8006d40:	231c      	movs	r3, #28
 8006d42:	18fa      	adds	r2, r7, r3
 8006d44:	4b13      	ldr	r3, [pc, #76]	; (8006d94 <MX_TIM17_Init+0xc8>)
 8006d46:	0011      	movs	r1, r2
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f7fc fafd 	bl	8003348 <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d4e:	003b      	movs	r3, r7
 8006d50:	2260      	movs	r2, #96	; 0x60
 8006d52:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8006d54:	003b      	movs	r3, r7
 8006d56:	2200      	movs	r2, #0
 8006d58:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d5a:	003b      	movs	r3, r7
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006d60:	003b      	movs	r3, r7
 8006d62:	2200      	movs	r2, #0
 8006d64:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d66:	003b      	movs	r3, r7
 8006d68:	2200      	movs	r2, #0
 8006d6a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006d6c:	003b      	movs	r3, r7
 8006d6e:	2200      	movs	r2, #0
 8006d70:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006d72:	003b      	movs	r3, r7
 8006d74:	2200      	movs	r2, #0
 8006d76:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1);
 8006d78:	0039      	movs	r1, r7
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <MX_TIM17_Init+0xc8>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f7fb fd86 	bl	8002890 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim17);
 8006d84:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <MX_TIM17_Init+0xc8>)
 8006d86:	0018      	movs	r0, r3
 8006d88:	f000 fd06 	bl	8007798 <HAL_TIM_MspPostInit>

}
 8006d8c:	46c0      	nop			; (mov r8, r8)
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b00e      	add	sp, #56	; 0x38
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20002234 	.word	0x20002234
 8006d98:	40014800 	.word	0x40014800

08006d9c <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006da0:	4b12      	ldr	r3, [pc, #72]	; (8006dec <MX_USART1_UART_Init+0x50>)
 8006da2:	4a13      	ldr	r2, [pc, #76]	; (8006df0 <MX_USART1_UART_Init+0x54>)
 8006da4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006da6:	4b11      	ldr	r3, [pc, #68]	; (8006dec <MX_USART1_UART_Init+0x50>)
 8006da8:	22e1      	movs	r2, #225	; 0xe1
 8006daa:	0252      	lsls	r2, r2, #9
 8006dac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006dae:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <MX_USART1_UART_Init+0x50>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006db4:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <MX_USART1_UART_Init+0x50>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006dba:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <MX_USART1_UART_Init+0x50>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <MX_USART1_UART_Init+0x50>)
 8006dc2:	220c      	movs	r2, #12
 8006dc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <MX_USART1_UART_Init+0x50>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006dcc:	4b07      	ldr	r3, [pc, #28]	; (8006dec <MX_USART1_UART_Init+0x50>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006dd2:	4b06      	ldr	r3, [pc, #24]	; (8006dec <MX_USART1_UART_Init+0x50>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006dd8:	4b04      	ldr	r3, [pc, #16]	; (8006dec <MX_USART1_UART_Init+0x50>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart1);
 8006dde:	4b03      	ldr	r3, [pc, #12]	; (8006dec <MX_USART1_UART_Init+0x50>)
 8006de0:	0018      	movs	r0, r3
 8006de2:	f7fc fb2f 	bl	8003444 <HAL_UART_Init>

}
 8006de6:	46c0      	nop			; (mov r8, r8)
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	200022b4 	.word	0x200022b4
 8006df0:	40013800 	.word	0x40013800

08006df4 <MX_USART2_UART_Init>:

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006df8:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <MX_USART2_UART_Init+0x50>)
 8006dfa:	4a13      	ldr	r2, [pc, #76]	; (8006e48 <MX_USART2_UART_Init+0x54>)
 8006dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006dfe:	4b11      	ldr	r3, [pc, #68]	; (8006e44 <MX_USART2_UART_Init+0x50>)
 8006e00:	22e1      	movs	r2, #225	; 0xe1
 8006e02:	0252      	lsls	r2, r2, #9
 8006e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006e06:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <MX_USART2_UART_Init+0x50>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <MX_USART2_UART_Init+0x50>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006e12:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <MX_USART2_UART_Init+0x50>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <MX_USART2_UART_Init+0x50>)
 8006e1a:	220c      	movs	r2, #12
 8006e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e1e:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <MX_USART2_UART_Init+0x50>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e24:	4b07      	ldr	r3, [pc, #28]	; (8006e44 <MX_USART2_UART_Init+0x50>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <MX_USART2_UART_Init+0x50>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006e30:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <MX_USART2_UART_Init+0x50>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart2);
 8006e36:	4b03      	ldr	r3, [pc, #12]	; (8006e44 <MX_USART2_UART_Init+0x50>)
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f7fc fb03 	bl	8003444 <HAL_UART_Init>
}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	200023a4 	.word	0x200023a4
 8006e48:	40004400 	.word	0x40004400

08006e4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08c      	sub	sp, #48	; 0x30
 8006e50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e52:	4ba7      	ldr	r3, [pc, #668]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006e54:	4aa6      	ldr	r2, [pc, #664]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006e56:	6952      	ldr	r2, [r2, #20]
 8006e58:	2180      	movs	r1, #128	; 0x80
 8006e5a:	0389      	lsls	r1, r1, #14
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	615a      	str	r2, [r3, #20]
 8006e60:	4ba3      	ldr	r3, [pc, #652]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006e62:	695a      	ldr	r2, [r3, #20]
 8006e64:	2380      	movs	r3, #128	; 0x80
 8006e66:	039b      	lsls	r3, r3, #14
 8006e68:	4013      	ands	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
 8006e6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e6e:	4ba0      	ldr	r3, [pc, #640]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006e70:	4a9f      	ldr	r2, [pc, #636]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006e72:	6952      	ldr	r2, [r2, #20]
 8006e74:	2180      	movs	r1, #128	; 0x80
 8006e76:	0309      	lsls	r1, r1, #12
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	615a      	str	r2, [r3, #20]
 8006e7c:	4b9c      	ldr	r3, [pc, #624]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006e7e:	695a      	ldr	r2, [r3, #20]
 8006e80:	2380      	movs	r3, #128	; 0x80
 8006e82:	031b      	lsls	r3, r3, #12
 8006e84:	4013      	ands	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006e8a:	4b99      	ldr	r3, [pc, #612]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006e8c:	4a98      	ldr	r2, [pc, #608]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006e8e:	6952      	ldr	r2, [r2, #20]
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	03c9      	lsls	r1, r1, #15
 8006e94:	430a      	orrs	r2, r1
 8006e96:	615a      	str	r2, [r3, #20]
 8006e98:	4b95      	ldr	r3, [pc, #596]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006e9a:	695a      	ldr	r2, [r3, #20]
 8006e9c:	2380      	movs	r3, #128	; 0x80
 8006e9e:	03db      	lsls	r3, r3, #15
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ea6:	4b92      	ldr	r3, [pc, #584]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006ea8:	4a91      	ldr	r2, [pc, #580]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006eaa:	6952      	ldr	r2, [r2, #20]
 8006eac:	2180      	movs	r1, #128	; 0x80
 8006eae:	0289      	lsls	r1, r1, #10
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	615a      	str	r2, [r3, #20]
 8006eb4:	4b8e      	ldr	r3, [pc, #568]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006eb6:	695a      	ldr	r2, [r3, #20]
 8006eb8:	2380      	movs	r3, #128	; 0x80
 8006eba:	029b      	lsls	r3, r3, #10
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ec2:	4b8b      	ldr	r3, [pc, #556]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006ec4:	4a8a      	ldr	r2, [pc, #552]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006ec6:	6952      	ldr	r2, [r2, #20]
 8006ec8:	2180      	movs	r1, #128	; 0x80
 8006eca:	02c9      	lsls	r1, r1, #11
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	615a      	str	r2, [r3, #20]
 8006ed0:	4b87      	ldr	r3, [pc, #540]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006ed2:	695a      	ldr	r2, [r3, #20]
 8006ed4:	2380      	movs	r3, #128	; 0x80
 8006ed6:	02db      	lsls	r3, r3, #11
 8006ed8:	4013      	ands	r3, r2
 8006eda:	60bb      	str	r3, [r7, #8]
 8006edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ede:	4b84      	ldr	r3, [pc, #528]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006ee0:	4a83      	ldr	r2, [pc, #524]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006ee2:	6952      	ldr	r2, [r2, #20]
 8006ee4:	2180      	movs	r1, #128	; 0x80
 8006ee6:	0349      	lsls	r1, r1, #13
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	615a      	str	r2, [r3, #20]
 8006eec:	4b80      	ldr	r3, [pc, #512]	; (80070f0 <MX_GPIO_Init+0x2a4>)
 8006eee:	695a      	ldr	r2, [r3, #20]
 8006ef0:	2380      	movs	r3, #128	; 0x80
 8006ef2:	035b      	lsls	r3, r3, #13
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	607b      	str	r3, [r7, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M0A1_Pin|M2A1_Pin|M2A2_Pin|SERVO4_Pin 
 8006efa:	497e      	ldr	r1, [pc, #504]	; (80070f4 <MX_GPIO_Init+0x2a8>)
 8006efc:	4b7e      	ldr	r3, [pc, #504]	; (80070f8 <MX_GPIO_Init+0x2ac>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7fa fc74 	bl	80017ee <HAL_GPIO_WritePin>
                          |M3B1_Pin|SERVO3_Pin|SERVO2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GREEN_Pin|M3B2_Pin, GPIO_PIN_RESET);
 8006f06:	497d      	ldr	r1, [pc, #500]	; (80070fc <MX_GPIO_Init+0x2b0>)
 8006f08:	4b7d      	ldr	r3, [pc, #500]	; (8007100 <MX_GPIO_Init+0x2b4>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	f7fa fc6e 	bl	80017ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO5_Pin|M1B2_Pin|SERVO1_Pin|SERVO0_Pin, GPIO_PIN_RESET);
 8006f12:	497c      	ldr	r1, [pc, #496]	; (8007104 <MX_GPIO_Init+0x2b8>)
 8006f14:	4b7c      	ldr	r3, [pc, #496]	; (8007108 <MX_GPIO_Init+0x2bc>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f7fa fc68 	bl	80017ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1B1_GPIO_Port, M1B1_Pin, GPIO_PIN_RESET);
 8006f1e:	2380      	movs	r3, #128	; 0x80
 8006f20:	019b      	lsls	r3, r3, #6
 8006f22:	487a      	ldr	r0, [pc, #488]	; (800710c <MX_GPIO_Init+0x2c0>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	0019      	movs	r1, r3
 8006f28:	f7fa fc61 	bl	80017ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M0A2_GPIO_Port, M0A2_Pin, GPIO_PIN_RESET);
 8006f2c:	4b78      	ldr	r3, [pc, #480]	; (8007110 <MX_GPIO_Init+0x2c4>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2140      	movs	r1, #64	; 0x40
 8006f32:	0018      	movs	r0, r3
 8006f34:	f7fa fc5b 	bl	80017ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M0A1_Pin M2A1_Pin M2A2_Pin SERVO4_Pin 
                           M3B1_Pin SERVO3_Pin SERVO2_Pin */
  GPIO_InitStruct.Pin = M0A1_Pin|M2A1_Pin|M2A2_Pin|SERVO4_Pin 
 8006f38:	231c      	movs	r3, #28
 8006f3a:	18fb      	adds	r3, r7, r3
 8006f3c:	4a6d      	ldr	r2, [pc, #436]	; (80070f4 <MX_GPIO_Init+0x2a8>)
 8006f3e:	601a      	str	r2, [r3, #0]
                          |M3B1_Pin|SERVO3_Pin|SERVO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f40:	231c      	movs	r3, #28
 8006f42:	18fb      	adds	r3, r7, r3
 8006f44:	2201      	movs	r2, #1
 8006f46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006f48:	231c      	movs	r3, #28
 8006f4a:	18fb      	adds	r3, r7, r3
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f50:	231c      	movs	r3, #28
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	2200      	movs	r2, #0
 8006f56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f58:	231c      	movs	r3, #28
 8006f5a:	18fb      	adds	r3, r7, r3
 8006f5c:	4a66      	ldr	r2, [pc, #408]	; (80070f8 <MX_GPIO_Init+0x2ac>)
 8006f5e:	0019      	movs	r1, r3
 8006f60:	0010      	movs	r0, r2
 8006f62:	f7fa faab 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGITAL5_Pin DIGITAL2_Pin DIGITAL3_Pin */
  GPIO_InitStruct.Pin = DIGITAL5_Pin|DIGITAL2_Pin|DIGITAL3_Pin;
 8006f66:	231c      	movs	r3, #28
 8006f68:	18fb      	adds	r3, r7, r3
 8006f6a:	228c      	movs	r2, #140	; 0x8c
 8006f6c:	0192      	lsls	r2, r2, #6
 8006f6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f70:	231c      	movs	r3, #28
 8006f72:	18fb      	adds	r3, r7, r3
 8006f74:	2200      	movs	r2, #0
 8006f76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f78:	231c      	movs	r3, #28
 8006f7a:	18fb      	adds	r3, r7, r3
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f80:	231c      	movs	r3, #28
 8006f82:	18fb      	adds	r3, r7, r3
 8006f84:	4a5e      	ldr	r2, [pc, #376]	; (8007100 <MX_GPIO_Init+0x2b4>)
 8006f86:	0019      	movs	r1, r3
 8006f88:	0010      	movs	r0, r2
 8006f8a:	f7fa fa97 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin M3B2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|M3B2_Pin;
 8006f8e:	231c      	movs	r3, #28
 8006f90:	18fb      	adds	r3, r7, r3
 8006f92:	4a5a      	ldr	r2, [pc, #360]	; (80070fc <MX_GPIO_Init+0x2b0>)
 8006f94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f96:	231c      	movs	r3, #28
 8006f98:	18fb      	adds	r3, r7, r3
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006f9e:	231c      	movs	r3, #28
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fa6:	231c      	movs	r3, #28
 8006fa8:	18fb      	adds	r3, r7, r3
 8006faa:	2200      	movs	r2, #0
 8006fac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fae:	231c      	movs	r3, #28
 8006fb0:	18fb      	adds	r3, r7, r3
 8006fb2:	4a53      	ldr	r2, [pc, #332]	; (8007100 <MX_GPIO_Init+0x2b4>)
 8006fb4:	0019      	movs	r1, r3
 8006fb6:	0010      	movs	r0, r2
 8006fb8:	f7fa fa80 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO5_Pin M1B2_Pin SERVO1_Pin SERVO0_Pin */
  GPIO_InitStruct.Pin = SERVO5_Pin|M1B2_Pin|SERVO1_Pin|SERVO0_Pin;
 8006fbc:	231c      	movs	r3, #28
 8006fbe:	18fb      	adds	r3, r7, r3
 8006fc0:	4a50      	ldr	r2, [pc, #320]	; (8007104 <MX_GPIO_Init+0x2b8>)
 8006fc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fc4:	231c      	movs	r3, #28
 8006fc6:	18fb      	adds	r3, r7, r3
 8006fc8:	2201      	movs	r2, #1
 8006fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006fcc:	231c      	movs	r3, #28
 8006fce:	18fb      	adds	r3, r7, r3
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fd4:	231c      	movs	r3, #28
 8006fd6:	18fb      	adds	r3, r7, r3
 8006fd8:	2200      	movs	r2, #0
 8006fda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fdc:	231c      	movs	r3, #28
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	4a49      	ldr	r2, [pc, #292]	; (8007108 <MX_GPIO_Init+0x2bc>)
 8006fe2:	0019      	movs	r1, r3
 8006fe4:	0010      	movs	r0, r2
 8006fe6:	f7fa fa69 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : M1B1_Pin */
  GPIO_InitStruct.Pin = M1B1_Pin;
 8006fea:	231c      	movs	r3, #28
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	2280      	movs	r2, #128	; 0x80
 8006ff0:	0192      	lsls	r2, r2, #6
 8006ff2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ff4:	231c      	movs	r3, #28
 8006ff6:	18fb      	adds	r3, r7, r3
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006ffc:	231c      	movs	r3, #28
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	2202      	movs	r2, #2
 8007002:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007004:	231c      	movs	r3, #28
 8007006:	18fb      	adds	r3, r7, r3
 8007008:	2200      	movs	r2, #0
 800700a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(M1B1_GPIO_Port, &GPIO_InitStruct);
 800700c:	231c      	movs	r3, #28
 800700e:	18fb      	adds	r3, r7, r3
 8007010:	4a3e      	ldr	r2, [pc, #248]	; (800710c <MX_GPIO_Init+0x2c0>)
 8007012:	0019      	movs	r1, r3
 8007014:	0010      	movs	r0, r2
 8007016:	f7fa fa51 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGITAL0_Pin DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL0_Pin|DIGITAL1_Pin;
 800701a:	231c      	movs	r3, #28
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	22c0      	movs	r2, #192	; 0xc0
 8007020:	0212      	lsls	r2, r2, #8
 8007022:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007024:	231c      	movs	r3, #28
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	2200      	movs	r2, #0
 800702a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800702c:	231c      	movs	r3, #28
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	2201      	movs	r2, #1
 8007032:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007034:	231c      	movs	r3, #28
 8007036:	18fb      	adds	r3, r7, r3
 8007038:	4a34      	ldr	r2, [pc, #208]	; (800710c <MX_GPIO_Init+0x2c0>)
 800703a:	0019      	movs	r1, r3
 800703c:	0010      	movs	r0, r2
 800703e:	f7fa fa3d 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL4_Pin */
  GPIO_InitStruct.Pin = DIGITAL4_Pin;
 8007042:	231c      	movs	r3, #28
 8007044:	18fb      	adds	r3, r7, r3
 8007046:	2280      	movs	r2, #128	; 0x80
 8007048:	0052      	lsls	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800704c:	231c      	movs	r3, #28
 800704e:	18fb      	adds	r3, r7, r3
 8007050:	2200      	movs	r2, #0
 8007052:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007054:	231c      	movs	r3, #28
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	2201      	movs	r2, #1
 800705a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIGITAL4_GPIO_Port, &GPIO_InitStruct);
 800705c:	231c      	movs	r3, #28
 800705e:	18fa      	adds	r2, r7, r3
 8007060:	2390      	movs	r3, #144	; 0x90
 8007062:	05db      	lsls	r3, r3, #23
 8007064:	0011      	movs	r1, r2
 8007066:	0018      	movs	r0, r3
 8007068:	f7fa fa28 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : M0A2_Pin */
  GPIO_InitStruct.Pin = M0A2_Pin;
 800706c:	231c      	movs	r3, #28
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	2240      	movs	r2, #64	; 0x40
 8007072:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007074:	231c      	movs	r3, #28
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	2201      	movs	r2, #1
 800707a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800707c:	231c      	movs	r3, #28
 800707e:	18fb      	adds	r3, r7, r3
 8007080:	2202      	movs	r2, #2
 8007082:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007084:	231c      	movs	r3, #28
 8007086:	18fb      	adds	r3, r7, r3
 8007088:	2200      	movs	r2, #0
 800708a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(M0A2_GPIO_Port, &GPIO_InitStruct);
 800708c:	231c      	movs	r3, #28
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <MX_GPIO_Init+0x2c4>)
 8007092:	0019      	movs	r1, r3
 8007094:	0010      	movs	r0, r2
 8007096:	f7fa fa11 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP4_Pin */
  GPIO_InitStruct.Pin = DIP4_Pin;
 800709a:	231c      	movs	r3, #28
 800709c:	18fb      	adds	r3, r7, r3
 800709e:	2280      	movs	r2, #128	; 0x80
 80070a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070a2:	231c      	movs	r3, #28
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	2200      	movs	r2, #0
 80070a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80070aa:	231c      	movs	r3, #28
 80070ac:	18fb      	adds	r3, r7, r3
 80070ae:	2202      	movs	r2, #2
 80070b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIP4_GPIO_Port, &GPIO_InitStruct);
 80070b2:	231c      	movs	r3, #28
 80070b4:	18fb      	adds	r3, r7, r3
 80070b6:	4a15      	ldr	r2, [pc, #84]	; (800710c <MX_GPIO_Init+0x2c0>)
 80070b8:	0019      	movs	r1, r3
 80070ba:	0010      	movs	r0, r2
 80070bc:	f7fa f9fe 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP3_Pin DIP2_Pin DIP1_Pin */
  GPIO_InitStruct.Pin = DIP3_Pin|DIP2_Pin|DIP1_Pin;
 80070c0:	231c      	movs	r3, #28
 80070c2:	18fb      	adds	r3, r7, r3
 80070c4:	22e0      	movs	r2, #224	; 0xe0
 80070c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070c8:	231c      	movs	r3, #28
 80070ca:	18fb      	adds	r3, r7, r3
 80070cc:	2200      	movs	r2, #0
 80070ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80070d0:	231c      	movs	r3, #28
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	2202      	movs	r2, #2
 80070d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070d8:	231c      	movs	r3, #28
 80070da:	18fb      	adds	r3, r7, r3
 80070dc:	4a0a      	ldr	r2, [pc, #40]	; (8007108 <MX_GPIO_Init+0x2bc>)
 80070de:	0019      	movs	r1, r3
 80070e0:	0010      	movs	r0, r2
 80070e2:	f7fa f9eb 	bl	80014bc <HAL_GPIO_Init>

}
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	46bd      	mov	sp, r7
 80070ea:	b00c      	add	sp, #48	; 0x30
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	40021000 	.word	0x40021000
 80070f4:	00004f84 	.word	0x00004f84
 80070f8:	48001000 	.word	0x48001000
 80070fc:	00001006 	.word	0x00001006
 8007100:	48000800 	.word	0x48000800
 8007104:	00000c06 	.word	0x00000c06
 8007108:	48000400 	.word	0x48000400
 800710c:	48000c00 	.word	0x48000c00
 8007110:	48001400 	.word	0x48001400

08007114 <main>:
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af02      	add	r7, sp, #8

    /* MCU Configuration----------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

    dorobo_init();
 800711a:	f7ff fa1b 	bl	8006554 <dorobo_init>
    wifi_init();
 800711e:	f000 fea3 	bl	8007e68 <wifi_init>
    adc_init();
 8007122:	f7ff f863 	bl	80061ec <adc_init>

    motor_init();
 8007126:	f000 f971 	bl	800740c <motor_init>

    SetUpSensors();
 800712a:	f7fe ff6f 	bl	800600c <SetUpSensors>

    InitMotorControl();
 800712e:	f7fe fe49 	bl	8005dc4 <InitMotorControl>

    // Digital pins for target sensors
    digital_configure_pin(DD_PIN_PD14, DD_CFG_INPUT_NOPULL);
 8007132:	2103      	movs	r1, #3
 8007134:	2000      	movs	r0, #0
 8007136:	f7ff f8c9 	bl	80062cc <digital_configure_pin>

    digital_configure_pin(DD_PIN_PC8, DD_CFG_INPUT_NOPULL);
 800713a:	2103      	movs	r1, #3
 800713c:	2002      	movs	r0, #2
 800713e:	f7ff f8c5 	bl	80062cc <digital_configure_pin>

    ft_start_sampling(DD_PIN_PD14);
 8007142:	2000      	movs	r0, #0
 8007144:	f7ff fa5a 	bl	80065fc <ft_start_sampling>

    //Here HIGH actually means low...

    xSemaphore = NULL;
 8007148:	4b16      	ldr	r3, [pc, #88]	; (80071a4 <main+0x90>)
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]

    xSemaphore = xSemaphoreCreateMutex();
 800714e:	2001      	movs	r0, #1
 8007150:	f7fd fcf9 	bl	8004b46 <xQueueCreateMutex>
 8007154:	0002      	movs	r2, r0
 8007156:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <main+0x90>)
 8007158:	601a      	str	r2, [r3, #0]

    /* Create the thread(s) */
    /* definition and creation of defaultTask */

    xTaskCreate((TaskFunction_t) Behaviour, "Behaviour", 128, NULL, 1, NULL);
 800715a:	4913      	ldr	r1, [pc, #76]	; (80071a8 <main+0x94>)
 800715c:	4813      	ldr	r0, [pc, #76]	; (80071ac <main+0x98>)
 800715e:	2300      	movs	r3, #0
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	2301      	movs	r3, #1
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	2300      	movs	r3, #0
 8007168:	2280      	movs	r2, #128	; 0x80
 800716a:	f7fd ffcf 	bl	800510c <xTaskCreate>
    xTaskCreate((TaskFunction_t) ObstacleAvoidanceSensors, "SensorReading", 128, NULL, 2, NULL);
 800716e:	4910      	ldr	r1, [pc, #64]	; (80071b0 <main+0x9c>)
 8007170:	4810      	ldr	r0, [pc, #64]	; (80071b4 <main+0xa0>)
 8007172:	2300      	movs	r3, #0
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	2302      	movs	r3, #2
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	2300      	movs	r3, #0
 800717c:	2280      	movs	r2, #128	; 0x80
 800717e:	f7fd ffc5 	bl	800510c <xTaskCreate>
    //xTaskCreate((TaskFunction_t) IRSensorTest, "IRSensorReadings", 128, NULL, 1, NULL);
    xTaskCreate((TaskFunction_t) MotorControl, "MotorControl", 128, NULL, 4, NULL);
 8007182:	490d      	ldr	r1, [pc, #52]	; (80071b8 <main+0xa4>)
 8007184:	480d      	ldr	r0, [pc, #52]	; (80071bc <main+0xa8>)
 8007186:	2300      	movs	r3, #0
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	2304      	movs	r3, #4
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	2300      	movs	r3, #0
 8007190:	2280      	movs	r2, #128	; 0x80
 8007192:	f7fd ffbb 	bl	800510c <xTaskCreate>
    //xTaskCreate((TaskFunction_t) DefaultIdle, "Idle", 64, NULL, 0, NULL);

    /* Start scheduler */
    //osKernelStart();
    vTaskStartScheduler();
 8007196:	f7fe f947 	bl	8005428 <vTaskStartScheduler>
 800719a:	2300      	movs	r3, #0

}
 800719c:	0018      	movs	r0, r3
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	46c0      	nop			; (mov r8, r8)
 80071a4:	200024a0 	.word	0x200024a0
 80071a8:	08008828 	.word	0x08008828
 80071ac:	080071c1 	.word	0x080071c1
 80071b0:	08008834 	.word	0x08008834
 80071b4:	0800739d 	.word	0x0800739d
 80071b8:	08008844 	.word	0x08008844
 80071bc:	08007281 	.word	0x08007281

080071c0 <Behaviour>:

/* StartDefaultTask function */
static void Behaviour(void const * argument)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]

    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 300 / portTICK_PERIOD_MS;
 80071c8:	233c      	movs	r3, #60	; 0x3c
 80071ca:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 80071cc:	f7fe f9fa 	bl	80055c4 <xTaskGetTickCount>
 80071d0:	0003      	movs	r3, r0
 80071d2:	60bb      	str	r3, [r7, #8]

    while (1)
    {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	2308      	movs	r3, #8
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	0011      	movs	r1, r2
 80071dc:	0018      	movs	r0, r3
 80071de:	f7fe f8c7 	bl	8005370 <vTaskDelayUntil>

        if (xSemaphore != NULL)
 80071e2:	4b20      	ldr	r3, [pc, #128]	; (8007264 <Behaviour+0xa4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d031      	beq.n	800724e <Behaviour+0x8e>
        {
            if (xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE)
 80071ea:	4b1e      	ldr	r3, [pc, #120]	; (8007264 <Behaviour+0xa4>)
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	2300      	movs	r3, #0
 80071f0:	220a      	movs	r2, #10
 80071f2:	2100      	movs	r1, #0
 80071f4:	f7fd fd87 	bl	8004d06 <xQueueGenericReceive>
 80071f8:	0003      	movs	r3, r0
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d127      	bne.n	800724e <Behaviour+0x8e>
            {

                if (distanceSensors.LeftRawValue < 1200 && distanceSensors.LeftRawValue > 800
 80071fe:	4b1a      	ldr	r3, [pc, #104]	; (8007268 <Behaviour+0xa8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1a      	ldr	r2, [pc, #104]	; (800726c <Behaviour+0xac>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d813      	bhi.n	8007230 <Behaviour+0x70>
 8007208:	4b17      	ldr	r3, [pc, #92]	; (8007268 <Behaviour+0xa8>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	23c8      	movs	r3, #200	; 0xc8
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	429a      	cmp	r2, r3
 8007212:	d90d      	bls.n	8007230 <Behaviour+0x70>
                        && distanceSensors.RightRawValue < 800)
 8007214:	4b14      	ldr	r3, [pc, #80]	; (8007268 <Behaviour+0xa8>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4a15      	ldr	r2, [pc, #84]	; (8007270 <Behaviour+0xb0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d808      	bhi.n	8007230 <Behaviour+0x70>
                {
                    tracef("Right \r\n");
 800721e:	4b15      	ldr	r3, [pc, #84]	; (8007274 <Behaviour+0xb4>)
 8007220:	0018      	movs	r0, r3
 8007222:	f000 fd07 	bl	8007c34 <tracef>
                    WriteMovement(Mov_Rot_Right, 0);
 8007226:	2100      	movs	r1, #0
 8007228:	2003      	movs	r0, #3
 800722a:	f7fe feb3 	bl	8005f94 <WriteMovement>
 800722e:	e007      	b.n	8007240 <Behaviour+0x80>
                }
                else
                {
                    tracef("Straight \r\n");
 8007230:	4b11      	ldr	r3, [pc, #68]	; (8007278 <Behaviour+0xb8>)
 8007232:	0018      	movs	r0, r3
 8007234:	f000 fcfe 	bl	8007c34 <tracef>
                    WriteMovement(Mov_Straight, 0);
 8007238:	2100      	movs	r1, #0
 800723a:	2004      	movs	r0, #4
 800723c:	f7fe feaa 	bl	8005f94 <WriteMovement>

                }

                xSemaphoreGive(xSemaphore);
 8007240:	4b08      	ldr	r3, [pc, #32]	; (8007264 <Behaviour+0xa4>)
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	2300      	movs	r3, #0
 8007246:	2200      	movs	r2, #0
 8007248:	2100      	movs	r1, #0
 800724a:	f7fd fc98 	bl	8004b7e <xQueueGenericSend>
            }

        }
        tracef("[Measured Distance]: Right Sensor  %d   Left Sensor %d \r\n", distanceSensors.Right,
 800724e:	4b06      	ldr	r3, [pc, #24]	; (8007268 <Behaviour+0xa8>)
 8007250:	7a5b      	ldrb	r3, [r3, #9]
 8007252:	0019      	movs	r1, r3
                distanceSensors.Left);
 8007254:	4b04      	ldr	r3, [pc, #16]	; (8007268 <Behaviour+0xa8>)
 8007256:	7a1b      	ldrb	r3, [r3, #8]
        tracef("[Measured Distance]: Right Sensor  %d   Left Sensor %d \r\n", distanceSensors.Right,
 8007258:	001a      	movs	r2, r3
 800725a:	4b08      	ldr	r3, [pc, #32]	; (800727c <Behaviour+0xbc>)
 800725c:	0018      	movs	r0, r3
 800725e:	f000 fce9 	bl	8007c34 <tracef>
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8007262:	e7b7      	b.n	80071d4 <Behaviour+0x14>
 8007264:	200024a0 	.word	0x200024a0
 8007268:	200024a4 	.word	0x200024a4
 800726c:	000004af 	.word	0x000004af
 8007270:	0000031f 	.word	0x0000031f
 8007274:	08008854 	.word	0x08008854
 8007278:	08008860 	.word	0x08008860
 800727c:	0800886c 	.word	0x0800886c

08007280 <MotorControl>:
        //tracef("Behaviour \r\n");
    }
}

static void MotorControl(void const * argument)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 500 / portTICK_PERIOD_MS;
 8007288:	2364      	movs	r3, #100	; 0x64
 800728a:	617b      	str	r3, [r7, #20]
    xLastWakeTime = xTaskGetTickCount();
 800728c:	f7fe f99a 	bl	80055c4 <xTaskGetTickCount>
 8007290:	0003      	movs	r3, r0
 8007292:	613b      	str	r3, [r7, #16]

    MovementControl _motorControl;

    while (1)
    {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	2310      	movs	r3, #16
 8007298:	18fb      	adds	r3, r7, r3
 800729a:	0011      	movs	r1, r2
 800729c:	0018      	movs	r0, r3
 800729e:	f7fe f867 	bl	8005370 <vTaskDelayUntil>

        if (xSemaphore != NULL)
 80072a2:	4b38      	ldr	r3, [pc, #224]	; (8007384 <MotorControl+0x104>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d067      	beq.n	800737a <MotorControl+0xfa>
        {
            if (xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE)
 80072aa:	4b36      	ldr	r3, [pc, #216]	; (8007384 <MotorControl+0x104>)
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	2300      	movs	r3, #0
 80072b0:	220a      	movs	r2, #10
 80072b2:	2100      	movs	r1, #0
 80072b4:	f7fd fd27 	bl	8004d06 <xQueueGenericReceive>
 80072b8:	0003      	movs	r3, r0
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d158      	bne.n	8007370 <MotorControl+0xf0>
            {
                _motorControl = ReadMovementToExecute();
 80072be:	f7fe fe87 	bl	8005fd0 <ReadMovementToExecute>
 80072c2:	1c03      	adds	r3, r0, #0
 80072c4:	1c1a      	adds	r2, r3, #0
 80072c6:	230c      	movs	r3, #12
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	801a      	strh	r2, [r3, #0]
                led_red_toggle();
 80072cc:	f7ff f94c 	bl	8006568 <led_red_toggle>
                switch (_motorControl.direction)
 80072d0:	230c      	movs	r3, #12
 80072d2:	18fb      	adds	r3, r7, r3
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d021      	beq.n	800731e <MotorControl+0x9e>
 80072da:	dc02      	bgt.n	80072e2 <MotorControl+0x62>
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d013      	beq.n	8007308 <MotorControl+0x88>
 80072e0:	e037      	b.n	8007352 <MotorControl+0xd2>
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d026      	beq.n	8007334 <MotorControl+0xb4>
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d133      	bne.n	8007352 <MotorControl+0xd2>
                {
                    case Mov_Straight:
                        tracef("Moving Straight Motors \r\n");
 80072ea:	4b27      	ldr	r3, [pc, #156]	; (8007388 <MotorControl+0x108>)
 80072ec:	0018      	movs	r0, r3
 80072ee:	f000 fca1 	bl	8007c34 <tracef>
                        mov_velocity = MoveStraight(mov_velocity);
 80072f2:	4b26      	ldr	r3, [pc, #152]	; (800738c <MotorControl+0x10c>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	b25b      	sxtb	r3, r3
 80072f8:	0018      	movs	r0, r3
 80072fa:	f7fe fd71 	bl	8005de0 <MoveStraight>
 80072fe:	0003      	movs	r3, r0
 8007300:	001a      	movs	r2, r3
 8007302:	4b22      	ldr	r3, [pc, #136]	; (800738c <MotorControl+0x10c>)
 8007304:	701a      	strb	r2, [r3, #0]
                        break;
 8007306:	e02b      	b.n	8007360 <MotorControl+0xe0>
                    case Mov_Back:
                        mov_velocity = MoveBack(mov_velocity);
 8007308:	4b20      	ldr	r3, [pc, #128]	; (800738c <MotorControl+0x10c>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b25b      	sxtb	r3, r3
 800730e:	0018      	movs	r0, r3
 8007310:	f7fe fd96 	bl	8005e40 <MoveBack>
 8007314:	0003      	movs	r3, r0
 8007316:	001a      	movs	r2, r3
 8007318:	4b1c      	ldr	r3, [pc, #112]	; (800738c <MotorControl+0x10c>)
 800731a:	701a      	strb	r2, [r3, #0]
                        break;
 800731c:	e020      	b.n	8007360 <MotorControl+0xe0>
                    case Mov_Rot_Left:
                        mov_velocity = RotateLeft(mov_velocity);
 800731e:	4b1b      	ldr	r3, [pc, #108]	; (800738c <MotorControl+0x10c>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	b25b      	sxtb	r3, r3
 8007324:	0018      	movs	r0, r3
 8007326:	f7fe fdbb 	bl	8005ea0 <RotateLeft>
 800732a:	0003      	movs	r3, r0
 800732c:	001a      	movs	r2, r3
 800732e:	4b17      	ldr	r3, [pc, #92]	; (800738c <MotorControl+0x10c>)
 8007330:	701a      	strb	r2, [r3, #0]
                        break;
 8007332:	e015      	b.n	8007360 <MotorControl+0xe0>
                    case Mov_Rot_Right:
                        tracef("Mov_Rot_Right Motors \r\n");
 8007334:	4b16      	ldr	r3, [pc, #88]	; (8007390 <MotorControl+0x110>)
 8007336:	0018      	movs	r0, r3
 8007338:	f000 fc7c 	bl	8007c34 <tracef>
                        mov_velocity = RotateRight(mov_velocity);
 800733c:	4b13      	ldr	r3, [pc, #76]	; (800738c <MotorControl+0x10c>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	b25b      	sxtb	r3, r3
 8007342:	0018      	movs	r0, r3
 8007344:	f7fe fddf 	bl	8005f06 <RotateRight>
 8007348:	0003      	movs	r3, r0
 800734a:	001a      	movs	r2, r3
 800734c:	4b0f      	ldr	r3, [pc, #60]	; (800738c <MotorControl+0x10c>)
 800734e:	701a      	strb	r2, [r3, #0]
                        break;
 8007350:	e006      	b.n	8007360 <MotorControl+0xe0>
                    case Mov_Stop:
                    default:
                        mov_velocity = StopMovement();
 8007352:	f7fe fe0d 	bl	8005f70 <StopMovement>
 8007356:	0003      	movs	r3, r0
 8007358:	001a      	movs	r2, r3
 800735a:	4b0c      	ldr	r3, [pc, #48]	; (800738c <MotorControl+0x10c>)
 800735c:	701a      	strb	r2, [r3, #0]
                        break;
 800735e:	46c0      	nop			; (mov r8, r8)
                }
                xSemaphoreGive(xSemaphore);
 8007360:	4b08      	ldr	r3, [pc, #32]	; (8007384 <MotorControl+0x104>)
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	2300      	movs	r3, #0
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	f7fd fc08 	bl	8004b7e <xQueueGenericSend>
 800736e:	e791      	b.n	8007294 <MotorControl+0x14>
            }
            else
            {
                tracef("\r\n [Motor Control] Semaphore taken by another Task \r\n");
 8007370:	4b08      	ldr	r3, [pc, #32]	; (8007394 <MotorControl+0x114>)
 8007372:	0018      	movs	r0, r3
 8007374:	f000 fc5e 	bl	8007c34 <tracef>
 8007378:	e78c      	b.n	8007294 <MotorControl+0x14>
            }

        }
        else
        {
            tracef("\r\n [Motor Control] Mutex NULL \r\n");
 800737a:	4b07      	ldr	r3, [pc, #28]	; (8007398 <MotorControl+0x118>)
 800737c:	0018      	movs	r0, r3
 800737e:	f000 fc59 	bl	8007c34 <tracef>
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8007382:	e787      	b.n	8007294 <MotorControl+0x14>
 8007384:	200024a0 	.word	0x200024a0
 8007388:	080088a8 	.word	0x080088a8
 800738c:	20002184 	.word	0x20002184
 8007390:	080088c4 	.word	0x080088c4
 8007394:	080088dc 	.word	0x080088dc
 8007398:	08008914 	.word	0x08008914

0800739c <ObstacleAvoidanceSensors>:
        vTaskDelay(500);
    }
}

static void ObstacleAvoidanceSensors(void const * argument)
{
 800739c:	b590      	push	{r4, r7, lr}
 800739e:	b089      	sub	sp, #36	; 0x24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6178      	str	r0, [r7, #20]
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 300 / portTICK_PERIOD_MS;
 80073a4:	233c      	movs	r3, #60	; 0x3c
 80073a6:	61fb      	str	r3, [r7, #28]
    xLastWakeTime = xTaskGetTickCount();
 80073a8:	f7fe f90c 	bl	80055c4 <xTaskGetTickCount>
 80073ac:	0003      	movs	r3, r0
 80073ae:	61bb      	str	r3, [r7, #24]

    while (1)
    {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	2318      	movs	r3, #24
 80073b4:	18fb      	adds	r3, r7, r3
 80073b6:	0011      	movs	r1, r2
 80073b8:	0018      	movs	r0, r3
 80073ba:	f7fd ffd9 	bl	8005370 <vTaskDelayUntil>

        bumperSensors = ReadBumperSensors();
 80073be:	f7fe fe32 	bl	8006026 <ReadBumperSensors>
 80073c2:	1c03      	adds	r3, r0, #0
 80073c4:	1c1a      	adds	r2, r3, #0
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <ObstacleAvoidanceSensors+0x44>)
 80073c8:	701a      	strb	r2, [r3, #0]

        distanceSensors = ReadDistanceSensors();
 80073ca:	4c06      	ldr	r4, [pc, #24]	; (80073e4 <ObstacleAvoidanceSensors+0x48>)
 80073cc:	003b      	movs	r3, r7
 80073ce:	0018      	movs	r0, r3
 80073d0:	f7fe fe56 	bl	8006080 <ReadDistanceSensors>
 80073d4:	003a      	movs	r2, r7
 80073d6:	0023      	movs	r3, r4
 80073d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80073da:	c313      	stmia	r3!, {r0, r1, r4}
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80073dc:	e7e8      	b.n	80073b0 <ObstacleAvoidanceSensors+0x14>
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	200024b0 	.word	0x200024b0
 80073e4:	200024a4 	.word	0x200024a4

080073e8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM14)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a04      	ldr	r2, [pc, #16]	; (8007408 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d101      	bne.n	80073fe <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 80073fa:	f7f9 fa47 	bl	800088c <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	46bd      	mov	sp, r7
 8007402:	b002      	add	sp, #8
 8007404:	bd80      	pop	{r7, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	40002000 	.word	0x40002000

0800740c <motor_init>:

static void set_speed(motor_t *, int8_t);
static motor_t* select_motor(enum DM_MOTORS_E);

void motor_init(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
	// nothing to initialize
}
 8007410:	46c0      	nop			; (mov r8, r8)
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <motor_set>:

void motor_set(enum DM_MOTORS_E motoren, int8_t speed)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	0002      	movs	r2, r0
 800741e:	1dfb      	adds	r3, r7, #7
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	1dbb      	adds	r3, r7, #6
 8007424:	1c0a      	adds	r2, r1, #0
 8007426:	701a      	strb	r2, [r3, #0]
    motor_t *motorptr = select_motor(motoren);
 8007428:	1dfb      	adds	r3, r7, #7
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	0018      	movs	r0, r3
 800742e:	f000 f86d 	bl	800750c <select_motor>
 8007432:	0003      	movs	r3, r0
 8007434:	60fb      	str	r3, [r7, #12]
    set_speed(motorptr, speed);
 8007436:	1dbb      	adds	r3, r7, #6
 8007438:	2200      	movs	r2, #0
 800743a:	569a      	ldrsb	r2, [r3, r2]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	0011      	movs	r1, r2
 8007440:	0018      	movs	r0, r3
 8007442:	f000 f805 	bl	8007450 <set_speed>
}
 8007446:	46c0      	nop			; (mov r8, r8)
 8007448:	46bd      	mov	sp, r7
 800744a:	b004      	add	sp, #16
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <set_speed>:
   return motorptr->speed;
}


static void set_speed(motor_t *motorptr, int8_t new_speed)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	000a      	movs	r2, r1
 800745a:	1cfb      	adds	r3, r7, #3
 800745c:	701a      	strb	r2, [r3, #0]
    if (new_speed < -100)
 800745e:	1cfb      	adds	r3, r7, #3
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	b25b      	sxtb	r3, r3
 8007464:	3364      	adds	r3, #100	; 0x64
 8007466:	da03      	bge.n	8007470 <set_speed+0x20>
    {
        new_speed = -100;
 8007468:	1cfb      	adds	r3, r7, #3
 800746a:	229c      	movs	r2, #156	; 0x9c
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	e007      	b.n	8007480 <set_speed+0x30>
    }
    else if (new_speed > 100)
 8007470:	1cfb      	adds	r3, r7, #3
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	b25b      	sxtb	r3, r3
 8007476:	2b64      	cmp	r3, #100	; 0x64
 8007478:	dd02      	ble.n	8007480 <set_speed+0x30>
    {
        new_speed = 100;
 800747a:	1cfb      	adds	r3, r7, #3
 800747c:	2264      	movs	r2, #100	; 0x64
 800747e:	701a      	strb	r2, [r3, #0]
    }

    if (new_speed < 0)
 8007480:	1cfb      	adds	r3, r7, #3
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b7f      	cmp	r3, #127	; 0x7f
 8007486:	d90a      	bls.n	800749e <set_speed+0x4e>
    {
        motorptr->controlPORT1->BRR = motorptr->controlPIN1;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	8892      	ldrh	r2, [r2, #4]
 8007490:	629a      	str	r2, [r3, #40]	; 0x28
        motorptr->controlPORT2->BSRR = motorptr->controlPIN2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	8992      	ldrh	r2, [r2, #12]
 800749a:	619a      	str	r2, [r3, #24]
 800749c:	e009      	b.n	80074b2 <set_speed+0x62>
    }
    else
    {
        motorptr->controlPORT1->BSRR = motorptr->controlPIN1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	8892      	ldrh	r2, [r2, #4]
 80074a6:	619a      	str	r2, [r3, #24]
        motorptr->controlPORT2->BRR = motorptr->controlPIN2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	8992      	ldrh	r2, [r2, #12]
 80074b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80074b2:	4b14      	ldr	r3, [pc, #80]	; (8007504 <set_speed+0xb4>)
 80074b4:	2260      	movs	r2, #96	; 0x60
 80074b6:	601a      	str	r2, [r3, #0]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074b8:	4b12      	ldr	r3, [pc, #72]	; (8007504 <set_speed+0xb4>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074be:	4b11      	ldr	r3, [pc, #68]	; (8007504 <set_speed+0xb4>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	611a      	str	r2, [r3, #16]
    sConfigOC.Pulse = abs(new_speed);
 80074c4:	1cfb      	adds	r3, r7, #3
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	b25b      	sxtb	r3, r3
 80074ca:	17da      	asrs	r2, r3, #31
 80074cc:	189b      	adds	r3, r3, r2
 80074ce:	4053      	eors	r3, r2
 80074d0:	001a      	movs	r2, r3
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <set_speed+0xb4>)
 80074d4:	605a      	str	r2, [r3, #4]
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, motorptr->timerChannel);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	490a      	ldr	r1, [pc, #40]	; (8007504 <set_speed+0xb4>)
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <set_speed+0xb8>)
 80074de:	0018      	movs	r0, r3
 80074e0:	f7fb f9d6 	bl	8002890 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, motorptr->timerChannel);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	4b07      	ldr	r3, [pc, #28]	; (8007508 <set_speed+0xb8>)
 80074ea:	0011      	movs	r1, r2
 80074ec:	0018      	movs	r0, r3
 80074ee:	f7fb f875 	bl	80025dc <HAL_TIM_PWM_Start>

    motorptr->speed = new_speed;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	1cfa      	adds	r2, r7, #3
 80074f6:	7812      	ldrb	r2, [r2, #0]
 80074f8:	751a      	strb	r2, [r3, #20]
}
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b002      	add	sp, #8
 8007500:	bd80      	pop	{r7, pc}
 8007502:	46c0      	nop			; (mov r8, r8)
 8007504:	200024b4 	.word	0x200024b4
 8007508:	20002274 	.word	0x20002274

0800750c <select_motor>:

static motor_t* select_motor(enum DM_MOTORS_E motoren)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	0002      	movs	r2, r0
 8007514:	1dfb      	adds	r3, r7, #7
 8007516:	701a      	strb	r2, [r3, #0]
    motor_t *motorptr = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]
    switch (motoren)
 800751c:	1dfb      	adds	r3, r7, #7
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d00b      	beq.n	800753c <select_motor+0x30>
 8007524:	dc02      	bgt.n	800752c <select_motor+0x20>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <select_motor+0x2a>
 800752a:	e010      	b.n	800754e <select_motor+0x42>
 800752c:	2b02      	cmp	r3, #2
 800752e:	d008      	beq.n	8007542 <select_motor+0x36>
 8007530:	2b03      	cmp	r3, #3
 8007532:	d009      	beq.n	8007548 <select_motor+0x3c>
 8007534:	e00b      	b.n	800754e <select_motor+0x42>
    {
    case DM_MOTOR0:
        motorptr = &motors[0];
 8007536:	4b08      	ldr	r3, [pc, #32]	; (8007558 <select_motor+0x4c>)
 8007538:	60fb      	str	r3, [r7, #12]
        break;
 800753a:	e008      	b.n	800754e <select_motor+0x42>
    case DM_MOTOR1:
        motorptr = &motors[1];
 800753c:	4b07      	ldr	r3, [pc, #28]	; (800755c <select_motor+0x50>)
 800753e:	60fb      	str	r3, [r7, #12]
        break;
 8007540:	e005      	b.n	800754e <select_motor+0x42>
    case DM_MOTOR2:
        motorptr = &motors[2];
 8007542:	4b07      	ldr	r3, [pc, #28]	; (8007560 <select_motor+0x54>)
 8007544:	60fb      	str	r3, [r7, #12]
        break;
 8007546:	e002      	b.n	800754e <select_motor+0x42>
    case DM_MOTOR3:
        motorptr = &motors[3];
 8007548:	4b06      	ldr	r3, [pc, #24]	; (8007564 <select_motor+0x58>)
 800754a:	60fb      	str	r3, [r7, #12]
        break;
 800754c:	46c0      	nop			; (mov r8, r8)
    }
    return motorptr;
 800754e:	68fb      	ldr	r3, [r7, #12]
}
 8007550:	0018      	movs	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	b004      	add	sp, #16
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000004 	.word	0x20000004
 800755c:	2000001c 	.word	0x2000001c
 8007560:	20000034 	.word	0x20000034
 8007564:	2000004c 	.word	0x2000004c

08007568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800756e:	4b19      	ldr	r3, [pc, #100]	; (80075d4 <HAL_MspInit+0x6c>)
 8007570:	4a18      	ldr	r2, [pc, #96]	; (80075d4 <HAL_MspInit+0x6c>)
 8007572:	6992      	ldr	r2, [r2, #24]
 8007574:	2101      	movs	r1, #1
 8007576:	430a      	orrs	r2, r1
 8007578:	619a      	str	r2, [r3, #24]
 800757a:	4b16      	ldr	r3, [pc, #88]	; (80075d4 <HAL_MspInit+0x6c>)
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	2201      	movs	r2, #1
 8007580:	4013      	ands	r3, r2
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007586:	4b13      	ldr	r3, [pc, #76]	; (80075d4 <HAL_MspInit+0x6c>)
 8007588:	4a12      	ldr	r2, [pc, #72]	; (80075d4 <HAL_MspInit+0x6c>)
 800758a:	69d2      	ldr	r2, [r2, #28]
 800758c:	2180      	movs	r1, #128	; 0x80
 800758e:	0549      	lsls	r1, r1, #21
 8007590:	430a      	orrs	r2, r1
 8007592:	61da      	str	r2, [r3, #28]
 8007594:	4b0f      	ldr	r3, [pc, #60]	; (80075d4 <HAL_MspInit+0x6c>)
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	055b      	lsls	r3, r3, #21
 800759c:	4013      	ands	r3, r2
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80075a2:	2305      	movs	r3, #5
 80075a4:	425b      	negs	r3, r3
 80075a6:	2200      	movs	r2, #0
 80075a8:	2100      	movs	r1, #0
 80075aa:	0018      	movs	r0, r3
 80075ac:	f7f9 fef2 	bl	8001394 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80075b0:	2302      	movs	r3, #2
 80075b2:	425b      	negs	r3, r3
 80075b4:	2200      	movs	r2, #0
 80075b6:	2103      	movs	r1, #3
 80075b8:	0018      	movs	r0, r3
 80075ba:	f7f9 feeb 	bl	8001394 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 80075be:	2301      	movs	r3, #1
 80075c0:	425b      	negs	r3, r3
 80075c2:	2200      	movs	r2, #0
 80075c4:	2103      	movs	r1, #3
 80075c6:	0018      	movs	r0, r3
 80075c8:	f7f9 fee4 	bl	8001394 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80075cc:	46c0      	nop			; (mov r8, r8)
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b002      	add	sp, #8
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	40021000 	.word	0x40021000

080075d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a1d      	ldr	r2, [pc, #116]	; (800765c <HAL_ADC_MspInit+0x84>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d134      	bne.n	8007654 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80075ea:	4b1d      	ldr	r3, [pc, #116]	; (8007660 <HAL_ADC_MspInit+0x88>)
 80075ec:	4a1c      	ldr	r2, [pc, #112]	; (8007660 <HAL_ADC_MspInit+0x88>)
 80075ee:	6992      	ldr	r2, [r2, #24]
 80075f0:	2180      	movs	r1, #128	; 0x80
 80075f2:	0089      	lsls	r1, r1, #2
 80075f4:	430a      	orrs	r2, r1
 80075f6:	619a      	str	r2, [r3, #24]
 80075f8:	4b19      	ldr	r3, [pc, #100]	; (8007660 <HAL_ADC_MspInit+0x88>)
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	2380      	movs	r3, #128	; 0x80
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4013      	ands	r3, r2
 8007602:	60bb      	str	r3, [r7, #8]
 8007604:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15 
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin 
 8007606:	230c      	movs	r3, #12
 8007608:	18fb      	adds	r3, r7, r3
 800760a:	22ff      	movs	r2, #255	; 0xff
 800760c:	601a      	str	r2, [r3, #0]
                          |ADC4_Pin|ADC5_Pin|ADC6_Pin|ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800760e:	230c      	movs	r3, #12
 8007610:	18fb      	adds	r3, r7, r3
 8007612:	2203      	movs	r2, #3
 8007614:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007616:	230c      	movs	r3, #12
 8007618:	18fb      	adds	r3, r7, r3
 800761a:	2200      	movs	r2, #0
 800761c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800761e:	230c      	movs	r3, #12
 8007620:	18fa      	adds	r2, r7, r3
 8007622:	2390      	movs	r3, #144	; 0x90
 8007624:	05db      	lsls	r3, r3, #23
 8007626:	0011      	movs	r1, r2
 8007628:	0018      	movs	r0, r3
 800762a:	f7f9 ff47 	bl	80014bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC8_Pin|ADC9_Pin;
 800762e:	230c      	movs	r3, #12
 8007630:	18fb      	adds	r3, r7, r3
 8007632:	2230      	movs	r2, #48	; 0x30
 8007634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007636:	230c      	movs	r3, #12
 8007638:	18fb      	adds	r3, r7, r3
 800763a:	2203      	movs	r2, #3
 800763c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800763e:	230c      	movs	r3, #12
 8007640:	18fb      	adds	r3, r7, r3
 8007642:	2200      	movs	r2, #0
 8007644:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007646:	230c      	movs	r3, #12
 8007648:	18fb      	adds	r3, r7, r3
 800764a:	4a06      	ldr	r2, [pc, #24]	; (8007664 <HAL_ADC_MspInit+0x8c>)
 800764c:	0019      	movs	r1, r3
 800764e:	0010      	movs	r0, r2
 8007650:	f7f9 ff34 	bl	80014bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007654:	46c0      	nop			; (mov r8, r8)
 8007656:	46bd      	mov	sp, r7
 8007658:	b008      	add	sp, #32
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40012400 	.word	0x40012400
 8007660:	40021000 	.word	0x40021000
 8007664:	48000800 	.word	0x48000800

08007668 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	05db      	lsls	r3, r3, #23
 8007678:	429a      	cmp	r2, r3
 800767a:	d10c      	bne.n	8007696 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800767c:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <HAL_TIM_PWM_MspInit+0x5c>)
 800767e:	4a11      	ldr	r2, [pc, #68]	; (80076c4 <HAL_TIM_PWM_MspInit+0x5c>)
 8007680:	69d2      	ldr	r2, [r2, #28]
 8007682:	2101      	movs	r1, #1
 8007684:	430a      	orrs	r2, r1
 8007686:	61da      	str	r2, [r3, #28]
 8007688:	4b0e      	ldr	r3, [pc, #56]	; (80076c4 <HAL_TIM_PWM_MspInit+0x5c>)
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	2201      	movs	r2, #1
 800768e:	4013      	ands	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8007694:	e012      	b.n	80076bc <HAL_TIM_PWM_MspInit+0x54>
  else if(htim_pwm->Instance==TIM15)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a0b      	ldr	r2, [pc, #44]	; (80076c8 <HAL_TIM_PWM_MspInit+0x60>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d10d      	bne.n	80076bc <HAL_TIM_PWM_MspInit+0x54>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80076a0:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <HAL_TIM_PWM_MspInit+0x5c>)
 80076a2:	4a08      	ldr	r2, [pc, #32]	; (80076c4 <HAL_TIM_PWM_MspInit+0x5c>)
 80076a4:	6992      	ldr	r2, [r2, #24]
 80076a6:	2180      	movs	r1, #128	; 0x80
 80076a8:	0249      	lsls	r1, r1, #9
 80076aa:	430a      	orrs	r2, r1
 80076ac:	619a      	str	r2, [r3, #24]
 80076ae:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <HAL_TIM_PWM_MspInit+0x5c>)
 80076b0:	699a      	ldr	r2, [r3, #24]
 80076b2:	2380      	movs	r3, #128	; 0x80
 80076b4:	025b      	lsls	r3, r3, #9
 80076b6:	4013      	ands	r3, r2
 80076b8:	60bb      	str	r3, [r7, #8]
 80076ba:	68bb      	ldr	r3, [r7, #8]
}
 80076bc:	46c0      	nop			; (mov r8, r8)
 80076be:	46bd      	mov	sp, r7
 80076c0:	b004      	add	sp, #16
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40021000 	.word	0x40021000
 80076c8:	40014000 	.word	0x40014000

080076cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM3)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a2a      	ldr	r2, [pc, #168]	; (8007784 <HAL_TIM_Base_MspInit+0xb8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d114      	bne.n	8007708 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80076de:	4b2a      	ldr	r3, [pc, #168]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 80076e0:	4a29      	ldr	r2, [pc, #164]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 80076e2:	69d2      	ldr	r2, [r2, #28]
 80076e4:	2102      	movs	r1, #2
 80076e6:	430a      	orrs	r2, r1
 80076e8:	61da      	str	r2, [r3, #28]
 80076ea:	4b27      	ldr	r3, [pc, #156]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	2202      	movs	r2, #2
 80076f0:	4013      	ands	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80076f6:	2200      	movs	r2, #0
 80076f8:	2103      	movs	r1, #3
 80076fa:	2010      	movs	r0, #16
 80076fc:	f7f9 fe4a 	bl	8001394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007700:	2010      	movs	r0, #16
 8007702:	f7f9 fe5d 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8007706:	e038      	b.n	800777a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1f      	ldr	r2, [pc, #124]	; (800778c <HAL_TIM_Base_MspInit+0xc0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d10c      	bne.n	800772c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007712:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 8007714:	4a1c      	ldr	r2, [pc, #112]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 8007716:	69d2      	ldr	r2, [r2, #28]
 8007718:	2110      	movs	r1, #16
 800771a:	430a      	orrs	r2, r1
 800771c:	61da      	str	r2, [r3, #28]
 800771e:	4b1a      	ldr	r3, [pc, #104]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	2210      	movs	r2, #16
 8007724:	4013      	ands	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	693b      	ldr	r3, [r7, #16]
}
 800772a:	e026      	b.n	800777a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM16)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a17      	ldr	r2, [pc, #92]	; (8007790 <HAL_TIM_Base_MspInit+0xc4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d10e      	bne.n	8007754 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007736:	4b14      	ldr	r3, [pc, #80]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 8007738:	4a13      	ldr	r2, [pc, #76]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 800773a:	6992      	ldr	r2, [r2, #24]
 800773c:	2180      	movs	r1, #128	; 0x80
 800773e:	0289      	lsls	r1, r1, #10
 8007740:	430a      	orrs	r2, r1
 8007742:	619a      	str	r2, [r3, #24]
 8007744:	4b10      	ldr	r3, [pc, #64]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 8007746:	699a      	ldr	r2, [r3, #24]
 8007748:	2380      	movs	r3, #128	; 0x80
 800774a:	029b      	lsls	r3, r3, #10
 800774c:	4013      	ands	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
}
 8007752:	e012      	b.n	800777a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM17)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a0e      	ldr	r2, [pc, #56]	; (8007794 <HAL_TIM_Base_MspInit+0xc8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d10d      	bne.n	800777a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800775e:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 8007760:	4a09      	ldr	r2, [pc, #36]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 8007762:	6992      	ldr	r2, [r2, #24]
 8007764:	2180      	movs	r1, #128	; 0x80
 8007766:	02c9      	lsls	r1, r1, #11
 8007768:	430a      	orrs	r2, r1
 800776a:	619a      	str	r2, [r3, #24]
 800776c:	4b06      	ldr	r3, [pc, #24]	; (8007788 <HAL_TIM_Base_MspInit+0xbc>)
 800776e:	699a      	ldr	r2, [r3, #24]
 8007770:	2380      	movs	r3, #128	; 0x80
 8007772:	02db      	lsls	r3, r3, #11
 8007774:	4013      	ands	r3, r2
 8007776:	60bb      	str	r3, [r7, #8]
 8007778:	68bb      	ldr	r3, [r7, #8]
}
 800777a:	46c0      	nop			; (mov r8, r8)
 800777c:	46bd      	mov	sp, r7
 800777e:	b006      	add	sp, #24
 8007780:	bd80      	pop	{r7, pc}
 8007782:	46c0      	nop			; (mov r8, r8)
 8007784:	40000400 	.word	0x40000400
 8007788:	40021000 	.word	0x40021000
 800778c:	40001000 	.word	0x40001000
 8007790:	40014400 	.word	0x40014400
 8007794:	40014800 	.word	0x40014800

08007798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	2380      	movs	r3, #128	; 0x80
 80077a6:	05db      	lsls	r3, r3, #23
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d138      	bne.n	800781e <HAL_TIM_MspPostInit+0x86>
  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = PWM0_Pin;
 80077ac:	230c      	movs	r3, #12
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	2280      	movs	r2, #128	; 0x80
 80077b2:	0212      	lsls	r2, r2, #8
 80077b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077b6:	230c      	movs	r3, #12
 80077b8:	18fb      	adds	r3, r7, r3
 80077ba:	2202      	movs	r2, #2
 80077bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077be:	230c      	movs	r3, #12
 80077c0:	18fb      	adds	r3, r7, r3
 80077c2:	2200      	movs	r2, #0
 80077c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80077c6:	230c      	movs	r3, #12
 80077c8:	18fb      	adds	r3, r7, r3
 80077ca:	2203      	movs	r2, #3
 80077cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80077ce:	230c      	movs	r3, #12
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	2202      	movs	r2, #2
 80077d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM0_GPIO_Port, &GPIO_InitStruct);
 80077d6:	230c      	movs	r3, #12
 80077d8:	18fa      	adds	r2, r7, r3
 80077da:	2390      	movs	r3, #144	; 0x90
 80077dc:	05db      	lsls	r3, r3, #23
 80077de:	0011      	movs	r1, r2
 80077e0:	0018      	movs	r0, r3
 80077e2:	f7f9 fe6b 	bl	80014bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM1_Pin;
 80077e6:	230c      	movs	r3, #12
 80077e8:	18fb      	adds	r3, r7, r3
 80077ea:	2208      	movs	r2, #8
 80077ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ee:	230c      	movs	r3, #12
 80077f0:	18fb      	adds	r3, r7, r3
 80077f2:	2202      	movs	r2, #2
 80077f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f6:	230c      	movs	r3, #12
 80077f8:	18fb      	adds	r3, r7, r3
 80077fa:	2200      	movs	r2, #0
 80077fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80077fe:	230c      	movs	r3, #12
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	2203      	movs	r2, #3
 8007804:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8007806:	230c      	movs	r3, #12
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	2202      	movs	r2, #2
 800780c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 800780e:	230c      	movs	r3, #12
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	4a47      	ldr	r2, [pc, #284]	; (8007930 <HAL_TIM_MspPostInit+0x198>)
 8007814:	0019      	movs	r1, r3
 8007816:	0010      	movs	r0, r2
 8007818:	f7f9 fe50 	bl	80014bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800781c:	e083      	b.n	8007926 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a44      	ldr	r2, [pc, #272]	; (8007934 <HAL_TIM_MspPostInit+0x19c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d11b      	bne.n	8007860 <HAL_TIM_MspPostInit+0xc8>
    GPIO_InitStruct.Pin = M0_PWM_Pin|M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin;
 8007828:	230c      	movs	r3, #12
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	2278      	movs	r2, #120	; 0x78
 800782e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007830:	230c      	movs	r3, #12
 8007832:	18fb      	adds	r3, r7, r3
 8007834:	2202      	movs	r2, #2
 8007836:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007838:	230c      	movs	r3, #12
 800783a:	18fb      	adds	r3, r7, r3
 800783c:	2200      	movs	r2, #0
 800783e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007840:	230c      	movs	r3, #12
 8007842:	18fb      	adds	r3, r7, r3
 8007844:	2203      	movs	r2, #3
 8007846:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8007848:	230c      	movs	r3, #12
 800784a:	18fb      	adds	r3, r7, r3
 800784c:	2200      	movs	r2, #0
 800784e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007850:	230c      	movs	r3, #12
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	4a38      	ldr	r2, [pc, #224]	; (8007938 <HAL_TIM_MspPostInit+0x1a0>)
 8007856:	0019      	movs	r1, r3
 8007858:	0010      	movs	r0, r2
 800785a:	f7f9 fe2f 	bl	80014bc <HAL_GPIO_Init>
}
 800785e:	e062      	b.n	8007926 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a35      	ldr	r2, [pc, #212]	; (800793c <HAL_TIM_MspPostInit+0x1a4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d11c      	bne.n	80078a4 <HAL_TIM_MspPostInit+0x10c>
    GPIO_InitStruct.Pin = PWM4_Pin|PWM5_Pin;
 800786a:	230c      	movs	r3, #12
 800786c:	18fb      	adds	r3, r7, r3
 800786e:	22c0      	movs	r2, #192	; 0xc0
 8007870:	00d2      	lsls	r2, r2, #3
 8007872:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007874:	230c      	movs	r3, #12
 8007876:	18fb      	adds	r3, r7, r3
 8007878:	2202      	movs	r2, #2
 800787a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800787c:	230c      	movs	r3, #12
 800787e:	18fb      	adds	r3, r7, r3
 8007880:	2200      	movs	r2, #0
 8007882:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007884:	230c      	movs	r3, #12
 8007886:	18fb      	adds	r3, r7, r3
 8007888:	2203      	movs	r2, #3
 800788a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 800788c:	230c      	movs	r3, #12
 800788e:	18fb      	adds	r3, r7, r3
 8007890:	2200      	movs	r2, #0
 8007892:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007894:	230c      	movs	r3, #12
 8007896:	18fb      	adds	r3, r7, r3
 8007898:	4a29      	ldr	r2, [pc, #164]	; (8007940 <HAL_TIM_MspPostInit+0x1a8>)
 800789a:	0019      	movs	r1, r3
 800789c:	0010      	movs	r0, r2
 800789e:	f7f9 fe0d 	bl	80014bc <HAL_GPIO_Init>
}
 80078a2:	e040      	b.n	8007926 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM16)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a26      	ldr	r2, [pc, #152]	; (8007944 <HAL_TIM_MspPostInit+0x1ac>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d11b      	bne.n	80078e6 <HAL_TIM_MspPostInit+0x14e>
    GPIO_InitStruct.Pin = PWM2_Pin;
 80078ae:	230c      	movs	r3, #12
 80078b0:	18fb      	adds	r3, r7, r3
 80078b2:	2201      	movs	r2, #1
 80078b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b6:	230c      	movs	r3, #12
 80078b8:	18fb      	adds	r3, r7, r3
 80078ba:	2202      	movs	r2, #2
 80078bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078be:	230c      	movs	r3, #12
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	2200      	movs	r2, #0
 80078c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80078c6:	230c      	movs	r3, #12
 80078c8:	18fb      	adds	r3, r7, r3
 80078ca:	2203      	movs	r2, #3
 80078cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM16;
 80078ce:	230c      	movs	r3, #12
 80078d0:	18fb      	adds	r3, r7, r3
 80078d2:	2200      	movs	r2, #0
 80078d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 80078d6:	230c      	movs	r3, #12
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	4a17      	ldr	r2, [pc, #92]	; (8007938 <HAL_TIM_MspPostInit+0x1a0>)
 80078dc:	0019      	movs	r1, r3
 80078de:	0010      	movs	r0, r2
 80078e0:	f7f9 fdec 	bl	80014bc <HAL_GPIO_Init>
}
 80078e4:	e01f      	b.n	8007926 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM17)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a17      	ldr	r2, [pc, #92]	; (8007948 <HAL_TIM_MspPostInit+0x1b0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d11a      	bne.n	8007926 <HAL_TIM_MspPostInit+0x18e>
    GPIO_InitStruct.Pin = PWM3_Pin;
 80078f0:	230c      	movs	r3, #12
 80078f2:	18fb      	adds	r3, r7, r3
 80078f4:	2202      	movs	r2, #2
 80078f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078f8:	230c      	movs	r3, #12
 80078fa:	18fb      	adds	r3, r7, r3
 80078fc:	2202      	movs	r2, #2
 80078fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007900:	230c      	movs	r3, #12
 8007902:	18fb      	adds	r3, r7, r3
 8007904:	2200      	movs	r2, #0
 8007906:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007908:	230c      	movs	r3, #12
 800790a:	18fb      	adds	r3, r7, r3
 800790c:	2203      	movs	r2, #3
 800790e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM17;
 8007910:	230c      	movs	r3, #12
 8007912:	18fb      	adds	r3, r7, r3
 8007914:	2200      	movs	r2, #0
 8007916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM3_GPIO_Port, &GPIO_InitStruct);
 8007918:	230c      	movs	r3, #12
 800791a:	18fb      	adds	r3, r7, r3
 800791c:	4a06      	ldr	r2, [pc, #24]	; (8007938 <HAL_TIM_MspPostInit+0x1a0>)
 800791e:	0019      	movs	r1, r3
 8007920:	0010      	movs	r0, r2
 8007922:	f7f9 fdcb 	bl	80014bc <HAL_GPIO_Init>
}
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	46bd      	mov	sp, r7
 800792a:	b008      	add	sp, #32
 800792c:	bd80      	pop	{r7, pc}
 800792e:	46c0      	nop			; (mov r8, r8)
 8007930:	48000400 	.word	0x48000400
 8007934:	40000400 	.word	0x40000400
 8007938:	48001000 	.word	0x48001000
 800793c:	40014000 	.word	0x40014000
 8007940:	48001400 	.word	0x48001400
 8007944:	40014400 	.word	0x40014400
 8007948:	40014800 	.word	0x40014800

0800794c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08a      	sub	sp, #40	; 0x28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a30      	ldr	r2, [pc, #192]	; (8007a1c <HAL_UART_MspInit+0xd0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d12b      	bne.n	80079b6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800795e:	4b30      	ldr	r3, [pc, #192]	; (8007a20 <HAL_UART_MspInit+0xd4>)
 8007960:	4a2f      	ldr	r2, [pc, #188]	; (8007a20 <HAL_UART_MspInit+0xd4>)
 8007962:	6992      	ldr	r2, [r2, #24]
 8007964:	2180      	movs	r1, #128	; 0x80
 8007966:	01c9      	lsls	r1, r1, #7
 8007968:	430a      	orrs	r2, r1
 800796a:	619a      	str	r2, [r3, #24]
 800796c:	4b2c      	ldr	r3, [pc, #176]	; (8007a20 <HAL_UART_MspInit+0xd4>)
 800796e:	699a      	ldr	r2, [r3, #24]
 8007970:	2380      	movs	r3, #128	; 0x80
 8007972:	01db      	lsls	r3, r3, #7
 8007974:	4013      	ands	r3, r2
 8007976:	613b      	str	r3, [r7, #16]
 8007978:	693b      	ldr	r3, [r7, #16]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = MC_TX1_Pin|MC_RX1_Pin;
 800797a:	2314      	movs	r3, #20
 800797c:	18fb      	adds	r3, r7, r3
 800797e:	22c0      	movs	r2, #192	; 0xc0
 8007980:	00d2      	lsls	r2, r2, #3
 8007982:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007984:	2314      	movs	r3, #20
 8007986:	18fb      	adds	r3, r7, r3
 8007988:	2202      	movs	r2, #2
 800798a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800798c:	2314      	movs	r3, #20
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	2200      	movs	r2, #0
 8007992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007994:	2314      	movs	r3, #20
 8007996:	18fb      	adds	r3, r7, r3
 8007998:	2203      	movs	r2, #3
 800799a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800799c:	2314      	movs	r3, #20
 800799e:	18fb      	adds	r3, r7, r3
 80079a0:	2201      	movs	r2, #1
 80079a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079a4:	2314      	movs	r3, #20
 80079a6:	18fa      	adds	r2, r7, r3
 80079a8:	2390      	movs	r3, #144	; 0x90
 80079aa:	05db      	lsls	r3, r3, #23
 80079ac:	0011      	movs	r1, r2
 80079ae:	0018      	movs	r0, r3
 80079b0:	f7f9 fd84 	bl	80014bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80079b4:	e02d      	b.n	8007a12 <HAL_UART_MspInit+0xc6>
  else if(huart->Instance==USART2)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <HAL_UART_MspInit+0xd8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d128      	bne.n	8007a12 <HAL_UART_MspInit+0xc6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80079c0:	4b17      	ldr	r3, [pc, #92]	; (8007a20 <HAL_UART_MspInit+0xd4>)
 80079c2:	4a17      	ldr	r2, [pc, #92]	; (8007a20 <HAL_UART_MspInit+0xd4>)
 80079c4:	69d2      	ldr	r2, [r2, #28]
 80079c6:	2180      	movs	r1, #128	; 0x80
 80079c8:	0289      	lsls	r1, r1, #10
 80079ca:	430a      	orrs	r2, r1
 80079cc:	61da      	str	r2, [r3, #28]
 80079ce:	4b14      	ldr	r3, [pc, #80]	; (8007a20 <HAL_UART_MspInit+0xd4>)
 80079d0:	69da      	ldr	r2, [r3, #28]
 80079d2:	2380      	movs	r3, #128	; 0x80
 80079d4:	029b      	lsls	r3, r3, #10
 80079d6:	4013      	ands	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MC_CTS2_Pin|MC_RTS2_Pin|MC_TX2_Pin|MC_RX2_Pin;
 80079dc:	2314      	movs	r3, #20
 80079de:	18fb      	adds	r3, r7, r3
 80079e0:	2278      	movs	r2, #120	; 0x78
 80079e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e4:	2314      	movs	r3, #20
 80079e6:	18fb      	adds	r3, r7, r3
 80079e8:	2202      	movs	r2, #2
 80079ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ec:	2314      	movs	r3, #20
 80079ee:	18fb      	adds	r3, r7, r3
 80079f0:	2200      	movs	r2, #0
 80079f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80079f4:	2314      	movs	r3, #20
 80079f6:	18fb      	adds	r3, r7, r3
 80079f8:	2203      	movs	r2, #3
 80079fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80079fc:	2314      	movs	r3, #20
 80079fe:	18fb      	adds	r3, r7, r3
 8007a00:	2200      	movs	r2, #0
 8007a02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a04:	2314      	movs	r3, #20
 8007a06:	18fb      	adds	r3, r7, r3
 8007a08:	4a07      	ldr	r2, [pc, #28]	; (8007a28 <HAL_UART_MspInit+0xdc>)
 8007a0a:	0019      	movs	r1, r3
 8007a0c:	0010      	movs	r0, r2
 8007a0e:	f7f9 fd55 	bl	80014bc <HAL_GPIO_Init>
}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b00a      	add	sp, #40	; 0x28
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	40013800 	.word	0x40013800
 8007a20:	40021000 	.word	0x40021000
 8007a24:	40004400 	.word	0x40004400
 8007a28:	48000c00 	.word	0x48000c00

08007a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08a      	sub	sp, #40	; 0x28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0); 
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	0019      	movs	r1, r3
 8007a42:	2013      	movs	r0, #19
 8007a44:	f7f9 fca6 	bl	8001394 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn); 
 8007a48:	2013      	movs	r0, #19
 8007a4a:	f7f9 fcb9 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8007a4e:	4b21      	ldr	r3, [pc, #132]	; (8007ad4 <HAL_InitTick+0xa8>)
 8007a50:	4a20      	ldr	r2, [pc, #128]	; (8007ad4 <HAL_InitTick+0xa8>)
 8007a52:	69d2      	ldr	r2, [r2, #28]
 8007a54:	2180      	movs	r1, #128	; 0x80
 8007a56:	0049      	lsls	r1, r1, #1
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	61da      	str	r2, [r3, #28]
 8007a5c:	4b1d      	ldr	r3, [pc, #116]	; (8007ad4 <HAL_InitTick+0xa8>)
 8007a5e:	69da      	ldr	r2, [r3, #28]
 8007a60:	2380      	movs	r3, #128	; 0x80
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	4013      	ands	r3, r2
 8007a66:	60bb      	str	r3, [r7, #8]
 8007a68:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007a6a:	230c      	movs	r3, #12
 8007a6c:	18fa      	adds	r2, r7, r3
 8007a6e:	2310      	movs	r3, #16
 8007a70:	18fb      	adds	r3, r7, r3
 8007a72:	0011      	movs	r1, r2
 8007a74:	0018      	movs	r0, r3
 8007a76:	f7fa fbed 	bl	8002254 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007a7a:	f7fa fbd5 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8007a7e:	0003      	movs	r3, r0
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	4914      	ldr	r1, [pc, #80]	; (8007ad8 <HAL_InitTick+0xac>)
 8007a86:	0018      	movs	r0, r3
 8007a88:	f7f8 fb46 	bl	8000118 <__udivsi3>
 8007a8c:	0003      	movs	r3, r0
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8007a92:	4b12      	ldr	r3, [pc, #72]	; (8007adc <HAL_InitTick+0xb0>)
 8007a94:	4a12      	ldr	r2, [pc, #72]	; (8007ae0 <HAL_InitTick+0xb4>)
 8007a96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8007a98:	4b10      	ldr	r3, [pc, #64]	; (8007adc <HAL_InitTick+0xb0>)
 8007a9a:	4a12      	ldr	r2, [pc, #72]	; (8007ae4 <HAL_InitTick+0xb8>)
 8007a9c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8007a9e:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <HAL_InitTick+0xb0>)
 8007aa0:	6a3a      	ldr	r2, [r7, #32]
 8007aa2:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8007aa4:	4b0d      	ldr	r3, [pc, #52]	; (8007adc <HAL_InitTick+0xb0>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007aaa:	4b0c      	ldr	r3, [pc, #48]	; (8007adc <HAL_InitTick+0xb0>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <HAL_InitTick+0xb0>)
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	f7fa fcf6 	bl	80024a4 <HAL_TIM_Base_Init>
 8007ab8:	1e03      	subs	r3, r0, #0
 8007aba:	d105      	bne.n	8007ac8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8007abc:	4b07      	ldr	r3, [pc, #28]	; (8007adc <HAL_InitTick+0xb0>)
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f7fa fd1c 	bl	80024fc <HAL_TIM_Base_Start_IT>
 8007ac4:	0003      	movs	r3, r0
 8007ac6:	e000      	b.n	8007aca <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
}
 8007aca:	0018      	movs	r0, r3
 8007acc:	46bd      	mov	sp, r7
 8007ace:	b00a      	add	sp, #40	; 0x28
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	40021000 	.word	0x40021000
 8007ad8:	000f4240 	.word	0x000f4240
 8007adc:	200024d0 	.word	0x200024d0
 8007ae0:	40002000 	.word	0x40002000
 8007ae4:	000003e7 	.word	0x000003e7

08007ae8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8007aec:	f7fc fbea 	bl	80042c4 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007af0:	46c0      	nop			; (mov r8, r8)
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007afc:	4b03      	ldr	r3, [pc, #12]	; (8007b0c <TIM3_IRQHandler+0x14>)
 8007afe:	0018      	movs	r0, r3
 8007b00:	f7fa fdb0 	bl	8002664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007b04:	46c0      	nop			; (mov r8, r8)
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	20002274 	.word	0x20002274

08007b10 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8007b14:	4b03      	ldr	r3, [pc, #12]	; (8007b24 <TIM14_IRQHandler+0x14>)
 8007b16:	0018      	movs	r0, r3
 8007b18:	f7fa fda4 	bl	8002664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8007b1c:	46c0      	nop			; (mov r8, r8)
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	200024d0 	.word	0x200024d0

08007b28 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007b2c:	4b03      	ldr	r3, [pc, #12]	; (8007b3c <USART1_IRQHandler+0x14>)
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f7fb fe66 	bl	8003800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007b34:	46c0      	nop			; (mov r8, r8)
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	46c0      	nop			; (mov r8, r8)
 8007b3c:	200022b4 	.word	0x200022b4

08007b40 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007b44:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <USART2_IRQHandler+0x14>)
 8007b46:	0018      	movs	r0, r3
 8007b48:	f7fb fe5a 	bl	8003800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007b4c:	46c0      	nop			; (mov r8, r8)
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	46c0      	nop			; (mov r8, r8)
 8007b54:	200023a4 	.word	0x200023a4

08007b58 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8007b5c:	4b1a      	ldr	r3, [pc, #104]	; (8007bc8 <SystemInit+0x70>)
 8007b5e:	4a1a      	ldr	r2, [pc, #104]	; (8007bc8 <SystemInit+0x70>)
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	2101      	movs	r1, #1
 8007b64:	430a      	orrs	r2, r1
 8007b66:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8007b68:	4b17      	ldr	r3, [pc, #92]	; (8007bc8 <SystemInit+0x70>)
 8007b6a:	4a17      	ldr	r2, [pc, #92]	; (8007bc8 <SystemInit+0x70>)
 8007b6c:	6852      	ldr	r2, [r2, #4]
 8007b6e:	4917      	ldr	r1, [pc, #92]	; (8007bcc <SystemInit+0x74>)
 8007b70:	400a      	ands	r2, r1
 8007b72:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8007b74:	4b14      	ldr	r3, [pc, #80]	; (8007bc8 <SystemInit+0x70>)
 8007b76:	4a14      	ldr	r2, [pc, #80]	; (8007bc8 <SystemInit+0x70>)
 8007b78:	6812      	ldr	r2, [r2, #0]
 8007b7a:	4915      	ldr	r1, [pc, #84]	; (8007bd0 <SystemInit+0x78>)
 8007b7c:	400a      	ands	r2, r1
 8007b7e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8007b80:	4b11      	ldr	r3, [pc, #68]	; (8007bc8 <SystemInit+0x70>)
 8007b82:	4a11      	ldr	r2, [pc, #68]	; (8007bc8 <SystemInit+0x70>)
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	4913      	ldr	r1, [pc, #76]	; (8007bd4 <SystemInit+0x7c>)
 8007b88:	400a      	ands	r2, r1
 8007b8a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8007b8c:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <SystemInit+0x70>)
 8007b8e:	4a0e      	ldr	r2, [pc, #56]	; (8007bc8 <SystemInit+0x70>)
 8007b90:	6852      	ldr	r2, [r2, #4]
 8007b92:	4911      	ldr	r1, [pc, #68]	; (8007bd8 <SystemInit+0x80>)
 8007b94:	400a      	ands	r2, r1
 8007b96:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8007b98:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <SystemInit+0x70>)
 8007b9a:	4a0b      	ldr	r2, [pc, #44]	; (8007bc8 <SystemInit+0x70>)
 8007b9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007b9e:	210f      	movs	r1, #15
 8007ba0:	438a      	bics	r2, r1
 8007ba2:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8007ba4:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <SystemInit+0x70>)
 8007ba6:	4a08      	ldr	r2, [pc, #32]	; (8007bc8 <SystemInit+0x70>)
 8007ba8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007baa:	490c      	ldr	r1, [pc, #48]	; (8007bdc <SystemInit+0x84>)
 8007bac:	400a      	ands	r2, r1
 8007bae:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8007bb0:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <SystemInit+0x70>)
 8007bb2:	4a05      	ldr	r2, [pc, #20]	; (8007bc8 <SystemInit+0x70>)
 8007bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	438a      	bics	r2, r1
 8007bba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8007bbc:	4b02      	ldr	r3, [pc, #8]	; (8007bc8 <SystemInit+0x70>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	609a      	str	r2, [r3, #8]

}
 8007bc2:	46c0      	nop			; (mov r8, r8)
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	08ffb80c 	.word	0x08ffb80c
 8007bd0:	fef6ffff 	.word	0xfef6ffff
 8007bd4:	fffbffff 	.word	0xfffbffff
 8007bd8:	ffc0ffff 	.word	0xffc0ffff
 8007bdc:	fffcfe2c 	.word	0xfffcfe2c

08007be0 <traces>:
}

// ***************************************************************************

void traces(char *msg)
{
 8007be0:	b590      	push	{r4, r7, lr}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(trace_uart_ptr, " ", 1, 100);
 8007be8:	4b0f      	ldr	r3, [pc, #60]	; (8007c28 <traces+0x48>)
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	490f      	ldr	r1, [pc, #60]	; (8007c2c <traces+0x4c>)
 8007bee:	2364      	movs	r3, #100	; 0x64
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f7fb fc7f 	bl	80034f4 <HAL_UART_Transmit>
    HAL_UART_Transmit(trace_uart_ptr, msg, strlen(msg), 100);
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <traces+0x48>)
 8007bf8:	681c      	ldr	r4, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f7f8 fa83 	bl	8000108 <strlen>
 8007c02:	0003      	movs	r3, r0
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	2364      	movs	r3, #100	; 0x64
 8007c0a:	0020      	movs	r0, r4
 8007c0c:	f7fb fc72 	bl	80034f4 <HAL_UART_Transmit>
    HAL_UART_Transmit(trace_uart_ptr, "\n", 1, 100);
 8007c10:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <traces+0x48>)
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	4906      	ldr	r1, [pc, #24]	; (8007c30 <traces+0x50>)
 8007c16:	2364      	movs	r3, #100	; 0x64
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f7fb fc6b 	bl	80034f4 <HAL_UART_Transmit>
}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	46bd      	mov	sp, r7
 8007c22:	b003      	add	sp, #12
 8007c24:	bd90      	pop	{r4, r7, pc}
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	20000068 	.word	0x20000068
 8007c2c:	080089b8 	.word	0x080089b8
 8007c30:	080089bc 	.word	0x080089bc

08007c34 <tracef>:

void tracef(char *fmt, ...)
{
 8007c34:	b40f      	push	{r0, r1, r2, r3}
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8007c3c:	2314      	movs	r3, #20
 8007c3e:	18fb      	adds	r3, r7, r3
 8007c40:	607b      	str	r3, [r7, #4]
    vsniprintf(trace_buf, TRACE_BUFLEN, fmt, args);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4807      	ldr	r0, [pc, #28]	; (8007c64 <tracef+0x30>)
 8007c48:	2150      	movs	r1, #80	; 0x50
 8007c4a:	f000 f9cb 	bl	8007fe4 <vsniprintf>
    traces(trace_buf);
 8007c4e:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <tracef+0x30>)
 8007c50:	0018      	movs	r0, r3
 8007c52:	f7ff ffc5 	bl	8007be0 <traces>
    va_end(args);
}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	b002      	add	sp, #8
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	bc08      	pop	{r3}
 8007c60:	b004      	add	sp, #16
 8007c62:	4718      	bx	r3
 8007c64:	20002188 	.word	0x20002188

08007c68 <get_response>:
// ***************************************************************************

// TODO Die Eingabe sollte interruptgesteuert oder per DMA erfolgen!!!

static bool get_response(char *expected_answer)
{
 8007c68:	b590      	push	{r4, r7, lr}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
    int len = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef receive_retval;
    do {
        // receive a response
        memset(rx_buf, 0, RX_BUF_SIZE);
 8007c74:	4b2d      	ldr	r3, [pc, #180]	; (8007d2c <get_response+0xc4>)
 8007c76:	220a      	movs	r2, #10
 8007c78:	2100      	movs	r1, #0
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f000 f97f 	bl	8007f7e <memset>
        receive_retval = HAL_UART_Receive(wlan_uart_ptr, rx_buf, RX_BUF_SIZE, RX_TIMEOUT);
 8007c80:	4b2b      	ldr	r3, [pc, #172]	; (8007d30 <get_response+0xc8>)
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	230b      	movs	r3, #11
 8007c86:	18fc      	adds	r4, r7, r3
 8007c88:	4928      	ldr	r1, [pc, #160]	; (8007d2c <get_response+0xc4>)
 8007c8a:	23fa      	movs	r3, #250	; 0xfa
 8007c8c:	220a      	movs	r2, #10
 8007c8e:	f7fb fcd5 	bl	800363c <HAL_UART_Receive>
 8007c92:	0003      	movs	r3, r0
 8007c94:	7023      	strb	r3, [r4, #0]

        // try to determine length of answer
        // TODO this cannot really work - fix it!
        len = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
        while (len < (RX_BUF_SIZE-1) && rx_buf[len] != '\0')
 8007c9a:	e002      	b.n	8007ca2 <get_response+0x3a>
        {
            len++;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	60fb      	str	r3, [r7, #12]
        while (len < (RX_BUF_SIZE-1) && rx_buf[len] != '\0')
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	dc05      	bgt.n	8007cb4 <get_response+0x4c>
 8007ca8:	4a20      	ldr	r2, [pc, #128]	; (8007d2c <get_response+0xc4>)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	18d3      	adds	r3, r2, r3
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1f3      	bne.n	8007c9c <get_response+0x34>
        }
        // make the rx buffer a c string
        rx_buf[len] = '\0';
 8007cb4:	4a1d      	ldr	r2, [pc, #116]	; (8007d2c <get_response+0xc4>)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	18d3      	adds	r3, r2, r3
 8007cba:	2200      	movs	r2, #0
 8007cbc:	701a      	strb	r2, [r3, #0]
    } while (len >= (RX_BUF_SIZE-1));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	dcd7      	bgt.n	8007c74 <get_response+0xc>
    SERIAL_DEBUG("Received: ", rx_buf);
 8007cc4:	491b      	ldr	r1, [pc, #108]	; (8007d34 <get_response+0xcc>)
 8007cc6:	481c      	ldr	r0, [pc, #112]	; (8007d38 <get_response+0xd0>)
 8007cc8:	23fa      	movs	r3, #250	; 0xfa
 8007cca:	220a      	movs	r2, #10
 8007ccc:	f7fb fc12 	bl	80034f4 <HAL_UART_Transmit>
 8007cd0:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <get_response+0xc4>)
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f7f8 fa18 	bl	8000108 <strlen>
 8007cd8:	0003      	movs	r3, r0
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	4913      	ldr	r1, [pc, #76]	; (8007d2c <get_response+0xc4>)
 8007cde:	4816      	ldr	r0, [pc, #88]	; (8007d38 <get_response+0xd0>)
 8007ce0:	23fa      	movs	r3, #250	; 0xfa
 8007ce2:	f7fb fc07 	bl	80034f4 <HAL_UART_Transmit>
 8007ce6:	4915      	ldr	r1, [pc, #84]	; (8007d3c <get_response+0xd4>)
 8007ce8:	4813      	ldr	r0, [pc, #76]	; (8007d38 <get_response+0xd0>)
 8007cea:	23fa      	movs	r3, #250	; 0xfa
 8007cec:	2202      	movs	r2, #2
 8007cee:	f7fb fc01 	bl	80034f4 <HAL_UART_Transmit>
    SERIAL_DEBUG("Expected: ", expected_answer);
 8007cf2:	4913      	ldr	r1, [pc, #76]	; (8007d40 <get_response+0xd8>)
 8007cf4:	4810      	ldr	r0, [pc, #64]	; (8007d38 <get_response+0xd0>)
 8007cf6:	23fa      	movs	r3, #250	; 0xfa
 8007cf8:	220a      	movs	r2, #10
 8007cfa:	f7fb fbfb 	bl	80034f4 <HAL_UART_Transmit>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	0018      	movs	r0, r3
 8007d02:	f7f8 fa01 	bl	8000108 <strlen>
 8007d06:	0003      	movs	r3, r0
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	480a      	ldr	r0, [pc, #40]	; (8007d38 <get_response+0xd0>)
 8007d0e:	23fa      	movs	r3, #250	; 0xfa
 8007d10:	f7fb fbf0 	bl	80034f4 <HAL_UART_Transmit>
 8007d14:	4909      	ldr	r1, [pc, #36]	; (8007d3c <get_response+0xd4>)
 8007d16:	4808      	ldr	r0, [pc, #32]	; (8007d38 <get_response+0xd0>)
 8007d18:	23fa      	movs	r3, #250	; 0xfa
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f7fb fbea 	bl	80034f4 <HAL_UART_Transmit>
//    itoa(receive_retval, rx_buf, 10);
//    SERIAL_DEBUG("Ret=", rx_buf);

    // check the result
    // TODO wirklichen Vergleich machen
    return true; //(strstr(rx_buf, expected_answer) != NULL);
 8007d20:	2301      	movs	r3, #1
}
 8007d22:	0018      	movs	r0, r3
 8007d24:	46bd      	mov	sp, r7
 8007d26:	b005      	add	sp, #20
 8007d28:	bd90      	pop	{r4, r7, pc}
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	200021d8 	.word	0x200021d8
 8007d30:	2000006c 	.word	0x2000006c
 8007d34:	080089e0 	.word	0x080089e0
 8007d38:	200022b4 	.word	0x200022b4
 8007d3c:	080089ec 	.word	0x080089ec
 8007d40:	080089f0 	.word	0x080089f0

08007d44 <send_command>:

static bool send_command(char *cmd, uint32_t delay_ms, char *expected_answer)
{
 8007d44:	b590      	push	{r4, r7, lr}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(wlan_uart_ptr, cmd, strlen(cmd), TX_TIMEOUT);
 8007d50:	4b18      	ldr	r3, [pc, #96]	; (8007db4 <send_command+0x70>)
 8007d52:	681c      	ldr	r4, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	0018      	movs	r0, r3
 8007d58:	f7f8 f9d6 	bl	8000108 <strlen>
 8007d5c:	0003      	movs	r3, r0
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68f9      	ldr	r1, [r7, #12]
 8007d62:	23fa      	movs	r3, #250	; 0xfa
 8007d64:	0020      	movs	r0, r4
 8007d66:	f7fb fbc5 	bl	80034f4 <HAL_UART_Transmit>
    SERIAL_DEBUG("Transmitted: ", cmd);
 8007d6a:	4913      	ldr	r1, [pc, #76]	; (8007db8 <send_command+0x74>)
 8007d6c:	4813      	ldr	r0, [pc, #76]	; (8007dbc <send_command+0x78>)
 8007d6e:	23fa      	movs	r3, #250	; 0xfa
 8007d70:	220d      	movs	r2, #13
 8007d72:	f7fb fbbf 	bl	80034f4 <HAL_UART_Transmit>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f7f8 f9c5 	bl	8000108 <strlen>
 8007d7e:	0003      	movs	r3, r0
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	480d      	ldr	r0, [pc, #52]	; (8007dbc <send_command+0x78>)
 8007d86:	23fa      	movs	r3, #250	; 0xfa
 8007d88:	f7fb fbb4 	bl	80034f4 <HAL_UART_Transmit>
 8007d8c:	490c      	ldr	r1, [pc, #48]	; (8007dc0 <send_command+0x7c>)
 8007d8e:	480b      	ldr	r0, [pc, #44]	; (8007dbc <send_command+0x78>)
 8007d90:	23fa      	movs	r3, #250	; 0xfa
 8007d92:	2202      	movs	r2, #2
 8007d94:	f7fb fbae 	bl	80034f4 <HAL_UART_Transmit>
    HAL_Delay(delay_ms);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f7f8 fd8c 	bl	80008b8 <HAL_Delay>
    return get_response(expected_answer);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	0018      	movs	r0, r3
 8007da4:	f7ff ff60 	bl	8007c68 <get_response>
 8007da8:	0003      	movs	r3, r0
}
 8007daa:	0018      	movs	r0, r3
 8007dac:	46bd      	mov	sp, r7
 8007dae:	b005      	add	sp, #20
 8007db0:	bd90      	pop	{r4, r7, pc}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	2000006c 	.word	0x2000006c
 8007db8:	080089fc 	.word	0x080089fc
 8007dbc:	200022b4 	.word	0x200022b4
 8007dc0:	080089ec 	.word	0x080089ec

08007dc4 <config_start>:

// TODO Sinnvolle Fehlerbehandlung einführen - z. B. Reset des WIFI-Moduls und Neustart der Prozedur
// TODO WIFI-Modul bis zum Neustart auf schnellere Kommunikationsgeschwindigkeit umschalten und HAL_UART umkonfigurieren

static bool config_start()
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
    bool ok = true;
 8007dca:	1dfb      	adds	r3, r7, #7
 8007dcc:	2201      	movs	r2, #1
 8007dce:	701a      	strb	r2, [r3, #0]
    // TODO Macht es Sinn, das WIFI-Modul zurückzusetzen?
    ok = ok && send_command("$$$", 200, "CMD");
 8007dd0:	1dfb      	adds	r3, r7, #7
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d009      	beq.n	8007dec <config_start+0x28>
 8007dd8:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <config_start+0x74>)
 8007dda:	4b18      	ldr	r3, [pc, #96]	; (8007e3c <config_start+0x78>)
 8007ddc:	21c8      	movs	r1, #200	; 0xc8
 8007dde:	0018      	movs	r0, r3
 8007de0:	f7ff ffb0 	bl	8007d44 <send_command>
 8007de4:	1e03      	subs	r3, r0, #0
 8007de6:	d001      	beq.n	8007dec <config_start+0x28>
 8007de8:	2201      	movs	r2, #1
 8007dea:	e000      	b.n	8007dee <config_start+0x2a>
 8007dec:	2200      	movs	r2, #0
 8007dee:	1dfb      	adds	r3, r7, #7
 8007df0:	701a      	strb	r2, [r3, #0]
 8007df2:	781a      	ldrb	r2, [r3, #0]
 8007df4:	2101      	movs	r1, #1
 8007df6:	400a      	ands	r2, r1
 8007df8:	701a      	strb	r2, [r3, #0]
    ok = ok && send_command("\rload config\r", 0, "AOK");
 8007dfa:	1dfb      	adds	r3, r7, #7
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <config_start+0x52>
 8007e02:	4a0f      	ldr	r2, [pc, #60]	; (8007e40 <config_start+0x7c>)
 8007e04:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <config_start+0x80>)
 8007e06:	2100      	movs	r1, #0
 8007e08:	0018      	movs	r0, r3
 8007e0a:	f7ff ff9b 	bl	8007d44 <send_command>
 8007e0e:	1e03      	subs	r3, r0, #0
 8007e10:	d001      	beq.n	8007e16 <config_start+0x52>
 8007e12:	2201      	movs	r2, #1
 8007e14:	e000      	b.n	8007e18 <config_start+0x54>
 8007e16:	2200      	movs	r2, #0
 8007e18:	1dfb      	adds	r3, r7, #7
 8007e1a:	701a      	strb	r2, [r3, #0]
 8007e1c:	781a      	ldrb	r2, [r3, #0]
 8007e1e:	2101      	movs	r1, #1
 8007e20:	400a      	ands	r2, r1
 8007e22:	701a      	strb	r2, [r3, #0]
    HAL_Delay(250);
 8007e24:	20fa      	movs	r0, #250	; 0xfa
 8007e26:	f7f8 fd47 	bl	80008b8 <HAL_Delay>
    return ok;
 8007e2a:	1dfb      	adds	r3, r7, #7
 8007e2c:	781b      	ldrb	r3, [r3, #0]
}
 8007e2e:	0018      	movs	r0, r3
 8007e30:	46bd      	mov	sp, r7
 8007e32:	b002      	add	sp, #8
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	46c0      	nop			; (mov r8, r8)
 8007e38:	08008a3c 	.word	0x08008a3c
 8007e3c:	08008a40 	.word	0x08008a40
 8007e40:	08008a44 	.word	0x08008a44
 8007e44:	08008a48 	.word	0x08008a48

08007e48 <config_leave>:

static bool config_leave()
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
    return send_command("\rexit\r", 0, "EXIT");
 8007e4c:	4a04      	ldr	r2, [pc, #16]	; (8007e60 <config_leave+0x18>)
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <config_leave+0x1c>)
 8007e50:	2100      	movs	r1, #0
 8007e52:	0018      	movs	r0, r3
 8007e54:	f7ff ff76 	bl	8007d44 <send_command>
 8007e58:	0003      	movs	r3, r0
}
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	08008a58 	.word	0x08008a58
 8007e64:	08008a60 	.word	0x08008a60

08007e68 <wifi_init>:
}

// ***************************************************************************

bool wifi_init()
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
    bool ok = true;
 8007e6e:	1dfb      	adds	r3, r7, #7
 8007e70:	2201      	movs	r2, #1
 8007e72:	701a      	strb	r2, [r3, #0]
    ok = ok && config_start();
 8007e74:	1dfb      	adds	r3, r7, #7
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <wifi_init+0x20>
 8007e7c:	f7ff ffa2 	bl	8007dc4 <config_start>
 8007e80:	1e03      	subs	r3, r0, #0
 8007e82:	d001      	beq.n	8007e88 <wifi_init+0x20>
 8007e84:	2201      	movs	r2, #1
 8007e86:	e000      	b.n	8007e8a <wifi_init+0x22>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	1dfb      	adds	r3, r7, #7
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	781a      	ldrb	r2, [r3, #0]
 8007e90:	2101      	movs	r1, #1
 8007e92:	400a      	ands	r2, r1
 8007e94:	701a      	strb	r2, [r3, #0]
    ok = ok && config_leave();
 8007e96:	1dfb      	adds	r3, r7, #7
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <wifi_init+0x42>
 8007e9e:	f7ff ffd3 	bl	8007e48 <config_leave>
 8007ea2:	1e03      	subs	r3, r0, #0
 8007ea4:	d001      	beq.n	8007eaa <wifi_init+0x42>
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	e000      	b.n	8007eac <wifi_init+0x44>
 8007eaa:	2200      	movs	r2, #0
 8007eac:	1dfb      	adds	r3, r7, #7
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	781a      	ldrb	r2, [r3, #0]
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	400a      	ands	r2, r1
 8007eb6:	701a      	strb	r2, [r3, #0]
    return ok;
 8007eb8:	1dfb      	adds	r3, r7, #7
 8007eba:	781b      	ldrb	r3, [r3, #0]
}
 8007ebc:	0018      	movs	r0, r3
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	b002      	add	sp, #8
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007ec4:	480d      	ldr	r0, [pc, #52]	; (8007efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007ec6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007ec8:	480d      	ldr	r0, [pc, #52]	; (8007f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8007eca:	490e      	ldr	r1, [pc, #56]	; (8007f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007ecc:	4a0e      	ldr	r2, [pc, #56]	; (8007f08 <LoopForever+0xe>)
  movs r3, #0
 8007ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ed0:	e002      	b.n	8007ed8 <LoopCopyDataInit>

08007ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ed6:	3304      	adds	r3, #4

08007ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007edc:	d3f9      	bcc.n	8007ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ede:	4a0b      	ldr	r2, [pc, #44]	; (8007f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007ee0:	4c0b      	ldr	r4, [pc, #44]	; (8007f10 <LoopForever+0x16>)
  movs r3, #0
 8007ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ee4:	e001      	b.n	8007eea <LoopFillZerobss>

08007ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ee8:	3204      	adds	r2, #4

08007eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007eec:	d3fb      	bcc.n	8007ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007eee:	f7ff fe33 	bl	8007b58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8007ef2:	f000 f817 	bl	8007f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007ef6:	f7ff f90d 	bl	8007114 <main>

08007efa <LoopForever>:

LoopForever:
    b LoopForever
 8007efa:	e7fe      	b.n	8007efa <LoopForever>
  ldr   r0, =_estack
 8007efc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8007f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007f04:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8007f08:	08008bbc 	.word	0x08008bbc
  ldr r2, =_sbss
 8007f0c:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8007f10:	20002514 	.word	0x20002514

08007f14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007f14:	e7fe      	b.n	8007f14 <ADC1_COMP_IRQHandler>
	...

08007f18 <__errno>:
 8007f18:	4b01      	ldr	r3, [pc, #4]	; (8007f20 <__errno+0x8>)
 8007f1a:	6818      	ldr	r0, [r3, #0]
 8007f1c:	4770      	bx	lr
 8007f1e:	46c0      	nop			; (mov r8, r8)
 8007f20:	20000070 	.word	0x20000070

08007f24 <__libc_init_array>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	2600      	movs	r6, #0
 8007f28:	4d0c      	ldr	r5, [pc, #48]	; (8007f5c <__libc_init_array+0x38>)
 8007f2a:	4c0d      	ldr	r4, [pc, #52]	; (8007f60 <__libc_init_array+0x3c>)
 8007f2c:	1b64      	subs	r4, r4, r5
 8007f2e:	10a4      	asrs	r4, r4, #2
 8007f30:	42a6      	cmp	r6, r4
 8007f32:	d109      	bne.n	8007f48 <__libc_init_array+0x24>
 8007f34:	2600      	movs	r6, #0
 8007f36:	f000 fc57 	bl	80087e8 <_init>
 8007f3a:	4d0a      	ldr	r5, [pc, #40]	; (8007f64 <__libc_init_array+0x40>)
 8007f3c:	4c0a      	ldr	r4, [pc, #40]	; (8007f68 <__libc_init_array+0x44>)
 8007f3e:	1b64      	subs	r4, r4, r5
 8007f40:	10a4      	asrs	r4, r4, #2
 8007f42:	42a6      	cmp	r6, r4
 8007f44:	d105      	bne.n	8007f52 <__libc_init_array+0x2e>
 8007f46:	bd70      	pop	{r4, r5, r6, pc}
 8007f48:	00b3      	lsls	r3, r6, #2
 8007f4a:	58eb      	ldr	r3, [r5, r3]
 8007f4c:	4798      	blx	r3
 8007f4e:	3601      	adds	r6, #1
 8007f50:	e7ee      	b.n	8007f30 <__libc_init_array+0xc>
 8007f52:	00b3      	lsls	r3, r6, #2
 8007f54:	58eb      	ldr	r3, [r5, r3]
 8007f56:	4798      	blx	r3
 8007f58:	3601      	adds	r6, #1
 8007f5a:	e7f2      	b.n	8007f42 <__libc_init_array+0x1e>
 8007f5c:	08008bb4 	.word	0x08008bb4
 8007f60:	08008bb4 	.word	0x08008bb4
 8007f64:	08008bb4 	.word	0x08008bb4
 8007f68:	08008bb8 	.word	0x08008bb8

08007f6c <memcpy>:
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	b510      	push	{r4, lr}
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d100      	bne.n	8007f76 <memcpy+0xa>
 8007f74:	bd10      	pop	{r4, pc}
 8007f76:	5ccc      	ldrb	r4, [r1, r3]
 8007f78:	54c4      	strb	r4, [r0, r3]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	e7f8      	b.n	8007f70 <memcpy+0x4>

08007f7e <memset>:
 8007f7e:	0003      	movs	r3, r0
 8007f80:	1882      	adds	r2, r0, r2
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d100      	bne.n	8007f88 <memset+0xa>
 8007f86:	4770      	bx	lr
 8007f88:	7019      	strb	r1, [r3, #0]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	e7f9      	b.n	8007f82 <memset+0x4>

08007f8e <_vsniprintf_r>:
 8007f8e:	b530      	push	{r4, r5, lr}
 8007f90:	0014      	movs	r4, r2
 8007f92:	b09b      	sub	sp, #108	; 0x6c
 8007f94:	0005      	movs	r5, r0
 8007f96:	001a      	movs	r2, r3
 8007f98:	2c00      	cmp	r4, #0
 8007f9a:	da05      	bge.n	8007fa8 <_vsniprintf_r+0x1a>
 8007f9c:	238b      	movs	r3, #139	; 0x8b
 8007f9e:	6003      	str	r3, [r0, #0]
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	4240      	negs	r0, r0
 8007fa4:	b01b      	add	sp, #108	; 0x6c
 8007fa6:	bd30      	pop	{r4, r5, pc}
 8007fa8:	2382      	movs	r3, #130	; 0x82
 8007faa:	4668      	mov	r0, sp
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	8183      	strh	r3, [r0, #12]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9100      	str	r1, [sp, #0]
 8007fb4:	9104      	str	r1, [sp, #16]
 8007fb6:	429c      	cmp	r4, r3
 8007fb8:	d000      	beq.n	8007fbc <_vsniprintf_r+0x2e>
 8007fba:	1e63      	subs	r3, r4, #1
 8007fbc:	9302      	str	r3, [sp, #8]
 8007fbe:	9305      	str	r3, [sp, #20]
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	4669      	mov	r1, sp
 8007fc4:	425b      	negs	r3, r3
 8007fc6:	81cb      	strh	r3, [r1, #14]
 8007fc8:	0028      	movs	r0, r5
 8007fca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007fcc:	f000 f878 	bl	80080c0 <_svfiprintf_r>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	da01      	bge.n	8007fd8 <_vsniprintf_r+0x4a>
 8007fd4:	238b      	movs	r3, #139	; 0x8b
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	2c00      	cmp	r4, #0
 8007fda:	d0e3      	beq.n	8007fa4 <_vsniprintf_r+0x16>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9a00      	ldr	r2, [sp, #0]
 8007fe0:	7013      	strb	r3, [r2, #0]
 8007fe2:	e7df      	b.n	8007fa4 <_vsniprintf_r+0x16>

08007fe4 <vsniprintf>:
 8007fe4:	b507      	push	{r0, r1, r2, lr}
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	0013      	movs	r3, r2
 8007fea:	000a      	movs	r2, r1
 8007fec:	0001      	movs	r1, r0
 8007fee:	4802      	ldr	r0, [pc, #8]	; (8007ff8 <vsniprintf+0x14>)
 8007ff0:	6800      	ldr	r0, [r0, #0]
 8007ff2:	f7ff ffcc 	bl	8007f8e <_vsniprintf_r>
 8007ff6:	bd0e      	pop	{r1, r2, r3, pc}
 8007ff8:	20000070 	.word	0x20000070

08007ffc <__ssputs_r>:
 8007ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ffe:	688e      	ldr	r6, [r1, #8]
 8008000:	b085      	sub	sp, #20
 8008002:	0007      	movs	r7, r0
 8008004:	000c      	movs	r4, r1
 8008006:	9203      	str	r2, [sp, #12]
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	429e      	cmp	r6, r3
 800800c:	d839      	bhi.n	8008082 <__ssputs_r+0x86>
 800800e:	2390      	movs	r3, #144	; 0x90
 8008010:	898a      	ldrh	r2, [r1, #12]
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	421a      	tst	r2, r3
 8008016:	d034      	beq.n	8008082 <__ssputs_r+0x86>
 8008018:	2503      	movs	r5, #3
 800801a:	6909      	ldr	r1, [r1, #16]
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	1a5b      	subs	r3, r3, r1
 8008020:	9302      	str	r3, [sp, #8]
 8008022:	6963      	ldr	r3, [r4, #20]
 8008024:	9802      	ldr	r0, [sp, #8]
 8008026:	435d      	muls	r5, r3
 8008028:	0feb      	lsrs	r3, r5, #31
 800802a:	195d      	adds	r5, r3, r5
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	106d      	asrs	r5, r5, #1
 8008030:	3301      	adds	r3, #1
 8008032:	181b      	adds	r3, r3, r0
 8008034:	42ab      	cmp	r3, r5
 8008036:	d900      	bls.n	800803a <__ssputs_r+0x3e>
 8008038:	001d      	movs	r5, r3
 800803a:	0553      	lsls	r3, r2, #21
 800803c:	d532      	bpl.n	80080a4 <__ssputs_r+0xa8>
 800803e:	0029      	movs	r1, r5
 8008040:	0038      	movs	r0, r7
 8008042:	f000 fb31 	bl	80086a8 <_malloc_r>
 8008046:	1e06      	subs	r6, r0, #0
 8008048:	d109      	bne.n	800805e <__ssputs_r+0x62>
 800804a:	230c      	movs	r3, #12
 800804c:	603b      	str	r3, [r7, #0]
 800804e:	2340      	movs	r3, #64	; 0x40
 8008050:	2001      	movs	r0, #1
 8008052:	89a2      	ldrh	r2, [r4, #12]
 8008054:	4240      	negs	r0, r0
 8008056:	4313      	orrs	r3, r2
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	b005      	add	sp, #20
 800805c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800805e:	9a02      	ldr	r2, [sp, #8]
 8008060:	6921      	ldr	r1, [r4, #16]
 8008062:	f7ff ff83 	bl	8007f6c <memcpy>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	4a14      	ldr	r2, [pc, #80]	; (80080bc <__ssputs_r+0xc0>)
 800806a:	401a      	ands	r2, r3
 800806c:	2380      	movs	r3, #128	; 0x80
 800806e:	4313      	orrs	r3, r2
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	9b02      	ldr	r3, [sp, #8]
 8008074:	6126      	str	r6, [r4, #16]
 8008076:	18f6      	adds	r6, r6, r3
 8008078:	6026      	str	r6, [r4, #0]
 800807a:	6165      	str	r5, [r4, #20]
 800807c:	9e01      	ldr	r6, [sp, #4]
 800807e:	1aed      	subs	r5, r5, r3
 8008080:	60a5      	str	r5, [r4, #8]
 8008082:	9b01      	ldr	r3, [sp, #4]
 8008084:	42b3      	cmp	r3, r6
 8008086:	d200      	bcs.n	800808a <__ssputs_r+0x8e>
 8008088:	001e      	movs	r6, r3
 800808a:	0032      	movs	r2, r6
 800808c:	9903      	ldr	r1, [sp, #12]
 800808e:	6820      	ldr	r0, [r4, #0]
 8008090:	f000 faad 	bl	80085ee <memmove>
 8008094:	68a3      	ldr	r3, [r4, #8]
 8008096:	2000      	movs	r0, #0
 8008098:	1b9b      	subs	r3, r3, r6
 800809a:	60a3      	str	r3, [r4, #8]
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	199e      	adds	r6, r3, r6
 80080a0:	6026      	str	r6, [r4, #0]
 80080a2:	e7da      	b.n	800805a <__ssputs_r+0x5e>
 80080a4:	002a      	movs	r2, r5
 80080a6:	0038      	movs	r0, r7
 80080a8:	f000 fb5c 	bl	8008764 <_realloc_r>
 80080ac:	1e06      	subs	r6, r0, #0
 80080ae:	d1e0      	bne.n	8008072 <__ssputs_r+0x76>
 80080b0:	6921      	ldr	r1, [r4, #16]
 80080b2:	0038      	movs	r0, r7
 80080b4:	f000 faae 	bl	8008614 <_free_r>
 80080b8:	e7c7      	b.n	800804a <__ssputs_r+0x4e>
 80080ba:	46c0      	nop			; (mov r8, r8)
 80080bc:	fffffb7f 	.word	0xfffffb7f

080080c0 <_svfiprintf_r>:
 80080c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080c2:	b09f      	sub	sp, #124	; 0x7c
 80080c4:	9002      	str	r0, [sp, #8]
 80080c6:	9305      	str	r3, [sp, #20]
 80080c8:	898b      	ldrh	r3, [r1, #12]
 80080ca:	000f      	movs	r7, r1
 80080cc:	0016      	movs	r6, r2
 80080ce:	061b      	lsls	r3, r3, #24
 80080d0:	d511      	bpl.n	80080f6 <_svfiprintf_r+0x36>
 80080d2:	690b      	ldr	r3, [r1, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10e      	bne.n	80080f6 <_svfiprintf_r+0x36>
 80080d8:	2140      	movs	r1, #64	; 0x40
 80080da:	f000 fae5 	bl	80086a8 <_malloc_r>
 80080de:	6038      	str	r0, [r7, #0]
 80080e0:	6138      	str	r0, [r7, #16]
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d105      	bne.n	80080f2 <_svfiprintf_r+0x32>
 80080e6:	230c      	movs	r3, #12
 80080e8:	9a02      	ldr	r2, [sp, #8]
 80080ea:	3801      	subs	r0, #1
 80080ec:	6013      	str	r3, [r2, #0]
 80080ee:	b01f      	add	sp, #124	; 0x7c
 80080f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f2:	2340      	movs	r3, #64	; 0x40
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	2300      	movs	r3, #0
 80080f8:	ad06      	add	r5, sp, #24
 80080fa:	616b      	str	r3, [r5, #20]
 80080fc:	3320      	adds	r3, #32
 80080fe:	766b      	strb	r3, [r5, #25]
 8008100:	3310      	adds	r3, #16
 8008102:	76ab      	strb	r3, [r5, #26]
 8008104:	0034      	movs	r4, r6
 8008106:	7823      	ldrb	r3, [r4, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d147      	bne.n	800819c <_svfiprintf_r+0xdc>
 800810c:	1ba3      	subs	r3, r4, r6
 800810e:	9304      	str	r3, [sp, #16]
 8008110:	d00d      	beq.n	800812e <_svfiprintf_r+0x6e>
 8008112:	1ba3      	subs	r3, r4, r6
 8008114:	0032      	movs	r2, r6
 8008116:	0039      	movs	r1, r7
 8008118:	9802      	ldr	r0, [sp, #8]
 800811a:	f7ff ff6f 	bl	8007ffc <__ssputs_r>
 800811e:	1c43      	adds	r3, r0, #1
 8008120:	d100      	bne.n	8008124 <_svfiprintf_r+0x64>
 8008122:	e0b5      	b.n	8008290 <_svfiprintf_r+0x1d0>
 8008124:	696a      	ldr	r2, [r5, #20]
 8008126:	9b04      	ldr	r3, [sp, #16]
 8008128:	4694      	mov	ip, r2
 800812a:	4463      	add	r3, ip
 800812c:	616b      	str	r3, [r5, #20]
 800812e:	7823      	ldrb	r3, [r4, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d100      	bne.n	8008136 <_svfiprintf_r+0x76>
 8008134:	e0ac      	b.n	8008290 <_svfiprintf_r+0x1d0>
 8008136:	2201      	movs	r2, #1
 8008138:	2300      	movs	r3, #0
 800813a:	4252      	negs	r2, r2
 800813c:	606a      	str	r2, [r5, #4]
 800813e:	a902      	add	r1, sp, #8
 8008140:	3254      	adds	r2, #84	; 0x54
 8008142:	1852      	adds	r2, r2, r1
 8008144:	3401      	adds	r4, #1
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	60eb      	str	r3, [r5, #12]
 800814a:	60ab      	str	r3, [r5, #8]
 800814c:	7013      	strb	r3, [r2, #0]
 800814e:	65ab      	str	r3, [r5, #88]	; 0x58
 8008150:	4e58      	ldr	r6, [pc, #352]	; (80082b4 <_svfiprintf_r+0x1f4>)
 8008152:	2205      	movs	r2, #5
 8008154:	7821      	ldrb	r1, [r4, #0]
 8008156:	0030      	movs	r0, r6
 8008158:	f000 fa3e 	bl	80085d8 <memchr>
 800815c:	1c62      	adds	r2, r4, #1
 800815e:	2800      	cmp	r0, #0
 8008160:	d120      	bne.n	80081a4 <_svfiprintf_r+0xe4>
 8008162:	6829      	ldr	r1, [r5, #0]
 8008164:	06cb      	lsls	r3, r1, #27
 8008166:	d504      	bpl.n	8008172 <_svfiprintf_r+0xb2>
 8008168:	2353      	movs	r3, #83	; 0x53
 800816a:	ae02      	add	r6, sp, #8
 800816c:	3020      	adds	r0, #32
 800816e:	199b      	adds	r3, r3, r6
 8008170:	7018      	strb	r0, [r3, #0]
 8008172:	070b      	lsls	r3, r1, #28
 8008174:	d504      	bpl.n	8008180 <_svfiprintf_r+0xc0>
 8008176:	2353      	movs	r3, #83	; 0x53
 8008178:	202b      	movs	r0, #43	; 0x2b
 800817a:	ae02      	add	r6, sp, #8
 800817c:	199b      	adds	r3, r3, r6
 800817e:	7018      	strb	r0, [r3, #0]
 8008180:	7823      	ldrb	r3, [r4, #0]
 8008182:	2b2a      	cmp	r3, #42	; 0x2a
 8008184:	d016      	beq.n	80081b4 <_svfiprintf_r+0xf4>
 8008186:	2000      	movs	r0, #0
 8008188:	210a      	movs	r1, #10
 800818a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818c:	7822      	ldrb	r2, [r4, #0]
 800818e:	3a30      	subs	r2, #48	; 0x30
 8008190:	2a09      	cmp	r2, #9
 8008192:	d955      	bls.n	8008240 <_svfiprintf_r+0x180>
 8008194:	2800      	cmp	r0, #0
 8008196:	d015      	beq.n	80081c4 <_svfiprintf_r+0x104>
 8008198:	9309      	str	r3, [sp, #36]	; 0x24
 800819a:	e013      	b.n	80081c4 <_svfiprintf_r+0x104>
 800819c:	2b25      	cmp	r3, #37	; 0x25
 800819e:	d0b5      	beq.n	800810c <_svfiprintf_r+0x4c>
 80081a0:	3401      	adds	r4, #1
 80081a2:	e7b0      	b.n	8008106 <_svfiprintf_r+0x46>
 80081a4:	2301      	movs	r3, #1
 80081a6:	1b80      	subs	r0, r0, r6
 80081a8:	4083      	lsls	r3, r0
 80081aa:	6829      	ldr	r1, [r5, #0]
 80081ac:	0014      	movs	r4, r2
 80081ae:	430b      	orrs	r3, r1
 80081b0:	602b      	str	r3, [r5, #0]
 80081b2:	e7cd      	b.n	8008150 <_svfiprintf_r+0x90>
 80081b4:	9b05      	ldr	r3, [sp, #20]
 80081b6:	1d18      	adds	r0, r3, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	9005      	str	r0, [sp, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	db39      	blt.n	8008234 <_svfiprintf_r+0x174>
 80081c0:	9309      	str	r3, [sp, #36]	; 0x24
 80081c2:	0014      	movs	r4, r2
 80081c4:	7823      	ldrb	r3, [r4, #0]
 80081c6:	2b2e      	cmp	r3, #46	; 0x2e
 80081c8:	d10b      	bne.n	80081e2 <_svfiprintf_r+0x122>
 80081ca:	7863      	ldrb	r3, [r4, #1]
 80081cc:	1c62      	adds	r2, r4, #1
 80081ce:	2b2a      	cmp	r3, #42	; 0x2a
 80081d0:	d13e      	bne.n	8008250 <_svfiprintf_r+0x190>
 80081d2:	9b05      	ldr	r3, [sp, #20]
 80081d4:	3402      	adds	r4, #2
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	9205      	str	r2, [sp, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	db34      	blt.n	800824a <_svfiprintf_r+0x18a>
 80081e0:	9307      	str	r3, [sp, #28]
 80081e2:	4e35      	ldr	r6, [pc, #212]	; (80082b8 <_svfiprintf_r+0x1f8>)
 80081e4:	7821      	ldrb	r1, [r4, #0]
 80081e6:	2203      	movs	r2, #3
 80081e8:	0030      	movs	r0, r6
 80081ea:	f000 f9f5 	bl	80085d8 <memchr>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d006      	beq.n	8008200 <_svfiprintf_r+0x140>
 80081f2:	2340      	movs	r3, #64	; 0x40
 80081f4:	1b80      	subs	r0, r0, r6
 80081f6:	4083      	lsls	r3, r0
 80081f8:	682a      	ldr	r2, [r5, #0]
 80081fa:	3401      	adds	r4, #1
 80081fc:	4313      	orrs	r3, r2
 80081fe:	602b      	str	r3, [r5, #0]
 8008200:	7821      	ldrb	r1, [r4, #0]
 8008202:	2206      	movs	r2, #6
 8008204:	482d      	ldr	r0, [pc, #180]	; (80082bc <_svfiprintf_r+0x1fc>)
 8008206:	1c66      	adds	r6, r4, #1
 8008208:	7629      	strb	r1, [r5, #24]
 800820a:	f000 f9e5 	bl	80085d8 <memchr>
 800820e:	2800      	cmp	r0, #0
 8008210:	d046      	beq.n	80082a0 <_svfiprintf_r+0x1e0>
 8008212:	4b2b      	ldr	r3, [pc, #172]	; (80082c0 <_svfiprintf_r+0x200>)
 8008214:	2b00      	cmp	r3, #0
 8008216:	d12f      	bne.n	8008278 <_svfiprintf_r+0x1b8>
 8008218:	6829      	ldr	r1, [r5, #0]
 800821a:	9b05      	ldr	r3, [sp, #20]
 800821c:	2207      	movs	r2, #7
 800821e:	05c9      	lsls	r1, r1, #23
 8008220:	d528      	bpl.n	8008274 <_svfiprintf_r+0x1b4>
 8008222:	189b      	adds	r3, r3, r2
 8008224:	4393      	bics	r3, r2
 8008226:	3308      	adds	r3, #8
 8008228:	9305      	str	r3, [sp, #20]
 800822a:	696b      	ldr	r3, [r5, #20]
 800822c:	9a03      	ldr	r2, [sp, #12]
 800822e:	189b      	adds	r3, r3, r2
 8008230:	616b      	str	r3, [r5, #20]
 8008232:	e767      	b.n	8008104 <_svfiprintf_r+0x44>
 8008234:	425b      	negs	r3, r3
 8008236:	60eb      	str	r3, [r5, #12]
 8008238:	2302      	movs	r3, #2
 800823a:	430b      	orrs	r3, r1
 800823c:	602b      	str	r3, [r5, #0]
 800823e:	e7c0      	b.n	80081c2 <_svfiprintf_r+0x102>
 8008240:	434b      	muls	r3, r1
 8008242:	3401      	adds	r4, #1
 8008244:	189b      	adds	r3, r3, r2
 8008246:	2001      	movs	r0, #1
 8008248:	e7a0      	b.n	800818c <_svfiprintf_r+0xcc>
 800824a:	2301      	movs	r3, #1
 800824c:	425b      	negs	r3, r3
 800824e:	e7c7      	b.n	80081e0 <_svfiprintf_r+0x120>
 8008250:	2300      	movs	r3, #0
 8008252:	0014      	movs	r4, r2
 8008254:	200a      	movs	r0, #10
 8008256:	001a      	movs	r2, r3
 8008258:	606b      	str	r3, [r5, #4]
 800825a:	7821      	ldrb	r1, [r4, #0]
 800825c:	3930      	subs	r1, #48	; 0x30
 800825e:	2909      	cmp	r1, #9
 8008260:	d903      	bls.n	800826a <_svfiprintf_r+0x1aa>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0bd      	beq.n	80081e2 <_svfiprintf_r+0x122>
 8008266:	9207      	str	r2, [sp, #28]
 8008268:	e7bb      	b.n	80081e2 <_svfiprintf_r+0x122>
 800826a:	4342      	muls	r2, r0
 800826c:	3401      	adds	r4, #1
 800826e:	1852      	adds	r2, r2, r1
 8008270:	2301      	movs	r3, #1
 8008272:	e7f2      	b.n	800825a <_svfiprintf_r+0x19a>
 8008274:	3307      	adds	r3, #7
 8008276:	e7d5      	b.n	8008224 <_svfiprintf_r+0x164>
 8008278:	ab05      	add	r3, sp, #20
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	003a      	movs	r2, r7
 800827e:	4b11      	ldr	r3, [pc, #68]	; (80082c4 <_svfiprintf_r+0x204>)
 8008280:	0029      	movs	r1, r5
 8008282:	9802      	ldr	r0, [sp, #8]
 8008284:	e000      	b.n	8008288 <_svfiprintf_r+0x1c8>
 8008286:	bf00      	nop
 8008288:	9003      	str	r0, [sp, #12]
 800828a:	9b03      	ldr	r3, [sp, #12]
 800828c:	3301      	adds	r3, #1
 800828e:	d1cc      	bne.n	800822a <_svfiprintf_r+0x16a>
 8008290:	89bb      	ldrh	r3, [r7, #12]
 8008292:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008294:	065b      	lsls	r3, r3, #25
 8008296:	d400      	bmi.n	800829a <_svfiprintf_r+0x1da>
 8008298:	e729      	b.n	80080ee <_svfiprintf_r+0x2e>
 800829a:	2001      	movs	r0, #1
 800829c:	4240      	negs	r0, r0
 800829e:	e726      	b.n	80080ee <_svfiprintf_r+0x2e>
 80082a0:	ab05      	add	r3, sp, #20
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	003a      	movs	r2, r7
 80082a6:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <_svfiprintf_r+0x204>)
 80082a8:	0029      	movs	r1, r5
 80082aa:	9802      	ldr	r0, [sp, #8]
 80082ac:	f000 f87a 	bl	80083a4 <_printf_i>
 80082b0:	e7ea      	b.n	8008288 <_svfiprintf_r+0x1c8>
 80082b2:	46c0      	nop			; (mov r8, r8)
 80082b4:	08008b80 	.word	0x08008b80
 80082b8:	08008b86 	.word	0x08008b86
 80082bc:	08008b8a 	.word	0x08008b8a
 80082c0:	00000000 	.word	0x00000000
 80082c4:	08007ffd 	.word	0x08007ffd

080082c8 <_printf_common>:
 80082c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ca:	0015      	movs	r5, r2
 80082cc:	9301      	str	r3, [sp, #4]
 80082ce:	688a      	ldr	r2, [r1, #8]
 80082d0:	690b      	ldr	r3, [r1, #16]
 80082d2:	9000      	str	r0, [sp, #0]
 80082d4:	000c      	movs	r4, r1
 80082d6:	4293      	cmp	r3, r2
 80082d8:	da00      	bge.n	80082dc <_printf_common+0x14>
 80082da:	0013      	movs	r3, r2
 80082dc:	0022      	movs	r2, r4
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	3243      	adds	r2, #67	; 0x43
 80082e2:	7812      	ldrb	r2, [r2, #0]
 80082e4:	2a00      	cmp	r2, #0
 80082e6:	d001      	beq.n	80082ec <_printf_common+0x24>
 80082e8:	3301      	adds	r3, #1
 80082ea:	602b      	str	r3, [r5, #0]
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	069b      	lsls	r3, r3, #26
 80082f0:	d502      	bpl.n	80082f8 <_printf_common+0x30>
 80082f2:	682b      	ldr	r3, [r5, #0]
 80082f4:	3302      	adds	r3, #2
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	2706      	movs	r7, #6
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	401f      	ands	r7, r3
 80082fe:	d027      	beq.n	8008350 <_printf_common+0x88>
 8008300:	0023      	movs	r3, r4
 8008302:	3343      	adds	r3, #67	; 0x43
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	1e5a      	subs	r2, r3, #1
 8008308:	4193      	sbcs	r3, r2
 800830a:	6822      	ldr	r2, [r4, #0]
 800830c:	0692      	lsls	r2, r2, #26
 800830e:	d430      	bmi.n	8008372 <_printf_common+0xaa>
 8008310:	0022      	movs	r2, r4
 8008312:	9901      	ldr	r1, [sp, #4]
 8008314:	3243      	adds	r2, #67	; 0x43
 8008316:	9800      	ldr	r0, [sp, #0]
 8008318:	9e08      	ldr	r6, [sp, #32]
 800831a:	47b0      	blx	r6
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d025      	beq.n	800836c <_printf_common+0xa4>
 8008320:	2306      	movs	r3, #6
 8008322:	6820      	ldr	r0, [r4, #0]
 8008324:	682a      	ldr	r2, [r5, #0]
 8008326:	68e1      	ldr	r1, [r4, #12]
 8008328:	4003      	ands	r3, r0
 800832a:	2500      	movs	r5, #0
 800832c:	2b04      	cmp	r3, #4
 800832e:	d103      	bne.n	8008338 <_printf_common+0x70>
 8008330:	1a8d      	subs	r5, r1, r2
 8008332:	43eb      	mvns	r3, r5
 8008334:	17db      	asrs	r3, r3, #31
 8008336:	401d      	ands	r5, r3
 8008338:	68a3      	ldr	r3, [r4, #8]
 800833a:	6922      	ldr	r2, [r4, #16]
 800833c:	4293      	cmp	r3, r2
 800833e:	dd01      	ble.n	8008344 <_printf_common+0x7c>
 8008340:	1a9b      	subs	r3, r3, r2
 8008342:	18ed      	adds	r5, r5, r3
 8008344:	2700      	movs	r7, #0
 8008346:	42bd      	cmp	r5, r7
 8008348:	d120      	bne.n	800838c <_printf_common+0xc4>
 800834a:	2000      	movs	r0, #0
 800834c:	e010      	b.n	8008370 <_printf_common+0xa8>
 800834e:	3701      	adds	r7, #1
 8008350:	68e3      	ldr	r3, [r4, #12]
 8008352:	682a      	ldr	r2, [r5, #0]
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	429f      	cmp	r7, r3
 8008358:	dad2      	bge.n	8008300 <_printf_common+0x38>
 800835a:	0022      	movs	r2, r4
 800835c:	2301      	movs	r3, #1
 800835e:	3219      	adds	r2, #25
 8008360:	9901      	ldr	r1, [sp, #4]
 8008362:	9800      	ldr	r0, [sp, #0]
 8008364:	9e08      	ldr	r6, [sp, #32]
 8008366:	47b0      	blx	r6
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d1f0      	bne.n	800834e <_printf_common+0x86>
 800836c:	2001      	movs	r0, #1
 800836e:	4240      	negs	r0, r0
 8008370:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008372:	2030      	movs	r0, #48	; 0x30
 8008374:	18e1      	adds	r1, r4, r3
 8008376:	3143      	adds	r1, #67	; 0x43
 8008378:	7008      	strb	r0, [r1, #0]
 800837a:	0021      	movs	r1, r4
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	3145      	adds	r1, #69	; 0x45
 8008380:	7809      	ldrb	r1, [r1, #0]
 8008382:	18a2      	adds	r2, r4, r2
 8008384:	3243      	adds	r2, #67	; 0x43
 8008386:	3302      	adds	r3, #2
 8008388:	7011      	strb	r1, [r2, #0]
 800838a:	e7c1      	b.n	8008310 <_printf_common+0x48>
 800838c:	0022      	movs	r2, r4
 800838e:	2301      	movs	r3, #1
 8008390:	321a      	adds	r2, #26
 8008392:	9901      	ldr	r1, [sp, #4]
 8008394:	9800      	ldr	r0, [sp, #0]
 8008396:	9e08      	ldr	r6, [sp, #32]
 8008398:	47b0      	blx	r6
 800839a:	1c43      	adds	r3, r0, #1
 800839c:	d0e6      	beq.n	800836c <_printf_common+0xa4>
 800839e:	3701      	adds	r7, #1
 80083a0:	e7d1      	b.n	8008346 <_printf_common+0x7e>
	...

080083a4 <_printf_i>:
 80083a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a6:	b08b      	sub	sp, #44	; 0x2c
 80083a8:	9206      	str	r2, [sp, #24]
 80083aa:	000a      	movs	r2, r1
 80083ac:	3243      	adds	r2, #67	; 0x43
 80083ae:	9307      	str	r3, [sp, #28]
 80083b0:	9005      	str	r0, [sp, #20]
 80083b2:	9204      	str	r2, [sp, #16]
 80083b4:	7e0a      	ldrb	r2, [r1, #24]
 80083b6:	000c      	movs	r4, r1
 80083b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ba:	2a6e      	cmp	r2, #110	; 0x6e
 80083bc:	d100      	bne.n	80083c0 <_printf_i+0x1c>
 80083be:	e08f      	b.n	80084e0 <_printf_i+0x13c>
 80083c0:	d817      	bhi.n	80083f2 <_printf_i+0x4e>
 80083c2:	2a63      	cmp	r2, #99	; 0x63
 80083c4:	d02c      	beq.n	8008420 <_printf_i+0x7c>
 80083c6:	d808      	bhi.n	80083da <_printf_i+0x36>
 80083c8:	2a00      	cmp	r2, #0
 80083ca:	d100      	bne.n	80083ce <_printf_i+0x2a>
 80083cc:	e099      	b.n	8008502 <_printf_i+0x15e>
 80083ce:	2a58      	cmp	r2, #88	; 0x58
 80083d0:	d054      	beq.n	800847c <_printf_i+0xd8>
 80083d2:	0026      	movs	r6, r4
 80083d4:	3642      	adds	r6, #66	; 0x42
 80083d6:	7032      	strb	r2, [r6, #0]
 80083d8:	e029      	b.n	800842e <_printf_i+0x8a>
 80083da:	2a64      	cmp	r2, #100	; 0x64
 80083dc:	d001      	beq.n	80083e2 <_printf_i+0x3e>
 80083de:	2a69      	cmp	r2, #105	; 0x69
 80083e0:	d1f7      	bne.n	80083d2 <_printf_i+0x2e>
 80083e2:	6821      	ldr	r1, [r4, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	0608      	lsls	r0, r1, #24
 80083e8:	d523      	bpl.n	8008432 <_printf_i+0x8e>
 80083ea:	1d11      	adds	r1, r2, #4
 80083ec:	6019      	str	r1, [r3, #0]
 80083ee:	6815      	ldr	r5, [r2, #0]
 80083f0:	e025      	b.n	800843e <_printf_i+0x9a>
 80083f2:	2a73      	cmp	r2, #115	; 0x73
 80083f4:	d100      	bne.n	80083f8 <_printf_i+0x54>
 80083f6:	e088      	b.n	800850a <_printf_i+0x166>
 80083f8:	d808      	bhi.n	800840c <_printf_i+0x68>
 80083fa:	2a6f      	cmp	r2, #111	; 0x6f
 80083fc:	d029      	beq.n	8008452 <_printf_i+0xae>
 80083fe:	2a70      	cmp	r2, #112	; 0x70
 8008400:	d1e7      	bne.n	80083d2 <_printf_i+0x2e>
 8008402:	2220      	movs	r2, #32
 8008404:	6809      	ldr	r1, [r1, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	6022      	str	r2, [r4, #0]
 800840a:	e003      	b.n	8008414 <_printf_i+0x70>
 800840c:	2a75      	cmp	r2, #117	; 0x75
 800840e:	d020      	beq.n	8008452 <_printf_i+0xae>
 8008410:	2a78      	cmp	r2, #120	; 0x78
 8008412:	d1de      	bne.n	80083d2 <_printf_i+0x2e>
 8008414:	0022      	movs	r2, r4
 8008416:	2178      	movs	r1, #120	; 0x78
 8008418:	3245      	adds	r2, #69	; 0x45
 800841a:	7011      	strb	r1, [r2, #0]
 800841c:	4a6c      	ldr	r2, [pc, #432]	; (80085d0 <_printf_i+0x22c>)
 800841e:	e030      	b.n	8008482 <_printf_i+0xde>
 8008420:	000e      	movs	r6, r1
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	3642      	adds	r6, #66	; 0x42
 8008426:	1d11      	adds	r1, r2, #4
 8008428:	6019      	str	r1, [r3, #0]
 800842a:	6813      	ldr	r3, [r2, #0]
 800842c:	7033      	strb	r3, [r6, #0]
 800842e:	2301      	movs	r3, #1
 8008430:	e079      	b.n	8008526 <_printf_i+0x182>
 8008432:	0649      	lsls	r1, r1, #25
 8008434:	d5d9      	bpl.n	80083ea <_printf_i+0x46>
 8008436:	1d11      	adds	r1, r2, #4
 8008438:	6019      	str	r1, [r3, #0]
 800843a:	2300      	movs	r3, #0
 800843c:	5ed5      	ldrsh	r5, [r2, r3]
 800843e:	2d00      	cmp	r5, #0
 8008440:	da03      	bge.n	800844a <_printf_i+0xa6>
 8008442:	232d      	movs	r3, #45	; 0x2d
 8008444:	9a04      	ldr	r2, [sp, #16]
 8008446:	426d      	negs	r5, r5
 8008448:	7013      	strb	r3, [r2, #0]
 800844a:	4b62      	ldr	r3, [pc, #392]	; (80085d4 <_printf_i+0x230>)
 800844c:	270a      	movs	r7, #10
 800844e:	9303      	str	r3, [sp, #12]
 8008450:	e02f      	b.n	80084b2 <_printf_i+0x10e>
 8008452:	6820      	ldr	r0, [r4, #0]
 8008454:	6819      	ldr	r1, [r3, #0]
 8008456:	0605      	lsls	r5, r0, #24
 8008458:	d503      	bpl.n	8008462 <_printf_i+0xbe>
 800845a:	1d08      	adds	r0, r1, #4
 800845c:	6018      	str	r0, [r3, #0]
 800845e:	680d      	ldr	r5, [r1, #0]
 8008460:	e005      	b.n	800846e <_printf_i+0xca>
 8008462:	0640      	lsls	r0, r0, #25
 8008464:	d5f9      	bpl.n	800845a <_printf_i+0xb6>
 8008466:	680d      	ldr	r5, [r1, #0]
 8008468:	1d08      	adds	r0, r1, #4
 800846a:	6018      	str	r0, [r3, #0]
 800846c:	b2ad      	uxth	r5, r5
 800846e:	4b59      	ldr	r3, [pc, #356]	; (80085d4 <_printf_i+0x230>)
 8008470:	2708      	movs	r7, #8
 8008472:	9303      	str	r3, [sp, #12]
 8008474:	2a6f      	cmp	r2, #111	; 0x6f
 8008476:	d018      	beq.n	80084aa <_printf_i+0x106>
 8008478:	270a      	movs	r7, #10
 800847a:	e016      	b.n	80084aa <_printf_i+0x106>
 800847c:	3145      	adds	r1, #69	; 0x45
 800847e:	700a      	strb	r2, [r1, #0]
 8008480:	4a54      	ldr	r2, [pc, #336]	; (80085d4 <_printf_i+0x230>)
 8008482:	9203      	str	r2, [sp, #12]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	6821      	ldr	r1, [r4, #0]
 8008488:	1d10      	adds	r0, r2, #4
 800848a:	6018      	str	r0, [r3, #0]
 800848c:	6815      	ldr	r5, [r2, #0]
 800848e:	0608      	lsls	r0, r1, #24
 8008490:	d522      	bpl.n	80084d8 <_printf_i+0x134>
 8008492:	07cb      	lsls	r3, r1, #31
 8008494:	d502      	bpl.n	800849c <_printf_i+0xf8>
 8008496:	2320      	movs	r3, #32
 8008498:	4319      	orrs	r1, r3
 800849a:	6021      	str	r1, [r4, #0]
 800849c:	2710      	movs	r7, #16
 800849e:	2d00      	cmp	r5, #0
 80084a0:	d103      	bne.n	80084aa <_printf_i+0x106>
 80084a2:	2320      	movs	r3, #32
 80084a4:	6822      	ldr	r2, [r4, #0]
 80084a6:	439a      	bics	r2, r3
 80084a8:	6022      	str	r2, [r4, #0]
 80084aa:	0023      	movs	r3, r4
 80084ac:	2200      	movs	r2, #0
 80084ae:	3343      	adds	r3, #67	; 0x43
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	6863      	ldr	r3, [r4, #4]
 80084b4:	60a3      	str	r3, [r4, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	db5c      	blt.n	8008574 <_printf_i+0x1d0>
 80084ba:	2204      	movs	r2, #4
 80084bc:	6821      	ldr	r1, [r4, #0]
 80084be:	4391      	bics	r1, r2
 80084c0:	6021      	str	r1, [r4, #0]
 80084c2:	2d00      	cmp	r5, #0
 80084c4:	d158      	bne.n	8008578 <_printf_i+0x1d4>
 80084c6:	9e04      	ldr	r6, [sp, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d064      	beq.n	8008596 <_printf_i+0x1f2>
 80084cc:	0026      	movs	r6, r4
 80084ce:	9b03      	ldr	r3, [sp, #12]
 80084d0:	3642      	adds	r6, #66	; 0x42
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	7033      	strb	r3, [r6, #0]
 80084d6:	e05e      	b.n	8008596 <_printf_i+0x1f2>
 80084d8:	0648      	lsls	r0, r1, #25
 80084da:	d5da      	bpl.n	8008492 <_printf_i+0xee>
 80084dc:	b2ad      	uxth	r5, r5
 80084de:	e7d8      	b.n	8008492 <_printf_i+0xee>
 80084e0:	6809      	ldr	r1, [r1, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	0608      	lsls	r0, r1, #24
 80084e6:	d505      	bpl.n	80084f4 <_printf_i+0x150>
 80084e8:	1d11      	adds	r1, r2, #4
 80084ea:	6019      	str	r1, [r3, #0]
 80084ec:	6813      	ldr	r3, [r2, #0]
 80084ee:	6962      	ldr	r2, [r4, #20]
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	e006      	b.n	8008502 <_printf_i+0x15e>
 80084f4:	0649      	lsls	r1, r1, #25
 80084f6:	d5f7      	bpl.n	80084e8 <_printf_i+0x144>
 80084f8:	1d11      	adds	r1, r2, #4
 80084fa:	6019      	str	r1, [r3, #0]
 80084fc:	6813      	ldr	r3, [r2, #0]
 80084fe:	8aa2      	ldrh	r2, [r4, #20]
 8008500:	801a      	strh	r2, [r3, #0]
 8008502:	2300      	movs	r3, #0
 8008504:	9e04      	ldr	r6, [sp, #16]
 8008506:	6123      	str	r3, [r4, #16]
 8008508:	e054      	b.n	80085b4 <_printf_i+0x210>
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	1d11      	adds	r1, r2, #4
 800850e:	6019      	str	r1, [r3, #0]
 8008510:	6816      	ldr	r6, [r2, #0]
 8008512:	2100      	movs	r1, #0
 8008514:	6862      	ldr	r2, [r4, #4]
 8008516:	0030      	movs	r0, r6
 8008518:	f000 f85e 	bl	80085d8 <memchr>
 800851c:	2800      	cmp	r0, #0
 800851e:	d001      	beq.n	8008524 <_printf_i+0x180>
 8008520:	1b80      	subs	r0, r0, r6
 8008522:	6060      	str	r0, [r4, #4]
 8008524:	6863      	ldr	r3, [r4, #4]
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	2300      	movs	r3, #0
 800852a:	9a04      	ldr	r2, [sp, #16]
 800852c:	7013      	strb	r3, [r2, #0]
 800852e:	e041      	b.n	80085b4 <_printf_i+0x210>
 8008530:	6923      	ldr	r3, [r4, #16]
 8008532:	0032      	movs	r2, r6
 8008534:	9906      	ldr	r1, [sp, #24]
 8008536:	9805      	ldr	r0, [sp, #20]
 8008538:	9d07      	ldr	r5, [sp, #28]
 800853a:	47a8      	blx	r5
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d043      	beq.n	80085c8 <_printf_i+0x224>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	2500      	movs	r5, #0
 8008544:	079b      	lsls	r3, r3, #30
 8008546:	d40f      	bmi.n	8008568 <_printf_i+0x1c4>
 8008548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854a:	68e0      	ldr	r0, [r4, #12]
 800854c:	4298      	cmp	r0, r3
 800854e:	da3d      	bge.n	80085cc <_printf_i+0x228>
 8008550:	0018      	movs	r0, r3
 8008552:	e03b      	b.n	80085cc <_printf_i+0x228>
 8008554:	0022      	movs	r2, r4
 8008556:	2301      	movs	r3, #1
 8008558:	3219      	adds	r2, #25
 800855a:	9906      	ldr	r1, [sp, #24]
 800855c:	9805      	ldr	r0, [sp, #20]
 800855e:	9e07      	ldr	r6, [sp, #28]
 8008560:	47b0      	blx	r6
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	d030      	beq.n	80085c8 <_printf_i+0x224>
 8008566:	3501      	adds	r5, #1
 8008568:	68e3      	ldr	r3, [r4, #12]
 800856a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800856c:	1a9b      	subs	r3, r3, r2
 800856e:	429d      	cmp	r5, r3
 8008570:	dbf0      	blt.n	8008554 <_printf_i+0x1b0>
 8008572:	e7e9      	b.n	8008548 <_printf_i+0x1a4>
 8008574:	2d00      	cmp	r5, #0
 8008576:	d0a9      	beq.n	80084cc <_printf_i+0x128>
 8008578:	9e04      	ldr	r6, [sp, #16]
 800857a:	0028      	movs	r0, r5
 800857c:	0039      	movs	r1, r7
 800857e:	f7f7 fe51 	bl	8000224 <__aeabi_uidivmod>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	3e01      	subs	r6, #1
 8008586:	5c5b      	ldrb	r3, [r3, r1]
 8008588:	0028      	movs	r0, r5
 800858a:	7033      	strb	r3, [r6, #0]
 800858c:	0039      	movs	r1, r7
 800858e:	f7f7 fdc3 	bl	8000118 <__udivsi3>
 8008592:	1e05      	subs	r5, r0, #0
 8008594:	d1f1      	bne.n	800857a <_printf_i+0x1d6>
 8008596:	2f08      	cmp	r7, #8
 8008598:	d109      	bne.n	80085ae <_printf_i+0x20a>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	07db      	lsls	r3, r3, #31
 800859e:	d506      	bpl.n	80085ae <_printf_i+0x20a>
 80085a0:	6863      	ldr	r3, [r4, #4]
 80085a2:	6922      	ldr	r2, [r4, #16]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	dc02      	bgt.n	80085ae <_printf_i+0x20a>
 80085a8:	2330      	movs	r3, #48	; 0x30
 80085aa:	3e01      	subs	r6, #1
 80085ac:	7033      	strb	r3, [r6, #0]
 80085ae:	9b04      	ldr	r3, [sp, #16]
 80085b0:	1b9b      	subs	r3, r3, r6
 80085b2:	6123      	str	r3, [r4, #16]
 80085b4:	9b07      	ldr	r3, [sp, #28]
 80085b6:	aa09      	add	r2, sp, #36	; 0x24
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	0021      	movs	r1, r4
 80085bc:	9b06      	ldr	r3, [sp, #24]
 80085be:	9805      	ldr	r0, [sp, #20]
 80085c0:	f7ff fe82 	bl	80082c8 <_printf_common>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d1b3      	bne.n	8008530 <_printf_i+0x18c>
 80085c8:	2001      	movs	r0, #1
 80085ca:	4240      	negs	r0, r0
 80085cc:	b00b      	add	sp, #44	; 0x2c
 80085ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d0:	08008ba2 	.word	0x08008ba2
 80085d4:	08008b91 	.word	0x08008b91

080085d8 <memchr>:
 80085d8:	b2c9      	uxtb	r1, r1
 80085da:	1882      	adds	r2, r0, r2
 80085dc:	4290      	cmp	r0, r2
 80085de:	d101      	bne.n	80085e4 <memchr+0xc>
 80085e0:	2000      	movs	r0, #0
 80085e2:	4770      	bx	lr
 80085e4:	7803      	ldrb	r3, [r0, #0]
 80085e6:	428b      	cmp	r3, r1
 80085e8:	d0fb      	beq.n	80085e2 <memchr+0xa>
 80085ea:	3001      	adds	r0, #1
 80085ec:	e7f6      	b.n	80085dc <memchr+0x4>

080085ee <memmove>:
 80085ee:	b510      	push	{r4, lr}
 80085f0:	4288      	cmp	r0, r1
 80085f2:	d902      	bls.n	80085fa <memmove+0xc>
 80085f4:	188b      	adds	r3, r1, r2
 80085f6:	4298      	cmp	r0, r3
 80085f8:	d308      	bcc.n	800860c <memmove+0x1e>
 80085fa:	2300      	movs	r3, #0
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d007      	beq.n	8008610 <memmove+0x22>
 8008600:	5ccc      	ldrb	r4, [r1, r3]
 8008602:	54c4      	strb	r4, [r0, r3]
 8008604:	3301      	adds	r3, #1
 8008606:	e7f9      	b.n	80085fc <memmove+0xe>
 8008608:	5c8b      	ldrb	r3, [r1, r2]
 800860a:	5483      	strb	r3, [r0, r2]
 800860c:	3a01      	subs	r2, #1
 800860e:	d2fb      	bcs.n	8008608 <memmove+0x1a>
 8008610:	bd10      	pop	{r4, pc}
	...

08008614 <_free_r>:
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	0005      	movs	r5, r0
 8008618:	2900      	cmp	r1, #0
 800861a:	d010      	beq.n	800863e <_free_r+0x2a>
 800861c:	1f0c      	subs	r4, r1, #4
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	da00      	bge.n	8008626 <_free_r+0x12>
 8008624:	18e4      	adds	r4, r4, r3
 8008626:	0028      	movs	r0, r5
 8008628:	f000 f8d4 	bl	80087d4 <__malloc_lock>
 800862c:	4a1d      	ldr	r2, [pc, #116]	; (80086a4 <_free_r+0x90>)
 800862e:	6813      	ldr	r3, [r2, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d105      	bne.n	8008640 <_free_r+0x2c>
 8008634:	6063      	str	r3, [r4, #4]
 8008636:	6014      	str	r4, [r2, #0]
 8008638:	0028      	movs	r0, r5
 800863a:	f000 f8cc 	bl	80087d6 <__malloc_unlock>
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	42a3      	cmp	r3, r4
 8008642:	d909      	bls.n	8008658 <_free_r+0x44>
 8008644:	6821      	ldr	r1, [r4, #0]
 8008646:	1860      	adds	r0, r4, r1
 8008648:	4283      	cmp	r3, r0
 800864a:	d1f3      	bne.n	8008634 <_free_r+0x20>
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	1841      	adds	r1, r0, r1
 8008652:	6021      	str	r1, [r4, #0]
 8008654:	e7ee      	b.n	8008634 <_free_r+0x20>
 8008656:	0013      	movs	r3, r2
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	2a00      	cmp	r2, #0
 800865c:	d001      	beq.n	8008662 <_free_r+0x4e>
 800865e:	42a2      	cmp	r2, r4
 8008660:	d9f9      	bls.n	8008656 <_free_r+0x42>
 8008662:	6819      	ldr	r1, [r3, #0]
 8008664:	1858      	adds	r0, r3, r1
 8008666:	42a0      	cmp	r0, r4
 8008668:	d10b      	bne.n	8008682 <_free_r+0x6e>
 800866a:	6820      	ldr	r0, [r4, #0]
 800866c:	1809      	adds	r1, r1, r0
 800866e:	1858      	adds	r0, r3, r1
 8008670:	6019      	str	r1, [r3, #0]
 8008672:	4282      	cmp	r2, r0
 8008674:	d1e0      	bne.n	8008638 <_free_r+0x24>
 8008676:	6810      	ldr	r0, [r2, #0]
 8008678:	6852      	ldr	r2, [r2, #4]
 800867a:	1841      	adds	r1, r0, r1
 800867c:	6019      	str	r1, [r3, #0]
 800867e:	605a      	str	r2, [r3, #4]
 8008680:	e7da      	b.n	8008638 <_free_r+0x24>
 8008682:	42a0      	cmp	r0, r4
 8008684:	d902      	bls.n	800868c <_free_r+0x78>
 8008686:	230c      	movs	r3, #12
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	e7d5      	b.n	8008638 <_free_r+0x24>
 800868c:	6821      	ldr	r1, [r4, #0]
 800868e:	1860      	adds	r0, r4, r1
 8008690:	4282      	cmp	r2, r0
 8008692:	d103      	bne.n	800869c <_free_r+0x88>
 8008694:	6810      	ldr	r0, [r2, #0]
 8008696:	6852      	ldr	r2, [r2, #4]
 8008698:	1841      	adds	r1, r0, r1
 800869a:	6021      	str	r1, [r4, #0]
 800869c:	6062      	str	r2, [r4, #4]
 800869e:	605c      	str	r4, [r3, #4]
 80086a0:	e7ca      	b.n	8008638 <_free_r+0x24>
 80086a2:	46c0      	nop			; (mov r8, r8)
 80086a4:	200021e4 	.word	0x200021e4

080086a8 <_malloc_r>:
 80086a8:	2303      	movs	r3, #3
 80086aa:	b570      	push	{r4, r5, r6, lr}
 80086ac:	1ccd      	adds	r5, r1, #3
 80086ae:	439d      	bics	r5, r3
 80086b0:	3508      	adds	r5, #8
 80086b2:	0006      	movs	r6, r0
 80086b4:	2d0c      	cmp	r5, #12
 80086b6:	d21e      	bcs.n	80086f6 <_malloc_r+0x4e>
 80086b8:	250c      	movs	r5, #12
 80086ba:	42a9      	cmp	r1, r5
 80086bc:	d81d      	bhi.n	80086fa <_malloc_r+0x52>
 80086be:	0030      	movs	r0, r6
 80086c0:	f000 f888 	bl	80087d4 <__malloc_lock>
 80086c4:	4a25      	ldr	r2, [pc, #148]	; (800875c <_malloc_r+0xb4>)
 80086c6:	6814      	ldr	r4, [r2, #0]
 80086c8:	0021      	movs	r1, r4
 80086ca:	2900      	cmp	r1, #0
 80086cc:	d119      	bne.n	8008702 <_malloc_r+0x5a>
 80086ce:	4c24      	ldr	r4, [pc, #144]	; (8008760 <_malloc_r+0xb8>)
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d103      	bne.n	80086de <_malloc_r+0x36>
 80086d6:	0030      	movs	r0, r6
 80086d8:	f000 f86a 	bl	80087b0 <_sbrk_r>
 80086dc:	6020      	str	r0, [r4, #0]
 80086de:	0029      	movs	r1, r5
 80086e0:	0030      	movs	r0, r6
 80086e2:	f000 f865 	bl	80087b0 <_sbrk_r>
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	d12c      	bne.n	8008744 <_malloc_r+0x9c>
 80086ea:	230c      	movs	r3, #12
 80086ec:	0030      	movs	r0, r6
 80086ee:	6033      	str	r3, [r6, #0]
 80086f0:	f000 f871 	bl	80087d6 <__malloc_unlock>
 80086f4:	e003      	b.n	80086fe <_malloc_r+0x56>
 80086f6:	2d00      	cmp	r5, #0
 80086f8:	dadf      	bge.n	80086ba <_malloc_r+0x12>
 80086fa:	230c      	movs	r3, #12
 80086fc:	6033      	str	r3, [r6, #0]
 80086fe:	2000      	movs	r0, #0
 8008700:	bd70      	pop	{r4, r5, r6, pc}
 8008702:	680b      	ldr	r3, [r1, #0]
 8008704:	1b5b      	subs	r3, r3, r5
 8008706:	d41a      	bmi.n	800873e <_malloc_r+0x96>
 8008708:	2b0b      	cmp	r3, #11
 800870a:	d903      	bls.n	8008714 <_malloc_r+0x6c>
 800870c:	600b      	str	r3, [r1, #0]
 800870e:	18cc      	adds	r4, r1, r3
 8008710:	6025      	str	r5, [r4, #0]
 8008712:	e003      	b.n	800871c <_malloc_r+0x74>
 8008714:	428c      	cmp	r4, r1
 8008716:	d10e      	bne.n	8008736 <_malloc_r+0x8e>
 8008718:	6863      	ldr	r3, [r4, #4]
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	0030      	movs	r0, r6
 800871e:	f000 f85a 	bl	80087d6 <__malloc_unlock>
 8008722:	0020      	movs	r0, r4
 8008724:	2207      	movs	r2, #7
 8008726:	300b      	adds	r0, #11
 8008728:	1d23      	adds	r3, r4, #4
 800872a:	4390      	bics	r0, r2
 800872c:	1ac3      	subs	r3, r0, r3
 800872e:	d0e7      	beq.n	8008700 <_malloc_r+0x58>
 8008730:	425a      	negs	r2, r3
 8008732:	50e2      	str	r2, [r4, r3]
 8008734:	e7e4      	b.n	8008700 <_malloc_r+0x58>
 8008736:	684b      	ldr	r3, [r1, #4]
 8008738:	6063      	str	r3, [r4, #4]
 800873a:	000c      	movs	r4, r1
 800873c:	e7ee      	b.n	800871c <_malloc_r+0x74>
 800873e:	000c      	movs	r4, r1
 8008740:	6849      	ldr	r1, [r1, #4]
 8008742:	e7c2      	b.n	80086ca <_malloc_r+0x22>
 8008744:	2303      	movs	r3, #3
 8008746:	1cc4      	adds	r4, r0, #3
 8008748:	439c      	bics	r4, r3
 800874a:	42a0      	cmp	r0, r4
 800874c:	d0e0      	beq.n	8008710 <_malloc_r+0x68>
 800874e:	1a21      	subs	r1, r4, r0
 8008750:	0030      	movs	r0, r6
 8008752:	f000 f82d 	bl	80087b0 <_sbrk_r>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	d1da      	bne.n	8008710 <_malloc_r+0x68>
 800875a:	e7c6      	b.n	80086ea <_malloc_r+0x42>
 800875c:	200021e4 	.word	0x200021e4
 8008760:	200021e8 	.word	0x200021e8

08008764 <_realloc_r>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	0007      	movs	r7, r0
 8008768:	000d      	movs	r5, r1
 800876a:	0016      	movs	r6, r2
 800876c:	2900      	cmp	r1, #0
 800876e:	d105      	bne.n	800877c <_realloc_r+0x18>
 8008770:	0011      	movs	r1, r2
 8008772:	f7ff ff99 	bl	80086a8 <_malloc_r>
 8008776:	0004      	movs	r4, r0
 8008778:	0020      	movs	r0, r4
 800877a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800877c:	2a00      	cmp	r2, #0
 800877e:	d103      	bne.n	8008788 <_realloc_r+0x24>
 8008780:	f7ff ff48 	bl	8008614 <_free_r>
 8008784:	0034      	movs	r4, r6
 8008786:	e7f7      	b.n	8008778 <_realloc_r+0x14>
 8008788:	f000 f826 	bl	80087d8 <_malloc_usable_size_r>
 800878c:	002c      	movs	r4, r5
 800878e:	4286      	cmp	r6, r0
 8008790:	d9f2      	bls.n	8008778 <_realloc_r+0x14>
 8008792:	0031      	movs	r1, r6
 8008794:	0038      	movs	r0, r7
 8008796:	f7ff ff87 	bl	80086a8 <_malloc_r>
 800879a:	1e04      	subs	r4, r0, #0
 800879c:	d0ec      	beq.n	8008778 <_realloc_r+0x14>
 800879e:	0029      	movs	r1, r5
 80087a0:	0032      	movs	r2, r6
 80087a2:	f7ff fbe3 	bl	8007f6c <memcpy>
 80087a6:	0029      	movs	r1, r5
 80087a8:	0038      	movs	r0, r7
 80087aa:	f7ff ff33 	bl	8008614 <_free_r>
 80087ae:	e7e3      	b.n	8008778 <_realloc_r+0x14>

080087b0 <_sbrk_r>:
 80087b0:	2300      	movs	r3, #0
 80087b2:	b570      	push	{r4, r5, r6, lr}
 80087b4:	4c06      	ldr	r4, [pc, #24]	; (80087d0 <_sbrk_r+0x20>)
 80087b6:	0005      	movs	r5, r0
 80087b8:	0008      	movs	r0, r1
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	f7fd fee0 	bl	8006580 <_sbrk>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d103      	bne.n	80087cc <_sbrk_r+0x1c>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d000      	beq.n	80087cc <_sbrk_r+0x1c>
 80087ca:	602b      	str	r3, [r5, #0]
 80087cc:	bd70      	pop	{r4, r5, r6, pc}
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	20002510 	.word	0x20002510

080087d4 <__malloc_lock>:
 80087d4:	4770      	bx	lr

080087d6 <__malloc_unlock>:
 80087d6:	4770      	bx	lr

080087d8 <_malloc_usable_size_r>:
 80087d8:	1f0b      	subs	r3, r1, #4
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	1f18      	subs	r0, r3, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da01      	bge.n	80087e6 <_malloc_usable_size_r+0xe>
 80087e2:	580b      	ldr	r3, [r1, r0]
 80087e4:	18c0      	adds	r0, r0, r3
 80087e6:	4770      	bx	lr

080087e8 <_init>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ee:	bc08      	pop	{r3}
 80087f0:	469e      	mov	lr, r3
 80087f2:	4770      	bx	lr

080087f4 <_fini>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fa:	bc08      	pop	{r3}
 80087fc:	469e      	mov	lr, r3
 80087fe:	4770      	bx	lr
